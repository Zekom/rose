=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80482c8:push   ebp
    registers:
        ax      = { defs={} expr=v48[32] }
        cx      = { defs={} expr=v49[32] }
        dx      = { defs={} expr=v50[32] }
        bx      = { defs={} expr=v51[32] }
        sp      = { defs={0x080482c8} expr=(add[32] v52[32] -4[32]) }
        bp      = { defs={} expr=v53[32] }
        si      = { defs={} expr=v54[32] }
        di      = { defs={} expr=v55[32] }
        es      = { defs={} expr=v56[16] }
        cs      = { defs={} expr=v57[16] }
        ss      = { defs={} expr=v58[16] }
        ds      = { defs={} expr=v59[16] }
        fs      = { defs={} expr=v60[16] }
        gs      = { defs={} expr=v61[16] }
        cf      = { defs={} expr=v62[1] }
        ?1      = { defs={} expr=v63[1] }
        pf      = { defs={} expr=v64[1] }
        ?3      = { defs={} expr=v65[1] }
        af      = { defs={} expr=v66[1] }
        ?5      = { defs={} expr=v67[1] }
        zf      = { defs={} expr=v68[1] }
        sf      = { defs={} expr=v69[1] }
        tf      = { defs={} expr=v70[1] }
        if      = { defs={} expr=v71[1] }
        df      = { defs={} expr=v72[1] }
        of      = { defs={} expr=v73[1] }
        iopl0   = { defs={} expr=v74[1] }
        iopl1   = { defs={} expr=v75[1] }
        nt      = { defs={} expr=v76[1] }
        ?15     = { defs={} expr=v77[1] }
        rf      = { defs={} expr=v78[1] }
        vm      = { defs={} expr=v79[1] }
        ac      = { defs={} expr=v80[1] }
        vif     = { defs={} expr=v81[1] }
        vip     = { defs={} expr=v82[1] }
        id      = { defs={} expr=v83[1] }
        ?22     = { defs={} expr=v84[1] }
        ?23     = { defs={} expr=v85[1] }
        ?24     = { defs={} expr=v86[1] }
        ?25     = { defs={} expr=v87[1] }
        ?26     = { defs={} expr=v88[1] }
        ?27     = { defs={} expr=v89[1] }
        ?28     = { defs={} expr=v90[1] }
        ?29     = { defs={} expr=v91[1] }
        ?30     = { defs={} expr=v92[1] }
        ?31     = { defs={} expr=v93[1] }
        ip      = { defs={0x080482c8} expr=0x080482c9[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v53[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v53[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v53[32]) }
          flags = { }
        address = { defs={0x080482c8} expr=(add[32] v52[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v53[32]) }
          flags = { }
    init mem:
0x80482c9:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v48[32] }
        cx      = { defs={} expr=v49[32] }
        dx      = { defs={} expr=v50[32] }
        bx      = { defs={} expr=v51[32] }
        sp      = { defs={0x080482c8} expr=(add[32] v52[32] -4[32]) }
        bp      = { defs={0x080482c8,0x080482c9} expr=(add[32] v52[32] -4[32]) }
        si      = { defs={} expr=v54[32] }
        di      = { defs={} expr=v55[32] }
        es      = { defs={} expr=v56[16] }
        cs      = { defs={} expr=v57[16] }
        ss      = { defs={} expr=v58[16] }
        ds      = { defs={} expr=v59[16] }
        fs      = { defs={} expr=v60[16] }
        gs      = { defs={} expr=v61[16] }
        cf      = { defs={} expr=v62[1] }
        ?1      = { defs={} expr=v63[1] }
        pf      = { defs={} expr=v64[1] }
        ?3      = { defs={} expr=v65[1] }
        af      = { defs={} expr=v66[1] }
        ?5      = { defs={} expr=v67[1] }
        zf      = { defs={} expr=v68[1] }
        sf      = { defs={} expr=v69[1] }
        tf      = { defs={} expr=v70[1] }
        if      = { defs={} expr=v71[1] }
        df      = { defs={} expr=v72[1] }
        of      = { defs={} expr=v73[1] }
        iopl0   = { defs={} expr=v74[1] }
        iopl1   = { defs={} expr=v75[1] }
        nt      = { defs={} expr=v76[1] }
        ?15     = { defs={} expr=v77[1] }
        rf      = { defs={} expr=v78[1] }
        vm      = { defs={} expr=v79[1] }
        ac      = { defs={} expr=v80[1] }
        vif     = { defs={} expr=v81[1] }
        vip     = { defs={} expr=v82[1] }
        id      = { defs={} expr=v83[1] }
        ?22     = { defs={} expr=v84[1] }
        ?23     = { defs={} expr=v85[1] }
        ?24     = { defs={} expr=v86[1] }
        ?25     = { defs={} expr=v87[1] }
        ?26     = { defs={} expr=v88[1] }
        ?27     = { defs={} expr=v89[1] }
        ?28     = { defs={} expr=v90[1] }
        ?29     = { defs={} expr=v91[1] }
        ?30     = { defs={} expr=v92[1] }
        ?31     = { defs={} expr=v93[1] }
        ip      = { defs={0x080482c8,0x080482c9} expr=0x080482cb[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v53[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v53[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v53[32]) }
          flags = { }
        address = { defs={0x080482c8} expr=(add[32] v52[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v53[32]) }
          flags = { }
    init mem:
0x80482cb:sub    esp, 0x08
    registers:
        ax      = { defs={} expr=v48[32] }
        cx      = { defs={} expr=v49[32] }
        dx      = { defs={} expr=v50[32] }
        bx      = { defs={} expr=v51[32] }
        sp      = { defs={0x080482c8,0x080482cb} expr=(add[32] (add[32] v52[32] -4[32]) -8[32]) }
        bp      = { defs={0x080482c8,0x080482c9} expr=(add[32] v52[32] -4[32]) }
        si      = { defs={} expr=v54[32] }
        di      = { defs={} expr=v55[32] }
        es      = { defs={} expr=v56[16] }
        cs      = { defs={} expr=v57[16] }
        ss      = { defs={} expr=v58[16] }
        ds      = { defs={} expr=v59[16] }
        fs      = { defs={} expr=v60[16] }
        gs      = { defs={} expr=v61[16] }
        cf      = { defs={0x080482c8,0x080482cb} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v63[1] }
        pf      = { defs={0x080482c8,0x080482cb} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v65[1] }
        af      = { defs={0x080482c8,0x080482cb} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v67[1] }
        zf      = { defs={0x080482c8,0x080482cb} expr=(zerop[1] (add[32] (add[32] v52[32] -4[32]) -8[32])) }
        sf      = { defs={0x080482c8,0x080482cb} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v52[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v70[1] }
        if      = { defs={} expr=v71[1] }
        df      = { defs={} expr=v72[1] }
        of      = { defs={0x080482c8,0x080482cb} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v74[1] }
        iopl1   = { defs={} expr=v75[1] }
        nt      = { defs={} expr=v76[1] }
        ?15     = { defs={} expr=v77[1] }
        rf      = { defs={} expr=v78[1] }
        vm      = { defs={} expr=v79[1] }
        ac      = { defs={} expr=v80[1] }
        vif     = { defs={} expr=v81[1] }
        vip     = { defs={} expr=v82[1] }
        id      = { defs={} expr=v83[1] }
        ?22     = { defs={} expr=v84[1] }
        ?23     = { defs={} expr=v85[1] }
        ?24     = { defs={} expr=v86[1] }
        ?25     = { defs={} expr=v87[1] }
        ?26     = { defs={} expr=v88[1] }
        ?27     = { defs={} expr=v89[1] }
        ?28     = { defs={} expr=v90[1] }
        ?29     = { defs={} expr=v91[1] }
        ?30     = { defs={} expr=v92[1] }
        ?31     = { defs={} expr=v93[1] }
        ip      = { defs={0x080482c8,0x080482c9,0x080482cb} expr=0x080482ce[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v53[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v53[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v53[32]) }
          flags = { }
        address = { defs={0x080482c8} expr=(add[32] v52[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v53[32]) }
          flags = { }
    init mem:
0x80482ce:call   0x08048364<call_gmon_start>
    registers:
        ax      = { defs={} expr=v48[32] }
        cx      = { defs={} expr=v49[32] }
        dx      = { defs={} expr=v50[32] }
        bx      = { defs={} expr=v51[32] }
        sp      = { defs={0x080482c8,0x080482cb,0x080482ce} expr=(add[32] (add[32] (add[32] v52[32] -4[32]) -8[32]) -4[32]) }
        bp      = { defs={0x080482c8,0x080482c9} expr=(add[32] v52[32] -4[32]) }
        si      = { defs={} expr=v54[32] }
        di      = { defs={} expr=v55[32] }
        es      = { defs={} expr=v56[16] }
        cs      = { defs={} expr=v57[16] }
        ss      = { defs={} expr=v58[16] }
        ds      = { defs={} expr=v59[16] }
        fs      = { defs={} expr=v60[16] }
        gs      = { defs={} expr=v61[16] }
        cf      = { defs={0x080482c8,0x080482cb} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v63[1] }
        pf      = { defs={0x080482c8,0x080482cb} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v65[1] }
        af      = { defs={0x080482c8,0x080482cb} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v67[1] }
        zf      = { defs={0x080482c8,0x080482cb} expr=(zerop[1] (add[32] (add[32] v52[32] -4[32]) -8[32])) }
        sf      = { defs={0x080482c8,0x080482cb} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v52[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v70[1] }
        if      = { defs={} expr=v71[1] }
        df      = { defs={} expr=v72[1] }
        of      = { defs={0x080482c8,0x080482cb} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v74[1] }
        iopl1   = { defs={} expr=v75[1] }
        nt      = { defs={} expr=v76[1] }
        ?15     = { defs={} expr=v77[1] }
        rf      = { defs={} expr=v78[1] }
        vm      = { defs={} expr=v79[1] }
        ac      = { defs={} expr=v80[1] }
        vif     = { defs={} expr=v81[1] }
        vip     = { defs={} expr=v82[1] }
        id      = { defs={} expr=v83[1] }
        ?22     = { defs={} expr=v84[1] }
        ?23     = { defs={} expr=v85[1] }
        ?24     = { defs={} expr=v86[1] }
        ?25     = { defs={} expr=v87[1] }
        ?26     = { defs={} expr=v88[1] }
        ?27     = { defs={} expr=v89[1] }
        ?28     = { defs={} expr=v90[1] }
        ?29     = { defs={} expr=v91[1] }
        ?30     = { defs={} expr=v92[1] }
        ?31     = { defs={} expr=v93[1] }
        ip      = { defs={0x080482ce} expr=0x08048364[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v52[32] -4[32]) -8[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v52[32] -4[32]) -8[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v52[32] -4[32]) -8[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-126[8] }
          flags = { }
        address = { defs={0x080482c8,0x080482cb,0x080482ce} expr=(add[32] (add[32] (add[32] v52[32] -4[32]) -8[32]) -4[32]) }
          value = { defs={} expr=-45[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v53[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v53[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v53[32]) }
          flags = { }
        address = { defs={0x080482c8} expr=(add[32] v52[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v53[32]) }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80482d3:call   0x080483d0<frame_dummy>
    registers:
        ax      = { defs={} expr=v215[32] }
        cx      = { defs={} expr=v216[32] }
        dx      = { defs={} expr=v217[32] }
        bx      = { defs={} expr=v218[32] }
        sp      = { defs={0x080482d3} expr=(add[32] v219[32] -4[32]) }
        bp      = { defs={} expr=v220[32] }
        si      = { defs={} expr=v221[32] }
        di      = { defs={} expr=v222[32] }
        es      = { defs={} expr=v223[16] }
        cs      = { defs={} expr=v224[16] }
        ss      = { defs={} expr=v225[16] }
        ds      = { defs={} expr=v226[16] }
        fs      = { defs={} expr=v227[16] }
        gs      = { defs={} expr=v228[16] }
        cf      = { defs={} expr=v229[1] }
        ?1      = { defs={} expr=v230[1] }
        pf      = { defs={} expr=v231[1] }
        ?3      = { defs={} expr=v232[1] }
        af      = { defs={} expr=v233[1] }
        ?5      = { defs={} expr=v234[1] }
        zf      = { defs={} expr=v235[1] }
        sf      = { defs={} expr=v236[1] }
        tf      = { defs={} expr=v237[1] }
        if      = { defs={} expr=v238[1] }
        df      = { defs={} expr=v239[1] }
        of      = { defs={} expr=v240[1] }
        iopl0   = { defs={} expr=v241[1] }
        iopl1   = { defs={} expr=v242[1] }
        nt      = { defs={} expr=v243[1] }
        ?15     = { defs={} expr=v244[1] }
        rf      = { defs={} expr=v245[1] }
        vm      = { defs={} expr=v246[1] }
        ac      = { defs={} expr=v247[1] }
        vif     = { defs={} expr=v248[1] }
        vip     = { defs={} expr=v249[1] }
        id      = { defs={} expr=v250[1] }
        ?22     = { defs={} expr=v251[1] }
        ?23     = { defs={} expr=v252[1] }
        ?24     = { defs={} expr=v253[1] }
        ?25     = { defs={} expr=v254[1] }
        ?26     = { defs={} expr=v255[1] }
        ?27     = { defs={} expr=v256[1] }
        ?28     = { defs={} expr=v257[1] }
        ?29     = { defs={} expr=v258[1] }
        ?30     = { defs={} expr=v259[1] }
        ?31     = { defs={} expr=v260[1] }
        ip      = { defs={0x080482d3} expr=0x080483d0[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v219[32] -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v219[32] -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v219[32] -4[32]) 1[32]) }
          value = { defs={} expr=-126[8] }
          flags = { }
        address = { defs={0x080482d3} expr=(add[32] v219[32] -4[32]) }
          value = { defs={} expr=-40[8] }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80482d8:call   0x08048580<__do_global_ctors_aux>
    registers:
        ax      = { defs={} expr=v318[32] }
        cx      = { defs={} expr=v319[32] }
        dx      = { defs={} expr=v320[32] }
        bx      = { defs={} expr=v321[32] }
        sp      = { defs={0x080482d8} expr=(add[32] v322[32] -4[32]) }
        bp      = { defs={} expr=v323[32] }
        si      = { defs={} expr=v324[32] }
        di      = { defs={} expr=v325[32] }
        es      = { defs={} expr=v326[16] }
        cs      = { defs={} expr=v327[16] }
        ss      = { defs={} expr=v328[16] }
        ds      = { defs={} expr=v329[16] }
        fs      = { defs={} expr=v330[16] }
        gs      = { defs={} expr=v331[16] }
        cf      = { defs={} expr=v332[1] }
        ?1      = { defs={} expr=v333[1] }
        pf      = { defs={} expr=v334[1] }
        ?3      = { defs={} expr=v335[1] }
        af      = { defs={} expr=v336[1] }
        ?5      = { defs={} expr=v337[1] }
        zf      = { defs={} expr=v338[1] }
        sf      = { defs={} expr=v339[1] }
        tf      = { defs={} expr=v340[1] }
        if      = { defs={} expr=v341[1] }
        df      = { defs={} expr=v342[1] }
        of      = { defs={} expr=v343[1] }
        iopl0   = { defs={} expr=v344[1] }
        iopl1   = { defs={} expr=v345[1] }
        nt      = { defs={} expr=v346[1] }
        ?15     = { defs={} expr=v347[1] }
        rf      = { defs={} expr=v348[1] }
        vm      = { defs={} expr=v349[1] }
        ac      = { defs={} expr=v350[1] }
        vif     = { defs={} expr=v351[1] }
        vip     = { defs={} expr=v352[1] }
        id      = { defs={} expr=v353[1] }
        ?22     = { defs={} expr=v354[1] }
        ?23     = { defs={} expr=v355[1] }
        ?24     = { defs={} expr=v356[1] }
        ?25     = { defs={} expr=v357[1] }
        ?26     = { defs={} expr=v358[1] }
        ?27     = { defs={} expr=v359[1] }
        ?28     = { defs={} expr=v360[1] }
        ?29     = { defs={} expr=v361[1] }
        ?30     = { defs={} expr=v362[1] }
        ?31     = { defs={} expr=v363[1] }
        ip      = { defs={0x080482d8} expr=0x08048580[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v322[32] -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v322[32] -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v322[32] -4[32]) 1[32]) }
          value = { defs={} expr=-126[8] }
          flags = { }
        address = { defs={0x080482d8} expr=(add[32] v322[32] -4[32]) }
          value = { defs={} expr=-35[8] }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80482dd:leave  
    registers:
        ax      = { defs={} expr=v421[32] }
        cx      = { defs={} expr=v422[32] }
        dx      = { defs={} expr=v423[32] }
        bx      = { defs={} expr=v424[32] }
        sp      = { defs={0x080482dd} expr=(add[32] v426[32] 4[32]) }
        bp      = { defs={0x080482dd} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v477[8]) (shr0[32] 8[32] (uextend[32] 32[32] v478[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v479[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v480[8]))) }
        si      = { defs={} expr=v427[32] }
        di      = { defs={} expr=v428[32] }
        es      = { defs={} expr=v429[16] }
        cs      = { defs={} expr=v430[16] }
        ss      = { defs={} expr=v431[16] }
        ds      = { defs={} expr=v432[16] }
        fs      = { defs={} expr=v433[16] }
        gs      = { defs={} expr=v434[16] }
        cf      = { defs={} expr=v435[1] }
        ?1      = { defs={} expr=v436[1] }
        pf      = { defs={} expr=v437[1] }
        ?3      = { defs={} expr=v438[1] }
        af      = { defs={} expr=v439[1] }
        ?5      = { defs={} expr=v440[1] }
        zf      = { defs={} expr=v441[1] }
        sf      = { defs={} expr=v442[1] }
        tf      = { defs={} expr=v443[1] }
        if      = { defs={} expr=v444[1] }
        df      = { defs={} expr=v445[1] }
        of      = { defs={} expr=v446[1] }
        iopl0   = { defs={} expr=v447[1] }
        iopl1   = { defs={} expr=v448[1] }
        nt      = { defs={} expr=v449[1] }
        ?15     = { defs={} expr=v450[1] }
        rf      = { defs={} expr=v451[1] }
        vm      = { defs={} expr=v452[1] }
        ac      = { defs={} expr=v453[1] }
        vif     = { defs={} expr=v454[1] }
        vip     = { defs={} expr=v455[1] }
        id      = { defs={} expr=v456[1] }
        ?22     = { defs={} expr=v457[1] }
        ?23     = { defs={} expr=v458[1] }
        ?24     = { defs={} expr=v459[1] }
        ?25     = { defs={} expr=v460[1] }
        ?26     = { defs={} expr=v461[1] }
        ?27     = { defs={} expr=v462[1] }
        ?28     = { defs={} expr=v463[1] }
        ?29     = { defs={} expr=v464[1] }
        ?30     = { defs={} expr=v465[1] }
        ?31     = { defs={} expr=v466[1] }
        ip      = { defs={0x080482dd} expr=0x080482de[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v426[32] 3[32]) }
          value = { defs={} expr=v480[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v426[32] 2[32]) }
          value = { defs={} expr=v479[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v426[32] 1[32]) }
          value = { defs={} expr=v478[8] }
          flags = { rdonly }
        address = { defs={0x080482dd} expr=v426[32] }
          value = { defs={} expr=v477[8] }
          flags = { rdonly }
0x80482de:ret    
    registers:
        ax      = { defs={} expr=v421[32] }
        cx      = { defs={} expr=v422[32] }
        dx      = { defs={} expr=v423[32] }
        bx      = { defs={} expr=v424[32] }
        sp      = { defs={0x080482dd,0x080482de} expr=(add[32] (add[32] v426[32] 4[32]) 4[32]) }
        bp      = { defs={0x080482dd} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v477[8]) (shr0[32] 8[32] (uextend[32] 32[32] v478[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v479[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v480[8]))) }
        si      = { defs={} expr=v427[32] }
        di      = { defs={} expr=v428[32] }
        es      = { defs={} expr=v429[16] }
        cs      = { defs={} expr=v430[16] }
        ss      = { defs={} expr=v431[16] }
        ds      = { defs={} expr=v432[16] }
        fs      = { defs={} expr=v433[16] }
        gs      = { defs={} expr=v434[16] }
        cf      = { defs={} expr=v435[1] }
        ?1      = { defs={} expr=v436[1] }
        pf      = { defs={} expr=v437[1] }
        ?3      = { defs={} expr=v438[1] }
        af      = { defs={} expr=v439[1] }
        ?5      = { defs={} expr=v440[1] }
        zf      = { defs={} expr=v441[1] }
        sf      = { defs={} expr=v442[1] }
        tf      = { defs={} expr=v443[1] }
        if      = { defs={} expr=v444[1] }
        df      = { defs={} expr=v445[1] }
        of      = { defs={} expr=v446[1] }
        iopl0   = { defs={} expr=v447[1] }
        iopl1   = { defs={} expr=v448[1] }
        nt      = { defs={} expr=v449[1] }
        ?15     = { defs={} expr=v450[1] }
        rf      = { defs={} expr=v451[1] }
        vm      = { defs={} expr=v452[1] }
        ac      = { defs={} expr=v453[1] }
        vif     = { defs={} expr=v454[1] }
        vip     = { defs={} expr=v455[1] }
        id      = { defs={} expr=v456[1] }
        ?22     = { defs={} expr=v457[1] }
        ?23     = { defs={} expr=v458[1] }
        ?24     = { defs={} expr=v459[1] }
        ?25     = { defs={} expr=v460[1] }
        ?26     = { defs={} expr=v461[1] }
        ?27     = { defs={} expr=v462[1] }
        ?28     = { defs={} expr=v463[1] }
        ?29     = { defs={} expr=v464[1] }
        ?30     = { defs={} expr=v465[1] }
        ?31     = { defs={} expr=v466[1] }
        ip      = { defs={0x080482de} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v495[8]) (shr0[32] 8[32] (uextend[32] 32[32] v496[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v497[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v498[8]))) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v426[32] 4[32]) 3[32]) }
          value = { defs={} expr=v498[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v426[32] 4[32]) 2[32]) }
          value = { defs={} expr=v497[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v426[32] 4[32]) 1[32]) }
          value = { defs={} expr=v496[8] }
          flags = { rdonly }
        address = { defs={0x080482dd,0x080482de} expr=(add[32] v426[32] 4[32]) }
          value = { defs={} expr=v495[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v426[32] 3[32]) }
          value = { defs={} expr=v480[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v426[32] 2[32]) }
          value = { defs={} expr=v479[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v426[32] 1[32]) }
          value = { defs={} expr=v478[8] }
          flags = { rdonly }
        address = { defs={0x080482dd} expr=v426[32] }
          value = { defs={} expr=v477[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80482f0:jmp    DWORD PTR ds:[0x080496d4<.got.plt+0x0c>]
    registers:
        ax      = { defs={} expr=v553[32] }
        cx      = { defs={} expr=v554[32] }
        dx      = { defs={} expr=v555[32] }
        bx      = { defs={} expr=v556[32] }
        sp      = { defs={} expr=v557[32] }
        bp      = { defs={} expr=v558[32] }
        si      = { defs={} expr=v559[32] }
        di      = { defs={} expr=v560[32] }
        es      = { defs={} expr=v561[16] }
        cs      = { defs={} expr=v562[16] }
        ss      = { defs={} expr=v563[16] }
        ds      = { defs={} expr=v564[16] }
        fs      = { defs={} expr=v565[16] }
        gs      = { defs={} expr=v566[16] }
        cf      = { defs={} expr=v567[1] }
        ?1      = { defs={} expr=v568[1] }
        pf      = { defs={} expr=v569[1] }
        ?3      = { defs={} expr=v570[1] }
        af      = { defs={} expr=v571[1] }
        ?5      = { defs={} expr=v572[1] }
        zf      = { defs={} expr=v573[1] }
        sf      = { defs={} expr=v574[1] }
        tf      = { defs={} expr=v575[1] }
        if      = { defs={} expr=v576[1] }
        df      = { defs={} expr=v577[1] }
        of      = { defs={} expr=v578[1] }
        iopl0   = { defs={} expr=v579[1] }
        iopl1   = { defs={} expr=v580[1] }
        nt      = { defs={} expr=v581[1] }
        ?15     = { defs={} expr=v582[1] }
        rf      = { defs={} expr=v583[1] }
        vm      = { defs={} expr=v584[1] }
        ac      = { defs={} expr=v585[1] }
        vif     = { defs={} expr=v586[1] }
        vip     = { defs={} expr=v587[1] }
        id      = { defs={} expr=v588[1] }
        ?22     = { defs={} expr=v589[1] }
        ?23     = { defs={} expr=v590[1] }
        ?24     = { defs={} expr=v591[1] }
        ?25     = { defs={} expr=v592[1] }
        ?26     = { defs={} expr=v593[1] }
        ?27     = { defs={} expr=v594[1] }
        ?28     = { defs={} expr=v595[1] }
        ?29     = { defs={} expr=v596[1] }
        ?30     = { defs={} expr=v597[1] }
        ?31     = { defs={} expr=v598[1] }
        ip      = { defs={0x080482f0} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v605[8]) (shr0[32] 8[32] (uextend[32] 32[32] v606[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v607[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v608[8]))) }
    memory:
    init mem:
        address = { defs={} expr=0x080496d7[32] }
          value = { defs={} expr=v608[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496d6[32] }
          value = { defs={} expr=v607[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496d5[32] }
          value = { defs={} expr=v606[8] }
          flags = { rdonly }
        address = { defs={0x080482f0} expr=0x080496d4[32] }
          value = { defs={} expr=v605[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048300:jmp    DWORD PTR ds:[0x080496d8<.got.plt+0x10>]
    registers:
        ax      = { defs={} expr=v662[32] }
        cx      = { defs={} expr=v663[32] }
        dx      = { defs={} expr=v664[32] }
        bx      = { defs={} expr=v665[32] }
        sp      = { defs={} expr=v666[32] }
        bp      = { defs={} expr=v667[32] }
        si      = { defs={} expr=v668[32] }
        di      = { defs={} expr=v669[32] }
        es      = { defs={} expr=v670[16] }
        cs      = { defs={} expr=v671[16] }
        ss      = { defs={} expr=v672[16] }
        ds      = { defs={} expr=v673[16] }
        fs      = { defs={} expr=v674[16] }
        gs      = { defs={} expr=v675[16] }
        cf      = { defs={} expr=v676[1] }
        ?1      = { defs={} expr=v677[1] }
        pf      = { defs={} expr=v678[1] }
        ?3      = { defs={} expr=v679[1] }
        af      = { defs={} expr=v680[1] }
        ?5      = { defs={} expr=v681[1] }
        zf      = { defs={} expr=v682[1] }
        sf      = { defs={} expr=v683[1] }
        tf      = { defs={} expr=v684[1] }
        if      = { defs={} expr=v685[1] }
        df      = { defs={} expr=v686[1] }
        of      = { defs={} expr=v687[1] }
        iopl0   = { defs={} expr=v688[1] }
        iopl1   = { defs={} expr=v689[1] }
        nt      = { defs={} expr=v690[1] }
        ?15     = { defs={} expr=v691[1] }
        rf      = { defs={} expr=v692[1] }
        vm      = { defs={} expr=v693[1] }
        ac      = { defs={} expr=v694[1] }
        vif     = { defs={} expr=v695[1] }
        vip     = { defs={} expr=v696[1] }
        id      = { defs={} expr=v697[1] }
        ?22     = { defs={} expr=v698[1] }
        ?23     = { defs={} expr=v699[1] }
        ?24     = { defs={} expr=v700[1] }
        ?25     = { defs={} expr=v701[1] }
        ?26     = { defs={} expr=v702[1] }
        ?27     = { defs={} expr=v703[1] }
        ?28     = { defs={} expr=v704[1] }
        ?29     = { defs={} expr=v705[1] }
        ?30     = { defs={} expr=v706[1] }
        ?31     = { defs={} expr=v707[1] }
        ip      = { defs={0x08048300} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v714[8]) (shr0[32] 8[32] (uextend[32] 32[32] v715[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v716[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v717[8]))) }
    memory:
    init mem:
        address = { defs={} expr=0x080496db[32] }
          value = { defs={} expr=v717[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496da[32] }
          value = { defs={} expr=v716[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496d9[32] }
          value = { defs={} expr=v715[8] }
          flags = { rdonly }
        address = { defs={0x08048300} expr=0x080496d8[32] }
          value = { defs={} expr=v714[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048310:jmp    DWORD PTR ds:[0x080496dc<.got.plt+0x14>]
    registers:
        ax      = { defs={} expr=v771[32] }
        cx      = { defs={} expr=v772[32] }
        dx      = { defs={} expr=v773[32] }
        bx      = { defs={} expr=v774[32] }
        sp      = { defs={} expr=v775[32] }
        bp      = { defs={} expr=v776[32] }
        si      = { defs={} expr=v777[32] }
        di      = { defs={} expr=v778[32] }
        es      = { defs={} expr=v779[16] }
        cs      = { defs={} expr=v780[16] }
        ss      = { defs={} expr=v781[16] }
        ds      = { defs={} expr=v782[16] }
        fs      = { defs={} expr=v783[16] }
        gs      = { defs={} expr=v784[16] }
        cf      = { defs={} expr=v785[1] }
        ?1      = { defs={} expr=v786[1] }
        pf      = { defs={} expr=v787[1] }
        ?3      = { defs={} expr=v788[1] }
        af      = { defs={} expr=v789[1] }
        ?5      = { defs={} expr=v790[1] }
        zf      = { defs={} expr=v791[1] }
        sf      = { defs={} expr=v792[1] }
        tf      = { defs={} expr=v793[1] }
        if      = { defs={} expr=v794[1] }
        df      = { defs={} expr=v795[1] }
        of      = { defs={} expr=v796[1] }
        iopl0   = { defs={} expr=v797[1] }
        iopl1   = { defs={} expr=v798[1] }
        nt      = { defs={} expr=v799[1] }
        ?15     = { defs={} expr=v800[1] }
        rf      = { defs={} expr=v801[1] }
        vm      = { defs={} expr=v802[1] }
        ac      = { defs={} expr=v803[1] }
        vif     = { defs={} expr=v804[1] }
        vip     = { defs={} expr=v805[1] }
        id      = { defs={} expr=v806[1] }
        ?22     = { defs={} expr=v807[1] }
        ?23     = { defs={} expr=v808[1] }
        ?24     = { defs={} expr=v809[1] }
        ?25     = { defs={} expr=v810[1] }
        ?26     = { defs={} expr=v811[1] }
        ?27     = { defs={} expr=v812[1] }
        ?28     = { defs={} expr=v813[1] }
        ?29     = { defs={} expr=v814[1] }
        ?30     = { defs={} expr=v815[1] }
        ?31     = { defs={} expr=v816[1] }
        ip      = { defs={0x08048310} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v823[8]) (shr0[32] 8[32] (uextend[32] 32[32] v824[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v825[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v826[8]))) }
    memory:
    init mem:
        address = { defs={} expr=0x080496df[32] }
          value = { defs={} expr=v826[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496de[32] }
          value = { defs={} expr=v825[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496dd[32] }
          value = { defs={} expr=v824[8] }
          flags = { rdonly }
        address = { defs={0x08048310} expr=0x080496dc[32] }
          value = { defs={} expr=v823[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048320:jmp    DWORD PTR ds:[0x080496e0<.got.plt+0x18>]
    registers:
        ax      = { defs={} expr=v880[32] }
        cx      = { defs={} expr=v881[32] }
        dx      = { defs={} expr=v882[32] }
        bx      = { defs={} expr=v883[32] }
        sp      = { defs={} expr=v884[32] }
        bp      = { defs={} expr=v885[32] }
        si      = { defs={} expr=v886[32] }
        di      = { defs={} expr=v887[32] }
        es      = { defs={} expr=v888[16] }
        cs      = { defs={} expr=v889[16] }
        ss      = { defs={} expr=v890[16] }
        ds      = { defs={} expr=v891[16] }
        fs      = { defs={} expr=v892[16] }
        gs      = { defs={} expr=v893[16] }
        cf      = { defs={} expr=v894[1] }
        ?1      = { defs={} expr=v895[1] }
        pf      = { defs={} expr=v896[1] }
        ?3      = { defs={} expr=v897[1] }
        af      = { defs={} expr=v898[1] }
        ?5      = { defs={} expr=v899[1] }
        zf      = { defs={} expr=v900[1] }
        sf      = { defs={} expr=v901[1] }
        tf      = { defs={} expr=v902[1] }
        if      = { defs={} expr=v903[1] }
        df      = { defs={} expr=v904[1] }
        of      = { defs={} expr=v905[1] }
        iopl0   = { defs={} expr=v906[1] }
        iopl1   = { defs={} expr=v907[1] }
        nt      = { defs={} expr=v908[1] }
        ?15     = { defs={} expr=v909[1] }
        rf      = { defs={} expr=v910[1] }
        vm      = { defs={} expr=v911[1] }
        ac      = { defs={} expr=v912[1] }
        vif     = { defs={} expr=v913[1] }
        vip     = { defs={} expr=v914[1] }
        id      = { defs={} expr=v915[1] }
        ?22     = { defs={} expr=v916[1] }
        ?23     = { defs={} expr=v917[1] }
        ?24     = { defs={} expr=v918[1] }
        ?25     = { defs={} expr=v919[1] }
        ?26     = { defs={} expr=v920[1] }
        ?27     = { defs={} expr=v921[1] }
        ?28     = { defs={} expr=v922[1] }
        ?29     = { defs={} expr=v923[1] }
        ?30     = { defs={} expr=v924[1] }
        ?31     = { defs={} expr=v925[1] }
        ip      = { defs={0x08048320} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v935[8]))) }
    memory:
    init mem:
        address = { defs={} expr=0x080496e3[32] }
          value = { defs={} expr=v935[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496e2[32] }
          value = { defs={} expr=v934[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496e1[32] }
          value = { defs={} expr=v933[8] }
          flags = { rdonly }
        address = { defs={0x08048320} expr=0x080496e0[32] }
          value = { defs={} expr=v932[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048330:jmp    DWORD PTR ds:[0x080496e4<.got.plt+0x1c>]
    registers:
        ax      = { defs={} expr=v989[32] }
        cx      = { defs={} expr=v990[32] }
        dx      = { defs={} expr=v991[32] }
        bx      = { defs={} expr=v992[32] }
        sp      = { defs={} expr=v993[32] }
        bp      = { defs={} expr=v994[32] }
        si      = { defs={} expr=v995[32] }
        di      = { defs={} expr=v996[32] }
        es      = { defs={} expr=v997[16] }
        cs      = { defs={} expr=v998[16] }
        ss      = { defs={} expr=v999[16] }
        ds      = { defs={} expr=v1000[16] }
        fs      = { defs={} expr=v1001[16] }
        gs      = { defs={} expr=v1002[16] }
        cf      = { defs={} expr=v1003[1] }
        ?1      = { defs={} expr=v1004[1] }
        pf      = { defs={} expr=v1005[1] }
        ?3      = { defs={} expr=v1006[1] }
        af      = { defs={} expr=v1007[1] }
        ?5      = { defs={} expr=v1008[1] }
        zf      = { defs={} expr=v1009[1] }
        sf      = { defs={} expr=v1010[1] }
        tf      = { defs={} expr=v1011[1] }
        if      = { defs={} expr=v1012[1] }
        df      = { defs={} expr=v1013[1] }
        of      = { defs={} expr=v1014[1] }
        iopl0   = { defs={} expr=v1015[1] }
        iopl1   = { defs={} expr=v1016[1] }
        nt      = { defs={} expr=v1017[1] }
        ?15     = { defs={} expr=v1018[1] }
        rf      = { defs={} expr=v1019[1] }
        vm      = { defs={} expr=v1020[1] }
        ac      = { defs={} expr=v1021[1] }
        vif     = { defs={} expr=v1022[1] }
        vip     = { defs={} expr=v1023[1] }
        id      = { defs={} expr=v1024[1] }
        ?22     = { defs={} expr=v1025[1] }
        ?23     = { defs={} expr=v1026[1] }
        ?24     = { defs={} expr=v1027[1] }
        ?25     = { defs={} expr=v1028[1] }
        ?26     = { defs={} expr=v1029[1] }
        ?27     = { defs={} expr=v1030[1] }
        ?28     = { defs={} expr=v1031[1] }
        ?29     = { defs={} expr=v1032[1] }
        ?30     = { defs={} expr=v1033[1] }
        ?31     = { defs={} expr=v1034[1] }
        ip      = { defs={0x08048330} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1041[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1042[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1043[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1044[8]))) }
    memory:
    init mem:
        address = { defs={} expr=0x080496e7[32] }
          value = { defs={} expr=v1044[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496e6[32] }
          value = { defs={} expr=v1043[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496e5[32] }
          value = { defs={} expr=v1042[8] }
          flags = { rdonly }
        address = { defs={0x08048330} expr=0x080496e4[32] }
          value = { defs={} expr=v1041[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048340:xor    ebp, ebp
    registers:
        ax      = { defs={} expr=v1098[32] }
        cx      = { defs={} expr=v1099[32] }
        dx      = { defs={} expr=v1100[32] }
        bx      = { defs={} expr=v1101[32] }
        sp      = { defs={} expr=v1102[32] }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={} expr=v1104[32] }
        di      = { defs={} expr=v1105[32] }
        es      = { defs={} expr=v1106[16] }
        cs      = { defs={} expr=v1107[16] }
        ss      = { defs={} expr=v1108[16] }
        ds      = { defs={} expr=v1109[16] }
        fs      = { defs={} expr=v1110[16] }
        gs      = { defs={} expr=v1111[16] }
        cf      = { defs={0x08048340} expr=0[1] }
        ?1      = { defs={} expr=v1113[1] }
        pf      = { defs={0x08048340} expr=1[1] }
        ?3      = { defs={} expr=v1115[1] }
        af      = { defs={0x08048340} expr=v1177[1] }
        ?5      = { defs={} expr=v1117[1] }
        zf      = { defs={0x08048340} expr=1[1] }
        sf      = { defs={0x08048340} expr=0[1] }
        tf      = { defs={} expr=v1120[1] }
        if      = { defs={} expr=v1121[1] }
        df      = { defs={} expr=v1122[1] }
        of      = { defs={0x08048340} expr=0[1] }
        iopl0   = { defs={} expr=v1124[1] }
        iopl1   = { defs={} expr=v1125[1] }
        nt      = { defs={} expr=v1126[1] }
        ?15     = { defs={} expr=v1127[1] }
        rf      = { defs={} expr=v1128[1] }
        vm      = { defs={} expr=v1129[1] }
        ac      = { defs={} expr=v1130[1] }
        vif     = { defs={} expr=v1131[1] }
        vip     = { defs={} expr=v1132[1] }
        id      = { defs={} expr=v1133[1] }
        ?22     = { defs={} expr=v1134[1] }
        ?23     = { defs={} expr=v1135[1] }
        ?24     = { defs={} expr=v1136[1] }
        ?25     = { defs={} expr=v1137[1] }
        ?26     = { defs={} expr=v1138[1] }
        ?27     = { defs={} expr=v1139[1] }
        ?28     = { defs={} expr=v1140[1] }
        ?29     = { defs={} expr=v1141[1] }
        ?30     = { defs={} expr=v1142[1] }
        ?31     = { defs={} expr=v1143[1] }
        ip      = { defs={0x08048340} expr=0x08048342[32] }
    memory:
    init mem:
0x8048342:pop    esi
    registers:
        ax      = { defs={} expr=v1098[32] }
        cx      = { defs={} expr=v1099[32] }
        dx      = { defs={} expr=v1100[32] }
        bx      = { defs={} expr=v1101[32] }
        sp      = { defs={0x08048342} expr=(add[32] v1102[32] 4[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1188[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1189[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1190[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1191[8]))) }
        di      = { defs={} expr=v1105[32] }
        es      = { defs={} expr=v1106[16] }
        cs      = { defs={} expr=v1107[16] }
        ss      = { defs={} expr=v1108[16] }
        ds      = { defs={} expr=v1109[16] }
        fs      = { defs={} expr=v1110[16] }
        gs      = { defs={} expr=v1111[16] }
        cf      = { defs={0x08048340} expr=0[1] }
        ?1      = { defs={} expr=v1113[1] }
        pf      = { defs={0x08048340} expr=1[1] }
        ?3      = { defs={} expr=v1115[1] }
        af      = { defs={0x08048340} expr=v1177[1] }
        ?5      = { defs={} expr=v1117[1] }
        zf      = { defs={0x08048340} expr=1[1] }
        sf      = { defs={0x08048340} expr=0[1] }
        tf      = { defs={} expr=v1120[1] }
        if      = { defs={} expr=v1121[1] }
        df      = { defs={} expr=v1122[1] }
        of      = { defs={0x08048340} expr=0[1] }
        iopl0   = { defs={} expr=v1124[1] }
        iopl1   = { defs={} expr=v1125[1] }
        nt      = { defs={} expr=v1126[1] }
        ?15     = { defs={} expr=v1127[1] }
        rf      = { defs={} expr=v1128[1] }
        vm      = { defs={} expr=v1129[1] }
        ac      = { defs={} expr=v1130[1] }
        vif     = { defs={} expr=v1131[1] }
        vip     = { defs={} expr=v1132[1] }
        id      = { defs={} expr=v1133[1] }
        ?22     = { defs={} expr=v1134[1] }
        ?23     = { defs={} expr=v1135[1] }
        ?24     = { defs={} expr=v1136[1] }
        ?25     = { defs={} expr=v1137[1] }
        ?26     = { defs={} expr=v1138[1] }
        ?27     = { defs={} expr=v1139[1] }
        ?28     = { defs={} expr=v1140[1] }
        ?29     = { defs={} expr=v1141[1] }
        ?30     = { defs={} expr=v1142[1] }
        ?31     = { defs={} expr=v1143[1] }
        ip      = { defs={0x08048340,0x08048342} expr=0x08048343[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v1102[32] 3[32]) }
          value = { defs={} expr=v1191[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1102[32] 2[32]) }
          value = { defs={} expr=v1190[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1102[32] 1[32]) }
          value = { defs={} expr=v1189[8] }
          flags = { rdonly }
        address = { defs={0x08048342} expr=v1102[32] }
          value = { defs={} expr=v1188[8] }
          flags = { rdonly }
0x8048343:mov    ecx, esp
    registers:
        ax      = { defs={} expr=v1098[32] }
        cx      = { defs={0x08048342,0x08048343} expr=(add[32] v1102[32] 4[32]) }
        dx      = { defs={} expr=v1100[32] }
        bx      = { defs={} expr=v1101[32] }
        sp      = { defs={0x08048342} expr=(add[32] v1102[32] 4[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1188[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1189[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1190[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1191[8]))) }
        di      = { defs={} expr=v1105[32] }
        es      = { defs={} expr=v1106[16] }
        cs      = { defs={} expr=v1107[16] }
        ss      = { defs={} expr=v1108[16] }
        ds      = { defs={} expr=v1109[16] }
        fs      = { defs={} expr=v1110[16] }
        gs      = { defs={} expr=v1111[16] }
        cf      = { defs={0x08048340} expr=0[1] }
        ?1      = { defs={} expr=v1113[1] }
        pf      = { defs={0x08048340} expr=1[1] }
        ?3      = { defs={} expr=v1115[1] }
        af      = { defs={0x08048340} expr=v1177[1] }
        ?5      = { defs={} expr=v1117[1] }
        zf      = { defs={0x08048340} expr=1[1] }
        sf      = { defs={0x08048340} expr=0[1] }
        tf      = { defs={} expr=v1120[1] }
        if      = { defs={} expr=v1121[1] }
        df      = { defs={} expr=v1122[1] }
        of      = { defs={0x08048340} expr=0[1] }
        iopl0   = { defs={} expr=v1124[1] }
        iopl1   = { defs={} expr=v1125[1] }
        nt      = { defs={} expr=v1126[1] }
        ?15     = { defs={} expr=v1127[1] }
        rf      = { defs={} expr=v1128[1] }
        vm      = { defs={} expr=v1129[1] }
        ac      = { defs={} expr=v1130[1] }
        vif     = { defs={} expr=v1131[1] }
        vip     = { defs={} expr=v1132[1] }
        id      = { defs={} expr=v1133[1] }
        ?22     = { defs={} expr=v1134[1] }
        ?23     = { defs={} expr=v1135[1] }
        ?24     = { defs={} expr=v1136[1] }
        ?25     = { defs={} expr=v1137[1] }
        ?26     = { defs={} expr=v1138[1] }
        ?27     = { defs={} expr=v1139[1] }
        ?28     = { defs={} expr=v1140[1] }
        ?29     = { defs={} expr=v1141[1] }
        ?30     = { defs={} expr=v1142[1] }
        ?31     = { defs={} expr=v1143[1] }
        ip      = { defs={0x08048340,0x08048342,0x08048343} expr=0x08048345[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v1102[32] 3[32]) }
          value = { defs={} expr=v1191[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1102[32] 2[32]) }
          value = { defs={} expr=v1190[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1102[32] 1[32]) }
          value = { defs={} expr=v1189[8] }
          flags = { rdonly }
        address = { defs={0x08048342} expr=v1102[32] }
          value = { defs={} expr=v1188[8] }
          flags = { rdonly }
0x8048345:and    esp, 0xf0<-0x10>
    registers:
        ax      = { defs={} expr=v1098[32] }
        cx      = { defs={0x08048342,0x08048343} expr=(add[32] v1102[32] 4[32]) }
        dx      = { defs={} expr=v1100[32] }
        bx      = { defs={} expr=v1101[32] }
        sp      = { defs={0x08048342,0x08048345} expr=(bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1188[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1189[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1190[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1191[8]))) }
        di      = { defs={} expr=v1105[32] }
        es      = { defs={} expr=v1106[16] }
        cs      = { defs={} expr=v1107[16] }
        ss      = { defs={} expr=v1108[16] }
        ds      = { defs={} expr=v1109[16] }
        fs      = { defs={} expr=v1110[16] }
        gs      = { defs={} expr=v1111[16] }
        cf      = { defs={0x08048345} expr=0[1] }
        ?1      = { defs={} expr=v1113[1] }
        pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] 0[1] (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v1115[1] }
        af      = { defs={0x08048345} expr=v1233[1] }
        ?5      = { defs={} expr=v1117[1] }
        zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])) }
        sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])) }
        tf      = { defs={} expr=v1120[1] }
        if      = { defs={} expr=v1121[1] }
        df      = { defs={} expr=v1122[1] }
        of      = { defs={0x08048345} expr=0[1] }
        iopl0   = { defs={} expr=v1124[1] }
        iopl1   = { defs={} expr=v1125[1] }
        nt      = { defs={} expr=v1126[1] }
        ?15     = { defs={} expr=v1127[1] }
        rf      = { defs={} expr=v1128[1] }
        vm      = { defs={} expr=v1129[1] }
        ac      = { defs={} expr=v1130[1] }
        vif     = { defs={} expr=v1131[1] }
        vip     = { defs={} expr=v1132[1] }
        id      = { defs={} expr=v1133[1] }
        ?22     = { defs={} expr=v1134[1] }
        ?23     = { defs={} expr=v1135[1] }
        ?24     = { defs={} expr=v1136[1] }
        ?25     = { defs={} expr=v1137[1] }
        ?26     = { defs={} expr=v1138[1] }
        ?27     = { defs={} expr=v1139[1] }
        ?28     = { defs={} expr=v1140[1] }
        ?29     = { defs={} expr=v1141[1] }
        ?30     = { defs={} expr=v1142[1] }
        ?31     = { defs={} expr=v1143[1] }
        ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345} expr=0x08048348[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v1102[32] 3[32]) }
          value = { defs={} expr=v1191[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1102[32] 2[32]) }
          value = { defs={} expr=v1190[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1102[32] 1[32]) }
          value = { defs={} expr=v1189[8] }
          flags = { rdonly }
        address = { defs={0x08048342} expr=v1102[32] }
          value = { defs={} expr=v1188[8] }
          flags = { rdonly }
0x8048348:push   eax
    registers:
        ax      = { defs={} expr=v1098[32] }
        cx      = { defs={0x08048342,0x08048343} expr=(add[32] v1102[32] 4[32]) }
        dx      = { defs={} expr=v1100[32] }
        bx      = { defs={} expr=v1101[32] }
        sp      = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1188[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1189[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1190[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1191[8]))) }
        di      = { defs={} expr=v1105[32] }
        es      = { defs={} expr=v1106[16] }
        cs      = { defs={} expr=v1107[16] }
        ss      = { defs={} expr=v1108[16] }
        ds      = { defs={} expr=v1109[16] }
        fs      = { defs={} expr=v1110[16] }
        gs      = { defs={} expr=v1111[16] }
        cf      = { defs={0x08048345} expr=0[1] }
        ?1      = { defs={} expr=v1113[1] }
        pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] 0[1] (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v1115[1] }
        af      = { defs={0x08048345} expr=v1233[1] }
        ?5      = { defs={} expr=v1117[1] }
        zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])) }
        sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])) }
        tf      = { defs={} expr=v1120[1] }
        if      = { defs={} expr=v1121[1] }
        df      = { defs={} expr=v1122[1] }
        of      = { defs={0x08048345} expr=0[1] }
        iopl0   = { defs={} expr=v1124[1] }
        iopl1   = { defs={} expr=v1125[1] }
        nt      = { defs={} expr=v1126[1] }
        ?15     = { defs={} expr=v1127[1] }
        rf      = { defs={} expr=v1128[1] }
        vm      = { defs={} expr=v1129[1] }
        ac      = { defs={} expr=v1130[1] }
        vif     = { defs={} expr=v1131[1] }
        vip     = { defs={} expr=v1132[1] }
        id      = { defs={} expr=v1133[1] }
        ?22     = { defs={} expr=v1134[1] }
        ?23     = { defs={} expr=v1135[1] }
        ?24     = { defs={} expr=v1136[1] }
        ?25     = { defs={} expr=v1137[1] }
        ?26     = { defs={} expr=v1138[1] }
        ?27     = { defs={} expr=v1139[1] }
        ?28     = { defs={} expr=v1140[1] }
        ?29     = { defs={} expr=v1141[1] }
        ?30     = { defs={} expr=v1142[1] }
        ?31     = { defs={} expr=v1143[1] }
        ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348} expr=0x08048349[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1098[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1098[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1098[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1098[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v1102[32] 3[32]) }
          value = { defs={} expr=v1191[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1102[32] 2[32]) }
          value = { defs={} expr=v1190[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1102[32] 1[32]) }
          value = { defs={} expr=v1189[8] }
          flags = { rdonly }
        address = { defs={0x08048342} expr=v1102[32] }
          value = { defs={} expr=v1188[8] }
          flags = { rdonly }
0x8048349:push   esp
    registers:
        ax      = { defs={} expr=v1098[32] }
        cx      = { defs={0x08048342,0x08048343} expr=(add[32] v1102[32] 4[32]) }
        dx      = { defs={} expr=v1100[32] }
        bx      = { defs={} expr=v1101[32] }
        sp      = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1188[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1189[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1190[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1191[8]))) }
        di      = { defs={} expr=v1105[32] }
        es      = { defs={} expr=v1106[16] }
        cs      = { defs={} expr=v1107[16] }
        ss      = { defs={} expr=v1108[16] }
        ds      = { defs={} expr=v1109[16] }
        fs      = { defs={} expr=v1110[16] }
        gs      = { defs={} expr=v1111[16] }
        cf      = { defs={0x08048345} expr=0[1] }
        ?1      = { defs={} expr=v1113[1] }
        pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] 0[1] (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v1115[1] }
        af      = { defs={0x08048345} expr=v1233[1] }
        ?5      = { defs={} expr=v1117[1] }
        zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])) }
        sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])) }
        tf      = { defs={} expr=v1120[1] }
        if      = { defs={} expr=v1121[1] }
        df      = { defs={} expr=v1122[1] }
        of      = { defs={0x08048345} expr=0[1] }
        iopl0   = { defs={} expr=v1124[1] }
        iopl1   = { defs={} expr=v1125[1] }
        nt      = { defs={} expr=v1126[1] }
        ?15     = { defs={} expr=v1127[1] }
        rf      = { defs={} expr=v1128[1] }
        vm      = { defs={} expr=v1129[1] }
        ac      = { defs={} expr=v1130[1] }
        vif     = { defs={} expr=v1131[1] }
        vip     = { defs={} expr=v1132[1] }
        id      = { defs={} expr=v1133[1] }
        ?22     = { defs={} expr=v1134[1] }
        ?23     = { defs={} expr=v1135[1] }
        ?24     = { defs={} expr=v1136[1] }
        ?25     = { defs={} expr=v1137[1] }
        ?26     = { defs={} expr=v1138[1] }
        ?27     = { defs={} expr=v1139[1] }
        ?28     = { defs={} expr=v1140[1] }
        ?29     = { defs={} expr=v1141[1] }
        ?30     = { defs={} expr=v1142[1] }
        ?31     = { defs={} expr=v1143[1] }
        ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348,0x08048349} expr=0x0804834a[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1098[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1098[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1098[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1098[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v1102[32] 3[32]) }
          value = { defs={} expr=v1191[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1102[32] 2[32]) }
          value = { defs={} expr=v1190[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1102[32] 1[32]) }
          value = { defs={} expr=v1189[8] }
          flags = { rdonly }
        address = { defs={0x08048342} expr=v1102[32] }
          value = { defs={} expr=v1188[8] }
          flags = { rdonly }
0x804834a:push   edx
    registers:
        ax      = { defs={} expr=v1098[32] }
        cx      = { defs={0x08048342,0x08048343} expr=(add[32] v1102[32] 4[32]) }
        dx      = { defs={} expr=v1100[32] }
        bx      = { defs={} expr=v1101[32] }
        sp      = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1188[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1189[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1190[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1191[8]))) }
        di      = { defs={} expr=v1105[32] }
        es      = { defs={} expr=v1106[16] }
        cs      = { defs={} expr=v1107[16] }
        ss      = { defs={} expr=v1108[16] }
        ds      = { defs={} expr=v1109[16] }
        fs      = { defs={} expr=v1110[16] }
        gs      = { defs={} expr=v1111[16] }
        cf      = { defs={0x08048345} expr=0[1] }
        ?1      = { defs={} expr=v1113[1] }
        pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] 0[1] (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v1115[1] }
        af      = { defs={0x08048345} expr=v1233[1] }
        ?5      = { defs={} expr=v1117[1] }
        zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])) }
        sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])) }
        tf      = { defs={} expr=v1120[1] }
        if      = { defs={} expr=v1121[1] }
        df      = { defs={} expr=v1122[1] }
        of      = { defs={0x08048345} expr=0[1] }
        iopl0   = { defs={} expr=v1124[1] }
        iopl1   = { defs={} expr=v1125[1] }
        nt      = { defs={} expr=v1126[1] }
        ?15     = { defs={} expr=v1127[1] }
        rf      = { defs={} expr=v1128[1] }
        vm      = { defs={} expr=v1129[1] }
        ac      = { defs={} expr=v1130[1] }
        vif     = { defs={} expr=v1131[1] }
        vip     = { defs={} expr=v1132[1] }
        id      = { defs={} expr=v1133[1] }
        ?22     = { defs={} expr=v1134[1] }
        ?23     = { defs={} expr=v1135[1] }
        ?24     = { defs={} expr=v1136[1] }
        ?25     = { defs={} expr=v1137[1] }
        ?26     = { defs={} expr=v1138[1] }
        ?27     = { defs={} expr=v1139[1] }
        ?28     = { defs={} expr=v1140[1] }
        ?29     = { defs={} expr=v1141[1] }
        ?30     = { defs={} expr=v1142[1] }
        ?31     = { defs={} expr=v1143[1] }
        ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348,0x08048349,0x0804834a} expr=0x0804834b[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1100[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1100[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1100[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1100[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1098[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1098[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1098[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1098[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v1102[32] 3[32]) }
          value = { defs={} expr=v1191[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1102[32] 2[32]) }
          value = { defs={} expr=v1190[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1102[32] 1[32]) }
          value = { defs={} expr=v1189[8] }
          flags = { rdonly }
        address = { defs={0x08048342} expr=v1102[32] }
          value = { defs={} expr=v1188[8] }
          flags = { rdonly }
0x804834b:push   0x08048520<__libc_csu_fini>
    registers:
        ax      = { defs={} expr=v1098[32] }
        cx      = { defs={0x08048342,0x08048343} expr=(add[32] v1102[32] 4[32]) }
        dx      = { defs={} expr=v1100[32] }
        bx      = { defs={} expr=v1101[32] }
        sp      = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1188[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1189[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1190[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1191[8]))) }
        di      = { defs={} expr=v1105[32] }
        es      = { defs={} expr=v1106[16] }
        cs      = { defs={} expr=v1107[16] }
        ss      = { defs={} expr=v1108[16] }
        ds      = { defs={} expr=v1109[16] }
        fs      = { defs={} expr=v1110[16] }
        gs      = { defs={} expr=v1111[16] }
        cf      = { defs={0x08048345} expr=0[1] }
        ?1      = { defs={} expr=v1113[1] }
        pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] 0[1] (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v1115[1] }
        af      = { defs={0x08048345} expr=v1233[1] }
        ?5      = { defs={} expr=v1117[1] }
        zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])) }
        sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])) }
        tf      = { defs={} expr=v1120[1] }
        if      = { defs={} expr=v1121[1] }
        df      = { defs={} expr=v1122[1] }
        of      = { defs={0x08048345} expr=0[1] }
        iopl0   = { defs={} expr=v1124[1] }
        iopl1   = { defs={} expr=v1125[1] }
        nt      = { defs={} expr=v1126[1] }
        ?15     = { defs={} expr=v1127[1] }
        rf      = { defs={} expr=v1128[1] }
        vm      = { defs={} expr=v1129[1] }
        ac      = { defs={} expr=v1130[1] }
        vif     = { defs={} expr=v1131[1] }
        vip     = { defs={} expr=v1132[1] }
        id      = { defs={} expr=v1133[1] }
        ?22     = { defs={} expr=v1134[1] }
        ?23     = { defs={} expr=v1135[1] }
        ?24     = { defs={} expr=v1136[1] }
        ?25     = { defs={} expr=v1137[1] }
        ?26     = { defs={} expr=v1138[1] }
        ?27     = { defs={} expr=v1139[1] }
        ?28     = { defs={} expr=v1140[1] }
        ?29     = { defs={} expr=v1141[1] }
        ?30     = { defs={} expr=v1142[1] }
        ?31     = { defs={} expr=v1143[1] }
        ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b} expr=0x08048350[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=32[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1100[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1100[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1100[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1100[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1098[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1098[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1098[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1098[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v1102[32] 3[32]) }
          value = { defs={} expr=v1191[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1102[32] 2[32]) }
          value = { defs={} expr=v1190[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1102[32] 1[32]) }
          value = { defs={} expr=v1189[8] }
          flags = { rdonly }
        address = { defs={0x08048342} expr=v1102[32] }
          value = { defs={} expr=v1188[8] }
          flags = { rdonly }
0x8048350:push   0x080484b0<__libc_csu_init>
    registers:
        ax      = { defs={} expr=v1098[32] }
        cx      = { defs={0x08048342,0x08048343} expr=(add[32] v1102[32] 4[32]) }
        dx      = { defs={} expr=v1100[32] }
        bx      = { defs={} expr=v1101[32] }
        sp      = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1188[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1189[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1190[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1191[8]))) }
        di      = { defs={} expr=v1105[32] }
        es      = { defs={} expr=v1106[16] }
        cs      = { defs={} expr=v1107[16] }
        ss      = { defs={} expr=v1108[16] }
        ds      = { defs={} expr=v1109[16] }
        fs      = { defs={} expr=v1110[16] }
        gs      = { defs={} expr=v1111[16] }
        cf      = { defs={0x08048345} expr=0[1] }
        ?1      = { defs={} expr=v1113[1] }
        pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] 0[1] (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v1115[1] }
        af      = { defs={0x08048345} expr=v1233[1] }
        ?5      = { defs={} expr=v1117[1] }
        zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])) }
        sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])) }
        tf      = { defs={} expr=v1120[1] }
        if      = { defs={} expr=v1121[1] }
        df      = { defs={} expr=v1122[1] }
        of      = { defs={0x08048345} expr=0[1] }
        iopl0   = { defs={} expr=v1124[1] }
        iopl1   = { defs={} expr=v1125[1] }
        nt      = { defs={} expr=v1126[1] }
        ?15     = { defs={} expr=v1127[1] }
        rf      = { defs={} expr=v1128[1] }
        vm      = { defs={} expr=v1129[1] }
        ac      = { defs={} expr=v1130[1] }
        vif     = { defs={} expr=v1131[1] }
        vip     = { defs={} expr=v1132[1] }
        id      = { defs={} expr=v1133[1] }
        ?22     = { defs={} expr=v1134[1] }
        ?23     = { defs={} expr=v1135[1] }
        ?24     = { defs={} expr=v1136[1] }
        ?25     = { defs={} expr=v1137[1] }
        ?26     = { defs={} expr=v1138[1] }
        ?27     = { defs={} expr=v1139[1] }
        ?28     = { defs={} expr=v1140[1] }
        ?29     = { defs={} expr=v1141[1] }
        ?30     = { defs={} expr=v1142[1] }
        ?31     = { defs={} expr=v1143[1] }
        ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350} expr=0x08048355[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=-80[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=32[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1100[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1100[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1100[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1100[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1098[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1098[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1098[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1098[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v1102[32] 3[32]) }
          value = { defs={} expr=v1191[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1102[32] 2[32]) }
          value = { defs={} expr=v1190[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1102[32] 1[32]) }
          value = { defs={} expr=v1189[8] }
          flags = { rdonly }
        address = { defs={0x08048342} expr=v1102[32] }
          value = { defs={} expr=v1188[8] }
          flags = { rdonly }
0x8048355:push   ecx
    registers:
        ax      = { defs={} expr=v1098[32] }
        cx      = { defs={0x08048342,0x08048343} expr=(add[32] v1102[32] 4[32]) }
        dx      = { defs={} expr=v1100[32] }
        bx      = { defs={} expr=v1101[32] }
        sp      = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1188[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1189[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1190[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1191[8]))) }
        di      = { defs={} expr=v1105[32] }
        es      = { defs={} expr=v1106[16] }
        cs      = { defs={} expr=v1107[16] }
        ss      = { defs={} expr=v1108[16] }
        ds      = { defs={} expr=v1109[16] }
        fs      = { defs={} expr=v1110[16] }
        gs      = { defs={} expr=v1111[16] }
        cf      = { defs={0x08048345} expr=0[1] }
        ?1      = { defs={} expr=v1113[1] }
        pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] 0[1] (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v1115[1] }
        af      = { defs={0x08048345} expr=v1233[1] }
        ?5      = { defs={} expr=v1117[1] }
        zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])) }
        sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])) }
        tf      = { defs={} expr=v1120[1] }
        if      = { defs={} expr=v1121[1] }
        df      = { defs={} expr=v1122[1] }
        of      = { defs={0x08048345} expr=0[1] }
        iopl0   = { defs={} expr=v1124[1] }
        iopl1   = { defs={} expr=v1125[1] }
        nt      = { defs={} expr=v1126[1] }
        ?15     = { defs={} expr=v1127[1] }
        rf      = { defs={} expr=v1128[1] }
        vm      = { defs={} expr=v1129[1] }
        ac      = { defs={} expr=v1130[1] }
        vif     = { defs={} expr=v1131[1] }
        vip     = { defs={} expr=v1132[1] }
        id      = { defs={} expr=v1133[1] }
        ?22     = { defs={} expr=v1134[1] }
        ?23     = { defs={} expr=v1135[1] }
        ?24     = { defs={} expr=v1136[1] }
        ?25     = { defs={} expr=v1137[1] }
        ?26     = { defs={} expr=v1138[1] }
        ?27     = { defs={} expr=v1139[1] }
        ?28     = { defs={} expr=v1140[1] }
        ?29     = { defs={} expr=v1141[1] }
        ?30     = { defs={} expr=v1142[1] }
        ?31     = { defs={} expr=v1143[1] }
        ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355} expr=0x08048356[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] v1102[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] v1102[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] v1102[32] 4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] v1102[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=-80[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=32[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1100[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1100[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1100[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1100[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1098[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1098[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1098[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1098[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v1102[32] 3[32]) }
          value = { defs={} expr=v1191[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1102[32] 2[32]) }
          value = { defs={} expr=v1190[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1102[32] 1[32]) }
          value = { defs={} expr=v1189[8] }
          flags = { rdonly }
        address = { defs={0x08048342} expr=v1102[32] }
          value = { defs={} expr=v1188[8] }
          flags = { rdonly }
0x8048356:push   esi
    registers:
        ax      = { defs={} expr=v1098[32] }
        cx      = { defs={0x08048342,0x08048343} expr=(add[32] v1102[32] 4[32]) }
        dx      = { defs={} expr=v1100[32] }
        bx      = { defs={} expr=v1101[32] }
        sp      = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1188[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1189[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1190[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1191[8]))) }
        di      = { defs={} expr=v1105[32] }
        es      = { defs={} expr=v1106[16] }
        cs      = { defs={} expr=v1107[16] }
        ss      = { defs={} expr=v1108[16] }
        ds      = { defs={} expr=v1109[16] }
        fs      = { defs={} expr=v1110[16] }
        gs      = { defs={} expr=v1111[16] }
        cf      = { defs={0x08048345} expr=0[1] }
        ?1      = { defs={} expr=v1113[1] }
        pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] 0[1] (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v1115[1] }
        af      = { defs={0x08048345} expr=v1233[1] }
        ?5      = { defs={} expr=v1117[1] }
        zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])) }
        sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])) }
        tf      = { defs={} expr=v1120[1] }
        if      = { defs={} expr=v1121[1] }
        df      = { defs={} expr=v1122[1] }
        of      = { defs={0x08048345} expr=0[1] }
        iopl0   = { defs={} expr=v1124[1] }
        iopl1   = { defs={} expr=v1125[1] }
        nt      = { defs={} expr=v1126[1] }
        ?15     = { defs={} expr=v1127[1] }
        rf      = { defs={} expr=v1128[1] }
        vm      = { defs={} expr=v1129[1] }
        ac      = { defs={} expr=v1130[1] }
        vif     = { defs={} expr=v1131[1] }
        vip     = { defs={} expr=v1132[1] }
        id      = { defs={} expr=v1133[1] }
        ?22     = { defs={} expr=v1134[1] }
        ?23     = { defs={} expr=v1135[1] }
        ?24     = { defs={} expr=v1136[1] }
        ?25     = { defs={} expr=v1137[1] }
        ?26     = { defs={} expr=v1138[1] }
        ?27     = { defs={} expr=v1139[1] }
        ?28     = { defs={} expr=v1140[1] }
        ?29     = { defs={} expr=v1141[1] }
        ?30     = { defs={} expr=v1142[1] }
        ?31     = { defs={} expr=v1143[1] }
        ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356} expr=0x08048357[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1188[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1189[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1190[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1191[8])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1188[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1189[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1190[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1191[8])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1188[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1189[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1190[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1191[8])))) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1188[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1189[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1190[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1191[8])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] v1102[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] v1102[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] v1102[32] 4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] v1102[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=-80[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=32[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1100[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1100[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1100[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1100[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1098[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1098[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1098[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1098[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v1102[32] 3[32]) }
          value = { defs={} expr=v1191[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1102[32] 2[32]) }
          value = { defs={} expr=v1190[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1102[32] 1[32]) }
          value = { defs={} expr=v1189[8] }
          flags = { rdonly }
        address = { defs={0x08048342} expr=v1102[32] }
          value = { defs={} expr=v1188[8] }
          flags = { rdonly }
0x8048357:push   0x08048410<main>
    registers:
        ax      = { defs={} expr=v1098[32] }
        cx      = { defs={0x08048342,0x08048343} expr=(add[32] v1102[32] 4[32]) }
        dx      = { defs={} expr=v1100[32] }
        bx      = { defs={} expr=v1101[32] }
        sp      = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1188[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1189[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1190[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1191[8]))) }
        di      = { defs={} expr=v1105[32] }
        es      = { defs={} expr=v1106[16] }
        cs      = { defs={} expr=v1107[16] }
        ss      = { defs={} expr=v1108[16] }
        ds      = { defs={} expr=v1109[16] }
        fs      = { defs={} expr=v1110[16] }
        gs      = { defs={} expr=v1111[16] }
        cf      = { defs={0x08048345} expr=0[1] }
        ?1      = { defs={} expr=v1113[1] }
        pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] 0[1] (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v1115[1] }
        af      = { defs={0x08048345} expr=v1233[1] }
        ?5      = { defs={} expr=v1117[1] }
        zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])) }
        sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])) }
        tf      = { defs={} expr=v1120[1] }
        if      = { defs={} expr=v1121[1] }
        df      = { defs={} expr=v1122[1] }
        of      = { defs={0x08048345} expr=0[1] }
        iopl0   = { defs={} expr=v1124[1] }
        iopl1   = { defs={} expr=v1125[1] }
        nt      = { defs={} expr=v1126[1] }
        ?15     = { defs={} expr=v1127[1] }
        rf      = { defs={} expr=v1128[1] }
        vm      = { defs={} expr=v1129[1] }
        ac      = { defs={} expr=v1130[1] }
        vif     = { defs={} expr=v1131[1] }
        vip     = { defs={} expr=v1132[1] }
        id      = { defs={} expr=v1133[1] }
        ?22     = { defs={} expr=v1134[1] }
        ?23     = { defs={} expr=v1135[1] }
        ?24     = { defs={} expr=v1136[1] }
        ?25     = { defs={} expr=v1137[1] }
        ?26     = { defs={} expr=v1138[1] }
        ?27     = { defs={} expr=v1139[1] }
        ?28     = { defs={} expr=v1140[1] }
        ?29     = { defs={} expr=v1141[1] }
        ?30     = { defs={} expr=v1142[1] }
        ?31     = { defs={} expr=v1143[1] }
        ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357} expr=0x0804835c[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=16[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1188[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1189[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1190[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1191[8])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1188[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1189[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1190[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1191[8])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1188[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1189[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1190[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1191[8])))) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1188[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1189[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1190[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1191[8])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] v1102[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] v1102[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] v1102[32] 4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] v1102[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=-80[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=32[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1100[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1100[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1100[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1100[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1098[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1098[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1098[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1098[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v1102[32] 3[32]) }
          value = { defs={} expr=v1191[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1102[32] 2[32]) }
          value = { defs={} expr=v1190[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1102[32] 1[32]) }
          value = { defs={} expr=v1189[8] }
          flags = { rdonly }
        address = { defs={0x08048342} expr=v1102[32] }
          value = { defs={} expr=v1188[8] }
          flags = { rdonly }
0x804835c:call   0x08048310<__libc_start_main@plt>
    registers:
        ax      = { defs={} expr=v1098[32] }
        cx      = { defs={0x08048342,0x08048343} expr=(add[32] v1102[32] 4[32]) }
        dx      = { defs={} expr=v1100[32] }
        bx      = { defs={} expr=v1101[32] }
        sp      = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357,0x0804835c} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1188[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1189[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1190[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1191[8]))) }
        di      = { defs={} expr=v1105[32] }
        es      = { defs={} expr=v1106[16] }
        cs      = { defs={} expr=v1107[16] }
        ss      = { defs={} expr=v1108[16] }
        ds      = { defs={} expr=v1109[16] }
        fs      = { defs={} expr=v1110[16] }
        gs      = { defs={} expr=v1111[16] }
        cf      = { defs={0x08048345} expr=0[1] }
        ?1      = { defs={} expr=v1113[1] }
        pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] 0[1] (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v1115[1] }
        af      = { defs={0x08048345} expr=v1233[1] }
        ?5      = { defs={} expr=v1117[1] }
        zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])) }
        sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])) }
        tf      = { defs={} expr=v1120[1] }
        if      = { defs={} expr=v1121[1] }
        df      = { defs={} expr=v1122[1] }
        of      = { defs={0x08048345} expr=0[1] }
        iopl0   = { defs={} expr=v1124[1] }
        iopl1   = { defs={} expr=v1125[1] }
        nt      = { defs={} expr=v1126[1] }
        ?15     = { defs={} expr=v1127[1] }
        rf      = { defs={} expr=v1128[1] }
        vm      = { defs={} expr=v1129[1] }
        ac      = { defs={} expr=v1130[1] }
        vif     = { defs={} expr=v1131[1] }
        vip     = { defs={} expr=v1132[1] }
        id      = { defs={} expr=v1133[1] }
        ?22     = { defs={} expr=v1134[1] }
        ?23     = { defs={} expr=v1135[1] }
        ?24     = { defs={} expr=v1136[1] }
        ?25     = { defs={} expr=v1137[1] }
        ?26     = { defs={} expr=v1138[1] }
        ?27     = { defs={} expr=v1139[1] }
        ?28     = { defs={} expr=v1140[1] }
        ?29     = { defs={} expr=v1141[1] }
        ?30     = { defs={} expr=v1142[1] }
        ?31     = { defs={} expr=v1143[1] }
        ip      = { defs={0x0804835c} expr=0x08048310[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-125[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357,0x0804835c} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=97[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=16[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1188[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1189[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1190[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1191[8])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1188[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1189[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1190[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1191[8])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1188[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1189[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1190[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1191[8])))) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1188[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1189[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1190[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1191[8])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] v1102[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] v1102[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] v1102[32] 4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] v1102[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=-80[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=32[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1100[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1100[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1100[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1100[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1098[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1098[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1098[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1098[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v1102[32] 3[32]) }
          value = { defs={} expr=v1191[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1102[32] 2[32]) }
          value = { defs={} expr=v1190[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1102[32] 1[32]) }
          value = { defs={} expr=v1189[8] }
          flags = { rdonly }
        address = { defs={0x08048342} expr=v1102[32] }
          value = { defs={} expr=v1188[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048361:hlt    
    registers:
        ax      = { defs={} expr=v1345[32] }
        cx      = { defs={} expr=v1346[32] }
        dx      = { defs={} expr=v1347[32] }
        bx      = { defs={} expr=v1348[32] }
        sp      = { defs={} expr=v1349[32] }
        bp      = { defs={} expr=v1350[32] }
        si      = { defs={} expr=v1351[32] }
        di      = { defs={} expr=v1352[32] }
        es      = { defs={} expr=v1353[16] }
        cs      = { defs={} expr=v1354[16] }
        ss      = { defs={} expr=v1355[16] }
        ds      = { defs={} expr=v1356[16] }
        fs      = { defs={} expr=v1357[16] }
        gs      = { defs={} expr=v1358[16] }
        cf      = { defs={} expr=v1359[1] }
        ?1      = { defs={} expr=v1360[1] }
        pf      = { defs={} expr=v1361[1] }
        ?3      = { defs={} expr=v1362[1] }
        af      = { defs={} expr=v1363[1] }
        ?5      = { defs={} expr=v1364[1] }
        zf      = { defs={} expr=v1365[1] }
        sf      = { defs={} expr=v1366[1] }
        tf      = { defs={} expr=v1367[1] }
        if      = { defs={} expr=v1368[1] }
        df      = { defs={} expr=v1369[1] }
        of      = { defs={} expr=v1370[1] }
        iopl0   = { defs={} expr=v1371[1] }
        iopl1   = { defs={} expr=v1372[1] }
        nt      = { defs={} expr=v1373[1] }
        ?15     = { defs={} expr=v1374[1] }
        rf      = { defs={} expr=v1375[1] }
        vm      = { defs={} expr=v1376[1] }
        ac      = { defs={} expr=v1377[1] }
        vif     = { defs={} expr=v1378[1] }
        vip     = { defs={} expr=v1379[1] }
        id      = { defs={} expr=v1380[1] }
        ?22     = { defs={} expr=v1381[1] }
        ?23     = { defs={} expr=v1382[1] }
        ?24     = { defs={} expr=v1383[1] }
        ?25     = { defs={} expr=v1384[1] }
        ?26     = { defs={} expr=v1385[1] }
        ?27     = { defs={} expr=v1386[1] }
        ?28     = { defs={} expr=v1387[1] }
        ?29     = { defs={} expr=v1388[1] }
        ?30     = { defs={} expr=v1389[1] }
        ?31     = { defs={} expr=v1390[1] }
        ip      = { defs={0x08048361} expr=0x08048361[32] }
    memory:
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048364:push   ebp
    registers:
        ax      = { defs={} expr=v1444[32] }
        cx      = { defs={} expr=v1445[32] }
        dx      = { defs={} expr=v1446[32] }
        bx      = { defs={} expr=v1447[32] }
        sp      = { defs={0x08048364} expr=(add[32] v1448[32] -4[32]) }
        bp      = { defs={} expr=v1449[32] }
        si      = { defs={} expr=v1450[32] }
        di      = { defs={} expr=v1451[32] }
        es      = { defs={} expr=v1452[16] }
        cs      = { defs={} expr=v1453[16] }
        ss      = { defs={} expr=v1454[16] }
        ds      = { defs={} expr=v1455[16] }
        fs      = { defs={} expr=v1456[16] }
        gs      = { defs={} expr=v1457[16] }
        cf      = { defs={} expr=v1458[1] }
        ?1      = { defs={} expr=v1459[1] }
        pf      = { defs={} expr=v1460[1] }
        ?3      = { defs={} expr=v1461[1] }
        af      = { defs={} expr=v1462[1] }
        ?5      = { defs={} expr=v1463[1] }
        zf      = { defs={} expr=v1464[1] }
        sf      = { defs={} expr=v1465[1] }
        tf      = { defs={} expr=v1466[1] }
        if      = { defs={} expr=v1467[1] }
        df      = { defs={} expr=v1468[1] }
        of      = { defs={} expr=v1469[1] }
        iopl0   = { defs={} expr=v1470[1] }
        iopl1   = { defs={} expr=v1471[1] }
        nt      = { defs={} expr=v1472[1] }
        ?15     = { defs={} expr=v1473[1] }
        rf      = { defs={} expr=v1474[1] }
        vm      = { defs={} expr=v1475[1] }
        ac      = { defs={} expr=v1476[1] }
        vif     = { defs={} expr=v1477[1] }
        vip     = { defs={} expr=v1478[1] }
        id      = { defs={} expr=v1479[1] }
        ?22     = { defs={} expr=v1480[1] }
        ?23     = { defs={} expr=v1481[1] }
        ?24     = { defs={} expr=v1482[1] }
        ?25     = { defs={} expr=v1483[1] }
        ?26     = { defs={} expr=v1484[1] }
        ?27     = { defs={} expr=v1485[1] }
        ?28     = { defs={} expr=v1486[1] }
        ?29     = { defs={} expr=v1487[1] }
        ?30     = { defs={} expr=v1488[1] }
        ?31     = { defs={} expr=v1489[1] }
        ip      = { defs={0x08048364} expr=0x08048365[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v1448[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1449[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1448[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1449[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1448[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1449[32]) }
          flags = { }
        address = { defs={0x08048364} expr=(add[32] v1448[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1449[32]) }
          flags = { }
    init mem:
0x8048365:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v1444[32] }
        cx      = { defs={} expr=v1445[32] }
        dx      = { defs={} expr=v1446[32] }
        bx      = { defs={} expr=v1447[32] }
        sp      = { defs={0x08048364} expr=(add[32] v1448[32] -4[32]) }
        bp      = { defs={0x08048364,0x08048365} expr=(add[32] v1448[32] -4[32]) }
        si      = { defs={} expr=v1450[32] }
        di      = { defs={} expr=v1451[32] }
        es      = { defs={} expr=v1452[16] }
        cs      = { defs={} expr=v1453[16] }
        ss      = { defs={} expr=v1454[16] }
        ds      = { defs={} expr=v1455[16] }
        fs      = { defs={} expr=v1456[16] }
        gs      = { defs={} expr=v1457[16] }
        cf      = { defs={} expr=v1458[1] }
        ?1      = { defs={} expr=v1459[1] }
        pf      = { defs={} expr=v1460[1] }
        ?3      = { defs={} expr=v1461[1] }
        af      = { defs={} expr=v1462[1] }
        ?5      = { defs={} expr=v1463[1] }
        zf      = { defs={} expr=v1464[1] }
        sf      = { defs={} expr=v1465[1] }
        tf      = { defs={} expr=v1466[1] }
        if      = { defs={} expr=v1467[1] }
        df      = { defs={} expr=v1468[1] }
        of      = { defs={} expr=v1469[1] }
        iopl0   = { defs={} expr=v1470[1] }
        iopl1   = { defs={} expr=v1471[1] }
        nt      = { defs={} expr=v1472[1] }
        ?15     = { defs={} expr=v1473[1] }
        rf      = { defs={} expr=v1474[1] }
        vm      = { defs={} expr=v1475[1] }
        ac      = { defs={} expr=v1476[1] }
        vif     = { defs={} expr=v1477[1] }
        vip     = { defs={} expr=v1478[1] }
        id      = { defs={} expr=v1479[1] }
        ?22     = { defs={} expr=v1480[1] }
        ?23     = { defs={} expr=v1481[1] }
        ?24     = { defs={} expr=v1482[1] }
        ?25     = { defs={} expr=v1483[1] }
        ?26     = { defs={} expr=v1484[1] }
        ?27     = { defs={} expr=v1485[1] }
        ?28     = { defs={} expr=v1486[1] }
        ?29     = { defs={} expr=v1487[1] }
        ?30     = { defs={} expr=v1488[1] }
        ?31     = { defs={} expr=v1489[1] }
        ip      = { defs={0x08048364,0x08048365} expr=0x08048367[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v1448[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1449[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1448[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1449[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1448[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1449[32]) }
          flags = { }
        address = { defs={0x08048364} expr=(add[32] v1448[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1449[32]) }
          flags = { }
    init mem:
0x8048367:push   ebx
    registers:
        ax      = { defs={} expr=v1444[32] }
        cx      = { defs={} expr=v1445[32] }
        dx      = { defs={} expr=v1446[32] }
        bx      = { defs={} expr=v1447[32] }
        sp      = { defs={0x08048364,0x08048367} expr=(add[32] (add[32] v1448[32] -4[32]) -4[32]) }
        bp      = { defs={0x08048364,0x08048365} expr=(add[32] v1448[32] -4[32]) }
        si      = { defs={} expr=v1450[32] }
        di      = { defs={} expr=v1451[32] }
        es      = { defs={} expr=v1452[16] }
        cs      = { defs={} expr=v1453[16] }
        ss      = { defs={} expr=v1454[16] }
        ds      = { defs={} expr=v1455[16] }
        fs      = { defs={} expr=v1456[16] }
        gs      = { defs={} expr=v1457[16] }
        cf      = { defs={} expr=v1458[1] }
        ?1      = { defs={} expr=v1459[1] }
        pf      = { defs={} expr=v1460[1] }
        ?3      = { defs={} expr=v1461[1] }
        af      = { defs={} expr=v1462[1] }
        ?5      = { defs={} expr=v1463[1] }
        zf      = { defs={} expr=v1464[1] }
        sf      = { defs={} expr=v1465[1] }
        tf      = { defs={} expr=v1466[1] }
        if      = { defs={} expr=v1467[1] }
        df      = { defs={} expr=v1468[1] }
        of      = { defs={} expr=v1469[1] }
        iopl0   = { defs={} expr=v1470[1] }
        iopl1   = { defs={} expr=v1471[1] }
        nt      = { defs={} expr=v1472[1] }
        ?15     = { defs={} expr=v1473[1] }
        rf      = { defs={} expr=v1474[1] }
        vm      = { defs={} expr=v1475[1] }
        ac      = { defs={} expr=v1476[1] }
        vif     = { defs={} expr=v1477[1] }
        vip     = { defs={} expr=v1478[1] }
        id      = { defs={} expr=v1479[1] }
        ?22     = { defs={} expr=v1480[1] }
        ?23     = { defs={} expr=v1481[1] }
        ?24     = { defs={} expr=v1482[1] }
        ?25     = { defs={} expr=v1483[1] }
        ?26     = { defs={} expr=v1484[1] }
        ?27     = { defs={} expr=v1485[1] }
        ?28     = { defs={} expr=v1486[1] }
        ?29     = { defs={} expr=v1487[1] }
        ?30     = { defs={} expr=v1488[1] }
        ?31     = { defs={} expr=v1489[1] }
        ip      = { defs={0x08048364,0x08048365,0x08048367} expr=0x08048368[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v1448[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1447[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v1448[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1447[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v1448[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1447[32]) }
          flags = { }
        address = { defs={0x08048364,0x08048367} expr=(add[32] (add[32] v1448[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1447[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1448[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1449[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1448[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1449[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1448[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1449[32]) }
          flags = { }
        address = { defs={0x08048364} expr=(add[32] v1448[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1449[32]) }
          flags = { }
    init mem:
0x8048368:push   ecx
    registers:
        ax      = { defs={} expr=v1444[32] }
        cx      = { defs={} expr=v1445[32] }
        dx      = { defs={} expr=v1446[32] }
        bx      = { defs={} expr=v1447[32] }
        sp      = { defs={0x08048364,0x08048367,0x08048368} expr=(add[32] (add[32] (add[32] v1448[32] -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048364,0x08048365} expr=(add[32] v1448[32] -4[32]) }
        si      = { defs={} expr=v1450[32] }
        di      = { defs={} expr=v1451[32] }
        es      = { defs={} expr=v1452[16] }
        cs      = { defs={} expr=v1453[16] }
        ss      = { defs={} expr=v1454[16] }
        ds      = { defs={} expr=v1455[16] }
        fs      = { defs={} expr=v1456[16] }
        gs      = { defs={} expr=v1457[16] }
        cf      = { defs={} expr=v1458[1] }
        ?1      = { defs={} expr=v1459[1] }
        pf      = { defs={} expr=v1460[1] }
        ?3      = { defs={} expr=v1461[1] }
        af      = { defs={} expr=v1462[1] }
        ?5      = { defs={} expr=v1463[1] }
        zf      = { defs={} expr=v1464[1] }
        sf      = { defs={} expr=v1465[1] }
        tf      = { defs={} expr=v1466[1] }
        if      = { defs={} expr=v1467[1] }
        df      = { defs={} expr=v1468[1] }
        of      = { defs={} expr=v1469[1] }
        iopl0   = { defs={} expr=v1470[1] }
        iopl1   = { defs={} expr=v1471[1] }
        nt      = { defs={} expr=v1472[1] }
        ?15     = { defs={} expr=v1473[1] }
        rf      = { defs={} expr=v1474[1] }
        vm      = { defs={} expr=v1475[1] }
        ac      = { defs={} expr=v1476[1] }
        vif     = { defs={} expr=v1477[1] }
        vip     = { defs={} expr=v1478[1] }
        id      = { defs={} expr=v1479[1] }
        ?22     = { defs={} expr=v1480[1] }
        ?23     = { defs={} expr=v1481[1] }
        ?24     = { defs={} expr=v1482[1] }
        ?25     = { defs={} expr=v1483[1] }
        ?26     = { defs={} expr=v1484[1] }
        ?27     = { defs={} expr=v1485[1] }
        ?28     = { defs={} expr=v1486[1] }
        ?29     = { defs={} expr=v1487[1] }
        ?30     = { defs={} expr=v1488[1] }
        ?31     = { defs={} expr=v1489[1] }
        ip      = { defs={0x08048364,0x08048365,0x08048367,0x08048368} expr=0x08048369[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v1448[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1445[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v1448[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1445[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v1448[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1445[32]) }
          flags = { }
        address = { defs={0x08048364,0x08048367,0x08048368} expr=(add[32] (add[32] (add[32] v1448[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1445[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v1448[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1447[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v1448[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1447[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v1448[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1447[32]) }
          flags = { }
        address = { defs={0x08048364,0x08048367} expr=(add[32] (add[32] v1448[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1447[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1448[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1449[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1448[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1449[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1448[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1449[32]) }
          flags = { }
        address = { defs={0x08048364} expr=(add[32] v1448[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1449[32]) }
          flags = { }
    init mem:
0x8048369:call   0x0804836e<<Insn>>
    registers:
        ax      = { defs={} expr=v1444[32] }
        cx      = { defs={} expr=v1445[32] }
        dx      = { defs={} expr=v1446[32] }
        bx      = { defs={} expr=v1447[32] }
        sp      = { defs={0x08048364,0x08048367,0x08048368,0x08048369} expr=(add[32] (add[32] (add[32] (add[32] v1448[32] -4[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048364,0x08048365} expr=(add[32] v1448[32] -4[32]) }
        si      = { defs={} expr=v1450[32] }
        di      = { defs={} expr=v1451[32] }
        es      = { defs={} expr=v1452[16] }
        cs      = { defs={} expr=v1453[16] }
        ss      = { defs={} expr=v1454[16] }
        ds      = { defs={} expr=v1455[16] }
        fs      = { defs={} expr=v1456[16] }
        gs      = { defs={} expr=v1457[16] }
        cf      = { defs={} expr=v1458[1] }
        ?1      = { defs={} expr=v1459[1] }
        pf      = { defs={} expr=v1460[1] }
        ?3      = { defs={} expr=v1461[1] }
        af      = { defs={} expr=v1462[1] }
        ?5      = { defs={} expr=v1463[1] }
        zf      = { defs={} expr=v1464[1] }
        sf      = { defs={} expr=v1465[1] }
        tf      = { defs={} expr=v1466[1] }
        if      = { defs={} expr=v1467[1] }
        df      = { defs={} expr=v1468[1] }
        of      = { defs={} expr=v1469[1] }
        iopl0   = { defs={} expr=v1470[1] }
        iopl1   = { defs={} expr=v1471[1] }
        nt      = { defs={} expr=v1472[1] }
        ?15     = { defs={} expr=v1473[1] }
        rf      = { defs={} expr=v1474[1] }
        vm      = { defs={} expr=v1475[1] }
        ac      = { defs={} expr=v1476[1] }
        vif     = { defs={} expr=v1477[1] }
        vip     = { defs={} expr=v1478[1] }
        id      = { defs={} expr=v1479[1] }
        ?22     = { defs={} expr=v1480[1] }
        ?23     = { defs={} expr=v1481[1] }
        ?24     = { defs={} expr=v1482[1] }
        ?25     = { defs={} expr=v1483[1] }
        ?26     = { defs={} expr=v1484[1] }
        ?27     = { defs={} expr=v1485[1] }
        ?28     = { defs={} expr=v1486[1] }
        ?29     = { defs={} expr=v1487[1] }
        ?30     = { defs={} expr=v1488[1] }
        ?31     = { defs={} expr=v1489[1] }
        ip      = { defs={0x08048369} expr=0x0804836e[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v1448[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v1448[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v1448[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-125[8] }
          flags = { }
        address = { defs={0x08048364,0x08048367,0x08048368,0x08048369} expr=(add[32] (add[32] (add[32] (add[32] v1448[32] -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=110[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v1448[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1445[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v1448[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1445[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v1448[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1445[32]) }
          flags = { }
        address = { defs={0x08048364,0x08048367,0x08048368} expr=(add[32] (add[32] (add[32] v1448[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1445[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v1448[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1447[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v1448[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1447[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v1448[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1447[32]) }
          flags = { }
        address = { defs={0x08048364,0x08048367} expr=(add[32] (add[32] v1448[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1447[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1448[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1449[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1448[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1449[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1448[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1449[32]) }
          flags = { }
        address = { defs={0x08048364} expr=(add[32] v1448[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1449[32]) }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804836e:pop    ebx
    registers:
        ax      = { defs={} expr=v1573[32] }
        cx      = { defs={} expr=v1574[32] }
        dx      = { defs={} expr=v1575[32] }
        bx      = { defs={0x0804836e} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) }
        sp      = { defs={0x0804836e} expr=(add[32] v1577[32] 4[32]) }
        bp      = { defs={} expr=v1578[32] }
        si      = { defs={} expr=v1579[32] }
        di      = { defs={} expr=v1580[32] }
        es      = { defs={} expr=v1581[16] }
        cs      = { defs={} expr=v1582[16] }
        ss      = { defs={} expr=v1583[16] }
        ds      = { defs={} expr=v1584[16] }
        fs      = { defs={} expr=v1585[16] }
        gs      = { defs={} expr=v1586[16] }
        cf      = { defs={} expr=v1587[1] }
        ?1      = { defs={} expr=v1588[1] }
        pf      = { defs={} expr=v1589[1] }
        ?3      = { defs={} expr=v1590[1] }
        af      = { defs={} expr=v1591[1] }
        ?5      = { defs={} expr=v1592[1] }
        zf      = { defs={} expr=v1593[1] }
        sf      = { defs={} expr=v1594[1] }
        tf      = { defs={} expr=v1595[1] }
        if      = { defs={} expr=v1596[1] }
        df      = { defs={} expr=v1597[1] }
        of      = { defs={} expr=v1598[1] }
        iopl0   = { defs={} expr=v1599[1] }
        iopl1   = { defs={} expr=v1600[1] }
        nt      = { defs={} expr=v1601[1] }
        ?15     = { defs={} expr=v1602[1] }
        rf      = { defs={} expr=v1603[1] }
        vm      = { defs={} expr=v1604[1] }
        ac      = { defs={} expr=v1605[1] }
        vif     = { defs={} expr=v1606[1] }
        vip     = { defs={} expr=v1607[1] }
        id      = { defs={} expr=v1608[1] }
        ?22     = { defs={} expr=v1609[1] }
        ?23     = { defs={} expr=v1610[1] }
        ?24     = { defs={} expr=v1611[1] }
        ?25     = { defs={} expr=v1612[1] }
        ?26     = { defs={} expr=v1613[1] }
        ?27     = { defs={} expr=v1614[1] }
        ?28     = { defs={} expr=v1615[1] }
        ?29     = { defs={} expr=v1616[1] }
        ?30     = { defs={} expr=v1617[1] }
        ?31     = { defs={} expr=v1618[1] }
        ip      = { defs={0x0804836e} expr=0x0804836f[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v1577[32] 3[32]) }
          value = { defs={} expr=v1631[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1577[32] 2[32]) }
          value = { defs={} expr=v1630[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1577[32] 1[32]) }
          value = { defs={} expr=v1629[8] }
          flags = { rdonly }
        address = { defs={0x0804836e} expr=v1577[32] }
          value = { defs={} expr=v1628[8] }
          flags = { rdonly }
0x804836f:add    ebx, 0x0000135a
    registers:
        ax      = { defs={} expr=v1573[32] }
        cx      = { defs={} expr=v1574[32] }
        dx      = { defs={} expr=v1575[32] }
        bx      = { defs={0x0804836e,0x0804836f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) }
        sp      = { defs={0x0804836e} expr=(add[32] v1577[32] 4[32]) }
        bp      = { defs={} expr=v1578[32] }
        si      = { defs={} expr=v1579[32] }
        di      = { defs={} expr=v1580[32] }
        es      = { defs={} expr=v1581[16] }
        cs      = { defs={} expr=v1582[16] }
        ss      = { defs={} expr=v1583[16] }
        ds      = { defs={} expr=v1584[16] }
        fs      = { defs={} expr=v1585[16] }
        gs      = { defs={} expr=v1586[16] }
        cf      = { defs={0x0804836e,0x0804836f} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8])))) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8])))) 4954[33]))))) }
        ?1      = { defs={} expr=v1588[1] }
        pf      = { defs={0x0804836e,0x0804836f} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]))))))) }
        ?3      = { defs={} expr=v1590[1] }
        af      = { defs={0x0804836e,0x0804836f} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8])))) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8])))) 4954[33]))))) }
        ?5      = { defs={} expr=v1592[1] }
        zf      = { defs={0x0804836e,0x0804836f} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32])) }
        sf      = { defs={0x0804836e,0x0804836f} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32])) }
        tf      = { defs={} expr=v1595[1] }
        if      = { defs={} expr=v1596[1] }
        df      = { defs={} expr=v1597[1] }
        of      = { defs={0x0804836e,0x0804836f} expr=0[1] }
        iopl0   = { defs={} expr=v1599[1] }
        iopl1   = { defs={} expr=v1600[1] }
        nt      = { defs={} expr=v1601[1] }
        ?15     = { defs={} expr=v1602[1] }
        rf      = { defs={} expr=v1603[1] }
        vm      = { defs={} expr=v1604[1] }
        ac      = { defs={} expr=v1605[1] }
        vif     = { defs={} expr=v1606[1] }
        vip     = { defs={} expr=v1607[1] }
        id      = { defs={} expr=v1608[1] }
        ?22     = { defs={} expr=v1609[1] }
        ?23     = { defs={} expr=v1610[1] }
        ?24     = { defs={} expr=v1611[1] }
        ?25     = { defs={} expr=v1612[1] }
        ?26     = { defs={} expr=v1613[1] }
        ?27     = { defs={} expr=v1614[1] }
        ?28     = { defs={} expr=v1615[1] }
        ?29     = { defs={} expr=v1616[1] }
        ?30     = { defs={} expr=v1617[1] }
        ?31     = { defs={} expr=v1618[1] }
        ip      = { defs={0x0804836e,0x0804836f} expr=0x08048375[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v1577[32] 3[32]) }
          value = { defs={} expr=v1631[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1577[32] 2[32]) }
          value = { defs={} expr=v1630[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1577[32] 1[32]) }
          value = { defs={} expr=v1629[8] }
          flags = { rdonly }
        address = { defs={0x0804836e} expr=v1577[32] }
          value = { defs={} expr=v1628[8] }
          flags = { rdonly }
0x8048375:mov    edx, DWORD PTR ds:[ebx + 0xfffffffc<-0x00000004>]
    registers:
        ax      = { defs={} expr=v1573[32] }
        cx      = { defs={} expr=v1574[32] }
        dx      = { defs={0x08048375} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1693[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) v1692[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1695[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]) v1694[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1697[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]) v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1699[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]) v1698[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]))))) }
        bx      = { defs={0x0804836e,0x0804836f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) }
        sp      = { defs={0x0804836e} expr=(add[32] v1577[32] 4[32]) }
        bp      = { defs={} expr=v1578[32] }
        si      = { defs={} expr=v1579[32] }
        di      = { defs={} expr=v1580[32] }
        es      = { defs={} expr=v1581[16] }
        cs      = { defs={} expr=v1582[16] }
        ss      = { defs={} expr=v1583[16] }
        ds      = { defs={} expr=v1584[16] }
        fs      = { defs={} expr=v1585[16] }
        gs      = { defs={} expr=v1586[16] }
        cf      = { defs={0x0804836e,0x0804836f} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8])))) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8])))) 4954[33]))))) }
        ?1      = { defs={} expr=v1588[1] }
        pf      = { defs={0x0804836e,0x0804836f} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]))))))) }
        ?3      = { defs={} expr=v1590[1] }
        af      = { defs={0x0804836e,0x0804836f} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8])))) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8])))) 4954[33]))))) }
        ?5      = { defs={} expr=v1592[1] }
        zf      = { defs={0x0804836e,0x0804836f} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32])) }
        sf      = { defs={0x0804836e,0x0804836f} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32])) }
        tf      = { defs={} expr=v1595[1] }
        if      = { defs={} expr=v1596[1] }
        df      = { defs={} expr=v1597[1] }
        of      = { defs={0x0804836e,0x0804836f} expr=0[1] }
        iopl0   = { defs={} expr=v1599[1] }
        iopl1   = { defs={} expr=v1600[1] }
        nt      = { defs={} expr=v1601[1] }
        ?15     = { defs={} expr=v1602[1] }
        rf      = { defs={} expr=v1603[1] }
        vm      = { defs={} expr=v1604[1] }
        ac      = { defs={} expr=v1605[1] }
        vif     = { defs={} expr=v1606[1] }
        vip     = { defs={} expr=v1607[1] }
        id      = { defs={} expr=v1608[1] }
        ?22     = { defs={} expr=v1609[1] }
        ?23     = { defs={} expr=v1610[1] }
        ?24     = { defs={} expr=v1611[1] }
        ?25     = { defs={} expr=v1612[1] }
        ?26     = { defs={} expr=v1613[1] }
        ?27     = { defs={} expr=v1614[1] }
        ?28     = { defs={} expr=v1615[1] }
        ?29     = { defs={} expr=v1616[1] }
        ?30     = { defs={} expr=v1617[1] }
        ?31     = { defs={} expr=v1618[1] }
        ip      = { defs={0x0804836e,0x0804836f,0x08048375} expr=0x0804837b[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]) }
          value = { defs={} expr=v1698[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]) }
          value = { defs={} expr=v1696[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]) }
          value = { defs={} expr=v1694[8] }
          flags = { rdonly }
        address = { defs={0x0804836e,0x0804836f,0x08048375} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) }
          value = { defs={} expr=v1692[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1577[32] 3[32]) }
          value = { defs={} expr=v1631[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1577[32] 2[32]) }
          value = { defs={} expr=v1630[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1577[32] 1[32]) }
          value = { defs={} expr=v1629[8] }
          flags = { rdonly }
        address = { defs={0x0804836e} expr=v1577[32] }
          value = { defs={} expr=v1628[8] }
          flags = { rdonly }
0x804837b:test   edx, edx
    registers:
        ax      = { defs={} expr=v1573[32] }
        cx      = { defs={} expr=v1574[32] }
        dx      = { defs={0x08048375} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1693[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) v1692[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1695[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]) v1694[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1697[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]) v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1699[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]) v1698[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]))))) }
        bx      = { defs={0x0804836e,0x0804836f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) }
        sp      = { defs={0x0804836e} expr=(add[32] v1577[32] 4[32]) }
        bp      = { defs={} expr=v1578[32] }
        si      = { defs={} expr=v1579[32] }
        di      = { defs={} expr=v1580[32] }
        es      = { defs={} expr=v1581[16] }
        cs      = { defs={} expr=v1582[16] }
        ss      = { defs={} expr=v1583[16] }
        ds      = { defs={} expr=v1584[16] }
        fs      = { defs={} expr=v1585[16] }
        gs      = { defs={} expr=v1586[16] }
        cf      = { defs={0x0804837b} expr=0[1] }
        ?1      = { defs={} expr=v1588[1] }
        pf      = { defs={0x08048375,0x0804837b} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1693[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) v1692[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1695[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]) v1694[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1697[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]) v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1699[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]) v1698[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1693[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) v1692[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1695[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]) v1694[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1697[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]) v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1699[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]) v1698[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32])))))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1693[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) v1692[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1695[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]) v1694[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1697[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]) v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1699[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]) v1698[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1693[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) v1692[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1695[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]) v1694[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1697[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]) v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1699[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]) v1698[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]))))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1693[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) v1692[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1695[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]) v1694[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1697[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]) v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1699[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]) v1698[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1693[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) v1692[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1695[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]) v1694[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1697[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]) v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1699[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]) v1698[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32])))))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1693[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) v1692[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1695[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]) v1694[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1697[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]) v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1699[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]) v1698[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1693[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) v1692[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1695[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]) v1694[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1697[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]) v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1699[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]) v1698[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32])))))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1693[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) v1692[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1695[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]) v1694[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1697[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]) v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1699[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]) v1698[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1693[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) v1692[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1695[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]) v1694[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1697[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]) v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1699[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]) v1698[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32])))))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1693[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) v1692[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1695[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]) v1694[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1697[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]) v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1699[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]) v1698[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1693[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) v1692[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1695[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]) v1694[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1697[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]) v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1699[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]) v1698[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]))))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1693[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) v1692[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1695[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]) v1694[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1697[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]) v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1699[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]) v1698[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1693[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) v1692[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1695[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]) v1694[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1697[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]) v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1699[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]) v1698[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32])))))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1693[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) v1692[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1695[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]) v1694[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1697[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]) v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1699[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]) v1698[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1693[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) v1692[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1695[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]) v1694[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1697[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]) v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1699[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]) v1698[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32])))))))))))) }
        ?3      = { defs={} expr=v1590[1] }
        af      = { defs={0x0804837b} expr=v1736[1] }
        ?5      = { defs={} expr=v1592[1] }
        zf      = { defs={0x08048375,0x0804837b} expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1693[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) v1692[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1695[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]) v1694[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1697[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]) v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1699[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]) v1698[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1693[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) v1692[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1695[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]) v1694[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1697[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]) v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1699[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]) v1698[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]))))))) }
        sf      = { defs={0x08048375,0x0804837b} expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1693[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) v1692[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1695[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]) v1694[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1697[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]) v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1699[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]) v1698[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1693[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) v1692[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1695[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]) v1694[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1697[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]) v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1699[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]) v1698[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]))))))) }
        tf      = { defs={} expr=v1595[1] }
        if      = { defs={} expr=v1596[1] }
        df      = { defs={} expr=v1597[1] }
        of      = { defs={0x0804837b} expr=0[1] }
        iopl0   = { defs={} expr=v1599[1] }
        iopl1   = { defs={} expr=v1600[1] }
        nt      = { defs={} expr=v1601[1] }
        ?15     = { defs={} expr=v1602[1] }
        rf      = { defs={} expr=v1603[1] }
        vm      = { defs={} expr=v1604[1] }
        ac      = { defs={} expr=v1605[1] }
        vif     = { defs={} expr=v1606[1] }
        vip     = { defs={} expr=v1607[1] }
        id      = { defs={} expr=v1608[1] }
        ?22     = { defs={} expr=v1609[1] }
        ?23     = { defs={} expr=v1610[1] }
        ?24     = { defs={} expr=v1611[1] }
        ?25     = { defs={} expr=v1612[1] }
        ?26     = { defs={} expr=v1613[1] }
        ?27     = { defs={} expr=v1614[1] }
        ?28     = { defs={} expr=v1615[1] }
        ?29     = { defs={} expr=v1616[1] }
        ?30     = { defs={} expr=v1617[1] }
        ?31     = { defs={} expr=v1618[1] }
        ip      = { defs={0x0804836e,0x0804836f,0x08048375,0x0804837b} expr=0x0804837d[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]) }
          value = { defs={} expr=v1698[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]) }
          value = { defs={} expr=v1696[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]) }
          value = { defs={} expr=v1694[8] }
          flags = { rdonly }
        address = { defs={0x0804836e,0x0804836f,0x08048375} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) }
          value = { defs={} expr=v1692[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1577[32] 3[32]) }
          value = { defs={} expr=v1631[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1577[32] 2[32]) }
          value = { defs={} expr=v1630[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1577[32] 1[32]) }
          value = { defs={} expr=v1629[8] }
          flags = { rdonly }
        address = { defs={0x0804836e} expr=v1577[32] }
          value = { defs={} expr=v1628[8] }
          flags = { rdonly }
0x804837d:je     0x08048384<<Insn>>
    registers:
        ax      = { defs={} expr=v1573[32] }
        cx      = { defs={} expr=v1574[32] }
        dx      = { defs={0x08048375} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1693[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) v1692[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1695[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]) v1694[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1697[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]) v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1699[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]) v1698[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]))))) }
        bx      = { defs={0x0804836e,0x0804836f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) }
        sp      = { defs={0x0804836e} expr=(add[32] v1577[32] 4[32]) }
        bp      = { defs={} expr=v1578[32] }
        si      = { defs={} expr=v1579[32] }
        di      = { defs={} expr=v1580[32] }
        es      = { defs={} expr=v1581[16] }
        cs      = { defs={} expr=v1582[16] }
        ss      = { defs={} expr=v1583[16] }
        ds      = { defs={} expr=v1584[16] }
        fs      = { defs={} expr=v1585[16] }
        gs      = { defs={} expr=v1586[16] }
        cf      = { defs={0x0804837b} expr=0[1] }
        ?1      = { defs={} expr=v1588[1] }
        pf      = { defs={0x08048375,0x0804837b} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1693[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) v1692[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1695[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]) v1694[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1697[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]) v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1699[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]) v1698[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1693[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) v1692[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1695[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]) v1694[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1697[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]) v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1699[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]) v1698[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32])))))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1693[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) v1692[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1695[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]) v1694[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1697[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]) v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1699[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]) v1698[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1693[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) v1692[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1695[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]) v1694[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1697[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]) v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1699[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]) v1698[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]))))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1693[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) v1692[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1695[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]) v1694[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1697[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]) v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1699[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]) v1698[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1693[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) v1692[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1695[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]) v1694[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1697[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]) v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1699[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]) v1698[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32])))))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1693[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) v1692[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1695[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]) v1694[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1697[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]) v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1699[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]) v1698[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1693[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) v1692[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1695[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]) v1694[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1697[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]) v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1699[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]) v1698[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32])))))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1693[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) v1692[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1695[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]) v1694[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1697[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]) v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1699[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]) v1698[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1693[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) v1692[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1695[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]) v1694[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1697[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]) v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1699[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]) v1698[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32])))))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1693[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) v1692[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1695[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]) v1694[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1697[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]) v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1699[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]) v1698[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1693[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) v1692[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1695[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]) v1694[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1697[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]) v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1699[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]) v1698[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]))))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1693[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) v1692[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1695[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]) v1694[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1697[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]) v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1699[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]) v1698[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1693[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) v1692[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1695[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]) v1694[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1697[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]) v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1699[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]) v1698[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32])))))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1693[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) v1692[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1695[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]) v1694[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1697[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]) v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1699[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]) v1698[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1693[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) v1692[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1695[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]) v1694[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1697[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]) v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1699[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]) v1698[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32])))))))))))) }
        ?3      = { defs={} expr=v1590[1] }
        af      = { defs={0x0804837b} expr=v1736[1] }
        ?5      = { defs={} expr=v1592[1] }
        zf      = { defs={0x08048375,0x0804837b} expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1693[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) v1692[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1695[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]) v1694[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1697[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]) v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1699[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]) v1698[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1693[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) v1692[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1695[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]) v1694[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1697[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]) v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1699[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]) v1698[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]))))))) }
        sf      = { defs={0x08048375,0x0804837b} expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1693[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) v1692[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1695[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]) v1694[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1697[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]) v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1699[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]) v1698[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1693[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) v1692[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1695[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]) v1694[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1697[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]) v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1699[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]) v1698[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]))))))) }
        tf      = { defs={} expr=v1595[1] }
        if      = { defs={} expr=v1596[1] }
        df      = { defs={} expr=v1597[1] }
        of      = { defs={0x0804837b} expr=0[1] }
        iopl0   = { defs={} expr=v1599[1] }
        iopl1   = { defs={} expr=v1600[1] }
        nt      = { defs={} expr=v1601[1] }
        ?15     = { defs={} expr=v1602[1] }
        rf      = { defs={} expr=v1603[1] }
        vm      = { defs={} expr=v1604[1] }
        ac      = { defs={} expr=v1605[1] }
        vif     = { defs={} expr=v1606[1] }
        vip     = { defs={} expr=v1607[1] }
        id      = { defs={} expr=v1608[1] }
        ?22     = { defs={} expr=v1609[1] }
        ?23     = { defs={} expr=v1610[1] }
        ?24     = { defs={} expr=v1611[1] }
        ?25     = { defs={} expr=v1612[1] }
        ?26     = { defs={} expr=v1613[1] }
        ?27     = { defs={} expr=v1614[1] }
        ?28     = { defs={} expr=v1615[1] }
        ?29     = { defs={} expr=v1616[1] }
        ?30     = { defs={} expr=v1617[1] }
        ?31     = { defs={} expr=v1618[1] }
        ip      = { defs={0x0804836e,0x0804836f,0x08048375,0x0804837b,0x0804837d} expr=(ite[32] (zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1693[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) v1692[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1695[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]) v1694[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1697[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]) v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1699[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]) v1698[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1693[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) v1692[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1695[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]) v1694[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1697[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]) v1696[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1699[8] (add[32] v1577[32] 3[32]) v1631[8]) (add[32] v1577[32] 2[32]) v1630[8]) (add[32] v1577[32] 1[32]) v1629[8]) v1577[32] v1628[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]) v1698[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]))))))) 0x08048384[32] 0x0804837f[32]) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]) }
          value = { defs={} expr=v1698[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]) }
          value = { defs={} expr=v1696[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]) }
          value = { defs={} expr=v1694[8] }
          flags = { rdonly }
        address = { defs={0x0804836e,0x0804836f,0x08048375} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) }
          value = { defs={} expr=v1692[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1577[32] 3[32]) }
          value = { defs={} expr=v1631[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1577[32] 2[32]) }
          value = { defs={} expr=v1630[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1577[32] 1[32]) }
          value = { defs={} expr=v1629[8] }
          flags = { rdonly }
        address = { defs={0x0804836e} expr=v1577[32] }
          value = { defs={} expr=v1628[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804837f:call   0x08048330<__gmon_start__@plt>
    registers:
        ax      = { defs={} expr=v1794[32] }
        cx      = { defs={} expr=v1795[32] }
        dx      = { defs={} expr=v1796[32] }
        bx      = { defs={} expr=v1797[32] }
        sp      = { defs={0x0804837f} expr=(add[32] v1798[32] -4[32]) }
        bp      = { defs={} expr=v1799[32] }
        si      = { defs={} expr=v1800[32] }
        di      = { defs={} expr=v1801[32] }
        es      = { defs={} expr=v1802[16] }
        cs      = { defs={} expr=v1803[16] }
        ss      = { defs={} expr=v1804[16] }
        ds      = { defs={} expr=v1805[16] }
        fs      = { defs={} expr=v1806[16] }
        gs      = { defs={} expr=v1807[16] }
        cf      = { defs={} expr=v1808[1] }
        ?1      = { defs={} expr=v1809[1] }
        pf      = { defs={} expr=v1810[1] }
        ?3      = { defs={} expr=v1811[1] }
        af      = { defs={} expr=v1812[1] }
        ?5      = { defs={} expr=v1813[1] }
        zf      = { defs={} expr=v1814[1] }
        sf      = { defs={} expr=v1815[1] }
        tf      = { defs={} expr=v1816[1] }
        if      = { defs={} expr=v1817[1] }
        df      = { defs={} expr=v1818[1] }
        of      = { defs={} expr=v1819[1] }
        iopl0   = { defs={} expr=v1820[1] }
        iopl1   = { defs={} expr=v1821[1] }
        nt      = { defs={} expr=v1822[1] }
        ?15     = { defs={} expr=v1823[1] }
        rf      = { defs={} expr=v1824[1] }
        vm      = { defs={} expr=v1825[1] }
        ac      = { defs={} expr=v1826[1] }
        vif     = { defs={} expr=v1827[1] }
        vip     = { defs={} expr=v1828[1] }
        id      = { defs={} expr=v1829[1] }
        ?22     = { defs={} expr=v1830[1] }
        ?23     = { defs={} expr=v1831[1] }
        ?24     = { defs={} expr=v1832[1] }
        ?25     = { defs={} expr=v1833[1] }
        ?26     = { defs={} expr=v1834[1] }
        ?27     = { defs={} expr=v1835[1] }
        ?28     = { defs={} expr=v1836[1] }
        ?29     = { defs={} expr=v1837[1] }
        ?30     = { defs={} expr=v1838[1] }
        ?31     = { defs={} expr=v1839[1] }
        ip      = { defs={0x0804837f} expr=0x08048330[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v1798[32] -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1798[32] -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1798[32] -4[32]) 1[32]) }
          value = { defs={} expr=-125[8] }
          flags = { }
        address = { defs={0x0804837f} expr=(add[32] v1798[32] -4[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048384:pop    eax
    registers:
        ax      = { defs={0x08048384} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1952[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1953[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1954[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1955[8]))) }
        cx      = { defs={} expr=v1898[32] }
        dx      = { defs={} expr=v1899[32] }
        bx      = { defs={} expr=v1900[32] }
        sp      = { defs={0x08048384} expr=(add[32] v1901[32] 4[32]) }
        bp      = { defs={} expr=v1902[32] }
        si      = { defs={} expr=v1903[32] }
        di      = { defs={} expr=v1904[32] }
        es      = { defs={} expr=v1905[16] }
        cs      = { defs={} expr=v1906[16] }
        ss      = { defs={} expr=v1907[16] }
        ds      = { defs={} expr=v1908[16] }
        fs      = { defs={} expr=v1909[16] }
        gs      = { defs={} expr=v1910[16] }
        cf      = { defs={} expr=v1911[1] }
        ?1      = { defs={} expr=v1912[1] }
        pf      = { defs={} expr=v1913[1] }
        ?3      = { defs={} expr=v1914[1] }
        af      = { defs={} expr=v1915[1] }
        ?5      = { defs={} expr=v1916[1] }
        zf      = { defs={} expr=v1917[1] }
        sf      = { defs={} expr=v1918[1] }
        tf      = { defs={} expr=v1919[1] }
        if      = { defs={} expr=v1920[1] }
        df      = { defs={} expr=v1921[1] }
        of      = { defs={} expr=v1922[1] }
        iopl0   = { defs={} expr=v1923[1] }
        iopl1   = { defs={} expr=v1924[1] }
        nt      = { defs={} expr=v1925[1] }
        ?15     = { defs={} expr=v1926[1] }
        rf      = { defs={} expr=v1927[1] }
        vm      = { defs={} expr=v1928[1] }
        ac      = { defs={} expr=v1929[1] }
        vif     = { defs={} expr=v1930[1] }
        vip     = { defs={} expr=v1931[1] }
        id      = { defs={} expr=v1932[1] }
        ?22     = { defs={} expr=v1933[1] }
        ?23     = { defs={} expr=v1934[1] }
        ?24     = { defs={} expr=v1935[1] }
        ?25     = { defs={} expr=v1936[1] }
        ?26     = { defs={} expr=v1937[1] }
        ?27     = { defs={} expr=v1938[1] }
        ?28     = { defs={} expr=v1939[1] }
        ?29     = { defs={} expr=v1940[1] }
        ?30     = { defs={} expr=v1941[1] }
        ?31     = { defs={} expr=v1942[1] }
        ip      = { defs={0x08048384} expr=0x08048385[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v1901[32] 3[32]) }
          value = { defs={} expr=v1955[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1901[32] 2[32]) }
          value = { defs={} expr=v1954[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1901[32] 1[32]) }
          value = { defs={} expr=v1953[8] }
          flags = { rdonly }
        address = { defs={0x08048384} expr=v1901[32] }
          value = { defs={} expr=v1952[8] }
          flags = { rdonly }
0x8048385:pop    ebx
    registers:
        ax      = { defs={0x08048384} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1952[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1953[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1954[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1955[8]))) }
        cx      = { defs={} expr=v1898[32] }
        dx      = { defs={} expr=v1899[32] }
        bx      = { defs={0x08048385} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1969[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1970[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1971[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1972[8]))) }
        sp      = { defs={0x08048384,0x08048385} expr=(add[32] (add[32] v1901[32] 4[32]) 4[32]) }
        bp      = { defs={} expr=v1902[32] }
        si      = { defs={} expr=v1903[32] }
        di      = { defs={} expr=v1904[32] }
        es      = { defs={} expr=v1905[16] }
        cs      = { defs={} expr=v1906[16] }
        ss      = { defs={} expr=v1907[16] }
        ds      = { defs={} expr=v1908[16] }
        fs      = { defs={} expr=v1909[16] }
        gs      = { defs={} expr=v1910[16] }
        cf      = { defs={} expr=v1911[1] }
        ?1      = { defs={} expr=v1912[1] }
        pf      = { defs={} expr=v1913[1] }
        ?3      = { defs={} expr=v1914[1] }
        af      = { defs={} expr=v1915[1] }
        ?5      = { defs={} expr=v1916[1] }
        zf      = { defs={} expr=v1917[1] }
        sf      = { defs={} expr=v1918[1] }
        tf      = { defs={} expr=v1919[1] }
        if      = { defs={} expr=v1920[1] }
        df      = { defs={} expr=v1921[1] }
        of      = { defs={} expr=v1922[1] }
        iopl0   = { defs={} expr=v1923[1] }
        iopl1   = { defs={} expr=v1924[1] }
        nt      = { defs={} expr=v1925[1] }
        ?15     = { defs={} expr=v1926[1] }
        rf      = { defs={} expr=v1927[1] }
        vm      = { defs={} expr=v1928[1] }
        ac      = { defs={} expr=v1929[1] }
        vif     = { defs={} expr=v1930[1] }
        vip     = { defs={} expr=v1931[1] }
        id      = { defs={} expr=v1932[1] }
        ?22     = { defs={} expr=v1933[1] }
        ?23     = { defs={} expr=v1934[1] }
        ?24     = { defs={} expr=v1935[1] }
        ?25     = { defs={} expr=v1936[1] }
        ?26     = { defs={} expr=v1937[1] }
        ?27     = { defs={} expr=v1938[1] }
        ?28     = { defs={} expr=v1939[1] }
        ?29     = { defs={} expr=v1940[1] }
        ?30     = { defs={} expr=v1941[1] }
        ?31     = { defs={} expr=v1942[1] }
        ip      = { defs={0x08048384,0x08048385} expr=0x08048386[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v1901[32] 4[32]) 3[32]) }
          value = { defs={} expr=v1972[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v1901[32] 4[32]) 2[32]) }
          value = { defs={} expr=v1971[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v1901[32] 4[32]) 1[32]) }
          value = { defs={} expr=v1970[8] }
          flags = { rdonly }
        address = { defs={0x08048384,0x08048385} expr=(add[32] v1901[32] 4[32]) }
          value = { defs={} expr=v1969[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1901[32] 3[32]) }
          value = { defs={} expr=v1955[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1901[32] 2[32]) }
          value = { defs={} expr=v1954[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1901[32] 1[32]) }
          value = { defs={} expr=v1953[8] }
          flags = { rdonly }
        address = { defs={0x08048384} expr=v1901[32] }
          value = { defs={} expr=v1952[8] }
          flags = { rdonly }
0x8048386:leave  
    registers:
        ax      = { defs={0x08048384} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1952[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1953[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1954[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1955[8]))) }
        cx      = { defs={} expr=v1898[32] }
        dx      = { defs={} expr=v1899[32] }
        bx      = { defs={0x08048385} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1969[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1970[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1971[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1972[8]))) }
        sp      = { defs={0x08048386} expr=(add[32] v1902[32] 4[32]) }
        bp      = { defs={0x08048386} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1988[8] (add[32] (add[32] v1901[32] 4[32]) 3[32]) v1972[8]) (add[32] (add[32] v1901[32] 4[32]) 2[32]) v1971[8]) (add[32] (add[32] v1901[32] 4[32]) 1[32]) v1970[8]) (add[32] v1901[32] 4[32]) v1969[8]) (add[32] v1901[32] 3[32]) v1955[8]) (add[32] v1901[32] 2[32]) v1954[8]) (add[32] v1901[32] 1[32]) v1953[8]) v1901[32] v1952[8]) v1902[32] v1987[8]) v1902[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1990[8] (add[32] (add[32] v1901[32] 4[32]) 3[32]) v1972[8]) (add[32] (add[32] v1901[32] 4[32]) 2[32]) v1971[8]) (add[32] (add[32] v1901[32] 4[32]) 1[32]) v1970[8]) (add[32] v1901[32] 4[32]) v1969[8]) (add[32] v1901[32] 3[32]) v1955[8]) (add[32] v1901[32] 2[32]) v1954[8]) (add[32] v1901[32] 1[32]) v1953[8]) v1901[32] v1952[8]) (add[32] v1902[32] 1[32]) v1989[8]) (add[32] v1902[32] 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1992[8] (add[32] (add[32] v1901[32] 4[32]) 3[32]) v1972[8]) (add[32] (add[32] v1901[32] 4[32]) 2[32]) v1971[8]) (add[32] (add[32] v1901[32] 4[32]) 1[32]) v1970[8]) (add[32] v1901[32] 4[32]) v1969[8]) (add[32] v1901[32] 3[32]) v1955[8]) (add[32] v1901[32] 2[32]) v1954[8]) (add[32] v1901[32] 1[32]) v1953[8]) v1901[32] v1952[8]) (add[32] v1902[32] 2[32]) v1991[8]) (add[32] v1902[32] 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1994[8] (add[32] (add[32] v1901[32] 4[32]) 3[32]) v1972[8]) (add[32] (add[32] v1901[32] 4[32]) 2[32]) v1971[8]) (add[32] (add[32] v1901[32] 4[32]) 1[32]) v1970[8]) (add[32] v1901[32] 4[32]) v1969[8]) (add[32] v1901[32] 3[32]) v1955[8]) (add[32] v1901[32] 2[32]) v1954[8]) (add[32] v1901[32] 1[32]) v1953[8]) v1901[32] v1952[8]) (add[32] v1902[32] 3[32]) v1993[8]) (add[32] v1902[32] 3[32]))))) }
        si      = { defs={} expr=v1903[32] }
        di      = { defs={} expr=v1904[32] }
        es      = { defs={} expr=v1905[16] }
        cs      = { defs={} expr=v1906[16] }
        ss      = { defs={} expr=v1907[16] }
        ds      = { defs={} expr=v1908[16] }
        fs      = { defs={} expr=v1909[16] }
        gs      = { defs={} expr=v1910[16] }
        cf      = { defs={} expr=v1911[1] }
        ?1      = { defs={} expr=v1912[1] }
        pf      = { defs={} expr=v1913[1] }
        ?3      = { defs={} expr=v1914[1] }
        af      = { defs={} expr=v1915[1] }
        ?5      = { defs={} expr=v1916[1] }
        zf      = { defs={} expr=v1917[1] }
        sf      = { defs={} expr=v1918[1] }
        tf      = { defs={} expr=v1919[1] }
        if      = { defs={} expr=v1920[1] }
        df      = { defs={} expr=v1921[1] }
        of      = { defs={} expr=v1922[1] }
        iopl0   = { defs={} expr=v1923[1] }
        iopl1   = { defs={} expr=v1924[1] }
        nt      = { defs={} expr=v1925[1] }
        ?15     = { defs={} expr=v1926[1] }
        rf      = { defs={} expr=v1927[1] }
        vm      = { defs={} expr=v1928[1] }
        ac      = { defs={} expr=v1929[1] }
        vif     = { defs={} expr=v1930[1] }
        vip     = { defs={} expr=v1931[1] }
        id      = { defs={} expr=v1932[1] }
        ?22     = { defs={} expr=v1933[1] }
        ?23     = { defs={} expr=v1934[1] }
        ?24     = { defs={} expr=v1935[1] }
        ?25     = { defs={} expr=v1936[1] }
        ?26     = { defs={} expr=v1937[1] }
        ?27     = { defs={} expr=v1938[1] }
        ?28     = { defs={} expr=v1939[1] }
        ?29     = { defs={} expr=v1940[1] }
        ?30     = { defs={} expr=v1941[1] }
        ?31     = { defs={} expr=v1942[1] }
        ip      = { defs={0x08048384,0x08048385,0x08048386} expr=0x08048387[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v1902[32] 3[32]) }
          value = { defs={} expr=v1993[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1902[32] 2[32]) }
          value = { defs={} expr=v1991[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1902[32] 1[32]) }
          value = { defs={} expr=v1989[8] }
          flags = { rdonly }
        address = { defs={0x08048386} expr=v1902[32] }
          value = { defs={} expr=v1987[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v1901[32] 4[32]) 3[32]) }
          value = { defs={} expr=v1972[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v1901[32] 4[32]) 2[32]) }
          value = { defs={} expr=v1971[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v1901[32] 4[32]) 1[32]) }
          value = { defs={} expr=v1970[8] }
          flags = { rdonly }
        address = { defs={0x08048384,0x08048385} expr=(add[32] v1901[32] 4[32]) }
          value = { defs={} expr=v1969[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1901[32] 3[32]) }
          value = { defs={} expr=v1955[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1901[32] 2[32]) }
          value = { defs={} expr=v1954[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1901[32] 1[32]) }
          value = { defs={} expr=v1953[8] }
          flags = { rdonly }
        address = { defs={0x08048384} expr=v1901[32] }
          value = { defs={} expr=v1952[8] }
          flags = { rdonly }
0x8048387:ret    
    registers:
        ax      = { defs={0x08048384} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1952[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1953[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1954[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1955[8]))) }
        cx      = { defs={} expr=v1898[32] }
        dx      = { defs={} expr=v1899[32] }
        bx      = { defs={0x08048385} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1969[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1970[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1971[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1972[8]))) }
        sp      = { defs={0x08048386,0x08048387} expr=(add[32] (add[32] v1902[32] 4[32]) 4[32]) }
        bp      = { defs={0x08048386} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1988[8] (add[32] (add[32] v1901[32] 4[32]) 3[32]) v1972[8]) (add[32] (add[32] v1901[32] 4[32]) 2[32]) v1971[8]) (add[32] (add[32] v1901[32] 4[32]) 1[32]) v1970[8]) (add[32] v1901[32] 4[32]) v1969[8]) (add[32] v1901[32] 3[32]) v1955[8]) (add[32] v1901[32] 2[32]) v1954[8]) (add[32] v1901[32] 1[32]) v1953[8]) v1901[32] v1952[8]) v1902[32] v1987[8]) v1902[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1990[8] (add[32] (add[32] v1901[32] 4[32]) 3[32]) v1972[8]) (add[32] (add[32] v1901[32] 4[32]) 2[32]) v1971[8]) (add[32] (add[32] v1901[32] 4[32]) 1[32]) v1970[8]) (add[32] v1901[32] 4[32]) v1969[8]) (add[32] v1901[32] 3[32]) v1955[8]) (add[32] v1901[32] 2[32]) v1954[8]) (add[32] v1901[32] 1[32]) v1953[8]) v1901[32] v1952[8]) (add[32] v1902[32] 1[32]) v1989[8]) (add[32] v1902[32] 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1992[8] (add[32] (add[32] v1901[32] 4[32]) 3[32]) v1972[8]) (add[32] (add[32] v1901[32] 4[32]) 2[32]) v1971[8]) (add[32] (add[32] v1901[32] 4[32]) 1[32]) v1970[8]) (add[32] v1901[32] 4[32]) v1969[8]) (add[32] v1901[32] 3[32]) v1955[8]) (add[32] v1901[32] 2[32]) v1954[8]) (add[32] v1901[32] 1[32]) v1953[8]) v1901[32] v1952[8]) (add[32] v1902[32] 2[32]) v1991[8]) (add[32] v1902[32] 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1994[8] (add[32] (add[32] v1901[32] 4[32]) 3[32]) v1972[8]) (add[32] (add[32] v1901[32] 4[32]) 2[32]) v1971[8]) (add[32] (add[32] v1901[32] 4[32]) 1[32]) v1970[8]) (add[32] v1901[32] 4[32]) v1969[8]) (add[32] v1901[32] 3[32]) v1955[8]) (add[32] v1901[32] 2[32]) v1954[8]) (add[32] v1901[32] 1[32]) v1953[8]) v1901[32] v1952[8]) (add[32] v1902[32] 3[32]) v1993[8]) (add[32] v1902[32] 3[32]))))) }
        si      = { defs={} expr=v1903[32] }
        di      = { defs={} expr=v1904[32] }
        es      = { defs={} expr=v1905[16] }
        cs      = { defs={} expr=v1906[16] }
        ss      = { defs={} expr=v1907[16] }
        ds      = { defs={} expr=v1908[16] }
        fs      = { defs={} expr=v1909[16] }
        gs      = { defs={} expr=v1910[16] }
        cf      = { defs={} expr=v1911[1] }
        ?1      = { defs={} expr=v1912[1] }
        pf      = { defs={} expr=v1913[1] }
        ?3      = { defs={} expr=v1914[1] }
        af      = { defs={} expr=v1915[1] }
        ?5      = { defs={} expr=v1916[1] }
        zf      = { defs={} expr=v1917[1] }
        sf      = { defs={} expr=v1918[1] }
        tf      = { defs={} expr=v1919[1] }
        if      = { defs={} expr=v1920[1] }
        df      = { defs={} expr=v1921[1] }
        of      = { defs={} expr=v1922[1] }
        iopl0   = { defs={} expr=v1923[1] }
        iopl1   = { defs={} expr=v1924[1] }
        nt      = { defs={} expr=v1925[1] }
        ?15     = { defs={} expr=v1926[1] }
        rf      = { defs={} expr=v1927[1] }
        vm      = { defs={} expr=v1928[1] }
        ac      = { defs={} expr=v1929[1] }
        vif     = { defs={} expr=v1930[1] }
        vip     = { defs={} expr=v1931[1] }
        id      = { defs={} expr=v1932[1] }
        ?22     = { defs={} expr=v1933[1] }
        ?23     = { defs={} expr=v1934[1] }
        ?24     = { defs={} expr=v1935[1] }
        ?25     = { defs={} expr=v1936[1] }
        ?26     = { defs={} expr=v1937[1] }
        ?27     = { defs={} expr=v1938[1] }
        ?28     = { defs={} expr=v1939[1] }
        ?29     = { defs={} expr=v1940[1] }
        ?30     = { defs={} expr=v1941[1] }
        ?31     = { defs={} expr=v1942[1] }
        ip      = { defs={0x08048387} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2010[8] (add[32] (add[32] v1901[32] 4[32]) 3[32]) v1972[8]) (add[32] (add[32] v1901[32] 4[32]) 2[32]) v1971[8]) (add[32] (add[32] v1901[32] 4[32]) 1[32]) v1970[8]) (add[32] v1901[32] 4[32]) v1969[8]) (add[32] v1901[32] 3[32]) v1955[8]) (add[32] v1901[32] 2[32]) v1954[8]) (add[32] v1901[32] 1[32]) v1953[8]) v1901[32] v1952[8]) (add[32] v1902[32] 4[32]) v2009[8]) (add[32] v1902[32] 4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2012[8] (add[32] (add[32] v1901[32] 4[32]) 3[32]) v1972[8]) (add[32] (add[32] v1901[32] 4[32]) 2[32]) v1971[8]) (add[32] (add[32] v1901[32] 4[32]) 1[32]) v1970[8]) (add[32] v1901[32] 4[32]) v1969[8]) (add[32] v1901[32] 3[32]) v1955[8]) (add[32] v1901[32] 2[32]) v1954[8]) (add[32] v1901[32] 1[32]) v1953[8]) v1901[32] v1952[8]) (add[32] (add[32] v1902[32] 4[32]) 1[32]) v2011[8]) (add[32] (add[32] v1902[32] 4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2014[8] (add[32] (add[32] v1901[32] 4[32]) 3[32]) v1972[8]) (add[32] (add[32] v1901[32] 4[32]) 2[32]) v1971[8]) (add[32] (add[32] v1901[32] 4[32]) 1[32]) v1970[8]) (add[32] v1901[32] 4[32]) v1969[8]) (add[32] v1901[32] 3[32]) v1955[8]) (add[32] v1901[32] 2[32]) v1954[8]) (add[32] v1901[32] 1[32]) v1953[8]) v1901[32] v1952[8]) (add[32] (add[32] v1902[32] 4[32]) 2[32]) v2013[8]) (add[32] (add[32] v1902[32] 4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2016[8] (add[32] (add[32] v1901[32] 4[32]) 3[32]) v1972[8]) (add[32] (add[32] v1901[32] 4[32]) 2[32]) v1971[8]) (add[32] (add[32] v1901[32] 4[32]) 1[32]) v1970[8]) (add[32] v1901[32] 4[32]) v1969[8]) (add[32] v1901[32] 3[32]) v1955[8]) (add[32] v1901[32] 2[32]) v1954[8]) (add[32] v1901[32] 1[32]) v1953[8]) v1901[32] v1952[8]) (add[32] (add[32] v1902[32] 4[32]) 3[32]) v2015[8]) (add[32] (add[32] v1902[32] 4[32]) 3[32]))))) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v1902[32] 4[32]) 3[32]) }
          value = { defs={} expr=v2015[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v1902[32] 4[32]) 2[32]) }
          value = { defs={} expr=v2013[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v1902[32] 4[32]) 1[32]) }
          value = { defs={} expr=v2011[8] }
          flags = { rdonly }
        address = { defs={0x08048386,0x08048387} expr=(add[32] v1902[32] 4[32]) }
          value = { defs={} expr=v2009[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1902[32] 3[32]) }
          value = { defs={} expr=v1993[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1902[32] 2[32]) }
          value = { defs={} expr=v1991[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1902[32] 1[32]) }
          value = { defs={} expr=v1989[8] }
          flags = { rdonly }
        address = { defs={0x08048386} expr=v1902[32] }
          value = { defs={} expr=v1987[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v1901[32] 4[32]) 3[32]) }
          value = { defs={} expr=v1972[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v1901[32] 4[32]) 2[32]) }
          value = { defs={} expr=v1971[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v1901[32] 4[32]) 1[32]) }
          value = { defs={} expr=v1970[8] }
          flags = { rdonly }
        address = { defs={0x08048384,0x08048385} expr=(add[32] v1901[32] 4[32]) }
          value = { defs={} expr=v1969[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1901[32] 3[32]) }
          value = { defs={} expr=v1955[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1901[32] 2[32]) }
          value = { defs={} expr=v1954[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1901[32] 1[32]) }
          value = { defs={} expr=v1953[8] }
          flags = { rdonly }
        address = { defs={0x08048384} expr=v1901[32] }
          value = { defs={} expr=v1952[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048390:push   ebp
    registers:
        ax      = { defs={} expr=v2071[32] }
        cx      = { defs={} expr=v2072[32] }
        dx      = { defs={} expr=v2073[32] }
        bx      = { defs={} expr=v2074[32] }
        sp      = { defs={0x08048390} expr=(add[32] v2075[32] -4[32]) }
        bp      = { defs={} expr=v2076[32] }
        si      = { defs={} expr=v2077[32] }
        di      = { defs={} expr=v2078[32] }
        es      = { defs={} expr=v2079[16] }
        cs      = { defs={} expr=v2080[16] }
        ss      = { defs={} expr=v2081[16] }
        ds      = { defs={} expr=v2082[16] }
        fs      = { defs={} expr=v2083[16] }
        gs      = { defs={} expr=v2084[16] }
        cf      = { defs={} expr=v2085[1] }
        ?1      = { defs={} expr=v2086[1] }
        pf      = { defs={} expr=v2087[1] }
        ?3      = { defs={} expr=v2088[1] }
        af      = { defs={} expr=v2089[1] }
        ?5      = { defs={} expr=v2090[1] }
        zf      = { defs={} expr=v2091[1] }
        sf      = { defs={} expr=v2092[1] }
        tf      = { defs={} expr=v2093[1] }
        if      = { defs={} expr=v2094[1] }
        df      = { defs={} expr=v2095[1] }
        of      = { defs={} expr=v2096[1] }
        iopl0   = { defs={} expr=v2097[1] }
        iopl1   = { defs={} expr=v2098[1] }
        nt      = { defs={} expr=v2099[1] }
        ?15     = { defs={} expr=v2100[1] }
        rf      = { defs={} expr=v2101[1] }
        vm      = { defs={} expr=v2102[1] }
        ac      = { defs={} expr=v2103[1] }
        vif     = { defs={} expr=v2104[1] }
        vip     = { defs={} expr=v2105[1] }
        id      = { defs={} expr=v2106[1] }
        ?22     = { defs={} expr=v2107[1] }
        ?23     = { defs={} expr=v2108[1] }
        ?24     = { defs={} expr=v2109[1] }
        ?25     = { defs={} expr=v2110[1] }
        ?26     = { defs={} expr=v2111[1] }
        ?27     = { defs={} expr=v2112[1] }
        ?28     = { defs={} expr=v2113[1] }
        ?29     = { defs={} expr=v2114[1] }
        ?30     = { defs={} expr=v2115[1] }
        ?31     = { defs={} expr=v2116[1] }
        ip      = { defs={0x08048390} expr=0x08048391[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2075[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2076[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2075[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2076[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2075[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2076[32]) }
          flags = { }
        address = { defs={0x08048390} expr=(add[32] v2075[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2076[32]) }
          flags = { }
    init mem:
0x8048391:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v2071[32] }
        cx      = { defs={} expr=v2072[32] }
        dx      = { defs={} expr=v2073[32] }
        bx      = { defs={} expr=v2074[32] }
        sp      = { defs={0x08048390} expr=(add[32] v2075[32] -4[32]) }
        bp      = { defs={0x08048390,0x08048391} expr=(add[32] v2075[32] -4[32]) }
        si      = { defs={} expr=v2077[32] }
        di      = { defs={} expr=v2078[32] }
        es      = { defs={} expr=v2079[16] }
        cs      = { defs={} expr=v2080[16] }
        ss      = { defs={} expr=v2081[16] }
        ds      = { defs={} expr=v2082[16] }
        fs      = { defs={} expr=v2083[16] }
        gs      = { defs={} expr=v2084[16] }
        cf      = { defs={} expr=v2085[1] }
        ?1      = { defs={} expr=v2086[1] }
        pf      = { defs={} expr=v2087[1] }
        ?3      = { defs={} expr=v2088[1] }
        af      = { defs={} expr=v2089[1] }
        ?5      = { defs={} expr=v2090[1] }
        zf      = { defs={} expr=v2091[1] }
        sf      = { defs={} expr=v2092[1] }
        tf      = { defs={} expr=v2093[1] }
        if      = { defs={} expr=v2094[1] }
        df      = { defs={} expr=v2095[1] }
        of      = { defs={} expr=v2096[1] }
        iopl0   = { defs={} expr=v2097[1] }
        iopl1   = { defs={} expr=v2098[1] }
        nt      = { defs={} expr=v2099[1] }
        ?15     = { defs={} expr=v2100[1] }
        rf      = { defs={} expr=v2101[1] }
        vm      = { defs={} expr=v2102[1] }
        ac      = { defs={} expr=v2103[1] }
        vif     = { defs={} expr=v2104[1] }
        vip     = { defs={} expr=v2105[1] }
        id      = { defs={} expr=v2106[1] }
        ?22     = { defs={} expr=v2107[1] }
        ?23     = { defs={} expr=v2108[1] }
        ?24     = { defs={} expr=v2109[1] }
        ?25     = { defs={} expr=v2110[1] }
        ?26     = { defs={} expr=v2111[1] }
        ?27     = { defs={} expr=v2112[1] }
        ?28     = { defs={} expr=v2113[1] }
        ?29     = { defs={} expr=v2114[1] }
        ?30     = { defs={} expr=v2115[1] }
        ?31     = { defs={} expr=v2116[1] }
        ip      = { defs={0x08048390,0x08048391} expr=0x08048393[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2075[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2076[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2075[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2076[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2075[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2076[32]) }
          flags = { }
        address = { defs={0x08048390} expr=(add[32] v2075[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2076[32]) }
          flags = { }
    init mem:
0x8048393:sub    esp, 0x08
    registers:
        ax      = { defs={} expr=v2071[32] }
        cx      = { defs={} expr=v2072[32] }
        dx      = { defs={} expr=v2073[32] }
        bx      = { defs={} expr=v2074[32] }
        sp      = { defs={0x08048390,0x08048393} expr=(add[32] (add[32] v2075[32] -4[32]) -8[32]) }
        bp      = { defs={0x08048390,0x08048391} expr=(add[32] v2075[32] -4[32]) }
        si      = { defs={} expr=v2077[32] }
        di      = { defs={} expr=v2078[32] }
        es      = { defs={} expr=v2079[16] }
        cs      = { defs={} expr=v2080[16] }
        ss      = { defs={} expr=v2081[16] }
        ds      = { defs={} expr=v2082[16] }
        fs      = { defs={} expr=v2083[16] }
        gs      = { defs={} expr=v2084[16] }
        cf      = { defs={0x08048390,0x08048393} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2075[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2075[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v2086[1] }
        pf      = { defs={0x08048390,0x08048393} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2075[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2075[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2075[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2075[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2075[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2075[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2075[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2075[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v2088[1] }
        af      = { defs={0x08048390,0x08048393} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2075[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2075[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v2090[1] }
        zf      = { defs={0x08048390,0x08048393} expr=(zerop[1] (add[32] (add[32] v2075[32] -4[32]) -8[32])) }
        sf      = { defs={0x08048390,0x08048393} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v2075[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v2093[1] }
        if      = { defs={} expr=v2094[1] }
        df      = { defs={} expr=v2095[1] }
        of      = { defs={0x08048390,0x08048393} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2075[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2075[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2075[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2075[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v2097[1] }
        iopl1   = { defs={} expr=v2098[1] }
        nt      = { defs={} expr=v2099[1] }
        ?15     = { defs={} expr=v2100[1] }
        rf      = { defs={} expr=v2101[1] }
        vm      = { defs={} expr=v2102[1] }
        ac      = { defs={} expr=v2103[1] }
        vif     = { defs={} expr=v2104[1] }
        vip     = { defs={} expr=v2105[1] }
        id      = { defs={} expr=v2106[1] }
        ?22     = { defs={} expr=v2107[1] }
        ?23     = { defs={} expr=v2108[1] }
        ?24     = { defs={} expr=v2109[1] }
        ?25     = { defs={} expr=v2110[1] }
        ?26     = { defs={} expr=v2111[1] }
        ?27     = { defs={} expr=v2112[1] }
        ?28     = { defs={} expr=v2113[1] }
        ?29     = { defs={} expr=v2114[1] }
        ?30     = { defs={} expr=v2115[1] }
        ?31     = { defs={} expr=v2116[1] }
        ip      = { defs={0x08048390,0x08048391,0x08048393} expr=0x08048396[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2075[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2076[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2075[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2076[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2075[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2076[32]) }
          flags = { }
        address = { defs={0x08048390} expr=(add[32] v2075[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2076[32]) }
          flags = { }
    init mem:
0x8048396:cmp    BYTE PTR ds:[0x080496f4<.bss>], 0x00
    registers:
        ax      = { defs={} expr=v2071[32] }
        cx      = { defs={} expr=v2072[32] }
        dx      = { defs={} expr=v2073[32] }
        bx      = { defs={} expr=v2074[32] }
        sp      = { defs={0x08048390,0x08048393} expr=(add[32] (add[32] v2075[32] -4[32]) -8[32]) }
        bp      = { defs={0x08048390,0x08048391} expr=(add[32] v2075[32] -4[32]) }
        si      = { defs={} expr=v2077[32] }
        di      = { defs={} expr=v2078[32] }
        es      = { defs={} expr=v2079[16] }
        cs      = { defs={} expr=v2080[16] }
        ss      = { defs={} expr=v2081[16] }
        ds      = { defs={} expr=v2082[16] }
        fs      = { defs={} expr=v2083[16] }
        gs      = { defs={} expr=v2084[16] }
        cf      = { defs={0x08048396} expr=(invert[1] (extract[1] 7[32] 8[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2189[8] (add[32] (add[32] v2075[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2076[32])) (add[32] (add[32] v2075[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2076[32])) (add[32] (add[32] v2075[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2076[32])) (add[32] v2075[32] -4[32]) (extract[8] 0[32] 8[32] v2076[32])) 0x080496f4[32] v2188[8]) 0x080496f4[32])) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2189[8] (add[32] (add[32] v2075[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2076[32])) (add[32] (add[32] v2075[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2076[32])) (add[32] (add[32] v2075[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2076[32])) (add[32] v2075[32] -4[32]) (extract[8] 0[32] 8[32] v2076[32])) 0x080496f4[32] v2188[8]) 0x080496f4[32])) -256[9])))))) }
        ?1      = { defs={} expr=v2086[1] }
        pf      = { defs={0x08048396} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2189[8] (add[32] (add[32] v2075[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2076[32])) (add[32] (add[32] v2075[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2076[32])) (add[32] (add[32] v2075[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2076[32])) (add[32] v2075[32] -4[32]) (extract[8] 0[32] 8[32] v2076[32])) 0x080496f4[32] v2188[8]) 0x080496f4[32])) (extract[1] 1[32] 2[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2189[8] (add[32] (add[32] v2075[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2076[32])) (add[32] (add[32] v2075[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2076[32])) (add[32] (add[32] v2075[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2076[32])) (add[32] v2075[32] -4[32]) (extract[8] 0[32] 8[32] v2076[32])) 0x080496f4[32] v2188[8]) 0x080496f4[32]))) (bv-xor[1] (extract[1] 2[32] 3[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2189[8] (add[32] (add[32] v2075[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2076[32])) (add[32] (add[32] v2075[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2076[32])) (add[32] (add[32] v2075[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2076[32])) (add[32] v2075[32] -4[32]) (extract[8] 0[32] 8[32] v2076[32])) 0x080496f4[32] v2188[8]) 0x080496f4[32])) (extract[1] 3[32] 4[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2189[8] (add[32] (add[32] v2075[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2076[32])) (add[32] (add[32] v2075[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2076[32])) (add[32] (add[32] v2075[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2076[32])) (add[32] v2075[32] -4[32]) (extract[8] 0[32] 8[32] v2076[32])) 0x080496f4[32] v2188[8]) 0x080496f4[32])))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2189[8] (add[32] (add[32] v2075[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2076[32])) (add[32] (add[32] v2075[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2076[32])) (add[32] (add[32] v2075[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2076[32])) (add[32] v2075[32] -4[32]) (extract[8] 0[32] 8[32] v2076[32])) 0x080496f4[32] v2188[8]) 0x080496f4[32])) (extract[1] 5[32] 6[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2189[8] (add[32] (add[32] v2075[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2076[32])) (add[32] (add[32] v2075[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2076[32])) (add[32] (add[32] v2075[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2076[32])) (add[32] v2075[32] -4[32]) (extract[8] 0[32] 8[32] v2076[32])) 0x080496f4[32] v2188[8]) 0x080496f4[32]))) (bv-xor[1] (extract[1] 6[32] 7[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2189[8] (add[32] (add[32] v2075[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2076[32])) (add[32] (add[32] v2075[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2076[32])) (add[32] (add[32] v2075[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2076[32])) (add[32] v2075[32] -4[32]) (extract[8] 0[32] 8[32] v2076[32])) 0x080496f4[32] v2188[8]) 0x080496f4[32])) (extract[1] 7[32] 8[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2189[8] (add[32] (add[32] v2075[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2076[32])) (add[32] (add[32] v2075[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2076[32])) (add[32] (add[32] v2075[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2076[32])) (add[32] v2075[32] -4[32]) (extract[8] 0[32] 8[32] v2076[32])) 0x080496f4[32] v2188[8]) 0x080496f4[32])))))) }
        ?3      = { defs={} expr=v2088[1] }
        af      = { defs={0x08048396} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2189[8] (add[32] (add[32] v2075[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2076[32])) (add[32] (add[32] v2075[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2076[32])) (add[32] (add[32] v2075[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2076[32])) (add[32] v2075[32] -4[32]) (extract[8] 0[32] 8[32] v2076[32])) 0x080496f4[32] v2188[8]) 0x080496f4[32])) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2189[8] (add[32] (add[32] v2075[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2076[32])) (add[32] (add[32] v2075[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2076[32])) (add[32] (add[32] v2075[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2076[32])) (add[32] v2075[32] -4[32]) (extract[8] 0[32] 8[32] v2076[32])) 0x080496f4[32] v2188[8]) 0x080496f4[32])) -256[9])))))) }
        ?5      = { defs={} expr=v2090[1] }
        zf      = { defs={0x08048396} expr=(zerop[1] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2189[8] (add[32] (add[32] v2075[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2076[32])) (add[32] (add[32] v2075[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2076[32])) (add[32] (add[32] v2075[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2076[32])) (add[32] v2075[32] -4[32]) (extract[8] 0[32] 8[32] v2076[32])) 0x080496f4[32] v2188[8]) 0x080496f4[32])) }
        sf      = { defs={0x08048396} expr=(extract[1] 7[32] 8[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2189[8] (add[32] (add[32] v2075[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2076[32])) (add[32] (add[32] v2075[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2076[32])) (add[32] (add[32] v2075[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2076[32])) (add[32] v2075[32] -4[32]) (extract[8] 0[32] 8[32] v2076[32])) 0x080496f4[32] v2188[8]) 0x080496f4[32])) }
        tf      = { defs={} expr=v2093[1] }
        if      = { defs={} expr=v2094[1] }
        df      = { defs={} expr=v2095[1] }
        of      = { defs={0x08048396} expr=0[1] }
        iopl0   = { defs={} expr=v2097[1] }
        iopl1   = { defs={} expr=v2098[1] }
        nt      = { defs={} expr=v2099[1] }
        ?15     = { defs={} expr=v2100[1] }
        rf      = { defs={} expr=v2101[1] }
        vm      = { defs={} expr=v2102[1] }
        ac      = { defs={} expr=v2103[1] }
        vif     = { defs={} expr=v2104[1] }
        vip     = { defs={} expr=v2105[1] }
        id      = { defs={} expr=v2106[1] }
        ?22     = { defs={} expr=v2107[1] }
        ?23     = { defs={} expr=v2108[1] }
        ?24     = { defs={} expr=v2109[1] }
        ?25     = { defs={} expr=v2110[1] }
        ?26     = { defs={} expr=v2111[1] }
        ?27     = { defs={} expr=v2112[1] }
        ?28     = { defs={} expr=v2113[1] }
        ?29     = { defs={} expr=v2114[1] }
        ?30     = { defs={} expr=v2115[1] }
        ?31     = { defs={} expr=v2116[1] }
        ip      = { defs={0x08048390,0x08048391,0x08048393,0x08048396} expr=0x0804839d[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2075[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2076[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2075[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2076[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2075[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2076[32]) }
          flags = { }
        address = { defs={0x08048390} expr=(add[32] v2075[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2076[32]) }
          flags = { }
    init mem:
        address = { defs={0x08048396} expr=0x080496f4[32] }
          value = { defs={} expr=v2188[8] }
          flags = { rdonly }
0x804839d:jne    0x080483cc<<Insn>>
    registers:
        ax      = { defs={} expr=v2071[32] }
        cx      = { defs={} expr=v2072[32] }
        dx      = { defs={} expr=v2073[32] }
        bx      = { defs={} expr=v2074[32] }
        sp      = { defs={0x08048390,0x08048393} expr=(add[32] (add[32] v2075[32] -4[32]) -8[32]) }
        bp      = { defs={0x08048390,0x08048391} expr=(add[32] v2075[32] -4[32]) }
        si      = { defs={} expr=v2077[32] }
        di      = { defs={} expr=v2078[32] }
        es      = { defs={} expr=v2079[16] }
        cs      = { defs={} expr=v2080[16] }
        ss      = { defs={} expr=v2081[16] }
        ds      = { defs={} expr=v2082[16] }
        fs      = { defs={} expr=v2083[16] }
        gs      = { defs={} expr=v2084[16] }
        cf      = { defs={0x08048396} expr=(invert[1] (extract[1] 7[32] 8[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2189[8] (add[32] (add[32] v2075[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2076[32])) (add[32] (add[32] v2075[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2076[32])) (add[32] (add[32] v2075[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2076[32])) (add[32] v2075[32] -4[32]) (extract[8] 0[32] 8[32] v2076[32])) 0x080496f4[32] v2188[8]) 0x080496f4[32])) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2189[8] (add[32] (add[32] v2075[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2076[32])) (add[32] (add[32] v2075[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2076[32])) (add[32] (add[32] v2075[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2076[32])) (add[32] v2075[32] -4[32]) (extract[8] 0[32] 8[32] v2076[32])) 0x080496f4[32] v2188[8]) 0x080496f4[32])) -256[9])))))) }
        ?1      = { defs={} expr=v2086[1] }
        pf      = { defs={0x08048396} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2189[8] (add[32] (add[32] v2075[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2076[32])) (add[32] (add[32] v2075[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2076[32])) (add[32] (add[32] v2075[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2076[32])) (add[32] v2075[32] -4[32]) (extract[8] 0[32] 8[32] v2076[32])) 0x080496f4[32] v2188[8]) 0x080496f4[32])) (extract[1] 1[32] 2[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2189[8] (add[32] (add[32] v2075[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2076[32])) (add[32] (add[32] v2075[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2076[32])) (add[32] (add[32] v2075[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2076[32])) (add[32] v2075[32] -4[32]) (extract[8] 0[32] 8[32] v2076[32])) 0x080496f4[32] v2188[8]) 0x080496f4[32]))) (bv-xor[1] (extract[1] 2[32] 3[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2189[8] (add[32] (add[32] v2075[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2076[32])) (add[32] (add[32] v2075[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2076[32])) (add[32] (add[32] v2075[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2076[32])) (add[32] v2075[32] -4[32]) (extract[8] 0[32] 8[32] v2076[32])) 0x080496f4[32] v2188[8]) 0x080496f4[32])) (extract[1] 3[32] 4[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2189[8] (add[32] (add[32] v2075[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2076[32])) (add[32] (add[32] v2075[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2076[32])) (add[32] (add[32] v2075[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2076[32])) (add[32] v2075[32] -4[32]) (extract[8] 0[32] 8[32] v2076[32])) 0x080496f4[32] v2188[8]) 0x080496f4[32])))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2189[8] (add[32] (add[32] v2075[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2076[32])) (add[32] (add[32] v2075[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2076[32])) (add[32] (add[32] v2075[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2076[32])) (add[32] v2075[32] -4[32]) (extract[8] 0[32] 8[32] v2076[32])) 0x080496f4[32] v2188[8]) 0x080496f4[32])) (extract[1] 5[32] 6[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2189[8] (add[32] (add[32] v2075[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2076[32])) (add[32] (add[32] v2075[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2076[32])) (add[32] (add[32] v2075[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2076[32])) (add[32] v2075[32] -4[32]) (extract[8] 0[32] 8[32] v2076[32])) 0x080496f4[32] v2188[8]) 0x080496f4[32]))) (bv-xor[1] (extract[1] 6[32] 7[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2189[8] (add[32] (add[32] v2075[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2076[32])) (add[32] (add[32] v2075[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2076[32])) (add[32] (add[32] v2075[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2076[32])) (add[32] v2075[32] -4[32]) (extract[8] 0[32] 8[32] v2076[32])) 0x080496f4[32] v2188[8]) 0x080496f4[32])) (extract[1] 7[32] 8[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2189[8] (add[32] (add[32] v2075[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2076[32])) (add[32] (add[32] v2075[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2076[32])) (add[32] (add[32] v2075[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2076[32])) (add[32] v2075[32] -4[32]) (extract[8] 0[32] 8[32] v2076[32])) 0x080496f4[32] v2188[8]) 0x080496f4[32])))))) }
        ?3      = { defs={} expr=v2088[1] }
        af      = { defs={0x08048396} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2189[8] (add[32] (add[32] v2075[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2076[32])) (add[32] (add[32] v2075[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2076[32])) (add[32] (add[32] v2075[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2076[32])) (add[32] v2075[32] -4[32]) (extract[8] 0[32] 8[32] v2076[32])) 0x080496f4[32] v2188[8]) 0x080496f4[32])) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2189[8] (add[32] (add[32] v2075[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2076[32])) (add[32] (add[32] v2075[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2076[32])) (add[32] (add[32] v2075[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2076[32])) (add[32] v2075[32] -4[32]) (extract[8] 0[32] 8[32] v2076[32])) 0x080496f4[32] v2188[8]) 0x080496f4[32])) -256[9])))))) }
        ?5      = { defs={} expr=v2090[1] }
        zf      = { defs={0x08048396} expr=(zerop[1] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2189[8] (add[32] (add[32] v2075[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2076[32])) (add[32] (add[32] v2075[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2076[32])) (add[32] (add[32] v2075[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2076[32])) (add[32] v2075[32] -4[32]) (extract[8] 0[32] 8[32] v2076[32])) 0x080496f4[32] v2188[8]) 0x080496f4[32])) }
        sf      = { defs={0x08048396} expr=(extract[1] 7[32] 8[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2189[8] (add[32] (add[32] v2075[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2076[32])) (add[32] (add[32] v2075[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2076[32])) (add[32] (add[32] v2075[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2076[32])) (add[32] v2075[32] -4[32]) (extract[8] 0[32] 8[32] v2076[32])) 0x080496f4[32] v2188[8]) 0x080496f4[32])) }
        tf      = { defs={} expr=v2093[1] }
        if      = { defs={} expr=v2094[1] }
        df      = { defs={} expr=v2095[1] }
        of      = { defs={0x08048396} expr=0[1] }
        iopl0   = { defs={} expr=v2097[1] }
        iopl1   = { defs={} expr=v2098[1] }
        nt      = { defs={} expr=v2099[1] }
        ?15     = { defs={} expr=v2100[1] }
        rf      = { defs={} expr=v2101[1] }
        vm      = { defs={} expr=v2102[1] }
        ac      = { defs={} expr=v2103[1] }
        vif     = { defs={} expr=v2104[1] }
        vip     = { defs={} expr=v2105[1] }
        id      = { defs={} expr=v2106[1] }
        ?22     = { defs={} expr=v2107[1] }
        ?23     = { defs={} expr=v2108[1] }
        ?24     = { defs={} expr=v2109[1] }
        ?25     = { defs={} expr=v2110[1] }
        ?26     = { defs={} expr=v2111[1] }
        ?27     = { defs={} expr=v2112[1] }
        ?28     = { defs={} expr=v2113[1] }
        ?29     = { defs={} expr=v2114[1] }
        ?30     = { defs={} expr=v2115[1] }
        ?31     = { defs={} expr=v2116[1] }
        ip      = { defs={0x08048390,0x08048391,0x08048393,0x08048396,0x0804839d} expr=(ite[32] (invert[1] (zerop[1] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2189[8] (add[32] (add[32] v2075[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2076[32])) (add[32] (add[32] v2075[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2076[32])) (add[32] (add[32] v2075[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2076[32])) (add[32] v2075[32] -4[32]) (extract[8] 0[32] 8[32] v2076[32])) 0x080496f4[32] v2188[8]) 0x080496f4[32]))) 0x080483cc[32] 0x0804839f[32]) }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2075[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2076[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2075[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2076[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2075[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2076[32]) }
          flags = { }
        address = { defs={0x08048390} expr=(add[32] v2075[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2076[32]) }
          flags = { }
    init mem:
        address = { defs={0x08048396} expr=0x080496f4[32] }
          value = { defs={} expr=v2188[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804839f:mov    eax, DWORD PTR ds:[0x080496f0<.data+8>]
    registers:
        ax      = { defs={0x0804839f} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2345[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2346[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2347[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2348[8]))) }
        cx      = { defs={} expr=v2294[32] }
        dx      = { defs={} expr=v2295[32] }
        bx      = { defs={} expr=v2296[32] }
        sp      = { defs={} expr=v2297[32] }
        bp      = { defs={} expr=v2298[32] }
        si      = { defs={} expr=v2299[32] }
        di      = { defs={} expr=v2300[32] }
        es      = { defs={} expr=v2301[16] }
        cs      = { defs={} expr=v2302[16] }
        ss      = { defs={} expr=v2303[16] }
        ds      = { defs={} expr=v2304[16] }
        fs      = { defs={} expr=v2305[16] }
        gs      = { defs={} expr=v2306[16] }
        cf      = { defs={} expr=v2307[1] }
        ?1      = { defs={} expr=v2308[1] }
        pf      = { defs={} expr=v2309[1] }
        ?3      = { defs={} expr=v2310[1] }
        af      = { defs={} expr=v2311[1] }
        ?5      = { defs={} expr=v2312[1] }
        zf      = { defs={} expr=v2313[1] }
        sf      = { defs={} expr=v2314[1] }
        tf      = { defs={} expr=v2315[1] }
        if      = { defs={} expr=v2316[1] }
        df      = { defs={} expr=v2317[1] }
        of      = { defs={} expr=v2318[1] }
        iopl0   = { defs={} expr=v2319[1] }
        iopl1   = { defs={} expr=v2320[1] }
        nt      = { defs={} expr=v2321[1] }
        ?15     = { defs={} expr=v2322[1] }
        rf      = { defs={} expr=v2323[1] }
        vm      = { defs={} expr=v2324[1] }
        ac      = { defs={} expr=v2325[1] }
        vif     = { defs={} expr=v2326[1] }
        vip     = { defs={} expr=v2327[1] }
        id      = { defs={} expr=v2328[1] }
        ?22     = { defs={} expr=v2329[1] }
        ?23     = { defs={} expr=v2330[1] }
        ?24     = { defs={} expr=v2331[1] }
        ?25     = { defs={} expr=v2332[1] }
        ?26     = { defs={} expr=v2333[1] }
        ?27     = { defs={} expr=v2334[1] }
        ?28     = { defs={} expr=v2335[1] }
        ?29     = { defs={} expr=v2336[1] }
        ?30     = { defs={} expr=v2337[1] }
        ?31     = { defs={} expr=v2338[1] }
        ip      = { defs={0x0804839f} expr=0x080483a4[32] }
    memory:
    init mem:
        address = { defs={} expr=0x080496f3[32] }
          value = { defs={} expr=v2348[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f2[32] }
          value = { defs={} expr=v2347[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f1[32] }
          value = { defs={} expr=v2346[8] }
          flags = { rdonly }
        address = { defs={0x0804839f} expr=0x080496f0[32] }
          value = { defs={} expr=v2345[8] }
          flags = { rdonly }
0x80483a4:mov    edx, DWORD PTR ds:[eax]
    registers:
        ax      = { defs={0x0804839f} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2345[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2346[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2347[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2348[8]))) }
        cx      = { defs={} expr=v2294[32] }
        dx      = { defs={0x080483a4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2360[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2361[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2362[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2363[8]))) }
        bx      = { defs={} expr=v2296[32] }
        sp      = { defs={} expr=v2297[32] }
        bp      = { defs={} expr=v2298[32] }
        si      = { defs={} expr=v2299[32] }
        di      = { defs={} expr=v2300[32] }
        es      = { defs={} expr=v2301[16] }
        cs      = { defs={} expr=v2302[16] }
        ss      = { defs={} expr=v2303[16] }
        ds      = { defs={} expr=v2304[16] }
        fs      = { defs={} expr=v2305[16] }
        gs      = { defs={} expr=v2306[16] }
        cf      = { defs={} expr=v2307[1] }
        ?1      = { defs={} expr=v2308[1] }
        pf      = { defs={} expr=v2309[1] }
        ?3      = { defs={} expr=v2310[1] }
        af      = { defs={} expr=v2311[1] }
        ?5      = { defs={} expr=v2312[1] }
        zf      = { defs={} expr=v2313[1] }
        sf      = { defs={} expr=v2314[1] }
        tf      = { defs={} expr=v2315[1] }
        if      = { defs={} expr=v2316[1] }
        df      = { defs={} expr=v2317[1] }
        of      = { defs={} expr=v2318[1] }
        iopl0   = { defs={} expr=v2319[1] }
        iopl1   = { defs={} expr=v2320[1] }
        nt      = { defs={} expr=v2321[1] }
        ?15     = { defs={} expr=v2322[1] }
        rf      = { defs={} expr=v2323[1] }
        vm      = { defs={} expr=v2324[1] }
        ac      = { defs={} expr=v2325[1] }
        vif     = { defs={} expr=v2326[1] }
        vip     = { defs={} expr=v2327[1] }
        id      = { defs={} expr=v2328[1] }
        ?22     = { defs={} expr=v2329[1] }
        ?23     = { defs={} expr=v2330[1] }
        ?24     = { defs={} expr=v2331[1] }
        ?25     = { defs={} expr=v2332[1] }
        ?26     = { defs={} expr=v2333[1] }
        ?27     = { defs={} expr=v2334[1] }
        ?28     = { defs={} expr=v2335[1] }
        ?29     = { defs={} expr=v2336[1] }
        ?30     = { defs={} expr=v2337[1] }
        ?31     = { defs={} expr=v2338[1] }
        ip      = { defs={0x0804839f,0x080483a4} expr=0x080483a6[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2345[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2346[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2347[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2348[8]))) 3[32]) }
          value = { defs={} expr=v2363[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2345[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2346[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2347[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2348[8]))) 2[32]) }
          value = { defs={} expr=v2362[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2345[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2346[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2347[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2348[8]))) 1[32]) }
          value = { defs={} expr=v2361[8] }
          flags = { rdonly }
        address = { defs={0x0804839f,0x080483a4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2345[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2346[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2347[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2348[8]))) }
          value = { defs={} expr=v2360[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f3[32] }
          value = { defs={} expr=v2348[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f2[32] }
          value = { defs={} expr=v2347[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f1[32] }
          value = { defs={} expr=v2346[8] }
          flags = { rdonly }
        address = { defs={0x0804839f} expr=0x080496f0[32] }
          value = { defs={} expr=v2345[8] }
          flags = { rdonly }
0x80483a6:test   edx, edx
    registers:
        ax      = { defs={0x0804839f} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2345[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2346[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2347[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2348[8]))) }
        cx      = { defs={} expr=v2294[32] }
        dx      = { defs={0x080483a4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2360[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2361[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2362[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2363[8]))) }
        bx      = { defs={} expr=v2296[32] }
        sp      = { defs={} expr=v2297[32] }
        bp      = { defs={} expr=v2298[32] }
        si      = { defs={} expr=v2299[32] }
        di      = { defs={} expr=v2300[32] }
        es      = { defs={} expr=v2301[16] }
        cs      = { defs={} expr=v2302[16] }
        ss      = { defs={} expr=v2303[16] }
        ds      = { defs={} expr=v2304[16] }
        fs      = { defs={} expr=v2305[16] }
        gs      = { defs={} expr=v2306[16] }
        cf      = { defs={0x080483a6} expr=0[1] }
        ?1      = { defs={} expr=v2308[1] }
        pf      = { defs={0x080483a4,0x080483a6} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2360[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2361[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2362[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2363[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2360[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2361[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2362[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2363[8])))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2360[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2361[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2362[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2363[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2360[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2361[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2362[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2363[8]))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2360[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2361[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2362[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2363[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2360[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2361[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2362[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2363[8])))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2360[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2361[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2362[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2363[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2360[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2361[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2362[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2363[8])))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2360[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2361[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2362[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2363[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2360[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2361[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2362[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2363[8])))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2360[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2361[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2362[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2363[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2360[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2361[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2362[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2363[8]))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2360[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2361[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2362[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2363[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2360[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2361[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2362[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2363[8])))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2360[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2361[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2362[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2363[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2360[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2361[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2362[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2363[8])))))))))) }
        ?3      = { defs={} expr=v2310[1] }
        af      = { defs={0x080483a6} expr=v2400[1] }
        ?5      = { defs={} expr=v2312[1] }
        zf      = { defs={0x080483a4,0x080483a6} expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2360[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2361[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2362[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2363[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2360[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2361[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2362[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2363[8]))))) }
        sf      = { defs={0x080483a4,0x080483a6} expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2360[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2361[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2362[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2363[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2360[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2361[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2362[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2363[8]))))) }
        tf      = { defs={} expr=v2315[1] }
        if      = { defs={} expr=v2316[1] }
        df      = { defs={} expr=v2317[1] }
        of      = { defs={0x080483a6} expr=0[1] }
        iopl0   = { defs={} expr=v2319[1] }
        iopl1   = { defs={} expr=v2320[1] }
        nt      = { defs={} expr=v2321[1] }
        ?15     = { defs={} expr=v2322[1] }
        rf      = { defs={} expr=v2323[1] }
        vm      = { defs={} expr=v2324[1] }
        ac      = { defs={} expr=v2325[1] }
        vif     = { defs={} expr=v2326[1] }
        vip     = { defs={} expr=v2327[1] }
        id      = { defs={} expr=v2328[1] }
        ?22     = { defs={} expr=v2329[1] }
        ?23     = { defs={} expr=v2330[1] }
        ?24     = { defs={} expr=v2331[1] }
        ?25     = { defs={} expr=v2332[1] }
        ?26     = { defs={} expr=v2333[1] }
        ?27     = { defs={} expr=v2334[1] }
        ?28     = { defs={} expr=v2335[1] }
        ?29     = { defs={} expr=v2336[1] }
        ?30     = { defs={} expr=v2337[1] }
        ?31     = { defs={} expr=v2338[1] }
        ip      = { defs={0x0804839f,0x080483a4,0x080483a6} expr=0x080483a8[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2345[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2346[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2347[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2348[8]))) 3[32]) }
          value = { defs={} expr=v2363[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2345[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2346[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2347[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2348[8]))) 2[32]) }
          value = { defs={} expr=v2362[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2345[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2346[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2347[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2348[8]))) 1[32]) }
          value = { defs={} expr=v2361[8] }
          flags = { rdonly }
        address = { defs={0x0804839f,0x080483a4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2345[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2346[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2347[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2348[8]))) }
          value = { defs={} expr=v2360[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f3[32] }
          value = { defs={} expr=v2348[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f2[32] }
          value = { defs={} expr=v2347[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f1[32] }
          value = { defs={} expr=v2346[8] }
          flags = { rdonly }
        address = { defs={0x0804839f} expr=0x080496f0[32] }
          value = { defs={} expr=v2345[8] }
          flags = { rdonly }
0x80483a8:je     0x080483c5<<Insn>>
    registers:
        ax      = { defs={0x0804839f} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2345[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2346[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2347[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2348[8]))) }
        cx      = { defs={} expr=v2294[32] }
        dx      = { defs={0x080483a4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2360[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2361[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2362[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2363[8]))) }
        bx      = { defs={} expr=v2296[32] }
        sp      = { defs={} expr=v2297[32] }
        bp      = { defs={} expr=v2298[32] }
        si      = { defs={} expr=v2299[32] }
        di      = { defs={} expr=v2300[32] }
        es      = { defs={} expr=v2301[16] }
        cs      = { defs={} expr=v2302[16] }
        ss      = { defs={} expr=v2303[16] }
        ds      = { defs={} expr=v2304[16] }
        fs      = { defs={} expr=v2305[16] }
        gs      = { defs={} expr=v2306[16] }
        cf      = { defs={0x080483a6} expr=0[1] }
        ?1      = { defs={} expr=v2308[1] }
        pf      = { defs={0x080483a4,0x080483a6} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2360[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2361[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2362[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2363[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2360[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2361[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2362[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2363[8])))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2360[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2361[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2362[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2363[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2360[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2361[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2362[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2363[8]))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2360[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2361[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2362[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2363[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2360[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2361[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2362[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2363[8])))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2360[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2361[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2362[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2363[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2360[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2361[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2362[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2363[8])))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2360[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2361[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2362[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2363[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2360[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2361[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2362[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2363[8])))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2360[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2361[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2362[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2363[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2360[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2361[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2362[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2363[8]))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2360[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2361[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2362[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2363[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2360[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2361[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2362[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2363[8])))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2360[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2361[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2362[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2363[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2360[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2361[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2362[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2363[8])))))))))) }
        ?3      = { defs={} expr=v2310[1] }
        af      = { defs={0x080483a6} expr=v2400[1] }
        ?5      = { defs={} expr=v2312[1] }
        zf      = { defs={0x080483a4,0x080483a6} expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2360[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2361[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2362[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2363[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2360[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2361[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2362[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2363[8]))))) }
        sf      = { defs={0x080483a4,0x080483a6} expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2360[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2361[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2362[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2363[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2360[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2361[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2362[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2363[8]))))) }
        tf      = { defs={} expr=v2315[1] }
        if      = { defs={} expr=v2316[1] }
        df      = { defs={} expr=v2317[1] }
        of      = { defs={0x080483a6} expr=0[1] }
        iopl0   = { defs={} expr=v2319[1] }
        iopl1   = { defs={} expr=v2320[1] }
        nt      = { defs={} expr=v2321[1] }
        ?15     = { defs={} expr=v2322[1] }
        rf      = { defs={} expr=v2323[1] }
        vm      = { defs={} expr=v2324[1] }
        ac      = { defs={} expr=v2325[1] }
        vif     = { defs={} expr=v2326[1] }
        vip     = { defs={} expr=v2327[1] }
        id      = { defs={} expr=v2328[1] }
        ?22     = { defs={} expr=v2329[1] }
        ?23     = { defs={} expr=v2330[1] }
        ?24     = { defs={} expr=v2331[1] }
        ?25     = { defs={} expr=v2332[1] }
        ?26     = { defs={} expr=v2333[1] }
        ?27     = { defs={} expr=v2334[1] }
        ?28     = { defs={} expr=v2335[1] }
        ?29     = { defs={} expr=v2336[1] }
        ?30     = { defs={} expr=v2337[1] }
        ?31     = { defs={} expr=v2338[1] }
        ip      = { defs={0x0804839f,0x080483a4,0x080483a6,0x080483a8} expr=(ite[32] (zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2360[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2361[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2362[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2363[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2360[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2361[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2362[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2363[8]))))) 0x080483c5[32] 0x080483aa[32]) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2345[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2346[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2347[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2348[8]))) 3[32]) }
          value = { defs={} expr=v2363[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2345[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2346[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2347[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2348[8]))) 2[32]) }
          value = { defs={} expr=v2362[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2345[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2346[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2347[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2348[8]))) 1[32]) }
          value = { defs={} expr=v2361[8] }
          flags = { rdonly }
        address = { defs={0x0804839f,0x080483a4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2345[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2346[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2347[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2348[8]))) }
          value = { defs={} expr=v2360[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f3[32] }
          value = { defs={} expr=v2348[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f2[32] }
          value = { defs={} expr=v2347[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f1[32] }
          value = { defs={} expr=v2346[8] }
          flags = { rdonly }
        address = { defs={0x0804839f} expr=0x080496f0[32] }
          value = { defs={} expr=v2345[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483aa:lea    esi, [esi + 0x00000000]
    registers:
        ax      = { defs={} expr=v2458[32] }
        cx      = { defs={} expr=v2459[32] }
        dx      = { defs={} expr=v2460[32] }
        bx      = { defs={} expr=v2461[32] }
        sp      = { defs={} expr=v2462[32] }
        bp      = { defs={} expr=v2463[32] }
        si      = { defs={0x080483aa} expr=v2464[32] }
        di      = { defs={} expr=v2465[32] }
        es      = { defs={} expr=v2466[16] }
        cs      = { defs={} expr=v2467[16] }
        ss      = { defs={} expr=v2468[16] }
        ds      = { defs={} expr=v2469[16] }
        fs      = { defs={} expr=v2470[16] }
        gs      = { defs={} expr=v2471[16] }
        cf      = { defs={} expr=v2472[1] }
        ?1      = { defs={} expr=v2473[1] }
        pf      = { defs={} expr=v2474[1] }
        ?3      = { defs={} expr=v2475[1] }
        af      = { defs={} expr=v2476[1] }
        ?5      = { defs={} expr=v2477[1] }
        zf      = { defs={} expr=v2478[1] }
        sf      = { defs={} expr=v2479[1] }
        tf      = { defs={} expr=v2480[1] }
        if      = { defs={} expr=v2481[1] }
        df      = { defs={} expr=v2482[1] }
        of      = { defs={} expr=v2483[1] }
        iopl0   = { defs={} expr=v2484[1] }
        iopl1   = { defs={} expr=v2485[1] }
        nt      = { defs={} expr=v2486[1] }
        ?15     = { defs={} expr=v2487[1] }
        rf      = { defs={} expr=v2488[1] }
        vm      = { defs={} expr=v2489[1] }
        ac      = { defs={} expr=v2490[1] }
        vif     = { defs={} expr=v2491[1] }
        vip     = { defs={} expr=v2492[1] }
        id      = { defs={} expr=v2493[1] }
        ?22     = { defs={} expr=v2494[1] }
        ?23     = { defs={} expr=v2495[1] }
        ?24     = { defs={} expr=v2496[1] }
        ?25     = { defs={} expr=v2497[1] }
        ?26     = { defs={} expr=v2498[1] }
        ?27     = { defs={} expr=v2499[1] }
        ?28     = { defs={} expr=v2500[1] }
        ?29     = { defs={} expr=v2501[1] }
        ?30     = { defs={} expr=v2502[1] }
        ?31     = { defs={} expr=v2503[1] }
        ip      = { defs={0x080483aa} expr=0x080483b0[32] }
    memory:
    init mem:
0x80483b0:add    eax, 0x04
    registers:
        ax      = { defs={0x080483b0} expr=(add[32] v2458[32] 4[32]) }
        cx      = { defs={} expr=v2459[32] }
        dx      = { defs={} expr=v2460[32] }
        bx      = { defs={} expr=v2461[32] }
        sp      = { defs={} expr=v2462[32] }
        bp      = { defs={} expr=v2463[32] }
        si      = { defs={0x080483aa} expr=v2464[32] }
        di      = { defs={} expr=v2465[32] }
        es      = { defs={} expr=v2466[16] }
        cs      = { defs={} expr=v2467[16] }
        ss      = { defs={} expr=v2468[16] }
        ds      = { defs={} expr=v2469[16] }
        fs      = { defs={} expr=v2470[16] }
        gs      = { defs={} expr=v2471[16] }
        cf      = { defs={0x080483b0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2458[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v2458[32]) 4[33]))))) }
        ?1      = { defs={} expr=v2473[1] }
        pf      = { defs={0x080483b0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v2458[32] 4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v2458[32] 4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v2458[32] 4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v2458[32] 4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v2458[32] 4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v2458[32] 4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v2458[32] 4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v2458[32] 4[32]))))))) }
        ?3      = { defs={} expr=v2475[1] }
        af      = { defs={0x080483b0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2458[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v2458[32]) 4[33]))))) }
        ?5      = { defs={} expr=v2477[1] }
        zf      = { defs={0x080483b0} expr=(zerop[1] (add[32] v2458[32] 4[32])) }
        sf      = { defs={0x080483b0} expr=(extract[1] 31[32] 32[32] (add[32] v2458[32] 4[32])) }
        tf      = { defs={} expr=v2480[1] }
        if      = { defs={} expr=v2481[1] }
        df      = { defs={} expr=v2482[1] }
        of      = { defs={0x080483b0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2458[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v2458[32]) 4[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2458[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v2458[32]) 4[33])))))) }
        iopl0   = { defs={} expr=v2484[1] }
        iopl1   = { defs={} expr=v2485[1] }
        nt      = { defs={} expr=v2486[1] }
        ?15     = { defs={} expr=v2487[1] }
        rf      = { defs={} expr=v2488[1] }
        vm      = { defs={} expr=v2489[1] }
        ac      = { defs={} expr=v2490[1] }
        vif     = { defs={} expr=v2491[1] }
        vip     = { defs={} expr=v2492[1] }
        id      = { defs={} expr=v2493[1] }
        ?22     = { defs={} expr=v2494[1] }
        ?23     = { defs={} expr=v2495[1] }
        ?24     = { defs={} expr=v2496[1] }
        ?25     = { defs={} expr=v2497[1] }
        ?26     = { defs={} expr=v2498[1] }
        ?27     = { defs={} expr=v2499[1] }
        ?28     = { defs={} expr=v2500[1] }
        ?29     = { defs={} expr=v2501[1] }
        ?30     = { defs={} expr=v2502[1] }
        ?31     = { defs={} expr=v2503[1] }
        ip      = { defs={0x080483aa,0x080483b0} expr=0x080483b3[32] }
    memory:
    init mem:
0x80483b3:mov    DWORD PTR ds:[0x080496f0<.data+8>], eax
    registers:
        ax      = { defs={0x080483b0} expr=(add[32] v2458[32] 4[32]) }
        cx      = { defs={} expr=v2459[32] }
        dx      = { defs={} expr=v2460[32] }
        bx      = { defs={} expr=v2461[32] }
        sp      = { defs={} expr=v2462[32] }
        bp      = { defs={} expr=v2463[32] }
        si      = { defs={0x080483aa} expr=v2464[32] }
        di      = { defs={} expr=v2465[32] }
        es      = { defs={} expr=v2466[16] }
        cs      = { defs={} expr=v2467[16] }
        ss      = { defs={} expr=v2468[16] }
        ds      = { defs={} expr=v2469[16] }
        fs      = { defs={} expr=v2470[16] }
        gs      = { defs={} expr=v2471[16] }
        cf      = { defs={0x080483b0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2458[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v2458[32]) 4[33]))))) }
        ?1      = { defs={} expr=v2473[1] }
        pf      = { defs={0x080483b0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v2458[32] 4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v2458[32] 4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v2458[32] 4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v2458[32] 4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v2458[32] 4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v2458[32] 4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v2458[32] 4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v2458[32] 4[32]))))))) }
        ?3      = { defs={} expr=v2475[1] }
        af      = { defs={0x080483b0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2458[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v2458[32]) 4[33]))))) }
        ?5      = { defs={} expr=v2477[1] }
        zf      = { defs={0x080483b0} expr=(zerop[1] (add[32] v2458[32] 4[32])) }
        sf      = { defs={0x080483b0} expr=(extract[1] 31[32] 32[32] (add[32] v2458[32] 4[32])) }
        tf      = { defs={} expr=v2480[1] }
        if      = { defs={} expr=v2481[1] }
        df      = { defs={} expr=v2482[1] }
        of      = { defs={0x080483b0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2458[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v2458[32]) 4[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2458[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v2458[32]) 4[33])))))) }
        iopl0   = { defs={} expr=v2484[1] }
        iopl1   = { defs={} expr=v2485[1] }
        nt      = { defs={} expr=v2486[1] }
        ?15     = { defs={} expr=v2487[1] }
        rf      = { defs={} expr=v2488[1] }
        vm      = { defs={} expr=v2489[1] }
        ac      = { defs={} expr=v2490[1] }
        vif     = { defs={} expr=v2491[1] }
        vip     = { defs={} expr=v2492[1] }
        id      = { defs={} expr=v2493[1] }
        ?22     = { defs={} expr=v2494[1] }
        ?23     = { defs={} expr=v2495[1] }
        ?24     = { defs={} expr=v2496[1] }
        ?25     = { defs={} expr=v2497[1] }
        ?26     = { defs={} expr=v2498[1] }
        ?27     = { defs={} expr=v2499[1] }
        ?28     = { defs={} expr=v2500[1] }
        ?29     = { defs={} expr=v2501[1] }
        ?30     = { defs={} expr=v2502[1] }
        ?31     = { defs={} expr=v2503[1] }
        ip      = { defs={0x080483aa,0x080483b0,0x080483b3} expr=0x080483b8[32] }
    memory:
        address = { defs={} expr=0x080496f3[32] }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] v2458[32] 4[32])) }
          flags = { }
        address = { defs={} expr=0x080496f2[32] }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] v2458[32] 4[32])) }
          flags = { }
        address = { defs={} expr=0x080496f1[32] }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] v2458[32] 4[32])) }
          flags = { }
        address = { defs={0x080483b3} expr=0x080496f0[32] }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] v2458[32] 4[32])) }
          flags = { }
    init mem:
0x80483b8:call   edx
    registers:
        ax      = { defs={0x080483b0} expr=(add[32] v2458[32] 4[32]) }
        cx      = { defs={} expr=v2459[32] }
        dx      = { defs={} expr=v2460[32] }
        bx      = { defs={} expr=v2461[32] }
        sp      = { defs={0x080483b8} expr=(add[32] v2462[32] -4[32]) }
        bp      = { defs={} expr=v2463[32] }
        si      = { defs={0x080483aa} expr=v2464[32] }
        di      = { defs={} expr=v2465[32] }
        es      = { defs={} expr=v2466[16] }
        cs      = { defs={} expr=v2467[16] }
        ss      = { defs={} expr=v2468[16] }
        ds      = { defs={} expr=v2469[16] }
        fs      = { defs={} expr=v2470[16] }
        gs      = { defs={} expr=v2471[16] }
        cf      = { defs={0x080483b0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2458[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v2458[32]) 4[33]))))) }
        ?1      = { defs={} expr=v2473[1] }
        pf      = { defs={0x080483b0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v2458[32] 4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v2458[32] 4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v2458[32] 4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v2458[32] 4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v2458[32] 4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v2458[32] 4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v2458[32] 4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v2458[32] 4[32]))))))) }
        ?3      = { defs={} expr=v2475[1] }
        af      = { defs={0x080483b0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2458[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v2458[32]) 4[33]))))) }
        ?5      = { defs={} expr=v2477[1] }
        zf      = { defs={0x080483b0} expr=(zerop[1] (add[32] v2458[32] 4[32])) }
        sf      = { defs={0x080483b0} expr=(extract[1] 31[32] 32[32] (add[32] v2458[32] 4[32])) }
        tf      = { defs={} expr=v2480[1] }
        if      = { defs={} expr=v2481[1] }
        df      = { defs={} expr=v2482[1] }
        of      = { defs={0x080483b0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2458[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v2458[32]) 4[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2458[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v2458[32]) 4[33])))))) }
        iopl0   = { defs={} expr=v2484[1] }
        iopl1   = { defs={} expr=v2485[1] }
        nt      = { defs={} expr=v2486[1] }
        ?15     = { defs={} expr=v2487[1] }
        rf      = { defs={} expr=v2488[1] }
        vm      = { defs={} expr=v2489[1] }
        ac      = { defs={} expr=v2490[1] }
        vif     = { defs={} expr=v2491[1] }
        vip     = { defs={} expr=v2492[1] }
        id      = { defs={} expr=v2493[1] }
        ?22     = { defs={} expr=v2494[1] }
        ?23     = { defs={} expr=v2495[1] }
        ?24     = { defs={} expr=v2496[1] }
        ?25     = { defs={} expr=v2497[1] }
        ?26     = { defs={} expr=v2498[1] }
        ?27     = { defs={} expr=v2499[1] }
        ?28     = { defs={} expr=v2500[1] }
        ?29     = { defs={} expr=v2501[1] }
        ?30     = { defs={} expr=v2502[1] }
        ?31     = { defs={} expr=v2503[1] }
        ip      = { defs={0x080483b8} expr=v2460[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2462[32] -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2462[32] -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2462[32] -4[32]) 1[32]) }
          value = { defs={} expr=-125[8] }
          flags = { }
        address = { defs={0x080483b8} expr=(add[32] v2462[32] -4[32]) }
          value = { defs={} expr=-70[8] }
          flags = { }
        address = { defs={} expr=0x080496f3[32] }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] v2458[32] 4[32])) }
          flags = { }
        address = { defs={} expr=0x080496f2[32] }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] v2458[32] 4[32])) }
          flags = { }
        address = { defs={} expr=0x080496f1[32] }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] v2458[32] 4[32])) }
          flags = { }
        address = { defs={0x080483b3} expr=0x080496f0[32] }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] v2458[32] 4[32])) }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483ba:mov    eax, DWORD PTR ds:[0x080496f0<.data+8>]
    registers:
        ax      = { defs={0x080483ba} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2672[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2673[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2674[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2675[8]))) }
        cx      = { defs={} expr=v2621[32] }
        dx      = { defs={} expr=v2622[32] }
        bx      = { defs={} expr=v2623[32] }
        sp      = { defs={} expr=v2624[32] }
        bp      = { defs={} expr=v2625[32] }
        si      = { defs={} expr=v2626[32] }
        di      = { defs={} expr=v2627[32] }
        es      = { defs={} expr=v2628[16] }
        cs      = { defs={} expr=v2629[16] }
        ss      = { defs={} expr=v2630[16] }
        ds      = { defs={} expr=v2631[16] }
        fs      = { defs={} expr=v2632[16] }
        gs      = { defs={} expr=v2633[16] }
        cf      = { defs={} expr=v2634[1] }
        ?1      = { defs={} expr=v2635[1] }
        pf      = { defs={} expr=v2636[1] }
        ?3      = { defs={} expr=v2637[1] }
        af      = { defs={} expr=v2638[1] }
        ?5      = { defs={} expr=v2639[1] }
        zf      = { defs={} expr=v2640[1] }
        sf      = { defs={} expr=v2641[1] }
        tf      = { defs={} expr=v2642[1] }
        if      = { defs={} expr=v2643[1] }
        df      = { defs={} expr=v2644[1] }
        of      = { defs={} expr=v2645[1] }
        iopl0   = { defs={} expr=v2646[1] }
        iopl1   = { defs={} expr=v2647[1] }
        nt      = { defs={} expr=v2648[1] }
        ?15     = { defs={} expr=v2649[1] }
        rf      = { defs={} expr=v2650[1] }
        vm      = { defs={} expr=v2651[1] }
        ac      = { defs={} expr=v2652[1] }
        vif     = { defs={} expr=v2653[1] }
        vip     = { defs={} expr=v2654[1] }
        id      = { defs={} expr=v2655[1] }
        ?22     = { defs={} expr=v2656[1] }
        ?23     = { defs={} expr=v2657[1] }
        ?24     = { defs={} expr=v2658[1] }
        ?25     = { defs={} expr=v2659[1] }
        ?26     = { defs={} expr=v2660[1] }
        ?27     = { defs={} expr=v2661[1] }
        ?28     = { defs={} expr=v2662[1] }
        ?29     = { defs={} expr=v2663[1] }
        ?30     = { defs={} expr=v2664[1] }
        ?31     = { defs={} expr=v2665[1] }
        ip      = { defs={0x080483ba} expr=0x080483bf[32] }
    memory:
    init mem:
        address = { defs={} expr=0x080496f3[32] }
          value = { defs={} expr=v2675[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f2[32] }
          value = { defs={} expr=v2674[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f1[32] }
          value = { defs={} expr=v2673[8] }
          flags = { rdonly }
        address = { defs={0x080483ba} expr=0x080496f0[32] }
          value = { defs={} expr=v2672[8] }
          flags = { rdonly }
0x80483bf:mov    edx, DWORD PTR ds:[eax]
    registers:
        ax      = { defs={0x080483ba} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2672[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2673[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2674[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2675[8]))) }
        cx      = { defs={} expr=v2621[32] }
        dx      = { defs={0x080483bf} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2687[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2689[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2690[8]))) }
        bx      = { defs={} expr=v2623[32] }
        sp      = { defs={} expr=v2624[32] }
        bp      = { defs={} expr=v2625[32] }
        si      = { defs={} expr=v2626[32] }
        di      = { defs={} expr=v2627[32] }
        es      = { defs={} expr=v2628[16] }
        cs      = { defs={} expr=v2629[16] }
        ss      = { defs={} expr=v2630[16] }
        ds      = { defs={} expr=v2631[16] }
        fs      = { defs={} expr=v2632[16] }
        gs      = { defs={} expr=v2633[16] }
        cf      = { defs={} expr=v2634[1] }
        ?1      = { defs={} expr=v2635[1] }
        pf      = { defs={} expr=v2636[1] }
        ?3      = { defs={} expr=v2637[1] }
        af      = { defs={} expr=v2638[1] }
        ?5      = { defs={} expr=v2639[1] }
        zf      = { defs={} expr=v2640[1] }
        sf      = { defs={} expr=v2641[1] }
        tf      = { defs={} expr=v2642[1] }
        if      = { defs={} expr=v2643[1] }
        df      = { defs={} expr=v2644[1] }
        of      = { defs={} expr=v2645[1] }
        iopl0   = { defs={} expr=v2646[1] }
        iopl1   = { defs={} expr=v2647[1] }
        nt      = { defs={} expr=v2648[1] }
        ?15     = { defs={} expr=v2649[1] }
        rf      = { defs={} expr=v2650[1] }
        vm      = { defs={} expr=v2651[1] }
        ac      = { defs={} expr=v2652[1] }
        vif     = { defs={} expr=v2653[1] }
        vip     = { defs={} expr=v2654[1] }
        id      = { defs={} expr=v2655[1] }
        ?22     = { defs={} expr=v2656[1] }
        ?23     = { defs={} expr=v2657[1] }
        ?24     = { defs={} expr=v2658[1] }
        ?25     = { defs={} expr=v2659[1] }
        ?26     = { defs={} expr=v2660[1] }
        ?27     = { defs={} expr=v2661[1] }
        ?28     = { defs={} expr=v2662[1] }
        ?29     = { defs={} expr=v2663[1] }
        ?30     = { defs={} expr=v2664[1] }
        ?31     = { defs={} expr=v2665[1] }
        ip      = { defs={0x080483ba,0x080483bf} expr=0x080483c1[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2672[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2673[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2674[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2675[8]))) 3[32]) }
          value = { defs={} expr=v2690[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2672[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2673[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2674[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2675[8]))) 2[32]) }
          value = { defs={} expr=v2689[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2672[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2673[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2674[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2675[8]))) 1[32]) }
          value = { defs={} expr=v2688[8] }
          flags = { rdonly }
        address = { defs={0x080483ba,0x080483bf} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2672[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2673[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2674[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2675[8]))) }
          value = { defs={} expr=v2687[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f3[32] }
          value = { defs={} expr=v2675[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f2[32] }
          value = { defs={} expr=v2674[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f1[32] }
          value = { defs={} expr=v2673[8] }
          flags = { rdonly }
        address = { defs={0x080483ba} expr=0x080496f0[32] }
          value = { defs={} expr=v2672[8] }
          flags = { rdonly }
0x80483c1:test   edx, edx
    registers:
        ax      = { defs={0x080483ba} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2672[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2673[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2674[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2675[8]))) }
        cx      = { defs={} expr=v2621[32] }
        dx      = { defs={0x080483bf} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2687[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2689[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2690[8]))) }
        bx      = { defs={} expr=v2623[32] }
        sp      = { defs={} expr=v2624[32] }
        bp      = { defs={} expr=v2625[32] }
        si      = { defs={} expr=v2626[32] }
        di      = { defs={} expr=v2627[32] }
        es      = { defs={} expr=v2628[16] }
        cs      = { defs={} expr=v2629[16] }
        ss      = { defs={} expr=v2630[16] }
        ds      = { defs={} expr=v2631[16] }
        fs      = { defs={} expr=v2632[16] }
        gs      = { defs={} expr=v2633[16] }
        cf      = { defs={0x080483c1} expr=0[1] }
        ?1      = { defs={} expr=v2635[1] }
        pf      = { defs={0x080483bf,0x080483c1} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2687[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2689[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2690[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2687[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2689[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2690[8])))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2687[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2689[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2690[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2687[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2689[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2690[8]))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2687[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2689[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2690[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2687[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2689[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2690[8])))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2687[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2689[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2690[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2687[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2689[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2690[8])))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2687[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2689[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2690[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2687[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2689[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2690[8])))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2687[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2689[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2690[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2687[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2689[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2690[8]))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2687[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2689[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2690[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2687[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2689[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2690[8])))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2687[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2689[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2690[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2687[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2689[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2690[8])))))))))) }
        ?3      = { defs={} expr=v2637[1] }
        af      = { defs={0x080483c1} expr=v2727[1] }
        ?5      = { defs={} expr=v2639[1] }
        zf      = { defs={0x080483bf,0x080483c1} expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2687[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2689[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2690[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2687[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2689[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2690[8]))))) }
        sf      = { defs={0x080483bf,0x080483c1} expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2687[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2689[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2690[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2687[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2689[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2690[8]))))) }
        tf      = { defs={} expr=v2642[1] }
        if      = { defs={} expr=v2643[1] }
        df      = { defs={} expr=v2644[1] }
        of      = { defs={0x080483c1} expr=0[1] }
        iopl0   = { defs={} expr=v2646[1] }
        iopl1   = { defs={} expr=v2647[1] }
        nt      = { defs={} expr=v2648[1] }
        ?15     = { defs={} expr=v2649[1] }
        rf      = { defs={} expr=v2650[1] }
        vm      = { defs={} expr=v2651[1] }
        ac      = { defs={} expr=v2652[1] }
        vif     = { defs={} expr=v2653[1] }
        vip     = { defs={} expr=v2654[1] }
        id      = { defs={} expr=v2655[1] }
        ?22     = { defs={} expr=v2656[1] }
        ?23     = { defs={} expr=v2657[1] }
        ?24     = { defs={} expr=v2658[1] }
        ?25     = { defs={} expr=v2659[1] }
        ?26     = { defs={} expr=v2660[1] }
        ?27     = { defs={} expr=v2661[1] }
        ?28     = { defs={} expr=v2662[1] }
        ?29     = { defs={} expr=v2663[1] }
        ?30     = { defs={} expr=v2664[1] }
        ?31     = { defs={} expr=v2665[1] }
        ip      = { defs={0x080483ba,0x080483bf,0x080483c1} expr=0x080483c3[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2672[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2673[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2674[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2675[8]))) 3[32]) }
          value = { defs={} expr=v2690[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2672[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2673[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2674[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2675[8]))) 2[32]) }
          value = { defs={} expr=v2689[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2672[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2673[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2674[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2675[8]))) 1[32]) }
          value = { defs={} expr=v2688[8] }
          flags = { rdonly }
        address = { defs={0x080483ba,0x080483bf} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2672[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2673[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2674[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2675[8]))) }
          value = { defs={} expr=v2687[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f3[32] }
          value = { defs={} expr=v2675[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f2[32] }
          value = { defs={} expr=v2674[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f1[32] }
          value = { defs={} expr=v2673[8] }
          flags = { rdonly }
        address = { defs={0x080483ba} expr=0x080496f0[32] }
          value = { defs={} expr=v2672[8] }
          flags = { rdonly }
0x80483c3:jne    0x080483b0<<Insn>>
    registers:
        ax      = { defs={0x080483ba} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2672[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2673[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2674[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2675[8]))) }
        cx      = { defs={} expr=v2621[32] }
        dx      = { defs={0x080483bf} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2687[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2689[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2690[8]))) }
        bx      = { defs={} expr=v2623[32] }
        sp      = { defs={} expr=v2624[32] }
        bp      = { defs={} expr=v2625[32] }
        si      = { defs={} expr=v2626[32] }
        di      = { defs={} expr=v2627[32] }
        es      = { defs={} expr=v2628[16] }
        cs      = { defs={} expr=v2629[16] }
        ss      = { defs={} expr=v2630[16] }
        ds      = { defs={} expr=v2631[16] }
        fs      = { defs={} expr=v2632[16] }
        gs      = { defs={} expr=v2633[16] }
        cf      = { defs={0x080483c1} expr=0[1] }
        ?1      = { defs={} expr=v2635[1] }
        pf      = { defs={0x080483bf,0x080483c1} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2687[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2689[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2690[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2687[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2689[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2690[8])))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2687[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2689[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2690[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2687[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2689[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2690[8]))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2687[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2689[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2690[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2687[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2689[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2690[8])))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2687[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2689[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2690[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2687[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2689[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2690[8])))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2687[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2689[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2690[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2687[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2689[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2690[8])))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2687[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2689[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2690[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2687[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2689[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2690[8]))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2687[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2689[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2690[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2687[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2689[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2690[8])))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2687[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2689[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2690[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2687[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2689[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2690[8])))))))))) }
        ?3      = { defs={} expr=v2637[1] }
        af      = { defs={0x080483c1} expr=v2727[1] }
        ?5      = { defs={} expr=v2639[1] }
        zf      = { defs={0x080483bf,0x080483c1} expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2687[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2689[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2690[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2687[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2689[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2690[8]))))) }
        sf      = { defs={0x080483bf,0x080483c1} expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2687[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2689[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2690[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2687[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2689[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2690[8]))))) }
        tf      = { defs={} expr=v2642[1] }
        if      = { defs={} expr=v2643[1] }
        df      = { defs={} expr=v2644[1] }
        of      = { defs={0x080483c1} expr=0[1] }
        iopl0   = { defs={} expr=v2646[1] }
        iopl1   = { defs={} expr=v2647[1] }
        nt      = { defs={} expr=v2648[1] }
        ?15     = { defs={} expr=v2649[1] }
        rf      = { defs={} expr=v2650[1] }
        vm      = { defs={} expr=v2651[1] }
        ac      = { defs={} expr=v2652[1] }
        vif     = { defs={} expr=v2653[1] }
        vip     = { defs={} expr=v2654[1] }
        id      = { defs={} expr=v2655[1] }
        ?22     = { defs={} expr=v2656[1] }
        ?23     = { defs={} expr=v2657[1] }
        ?24     = { defs={} expr=v2658[1] }
        ?25     = { defs={} expr=v2659[1] }
        ?26     = { defs={} expr=v2660[1] }
        ?27     = { defs={} expr=v2661[1] }
        ?28     = { defs={} expr=v2662[1] }
        ?29     = { defs={} expr=v2663[1] }
        ?30     = { defs={} expr=v2664[1] }
        ?31     = { defs={} expr=v2665[1] }
        ip      = { defs={0x080483ba,0x080483bf,0x080483c1,0x080483c3} expr=(ite[32] (invert[1] (zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2687[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2689[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2690[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2687[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2689[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2690[8])))))) 0x080483b0[32] 0x080483c5[32]) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2672[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2673[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2674[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2675[8]))) 3[32]) }
          value = { defs={} expr=v2690[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2672[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2673[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2674[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2675[8]))) 2[32]) }
          value = { defs={} expr=v2689[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2672[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2673[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2674[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2675[8]))) 1[32]) }
          value = { defs={} expr=v2688[8] }
          flags = { rdonly }
        address = { defs={0x080483ba,0x080483bf} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2672[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2673[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2674[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2675[8]))) }
          value = { defs={} expr=v2687[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f3[32] }
          value = { defs={} expr=v2675[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f2[32] }
          value = { defs={} expr=v2674[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f1[32] }
          value = { defs={} expr=v2673[8] }
          flags = { rdonly }
        address = { defs={0x080483ba} expr=0x080496f0[32] }
          value = { defs={} expr=v2672[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483c5:mov    BYTE PTR ds:[0x080496f4<.bss>], 0x01
    registers:
        ax      = { defs={} expr=v2786[32] }
        cx      = { defs={} expr=v2787[32] }
        dx      = { defs={} expr=v2788[32] }
        bx      = { defs={} expr=v2789[32] }
        sp      = { defs={} expr=v2790[32] }
        bp      = { defs={} expr=v2791[32] }
        si      = { defs={} expr=v2792[32] }
        di      = { defs={} expr=v2793[32] }
        es      = { defs={} expr=v2794[16] }
        cs      = { defs={} expr=v2795[16] }
        ss      = { defs={} expr=v2796[16] }
        ds      = { defs={} expr=v2797[16] }
        fs      = { defs={} expr=v2798[16] }
        gs      = { defs={} expr=v2799[16] }
        cf      = { defs={} expr=v2800[1] }
        ?1      = { defs={} expr=v2801[1] }
        pf      = { defs={} expr=v2802[1] }
        ?3      = { defs={} expr=v2803[1] }
        af      = { defs={} expr=v2804[1] }
        ?5      = { defs={} expr=v2805[1] }
        zf      = { defs={} expr=v2806[1] }
        sf      = { defs={} expr=v2807[1] }
        tf      = { defs={} expr=v2808[1] }
        if      = { defs={} expr=v2809[1] }
        df      = { defs={} expr=v2810[1] }
        of      = { defs={} expr=v2811[1] }
        iopl0   = { defs={} expr=v2812[1] }
        iopl1   = { defs={} expr=v2813[1] }
        nt      = { defs={} expr=v2814[1] }
        ?15     = { defs={} expr=v2815[1] }
        rf      = { defs={} expr=v2816[1] }
        vm      = { defs={} expr=v2817[1] }
        ac      = { defs={} expr=v2818[1] }
        vif     = { defs={} expr=v2819[1] }
        vip     = { defs={} expr=v2820[1] }
        id      = { defs={} expr=v2821[1] }
        ?22     = { defs={} expr=v2822[1] }
        ?23     = { defs={} expr=v2823[1] }
        ?24     = { defs={} expr=v2824[1] }
        ?25     = { defs={} expr=v2825[1] }
        ?26     = { defs={} expr=v2826[1] }
        ?27     = { defs={} expr=v2827[1] }
        ?28     = { defs={} expr=v2828[1] }
        ?29     = { defs={} expr=v2829[1] }
        ?30     = { defs={} expr=v2830[1] }
        ?31     = { defs={} expr=v2831[1] }
        ip      = { defs={0x080483c5} expr=0x080483cc[32] }
    memory:
        address = { defs={0x080483c5} expr=0x080496f4[32] }
          value = { defs={} expr=1[8] }
          flags = { }
    init mem:
0x80483cc:leave  
    registers:
        ax      = { defs={} expr=v2786[32] }
        cx      = { defs={} expr=v2787[32] }
        dx      = { defs={} expr=v2788[32] }
        bx      = { defs={} expr=v2789[32] }
        sp      = { defs={0x080483cc} expr=(add[32] v2791[32] 4[32]) }
        bp      = { defs={0x080483cc} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] m2846[8] 0x080496f4[32] 1[8]) v2791[32] v2845[8]) v2791[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] m2848[8] 0x080496f4[32] 1[8]) (add[32] v2791[32] 1[32]) v2847[8]) (add[32] v2791[32] 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] m2850[8] 0x080496f4[32] 1[8]) (add[32] v2791[32] 2[32]) v2849[8]) (add[32] v2791[32] 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] m2852[8] 0x080496f4[32] 1[8]) (add[32] v2791[32] 3[32]) v2851[8]) (add[32] v2791[32] 3[32]))))) }
        si      = { defs={} expr=v2792[32] }
        di      = { defs={} expr=v2793[32] }
        es      = { defs={} expr=v2794[16] }
        cs      = { defs={} expr=v2795[16] }
        ss      = { defs={} expr=v2796[16] }
        ds      = { defs={} expr=v2797[16] }
        fs      = { defs={} expr=v2798[16] }
        gs      = { defs={} expr=v2799[16] }
        cf      = { defs={} expr=v2800[1] }
        ?1      = { defs={} expr=v2801[1] }
        pf      = { defs={} expr=v2802[1] }
        ?3      = { defs={} expr=v2803[1] }
        af      = { defs={} expr=v2804[1] }
        ?5      = { defs={} expr=v2805[1] }
        zf      = { defs={} expr=v2806[1] }
        sf      = { defs={} expr=v2807[1] }
        tf      = { defs={} expr=v2808[1] }
        if      = { defs={} expr=v2809[1] }
        df      = { defs={} expr=v2810[1] }
        of      = { defs={} expr=v2811[1] }
        iopl0   = { defs={} expr=v2812[1] }
        iopl1   = { defs={} expr=v2813[1] }
        nt      = { defs={} expr=v2814[1] }
        ?15     = { defs={} expr=v2815[1] }
        rf      = { defs={} expr=v2816[1] }
        vm      = { defs={} expr=v2817[1] }
        ac      = { defs={} expr=v2818[1] }
        vif     = { defs={} expr=v2819[1] }
        vip     = { defs={} expr=v2820[1] }
        id      = { defs={} expr=v2821[1] }
        ?22     = { defs={} expr=v2822[1] }
        ?23     = { defs={} expr=v2823[1] }
        ?24     = { defs={} expr=v2824[1] }
        ?25     = { defs={} expr=v2825[1] }
        ?26     = { defs={} expr=v2826[1] }
        ?27     = { defs={} expr=v2827[1] }
        ?28     = { defs={} expr=v2828[1] }
        ?29     = { defs={} expr=v2829[1] }
        ?30     = { defs={} expr=v2830[1] }
        ?31     = { defs={} expr=v2831[1] }
        ip      = { defs={0x080483c5,0x080483cc} expr=0x080483cd[32] }
    memory:
        address = { defs={0x080483c5} expr=0x080496f4[32] }
          value = { defs={} expr=1[8] }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v2791[32] 3[32]) }
          value = { defs={} expr=v2851[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v2791[32] 2[32]) }
          value = { defs={} expr=v2849[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v2791[32] 1[32]) }
          value = { defs={} expr=v2847[8] }
          flags = { rdonly }
        address = { defs={0x080483cc} expr=v2791[32] }
          value = { defs={} expr=v2845[8] }
          flags = { rdonly }
0x80483cd:ret    
    registers:
        ax      = { defs={} expr=v2786[32] }
        cx      = { defs={} expr=v2787[32] }
        dx      = { defs={} expr=v2788[32] }
        bx      = { defs={} expr=v2789[32] }
        sp      = { defs={0x080483cc,0x080483cd} expr=(add[32] (add[32] v2791[32] 4[32]) 4[32]) }
        bp      = { defs={0x080483cc} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] m2846[8] 0x080496f4[32] 1[8]) v2791[32] v2845[8]) v2791[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] m2848[8] 0x080496f4[32] 1[8]) (add[32] v2791[32] 1[32]) v2847[8]) (add[32] v2791[32] 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] m2850[8] 0x080496f4[32] 1[8]) (add[32] v2791[32] 2[32]) v2849[8]) (add[32] v2791[32] 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] m2852[8] 0x080496f4[32] 1[8]) (add[32] v2791[32] 3[32]) v2851[8]) (add[32] v2791[32] 3[32]))))) }
        si      = { defs={} expr=v2792[32] }
        di      = { defs={} expr=v2793[32] }
        es      = { defs={} expr=v2794[16] }
        cs      = { defs={} expr=v2795[16] }
        ss      = { defs={} expr=v2796[16] }
        ds      = { defs={} expr=v2797[16] }
        fs      = { defs={} expr=v2798[16] }
        gs      = { defs={} expr=v2799[16] }
        cf      = { defs={} expr=v2800[1] }
        ?1      = { defs={} expr=v2801[1] }
        pf      = { defs={} expr=v2802[1] }
        ?3      = { defs={} expr=v2803[1] }
        af      = { defs={} expr=v2804[1] }
        ?5      = { defs={} expr=v2805[1] }
        zf      = { defs={} expr=v2806[1] }
        sf      = { defs={} expr=v2807[1] }
        tf      = { defs={} expr=v2808[1] }
        if      = { defs={} expr=v2809[1] }
        df      = { defs={} expr=v2810[1] }
        of      = { defs={} expr=v2811[1] }
        iopl0   = { defs={} expr=v2812[1] }
        iopl1   = { defs={} expr=v2813[1] }
        nt      = { defs={} expr=v2814[1] }
        ?15     = { defs={} expr=v2815[1] }
        rf      = { defs={} expr=v2816[1] }
        vm      = { defs={} expr=v2817[1] }
        ac      = { defs={} expr=v2818[1] }
        vif     = { defs={} expr=v2819[1] }
        vip     = { defs={} expr=v2820[1] }
        id      = { defs={} expr=v2821[1] }
        ?22     = { defs={} expr=v2822[1] }
        ?23     = { defs={} expr=v2823[1] }
        ?24     = { defs={} expr=v2824[1] }
        ?25     = { defs={} expr=v2825[1] }
        ?26     = { defs={} expr=v2826[1] }
        ?27     = { defs={} expr=v2827[1] }
        ?28     = { defs={} expr=v2828[1] }
        ?29     = { defs={} expr=v2829[1] }
        ?30     = { defs={} expr=v2830[1] }
        ?31     = { defs={} expr=v2831[1] }
        ip      = { defs={0x080483cd} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] m2868[8] 0x080496f4[32] 1[8]) (add[32] v2791[32] 4[32]) v2867[8]) (add[32] v2791[32] 4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] m2870[8] 0x080496f4[32] 1[8]) (add[32] (add[32] v2791[32] 4[32]) 1[32]) v2869[8]) (add[32] (add[32] v2791[32] 4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] m2872[8] 0x080496f4[32] 1[8]) (add[32] (add[32] v2791[32] 4[32]) 2[32]) v2871[8]) (add[32] (add[32] v2791[32] 4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] m2874[8] 0x080496f4[32] 1[8]) (add[32] (add[32] v2791[32] 4[32]) 3[32]) v2873[8]) (add[32] (add[32] v2791[32] 4[32]) 3[32]))))) }
    memory:
        address = { defs={0x080483c5} expr=0x080496f4[32] }
          value = { defs={} expr=1[8] }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] (add[32] v2791[32] 4[32]) 3[32]) }
          value = { defs={} expr=v2873[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v2791[32] 4[32]) 2[32]) }
          value = { defs={} expr=v2871[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v2791[32] 4[32]) 1[32]) }
          value = { defs={} expr=v2869[8] }
          flags = { rdonly }
        address = { defs={0x080483cc,0x080483cd} expr=(add[32] v2791[32] 4[32]) }
          value = { defs={} expr=v2867[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v2791[32] 3[32]) }
          value = { defs={} expr=v2851[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v2791[32] 2[32]) }
          value = { defs={} expr=v2849[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v2791[32] 1[32]) }
          value = { defs={} expr=v2847[8] }
          flags = { rdonly }
        address = { defs={0x080483cc} expr=v2791[32] }
          value = { defs={} expr=v2845[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483d0:push   ebp
    registers:
        ax      = { defs={} expr=v2929[32] }
        cx      = { defs={} expr=v2930[32] }
        dx      = { defs={} expr=v2931[32] }
        bx      = { defs={} expr=v2932[32] }
        sp      = { defs={0x080483d0} expr=(add[32] v2933[32] -4[32]) }
        bp      = { defs={} expr=v2934[32] }
        si      = { defs={} expr=v2935[32] }
        di      = { defs={} expr=v2936[32] }
        es      = { defs={} expr=v2937[16] }
        cs      = { defs={} expr=v2938[16] }
        ss      = { defs={} expr=v2939[16] }
        ds      = { defs={} expr=v2940[16] }
        fs      = { defs={} expr=v2941[16] }
        gs      = { defs={} expr=v2942[16] }
        cf      = { defs={} expr=v2943[1] }
        ?1      = { defs={} expr=v2944[1] }
        pf      = { defs={} expr=v2945[1] }
        ?3      = { defs={} expr=v2946[1] }
        af      = { defs={} expr=v2947[1] }
        ?5      = { defs={} expr=v2948[1] }
        zf      = { defs={} expr=v2949[1] }
        sf      = { defs={} expr=v2950[1] }
        tf      = { defs={} expr=v2951[1] }
        if      = { defs={} expr=v2952[1] }
        df      = { defs={} expr=v2953[1] }
        of      = { defs={} expr=v2954[1] }
        iopl0   = { defs={} expr=v2955[1] }
        iopl1   = { defs={} expr=v2956[1] }
        nt      = { defs={} expr=v2957[1] }
        ?15     = { defs={} expr=v2958[1] }
        rf      = { defs={} expr=v2959[1] }
        vm      = { defs={} expr=v2960[1] }
        ac      = { defs={} expr=v2961[1] }
        vif     = { defs={} expr=v2962[1] }
        vip     = { defs={} expr=v2963[1] }
        id      = { defs={} expr=v2964[1] }
        ?22     = { defs={} expr=v2965[1] }
        ?23     = { defs={} expr=v2966[1] }
        ?24     = { defs={} expr=v2967[1] }
        ?25     = { defs={} expr=v2968[1] }
        ?26     = { defs={} expr=v2969[1] }
        ?27     = { defs={} expr=v2970[1] }
        ?28     = { defs={} expr=v2971[1] }
        ?29     = { defs={} expr=v2972[1] }
        ?30     = { defs={} expr=v2973[1] }
        ?31     = { defs={} expr=v2974[1] }
        ip      = { defs={0x080483d0} expr=0x080483d1[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2933[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2934[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2933[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2934[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2933[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2934[32]) }
          flags = { }
        address = { defs={0x080483d0} expr=(add[32] v2933[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2934[32]) }
          flags = { }
    init mem:
0x80483d1:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v2929[32] }
        cx      = { defs={} expr=v2930[32] }
        dx      = { defs={} expr=v2931[32] }
        bx      = { defs={} expr=v2932[32] }
        sp      = { defs={0x080483d0} expr=(add[32] v2933[32] -4[32]) }
        bp      = { defs={0x080483d0,0x080483d1} expr=(add[32] v2933[32] -4[32]) }
        si      = { defs={} expr=v2935[32] }
        di      = { defs={} expr=v2936[32] }
        es      = { defs={} expr=v2937[16] }
        cs      = { defs={} expr=v2938[16] }
        ss      = { defs={} expr=v2939[16] }
        ds      = { defs={} expr=v2940[16] }
        fs      = { defs={} expr=v2941[16] }
        gs      = { defs={} expr=v2942[16] }
        cf      = { defs={} expr=v2943[1] }
        ?1      = { defs={} expr=v2944[1] }
        pf      = { defs={} expr=v2945[1] }
        ?3      = { defs={} expr=v2946[1] }
        af      = { defs={} expr=v2947[1] }
        ?5      = { defs={} expr=v2948[1] }
        zf      = { defs={} expr=v2949[1] }
        sf      = { defs={} expr=v2950[1] }
        tf      = { defs={} expr=v2951[1] }
        if      = { defs={} expr=v2952[1] }
        df      = { defs={} expr=v2953[1] }
        of      = { defs={} expr=v2954[1] }
        iopl0   = { defs={} expr=v2955[1] }
        iopl1   = { defs={} expr=v2956[1] }
        nt      = { defs={} expr=v2957[1] }
        ?15     = { defs={} expr=v2958[1] }
        rf      = { defs={} expr=v2959[1] }
        vm      = { defs={} expr=v2960[1] }
        ac      = { defs={} expr=v2961[1] }
        vif     = { defs={} expr=v2962[1] }
        vip     = { defs={} expr=v2963[1] }
        id      = { defs={} expr=v2964[1] }
        ?22     = { defs={} expr=v2965[1] }
        ?23     = { defs={} expr=v2966[1] }
        ?24     = { defs={} expr=v2967[1] }
        ?25     = { defs={} expr=v2968[1] }
        ?26     = { defs={} expr=v2969[1] }
        ?27     = { defs={} expr=v2970[1] }
        ?28     = { defs={} expr=v2971[1] }
        ?29     = { defs={} expr=v2972[1] }
        ?30     = { defs={} expr=v2973[1] }
        ?31     = { defs={} expr=v2974[1] }
        ip      = { defs={0x080483d0,0x080483d1} expr=0x080483d3[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2933[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2934[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2933[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2934[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2933[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2934[32]) }
          flags = { }
        address = { defs={0x080483d0} expr=(add[32] v2933[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2934[32]) }
          flags = { }
    init mem:
0x80483d3:sub    esp, 0x08
    registers:
        ax      = { defs={} expr=v2929[32] }
        cx      = { defs={} expr=v2930[32] }
        dx      = { defs={} expr=v2931[32] }
        bx      = { defs={} expr=v2932[32] }
        sp      = { defs={0x080483d0,0x080483d3} expr=(add[32] (add[32] v2933[32] -4[32]) -8[32]) }
        bp      = { defs={0x080483d0,0x080483d1} expr=(add[32] v2933[32] -4[32]) }
        si      = { defs={} expr=v2935[32] }
        di      = { defs={} expr=v2936[32] }
        es      = { defs={} expr=v2937[16] }
        cs      = { defs={} expr=v2938[16] }
        ss      = { defs={} expr=v2939[16] }
        ds      = { defs={} expr=v2940[16] }
        fs      = { defs={} expr=v2941[16] }
        gs      = { defs={} expr=v2942[16] }
        cf      = { defs={0x080483d0,0x080483d3} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2933[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2933[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v2944[1] }
        pf      = { defs={0x080483d0,0x080483d3} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2933[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2933[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2933[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2933[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2933[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2933[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2933[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2933[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v2946[1] }
        af      = { defs={0x080483d0,0x080483d3} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2933[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2933[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v2948[1] }
        zf      = { defs={0x080483d0,0x080483d3} expr=(zerop[1] (add[32] (add[32] v2933[32] -4[32]) -8[32])) }
        sf      = { defs={0x080483d0,0x080483d3} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v2933[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v2951[1] }
        if      = { defs={} expr=v2952[1] }
        df      = { defs={} expr=v2953[1] }
        of      = { defs={0x080483d0,0x080483d3} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2933[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2933[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2933[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2933[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v2955[1] }
        iopl1   = { defs={} expr=v2956[1] }
        nt      = { defs={} expr=v2957[1] }
        ?15     = { defs={} expr=v2958[1] }
        rf      = { defs={} expr=v2959[1] }
        vm      = { defs={} expr=v2960[1] }
        ac      = { defs={} expr=v2961[1] }
        vif     = { defs={} expr=v2962[1] }
        vip     = { defs={} expr=v2963[1] }
        id      = { defs={} expr=v2964[1] }
        ?22     = { defs={} expr=v2965[1] }
        ?23     = { defs={} expr=v2966[1] }
        ?24     = { defs={} expr=v2967[1] }
        ?25     = { defs={} expr=v2968[1] }
        ?26     = { defs={} expr=v2969[1] }
        ?27     = { defs={} expr=v2970[1] }
        ?28     = { defs={} expr=v2971[1] }
        ?29     = { defs={} expr=v2972[1] }
        ?30     = { defs={} expr=v2973[1] }
        ?31     = { defs={} expr=v2974[1] }
        ip      = { defs={0x080483d0,0x080483d1,0x080483d3} expr=0x080483d6[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2933[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2934[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2933[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2934[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2933[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2934[32]) }
          flags = { }
        address = { defs={0x080483d0} expr=(add[32] v2933[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2934[32]) }
          flags = { }
    init mem:
0x80483d6:mov    eax, DWORD PTR ds:[0x080495f8<.jcr>]
    registers:
        ax      = { defs={0x080483d6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3046[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f8[32] v3045[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3048[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f9[32] v3047[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3050[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fa[32] v3049[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3052[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fb[32] v3051[8]) 0x080495fb[32])))) }
        cx      = { defs={} expr=v2930[32] }
        dx      = { defs={} expr=v2931[32] }
        bx      = { defs={} expr=v2932[32] }
        sp      = { defs={0x080483d0,0x080483d3} expr=(add[32] (add[32] v2933[32] -4[32]) -8[32]) }
        bp      = { defs={0x080483d0,0x080483d1} expr=(add[32] v2933[32] -4[32]) }
        si      = { defs={} expr=v2935[32] }
        di      = { defs={} expr=v2936[32] }
        es      = { defs={} expr=v2937[16] }
        cs      = { defs={} expr=v2938[16] }
        ss      = { defs={} expr=v2939[16] }
        ds      = { defs={} expr=v2940[16] }
        fs      = { defs={} expr=v2941[16] }
        gs      = { defs={} expr=v2942[16] }
        cf      = { defs={0x080483d0,0x080483d3} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2933[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2933[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v2944[1] }
        pf      = { defs={0x080483d0,0x080483d3} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2933[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2933[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2933[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2933[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2933[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2933[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2933[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2933[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v2946[1] }
        af      = { defs={0x080483d0,0x080483d3} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2933[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2933[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v2948[1] }
        zf      = { defs={0x080483d0,0x080483d3} expr=(zerop[1] (add[32] (add[32] v2933[32] -4[32]) -8[32])) }
        sf      = { defs={0x080483d0,0x080483d3} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v2933[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v2951[1] }
        if      = { defs={} expr=v2952[1] }
        df      = { defs={} expr=v2953[1] }
        of      = { defs={0x080483d0,0x080483d3} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2933[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2933[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2933[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2933[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v2955[1] }
        iopl1   = { defs={} expr=v2956[1] }
        nt      = { defs={} expr=v2957[1] }
        ?15     = { defs={} expr=v2958[1] }
        rf      = { defs={} expr=v2959[1] }
        vm      = { defs={} expr=v2960[1] }
        ac      = { defs={} expr=v2961[1] }
        vif     = { defs={} expr=v2962[1] }
        vip     = { defs={} expr=v2963[1] }
        id      = { defs={} expr=v2964[1] }
        ?22     = { defs={} expr=v2965[1] }
        ?23     = { defs={} expr=v2966[1] }
        ?24     = { defs={} expr=v2967[1] }
        ?25     = { defs={} expr=v2968[1] }
        ?26     = { defs={} expr=v2969[1] }
        ?27     = { defs={} expr=v2970[1] }
        ?28     = { defs={} expr=v2971[1] }
        ?29     = { defs={} expr=v2972[1] }
        ?30     = { defs={} expr=v2973[1] }
        ?31     = { defs={} expr=v2974[1] }
        ip      = { defs={0x080483d0,0x080483d1,0x080483d3,0x080483d6} expr=0x080483db[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2933[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2934[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2933[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2934[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2933[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2934[32]) }
          flags = { }
        address = { defs={0x080483d0} expr=(add[32] v2933[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2934[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=0x080495fb[32] }
          value = { defs={} expr=v3051[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495fa[32] }
          value = { defs={} expr=v3049[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495f9[32] }
          value = { defs={} expr=v3047[8] }
          flags = { rdonly }
        address = { defs={0x080483d6} expr=0x080495f8[32] }
          value = { defs={} expr=v3045[8] }
          flags = { rdonly }
0x80483db:test   eax, eax
    registers:
        ax      = { defs={0x080483d6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3046[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f8[32] v3045[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3048[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f9[32] v3047[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3050[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fa[32] v3049[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3052[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fb[32] v3051[8]) 0x080495fb[32])))) }
        cx      = { defs={} expr=v2930[32] }
        dx      = { defs={} expr=v2931[32] }
        bx      = { defs={} expr=v2932[32] }
        sp      = { defs={0x080483d0,0x080483d3} expr=(add[32] (add[32] v2933[32] -4[32]) -8[32]) }
        bp      = { defs={0x080483d0,0x080483d1} expr=(add[32] v2933[32] -4[32]) }
        si      = { defs={} expr=v2935[32] }
        di      = { defs={} expr=v2936[32] }
        es      = { defs={} expr=v2937[16] }
        cs      = { defs={} expr=v2938[16] }
        ss      = { defs={} expr=v2939[16] }
        ds      = { defs={} expr=v2940[16] }
        fs      = { defs={} expr=v2941[16] }
        gs      = { defs={} expr=v2942[16] }
        cf      = { defs={0x080483db} expr=0[1] }
        ?1      = { defs={} expr=v2944[1] }
        pf      = { defs={0x080483d6,0x080483db} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3046[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f8[32] v3045[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3048[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f9[32] v3047[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3050[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fa[32] v3049[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3052[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fb[32] v3051[8]) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3046[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f8[32] v3045[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3048[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f9[32] v3047[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3050[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fa[32] v3049[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3052[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fb[32] v3051[8]) 0x080495fb[32]))))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3046[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f8[32] v3045[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3048[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f9[32] v3047[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3050[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fa[32] v3049[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3052[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fb[32] v3051[8]) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3046[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f8[32] v3045[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3048[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f9[32] v3047[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3050[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fa[32] v3049[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3052[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fb[32] v3051[8]) 0x080495fb[32])))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3046[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f8[32] v3045[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3048[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f9[32] v3047[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3050[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fa[32] v3049[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3052[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fb[32] v3051[8]) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3046[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f8[32] v3045[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3048[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f9[32] v3047[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3050[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fa[32] v3049[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3052[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fb[32] v3051[8]) 0x080495fb[32]))))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3046[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f8[32] v3045[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3048[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f9[32] v3047[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3050[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fa[32] v3049[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3052[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fb[32] v3051[8]) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3046[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f8[32] v3045[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3048[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f9[32] v3047[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3050[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fa[32] v3049[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3052[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fb[32] v3051[8]) 0x080495fb[32]))))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3046[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f8[32] v3045[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3048[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f9[32] v3047[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3050[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fa[32] v3049[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3052[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fb[32] v3051[8]) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3046[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f8[32] v3045[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3048[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f9[32] v3047[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3050[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fa[32] v3049[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3052[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fb[32] v3051[8]) 0x080495fb[32]))))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3046[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f8[32] v3045[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3048[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f9[32] v3047[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3050[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fa[32] v3049[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3052[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fb[32] v3051[8]) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3046[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f8[32] v3045[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3048[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f9[32] v3047[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3050[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fa[32] v3049[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3052[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fb[32] v3051[8]) 0x080495fb[32])))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3046[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f8[32] v3045[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3048[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f9[32] v3047[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3050[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fa[32] v3049[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3052[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fb[32] v3051[8]) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3046[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f8[32] v3045[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3048[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f9[32] v3047[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3050[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fa[32] v3049[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3052[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fb[32] v3051[8]) 0x080495fb[32]))))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3046[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f8[32] v3045[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3048[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f9[32] v3047[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3050[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fa[32] v3049[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3052[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fb[32] v3051[8]) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3046[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f8[32] v3045[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3048[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f9[32] v3047[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3050[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fa[32] v3049[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3052[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fb[32] v3051[8]) 0x080495fb[32]))))))))))) }
        ?3      = { defs={} expr=v2946[1] }
        af      = { defs={0x080483db} expr=v3089[1] }
        ?5      = { defs={} expr=v2948[1] }
        zf      = { defs={0x080483d6,0x080483db} expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3046[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f8[32] v3045[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3048[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f9[32] v3047[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3050[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fa[32] v3049[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3052[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fb[32] v3051[8]) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3046[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f8[32] v3045[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3048[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f9[32] v3047[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3050[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fa[32] v3049[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3052[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fb[32] v3051[8]) 0x080495fb[32])))))) }
        sf      = { defs={0x080483d6,0x080483db} expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3046[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f8[32] v3045[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3048[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f9[32] v3047[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3050[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fa[32] v3049[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3052[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fb[32] v3051[8]) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3046[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f8[32] v3045[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3048[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f9[32] v3047[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3050[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fa[32] v3049[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3052[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fb[32] v3051[8]) 0x080495fb[32])))))) }
        tf      = { defs={} expr=v2951[1] }
        if      = { defs={} expr=v2952[1] }
        df      = { defs={} expr=v2953[1] }
        of      = { defs={0x080483db} expr=0[1] }
        iopl0   = { defs={} expr=v2955[1] }
        iopl1   = { defs={} expr=v2956[1] }
        nt      = { defs={} expr=v2957[1] }
        ?15     = { defs={} expr=v2958[1] }
        rf      = { defs={} expr=v2959[1] }
        vm      = { defs={} expr=v2960[1] }
        ac      = { defs={} expr=v2961[1] }
        vif     = { defs={} expr=v2962[1] }
        vip     = { defs={} expr=v2963[1] }
        id      = { defs={} expr=v2964[1] }
        ?22     = { defs={} expr=v2965[1] }
        ?23     = { defs={} expr=v2966[1] }
        ?24     = { defs={} expr=v2967[1] }
        ?25     = { defs={} expr=v2968[1] }
        ?26     = { defs={} expr=v2969[1] }
        ?27     = { defs={} expr=v2970[1] }
        ?28     = { defs={} expr=v2971[1] }
        ?29     = { defs={} expr=v2972[1] }
        ?30     = { defs={} expr=v2973[1] }
        ?31     = { defs={} expr=v2974[1] }
        ip      = { defs={0x080483d0,0x080483d1,0x080483d3,0x080483d6,0x080483db} expr=0x080483dd[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2933[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2934[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2933[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2934[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2933[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2934[32]) }
          flags = { }
        address = { defs={0x080483d0} expr=(add[32] v2933[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2934[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=0x080495fb[32] }
          value = { defs={} expr=v3051[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495fa[32] }
          value = { defs={} expr=v3049[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495f9[32] }
          value = { defs={} expr=v3047[8] }
          flags = { rdonly }
        address = { defs={0x080483d6} expr=0x080495f8[32] }
          value = { defs={} expr=v3045[8] }
          flags = { rdonly }
0x80483dd:je     0x08048400<<Insn>>
    registers:
        ax      = { defs={0x080483d6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3046[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f8[32] v3045[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3048[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f9[32] v3047[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3050[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fa[32] v3049[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3052[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fb[32] v3051[8]) 0x080495fb[32])))) }
        cx      = { defs={} expr=v2930[32] }
        dx      = { defs={} expr=v2931[32] }
        bx      = { defs={} expr=v2932[32] }
        sp      = { defs={0x080483d0,0x080483d3} expr=(add[32] (add[32] v2933[32] -4[32]) -8[32]) }
        bp      = { defs={0x080483d0,0x080483d1} expr=(add[32] v2933[32] -4[32]) }
        si      = { defs={} expr=v2935[32] }
        di      = { defs={} expr=v2936[32] }
        es      = { defs={} expr=v2937[16] }
        cs      = { defs={} expr=v2938[16] }
        ss      = { defs={} expr=v2939[16] }
        ds      = { defs={} expr=v2940[16] }
        fs      = { defs={} expr=v2941[16] }
        gs      = { defs={} expr=v2942[16] }
        cf      = { defs={0x080483db} expr=0[1] }
        ?1      = { defs={} expr=v2944[1] }
        pf      = { defs={0x080483d6,0x080483db} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3046[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f8[32] v3045[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3048[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f9[32] v3047[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3050[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fa[32] v3049[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3052[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fb[32] v3051[8]) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3046[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f8[32] v3045[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3048[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f9[32] v3047[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3050[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fa[32] v3049[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3052[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fb[32] v3051[8]) 0x080495fb[32]))))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3046[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f8[32] v3045[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3048[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f9[32] v3047[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3050[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fa[32] v3049[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3052[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fb[32] v3051[8]) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3046[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f8[32] v3045[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3048[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f9[32] v3047[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3050[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fa[32] v3049[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3052[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fb[32] v3051[8]) 0x080495fb[32])))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3046[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f8[32] v3045[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3048[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f9[32] v3047[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3050[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fa[32] v3049[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3052[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fb[32] v3051[8]) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3046[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f8[32] v3045[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3048[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f9[32] v3047[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3050[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fa[32] v3049[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3052[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fb[32] v3051[8]) 0x080495fb[32]))))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3046[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f8[32] v3045[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3048[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f9[32] v3047[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3050[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fa[32] v3049[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3052[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fb[32] v3051[8]) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3046[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f8[32] v3045[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3048[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f9[32] v3047[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3050[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fa[32] v3049[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3052[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fb[32] v3051[8]) 0x080495fb[32]))))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3046[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f8[32] v3045[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3048[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f9[32] v3047[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3050[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fa[32] v3049[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3052[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fb[32] v3051[8]) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3046[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f8[32] v3045[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3048[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f9[32] v3047[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3050[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fa[32] v3049[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3052[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fb[32] v3051[8]) 0x080495fb[32]))))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3046[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f8[32] v3045[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3048[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f9[32] v3047[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3050[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fa[32] v3049[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3052[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fb[32] v3051[8]) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3046[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f8[32] v3045[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3048[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f9[32] v3047[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3050[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fa[32] v3049[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3052[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fb[32] v3051[8]) 0x080495fb[32])))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3046[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f8[32] v3045[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3048[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f9[32] v3047[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3050[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fa[32] v3049[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3052[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fb[32] v3051[8]) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3046[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f8[32] v3045[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3048[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f9[32] v3047[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3050[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fa[32] v3049[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3052[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fb[32] v3051[8]) 0x080495fb[32]))))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3046[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f8[32] v3045[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3048[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f9[32] v3047[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3050[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fa[32] v3049[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3052[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fb[32] v3051[8]) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3046[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f8[32] v3045[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3048[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f9[32] v3047[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3050[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fa[32] v3049[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3052[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fb[32] v3051[8]) 0x080495fb[32]))))))))))) }
        ?3      = { defs={} expr=v2946[1] }
        af      = { defs={0x080483db} expr=v3089[1] }
        ?5      = { defs={} expr=v2948[1] }
        zf      = { defs={0x080483d6,0x080483db} expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3046[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f8[32] v3045[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3048[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f9[32] v3047[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3050[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fa[32] v3049[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3052[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fb[32] v3051[8]) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3046[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f8[32] v3045[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3048[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f9[32] v3047[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3050[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fa[32] v3049[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3052[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fb[32] v3051[8]) 0x080495fb[32])))))) }
        sf      = { defs={0x080483d6,0x080483db} expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3046[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f8[32] v3045[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3048[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f9[32] v3047[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3050[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fa[32] v3049[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3052[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fb[32] v3051[8]) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3046[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f8[32] v3045[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3048[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f9[32] v3047[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3050[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fa[32] v3049[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3052[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fb[32] v3051[8]) 0x080495fb[32])))))) }
        tf      = { defs={} expr=v2951[1] }
        if      = { defs={} expr=v2952[1] }
        df      = { defs={} expr=v2953[1] }
        of      = { defs={0x080483db} expr=0[1] }
        iopl0   = { defs={} expr=v2955[1] }
        iopl1   = { defs={} expr=v2956[1] }
        nt      = { defs={} expr=v2957[1] }
        ?15     = { defs={} expr=v2958[1] }
        rf      = { defs={} expr=v2959[1] }
        vm      = { defs={} expr=v2960[1] }
        ac      = { defs={} expr=v2961[1] }
        vif     = { defs={} expr=v2962[1] }
        vip     = { defs={} expr=v2963[1] }
        id      = { defs={} expr=v2964[1] }
        ?22     = { defs={} expr=v2965[1] }
        ?23     = { defs={} expr=v2966[1] }
        ?24     = { defs={} expr=v2967[1] }
        ?25     = { defs={} expr=v2968[1] }
        ?26     = { defs={} expr=v2969[1] }
        ?27     = { defs={} expr=v2970[1] }
        ?28     = { defs={} expr=v2971[1] }
        ?29     = { defs={} expr=v2972[1] }
        ?30     = { defs={} expr=v2973[1] }
        ?31     = { defs={} expr=v2974[1] }
        ip      = { defs={0x080483d0,0x080483d1,0x080483d3,0x080483d6,0x080483db,0x080483dd} expr=(ite[32] (zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3046[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f8[32] v3045[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3048[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f9[32] v3047[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3050[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fa[32] v3049[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3052[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fb[32] v3051[8]) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3046[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f8[32] v3045[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3048[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495f9[32] v3047[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3050[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fa[32] v3049[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3052[8] (add[32] (add[32] v2933[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2934[32])) (add[32] (add[32] v2933[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2934[32])) (add[32] v2933[32] -4[32]) (extract[8] 0[32] 8[32] v2934[32])) 0x080495fb[32] v3051[8]) 0x080495fb[32])))))) 0x08048400[32] 0x080483df[32]) }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2933[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2934[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2933[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2934[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2933[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2934[32]) }
          flags = { }
        address = { defs={0x080483d0} expr=(add[32] v2933[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2934[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=0x080495fb[32] }
          value = { defs={} expr=v3051[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495fa[32] }
          value = { defs={} expr=v3049[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495f9[32] }
          value = { defs={} expr=v3047[8] }
          flags = { rdonly }
        address = { defs={0x080483d6} expr=0x080495f8[32] }
          value = { defs={} expr=v3045[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483df:mov    eax, 0x00000000
    registers:
        ax      = { defs={0x080483df} expr=0[32] }
        cx      = { defs={} expr=v3148[32] }
        dx      = { defs={} expr=v3149[32] }
        bx      = { defs={} expr=v3150[32] }
        sp      = { defs={} expr=v3151[32] }
        bp      = { defs={} expr=v3152[32] }
        si      = { defs={} expr=v3153[32] }
        di      = { defs={} expr=v3154[32] }
        es      = { defs={} expr=v3155[16] }
        cs      = { defs={} expr=v3156[16] }
        ss      = { defs={} expr=v3157[16] }
        ds      = { defs={} expr=v3158[16] }
        fs      = { defs={} expr=v3159[16] }
        gs      = { defs={} expr=v3160[16] }
        cf      = { defs={} expr=v3161[1] }
        ?1      = { defs={} expr=v3162[1] }
        pf      = { defs={} expr=v3163[1] }
        ?3      = { defs={} expr=v3164[1] }
        af      = { defs={} expr=v3165[1] }
        ?5      = { defs={} expr=v3166[1] }
        zf      = { defs={} expr=v3167[1] }
        sf      = { defs={} expr=v3168[1] }
        tf      = { defs={} expr=v3169[1] }
        if      = { defs={} expr=v3170[1] }
        df      = { defs={} expr=v3171[1] }
        of      = { defs={} expr=v3172[1] }
        iopl0   = { defs={} expr=v3173[1] }
        iopl1   = { defs={} expr=v3174[1] }
        nt      = { defs={} expr=v3175[1] }
        ?15     = { defs={} expr=v3176[1] }
        rf      = { defs={} expr=v3177[1] }
        vm      = { defs={} expr=v3178[1] }
        ac      = { defs={} expr=v3179[1] }
        vif     = { defs={} expr=v3180[1] }
        vip     = { defs={} expr=v3181[1] }
        id      = { defs={} expr=v3182[1] }
        ?22     = { defs={} expr=v3183[1] }
        ?23     = { defs={} expr=v3184[1] }
        ?24     = { defs={} expr=v3185[1] }
        ?25     = { defs={} expr=v3186[1] }
        ?26     = { defs={} expr=v3187[1] }
        ?27     = { defs={} expr=v3188[1] }
        ?28     = { defs={} expr=v3189[1] }
        ?29     = { defs={} expr=v3190[1] }
        ?30     = { defs={} expr=v3191[1] }
        ?31     = { defs={} expr=v3192[1] }
        ip      = { defs={0x080483df} expr=0x080483e4[32] }
    memory:
    init mem:
0x80483e4:test   eax, eax
    registers:
        ax      = { defs={0x080483df} expr=0[32] }
        cx      = { defs={} expr=v3148[32] }
        dx      = { defs={} expr=v3149[32] }
        bx      = { defs={} expr=v3150[32] }
        sp      = { defs={} expr=v3151[32] }
        bp      = { defs={} expr=v3152[32] }
        si      = { defs={} expr=v3153[32] }
        di      = { defs={} expr=v3154[32] }
        es      = { defs={} expr=v3155[16] }
        cs      = { defs={} expr=v3156[16] }
        ss      = { defs={} expr=v3157[16] }
        ds      = { defs={} expr=v3158[16] }
        fs      = { defs={} expr=v3159[16] }
        gs      = { defs={} expr=v3160[16] }
        cf      = { defs={0x080483e4} expr=0[1] }
        ?1      = { defs={} expr=v3162[1] }
        pf      = { defs={0x080483df,0x080483e4} expr=1[1] }
        ?3      = { defs={} expr=v3164[1] }
        af      = { defs={0x080483e4} expr=v3229[1] }
        ?5      = { defs={} expr=v3166[1] }
        zf      = { defs={0x080483df,0x080483e4} expr=1[1] }
        sf      = { defs={0x080483df,0x080483e4} expr=0[1] }
        tf      = { defs={} expr=v3169[1] }
        if      = { defs={} expr=v3170[1] }
        df      = { defs={} expr=v3171[1] }
        of      = { defs={0x080483e4} expr=0[1] }
        iopl0   = { defs={} expr=v3173[1] }
        iopl1   = { defs={} expr=v3174[1] }
        nt      = { defs={} expr=v3175[1] }
        ?15     = { defs={} expr=v3176[1] }
        rf      = { defs={} expr=v3177[1] }
        vm      = { defs={} expr=v3178[1] }
        ac      = { defs={} expr=v3179[1] }
        vif     = { defs={} expr=v3180[1] }
        vip     = { defs={} expr=v3181[1] }
        id      = { defs={} expr=v3182[1] }
        ?22     = { defs={} expr=v3183[1] }
        ?23     = { defs={} expr=v3184[1] }
        ?24     = { defs={} expr=v3185[1] }
        ?25     = { defs={} expr=v3186[1] }
        ?26     = { defs={} expr=v3187[1] }
        ?27     = { defs={} expr=v3188[1] }
        ?28     = { defs={} expr=v3189[1] }
        ?29     = { defs={} expr=v3190[1] }
        ?30     = { defs={} expr=v3191[1] }
        ?31     = { defs={} expr=v3192[1] }
        ip      = { defs={0x080483df,0x080483e4} expr=0x080483e6[32] }
    memory:
    init mem:
0x80483e6:je     0x08048400<<Insn>>
    registers:
        ax      = { defs={0x080483df} expr=0[32] }
        cx      = { defs={} expr=v3148[32] }
        dx      = { defs={} expr=v3149[32] }
        bx      = { defs={} expr=v3150[32] }
        sp      = { defs={} expr=v3151[32] }
        bp      = { defs={} expr=v3152[32] }
        si      = { defs={} expr=v3153[32] }
        di      = { defs={} expr=v3154[32] }
        es      = { defs={} expr=v3155[16] }
        cs      = { defs={} expr=v3156[16] }
        ss      = { defs={} expr=v3157[16] }
        ds      = { defs={} expr=v3158[16] }
        fs      = { defs={} expr=v3159[16] }
        gs      = { defs={} expr=v3160[16] }
        cf      = { defs={0x080483e4} expr=0[1] }
        ?1      = { defs={} expr=v3162[1] }
        pf      = { defs={0x080483df,0x080483e4} expr=1[1] }
        ?3      = { defs={} expr=v3164[1] }
        af      = { defs={0x080483e4} expr=v3229[1] }
        ?5      = { defs={} expr=v3166[1] }
        zf      = { defs={0x080483df,0x080483e4} expr=1[1] }
        sf      = { defs={0x080483df,0x080483e4} expr=0[1] }
        tf      = { defs={} expr=v3169[1] }
        if      = { defs={} expr=v3170[1] }
        df      = { defs={} expr=v3171[1] }
        of      = { defs={0x080483e4} expr=0[1] }
        iopl0   = { defs={} expr=v3173[1] }
        iopl1   = { defs={} expr=v3174[1] }
        nt      = { defs={} expr=v3175[1] }
        ?15     = { defs={} expr=v3176[1] }
        rf      = { defs={} expr=v3177[1] }
        vm      = { defs={} expr=v3178[1] }
        ac      = { defs={} expr=v3179[1] }
        vif     = { defs={} expr=v3180[1] }
        vip     = { defs={} expr=v3181[1] }
        id      = { defs={} expr=v3182[1] }
        ?22     = { defs={} expr=v3183[1] }
        ?23     = { defs={} expr=v3184[1] }
        ?24     = { defs={} expr=v3185[1] }
        ?25     = { defs={} expr=v3186[1] }
        ?26     = { defs={} expr=v3187[1] }
        ?27     = { defs={} expr=v3188[1] }
        ?28     = { defs={} expr=v3189[1] }
        ?29     = { defs={} expr=v3190[1] }
        ?30     = { defs={} expr=v3191[1] }
        ?31     = { defs={} expr=v3192[1] }
        ip      = { defs={0x080483df,0x080483e4,0x080483e6} expr=0x08048400[32] }
    memory:
    init mem:
0x8048400:mov    esp, ebp
    registers:
        ax      = { defs={0x080483df} expr=0[32] }
        cx      = { defs={} expr=v3148[32] }
        dx      = { defs={} expr=v3149[32] }
        bx      = { defs={} expr=v3150[32] }
        sp      = { defs={0x08048400} expr=v3152[32] }
        bp      = { defs={} expr=v3152[32] }
        si      = { defs={} expr=v3153[32] }
        di      = { defs={} expr=v3154[32] }
        es      = { defs={} expr=v3155[16] }
        cs      = { defs={} expr=v3156[16] }
        ss      = { defs={} expr=v3157[16] }
        ds      = { defs={} expr=v3158[16] }
        fs      = { defs={} expr=v3159[16] }
        gs      = { defs={} expr=v3160[16] }
        cf      = { defs={0x080483e4} expr=0[1] }
        ?1      = { defs={} expr=v3162[1] }
        pf      = { defs={0x080483df,0x080483e4} expr=1[1] }
        ?3      = { defs={} expr=v3164[1] }
        af      = { defs={0x080483e4} expr=v3229[1] }
        ?5      = { defs={} expr=v3166[1] }
        zf      = { defs={0x080483df,0x080483e4} expr=1[1] }
        sf      = { defs={0x080483df,0x080483e4} expr=0[1] }
        tf      = { defs={} expr=v3169[1] }
        if      = { defs={} expr=v3170[1] }
        df      = { defs={} expr=v3171[1] }
        of      = { defs={0x080483e4} expr=0[1] }
        iopl0   = { defs={} expr=v3173[1] }
        iopl1   = { defs={} expr=v3174[1] }
        nt      = { defs={} expr=v3175[1] }
        ?15     = { defs={} expr=v3176[1] }
        rf      = { defs={} expr=v3177[1] }
        vm      = { defs={} expr=v3178[1] }
        ac      = { defs={} expr=v3179[1] }
        vif     = { defs={} expr=v3180[1] }
        vip     = { defs={} expr=v3181[1] }
        id      = { defs={} expr=v3182[1] }
        ?22     = { defs={} expr=v3183[1] }
        ?23     = { defs={} expr=v3184[1] }
        ?24     = { defs={} expr=v3185[1] }
        ?25     = { defs={} expr=v3186[1] }
        ?26     = { defs={} expr=v3187[1] }
        ?27     = { defs={} expr=v3188[1] }
        ?28     = { defs={} expr=v3189[1] }
        ?29     = { defs={} expr=v3190[1] }
        ?30     = { defs={} expr=v3191[1] }
        ?31     = { defs={} expr=v3192[1] }
        ip      = { defs={0x080483df,0x080483e4,0x080483e6,0x08048400} expr=0x08048402[32] }
    memory:
    init mem:
0x8048402:pop    ebp
    registers:
        ax      = { defs={0x080483df} expr=0[32] }
        cx      = { defs={} expr=v3148[32] }
        dx      = { defs={} expr=v3149[32] }
        bx      = { defs={} expr=v3150[32] }
        sp      = { defs={0x08048400,0x08048402} expr=(add[32] v3152[32] 4[32]) }
        bp      = { defs={0x08048402} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3252[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3253[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3254[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3255[8]))) }
        si      = { defs={} expr=v3153[32] }
        di      = { defs={} expr=v3154[32] }
        es      = { defs={} expr=v3155[16] }
        cs      = { defs={} expr=v3156[16] }
        ss      = { defs={} expr=v3157[16] }
        ds      = { defs={} expr=v3158[16] }
        fs      = { defs={} expr=v3159[16] }
        gs      = { defs={} expr=v3160[16] }
        cf      = { defs={0x080483e4} expr=0[1] }
        ?1      = { defs={} expr=v3162[1] }
        pf      = { defs={0x080483df,0x080483e4} expr=1[1] }
        ?3      = { defs={} expr=v3164[1] }
        af      = { defs={0x080483e4} expr=v3229[1] }
        ?5      = { defs={} expr=v3166[1] }
        zf      = { defs={0x080483df,0x080483e4} expr=1[1] }
        sf      = { defs={0x080483df,0x080483e4} expr=0[1] }
        tf      = { defs={} expr=v3169[1] }
        if      = { defs={} expr=v3170[1] }
        df      = { defs={} expr=v3171[1] }
        of      = { defs={0x080483e4} expr=0[1] }
        iopl0   = { defs={} expr=v3173[1] }
        iopl1   = { defs={} expr=v3174[1] }
        nt      = { defs={} expr=v3175[1] }
        ?15     = { defs={} expr=v3176[1] }
        rf      = { defs={} expr=v3177[1] }
        vm      = { defs={} expr=v3178[1] }
        ac      = { defs={} expr=v3179[1] }
        vif     = { defs={} expr=v3180[1] }
        vip     = { defs={} expr=v3181[1] }
        id      = { defs={} expr=v3182[1] }
        ?22     = { defs={} expr=v3183[1] }
        ?23     = { defs={} expr=v3184[1] }
        ?24     = { defs={} expr=v3185[1] }
        ?25     = { defs={} expr=v3186[1] }
        ?26     = { defs={} expr=v3187[1] }
        ?27     = { defs={} expr=v3188[1] }
        ?28     = { defs={} expr=v3189[1] }
        ?29     = { defs={} expr=v3190[1] }
        ?30     = { defs={} expr=v3191[1] }
        ?31     = { defs={} expr=v3192[1] }
        ip      = { defs={0x080483df,0x080483e4,0x080483e6,0x08048400,0x08048402} expr=0x08048403[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v3152[32] 3[32]) }
          value = { defs={} expr=v3255[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3152[32] 2[32]) }
          value = { defs={} expr=v3254[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3152[32] 1[32]) }
          value = { defs={} expr=v3253[8] }
          flags = { rdonly }
        address = { defs={0x08048400,0x08048402} expr=v3152[32] }
          value = { defs={} expr=v3252[8] }
          flags = { rdonly }
0x8048403:ret    
    registers:
        ax      = { defs={0x080483df} expr=0[32] }
        cx      = { defs={} expr=v3148[32] }
        dx      = { defs={} expr=v3149[32] }
        bx      = { defs={} expr=v3150[32] }
        sp      = { defs={0x08048400,0x08048402,0x08048403} expr=(add[32] (add[32] v3152[32] 4[32]) 4[32]) }
        bp      = { defs={0x08048402} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3252[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3253[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3254[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3255[8]))) }
        si      = { defs={} expr=v3153[32] }
        di      = { defs={} expr=v3154[32] }
        es      = { defs={} expr=v3155[16] }
        cs      = { defs={} expr=v3156[16] }
        ss      = { defs={} expr=v3157[16] }
        ds      = { defs={} expr=v3158[16] }
        fs      = { defs={} expr=v3159[16] }
        gs      = { defs={} expr=v3160[16] }
        cf      = { defs={0x080483e4} expr=0[1] }
        ?1      = { defs={} expr=v3162[1] }
        pf      = { defs={0x080483df,0x080483e4} expr=1[1] }
        ?3      = { defs={} expr=v3164[1] }
        af      = { defs={0x080483e4} expr=v3229[1] }
        ?5      = { defs={} expr=v3166[1] }
        zf      = { defs={0x080483df,0x080483e4} expr=1[1] }
        sf      = { defs={0x080483df,0x080483e4} expr=0[1] }
        tf      = { defs={} expr=v3169[1] }
        if      = { defs={} expr=v3170[1] }
        df      = { defs={} expr=v3171[1] }
        of      = { defs={0x080483e4} expr=0[1] }
        iopl0   = { defs={} expr=v3173[1] }
        iopl1   = { defs={} expr=v3174[1] }
        nt      = { defs={} expr=v3175[1] }
        ?15     = { defs={} expr=v3176[1] }
        rf      = { defs={} expr=v3177[1] }
        vm      = { defs={} expr=v3178[1] }
        ac      = { defs={} expr=v3179[1] }
        vif     = { defs={} expr=v3180[1] }
        vip     = { defs={} expr=v3181[1] }
        id      = { defs={} expr=v3182[1] }
        ?22     = { defs={} expr=v3183[1] }
        ?23     = { defs={} expr=v3184[1] }
        ?24     = { defs={} expr=v3185[1] }
        ?25     = { defs={} expr=v3186[1] }
        ?26     = { defs={} expr=v3187[1] }
        ?27     = { defs={} expr=v3188[1] }
        ?28     = { defs={} expr=v3189[1] }
        ?29     = { defs={} expr=v3190[1] }
        ?30     = { defs={} expr=v3191[1] }
        ?31     = { defs={} expr=v3192[1] }
        ip      = { defs={0x08048403} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3269[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3270[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3271[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3272[8]))) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v3152[32] 4[32]) 3[32]) }
          value = { defs={} expr=v3272[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v3152[32] 4[32]) 2[32]) }
          value = { defs={} expr=v3271[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v3152[32] 4[32]) 1[32]) }
          value = { defs={} expr=v3270[8] }
          flags = { rdonly }
        address = { defs={0x08048400,0x08048402,0x08048403} expr=(add[32] v3152[32] 4[32]) }
          value = { defs={} expr=v3269[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3152[32] 3[32]) }
          value = { defs={} expr=v3255[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3152[32] 2[32]) }
          value = { defs={} expr=v3254[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3152[32] 1[32]) }
          value = { defs={} expr=v3253[8] }
          flags = { rdonly }
        address = { defs={0x08048400,0x08048402} expr=v3152[32] }
          value = { defs={} expr=v3252[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483e8:mov    DWORD PTR ss:[esp], 0x080495f8<.jcr>
    registers:
        ax      = { defs={} expr=v3327[32] }
        cx      = { defs={} expr=v3328[32] }
        dx      = { defs={} expr=v3329[32] }
        bx      = { defs={} expr=v3330[32] }
        sp      = { defs={} expr=v3331[32] }
        bp      = { defs={} expr=v3332[32] }
        si      = { defs={} expr=v3333[32] }
        di      = { defs={} expr=v3334[32] }
        es      = { defs={} expr=v3335[16] }
        cs      = { defs={} expr=v3336[16] }
        ss      = { defs={} expr=v3337[16] }
        ds      = { defs={} expr=v3338[16] }
        fs      = { defs={} expr=v3339[16] }
        gs      = { defs={} expr=v3340[16] }
        cf      = { defs={} expr=v3341[1] }
        ?1      = { defs={} expr=v3342[1] }
        pf      = { defs={} expr=v3343[1] }
        ?3      = { defs={} expr=v3344[1] }
        af      = { defs={} expr=v3345[1] }
        ?5      = { defs={} expr=v3346[1] }
        zf      = { defs={} expr=v3347[1] }
        sf      = { defs={} expr=v3348[1] }
        tf      = { defs={} expr=v3349[1] }
        if      = { defs={} expr=v3350[1] }
        df      = { defs={} expr=v3351[1] }
        of      = { defs={} expr=v3352[1] }
        iopl0   = { defs={} expr=v3353[1] }
        iopl1   = { defs={} expr=v3354[1] }
        nt      = { defs={} expr=v3355[1] }
        ?15     = { defs={} expr=v3356[1] }
        rf      = { defs={} expr=v3357[1] }
        vm      = { defs={} expr=v3358[1] }
        ac      = { defs={} expr=v3359[1] }
        vif     = { defs={} expr=v3360[1] }
        vip     = { defs={} expr=v3361[1] }
        id      = { defs={} expr=v3362[1] }
        ?22     = { defs={} expr=v3363[1] }
        ?23     = { defs={} expr=v3364[1] }
        ?24     = { defs={} expr=v3365[1] }
        ?25     = { defs={} expr=v3366[1] }
        ?26     = { defs={} expr=v3367[1] }
        ?27     = { defs={} expr=v3368[1] }
        ?28     = { defs={} expr=v3369[1] }
        ?29     = { defs={} expr=v3370[1] }
        ?30     = { defs={} expr=v3371[1] }
        ?31     = { defs={} expr=v3372[1] }
        ip      = { defs={0x080483e8} expr=0x080483ef[32] }
    memory:
        address = { defs={} expr=(add[32] v3331[32] 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] v3331[32] 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] v3331[32] 1[32]) }
          value = { defs={} expr=-107[8] }
          flags = { }
        address = { defs={0x080483e8} expr=v3331[32] }
          value = { defs={} expr=-8[8] }
          flags = { }
    init mem:
0x80483ef:call   0x00000000
    registers:
        ax      = { defs={} expr=v3327[32] }
        cx      = { defs={} expr=v3328[32] }
        dx      = { defs={} expr=v3329[32] }
        bx      = { defs={} expr=v3330[32] }
        sp      = { defs={0x080483ef} expr=(add[32] v3331[32] -4[32]) }
        bp      = { defs={} expr=v3332[32] }
        si      = { defs={} expr=v3333[32] }
        di      = { defs={} expr=v3334[32] }
        es      = { defs={} expr=v3335[16] }
        cs      = { defs={} expr=v3336[16] }
        ss      = { defs={} expr=v3337[16] }
        ds      = { defs={} expr=v3338[16] }
        fs      = { defs={} expr=v3339[16] }
        gs      = { defs={} expr=v3340[16] }
        cf      = { defs={} expr=v3341[1] }
        ?1      = { defs={} expr=v3342[1] }
        pf      = { defs={} expr=v3343[1] }
        ?3      = { defs={} expr=v3344[1] }
        af      = { defs={} expr=v3345[1] }
        ?5      = { defs={} expr=v3346[1] }
        zf      = { defs={} expr=v3347[1] }
        sf      = { defs={} expr=v3348[1] }
        tf      = { defs={} expr=v3349[1] }
        if      = { defs={} expr=v3350[1] }
        df      = { defs={} expr=v3351[1] }
        of      = { defs={} expr=v3352[1] }
        iopl0   = { defs={} expr=v3353[1] }
        iopl1   = { defs={} expr=v3354[1] }
        nt      = { defs={} expr=v3355[1] }
        ?15     = { defs={} expr=v3356[1] }
        rf      = { defs={} expr=v3357[1] }
        vm      = { defs={} expr=v3358[1] }
        ac      = { defs={} expr=v3359[1] }
        vif     = { defs={} expr=v3360[1] }
        vip     = { defs={} expr=v3361[1] }
        id      = { defs={} expr=v3362[1] }
        ?22     = { defs={} expr=v3363[1] }
        ?23     = { defs={} expr=v3364[1] }
        ?24     = { defs={} expr=v3365[1] }
        ?25     = { defs={} expr=v3366[1] }
        ?26     = { defs={} expr=v3367[1] }
        ?27     = { defs={} expr=v3368[1] }
        ?28     = { defs={} expr=v3369[1] }
        ?29     = { defs={} expr=v3370[1] }
        ?30     = { defs={} expr=v3371[1] }
        ?31     = { defs={} expr=v3372[1] }
        ip      = { defs={0x080483ef} expr=0[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3331[32] -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3331[32] -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3331[32] -4[32]) 1[32]) }
          value = { defs={} expr=-125[8] }
          flags = { }
        address = { defs={0x080483ef} expr=(add[32] v3331[32] -4[32]) }
          value = { defs={} expr=-12[8] }
          flags = { }
        address = { defs={} expr=(add[32] v3331[32] 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] v3331[32] 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] v3331[32] 1[32]) }
          value = { defs={} expr=-107[8] }
          flags = { }
        address = { defs={0x080483e8} expr=v3331[32] }
          value = { defs={} expr=-8[8] }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483f4:lea    esi, [esi + 0x00000000]
    registers:
        ax      = { defs={} expr=v3434[32] }
        cx      = { defs={} expr=v3435[32] }
        dx      = { defs={} expr=v3436[32] }
        bx      = { defs={} expr=v3437[32] }
        sp      = { defs={} expr=v3438[32] }
        bp      = { defs={} expr=v3439[32] }
        si      = { defs={0x080483f4} expr=v3440[32] }
        di      = { defs={} expr=v3441[32] }
        es      = { defs={} expr=v3442[16] }
        cs      = { defs={} expr=v3443[16] }
        ss      = { defs={} expr=v3444[16] }
        ds      = { defs={} expr=v3445[16] }
        fs      = { defs={} expr=v3446[16] }
        gs      = { defs={} expr=v3447[16] }
        cf      = { defs={} expr=v3448[1] }
        ?1      = { defs={} expr=v3449[1] }
        pf      = { defs={} expr=v3450[1] }
        ?3      = { defs={} expr=v3451[1] }
        af      = { defs={} expr=v3452[1] }
        ?5      = { defs={} expr=v3453[1] }
        zf      = { defs={} expr=v3454[1] }
        sf      = { defs={} expr=v3455[1] }
        tf      = { defs={} expr=v3456[1] }
        if      = { defs={} expr=v3457[1] }
        df      = { defs={} expr=v3458[1] }
        of      = { defs={} expr=v3459[1] }
        iopl0   = { defs={} expr=v3460[1] }
        iopl1   = { defs={} expr=v3461[1] }
        nt      = { defs={} expr=v3462[1] }
        ?15     = { defs={} expr=v3463[1] }
        rf      = { defs={} expr=v3464[1] }
        vm      = { defs={} expr=v3465[1] }
        ac      = { defs={} expr=v3466[1] }
        vif     = { defs={} expr=v3467[1] }
        vip     = { defs={} expr=v3468[1] }
        id      = { defs={} expr=v3469[1] }
        ?22     = { defs={} expr=v3470[1] }
        ?23     = { defs={} expr=v3471[1] }
        ?24     = { defs={} expr=v3472[1] }
        ?25     = { defs={} expr=v3473[1] }
        ?26     = { defs={} expr=v3474[1] }
        ?27     = { defs={} expr=v3475[1] }
        ?28     = { defs={} expr=v3476[1] }
        ?29     = { defs={} expr=v3477[1] }
        ?30     = { defs={} expr=v3478[1] }
        ?31     = { defs={} expr=v3479[1] }
        ip      = { defs={0x080483f4} expr=0x080483fa[32] }
    memory:
    init mem:
0x80483fa:lea    edi, [edi + 0x00000000]
    registers:
        ax      = { defs={} expr=v3434[32] }
        cx      = { defs={} expr=v3435[32] }
        dx      = { defs={} expr=v3436[32] }
        bx      = { defs={} expr=v3437[32] }
        sp      = { defs={} expr=v3438[32] }
        bp      = { defs={} expr=v3439[32] }
        si      = { defs={0x080483f4} expr=v3440[32] }
        di      = { defs={0x080483fa} expr=v3441[32] }
        es      = { defs={} expr=v3442[16] }
        cs      = { defs={} expr=v3443[16] }
        ss      = { defs={} expr=v3444[16] }
        ds      = { defs={} expr=v3445[16] }
        fs      = { defs={} expr=v3446[16] }
        gs      = { defs={} expr=v3447[16] }
        cf      = { defs={} expr=v3448[1] }
        ?1      = { defs={} expr=v3449[1] }
        pf      = { defs={} expr=v3450[1] }
        ?3      = { defs={} expr=v3451[1] }
        af      = { defs={} expr=v3452[1] }
        ?5      = { defs={} expr=v3453[1] }
        zf      = { defs={} expr=v3454[1] }
        sf      = { defs={} expr=v3455[1] }
        tf      = { defs={} expr=v3456[1] }
        if      = { defs={} expr=v3457[1] }
        df      = { defs={} expr=v3458[1] }
        of      = { defs={} expr=v3459[1] }
        iopl0   = { defs={} expr=v3460[1] }
        iopl1   = { defs={} expr=v3461[1] }
        nt      = { defs={} expr=v3462[1] }
        ?15     = { defs={} expr=v3463[1] }
        rf      = { defs={} expr=v3464[1] }
        vm      = { defs={} expr=v3465[1] }
        ac      = { defs={} expr=v3466[1] }
        vif     = { defs={} expr=v3467[1] }
        vip     = { defs={} expr=v3468[1] }
        id      = { defs={} expr=v3469[1] }
        ?22     = { defs={} expr=v3470[1] }
        ?23     = { defs={} expr=v3471[1] }
        ?24     = { defs={} expr=v3472[1] }
        ?25     = { defs={} expr=v3473[1] }
        ?26     = { defs={} expr=v3474[1] }
        ?27     = { defs={} expr=v3475[1] }
        ?28     = { defs={} expr=v3476[1] }
        ?29     = { defs={} expr=v3477[1] }
        ?30     = { defs={} expr=v3478[1] }
        ?31     = { defs={} expr=v3479[1] }
        ip      = { defs={0x080483f4,0x080483fa} expr=0x08048400[32] }
    memory:
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048410:push   ebp
    registers:
        ax      = { defs={} expr=v3541[32] }
        cx      = { defs={} expr=v3542[32] }
        dx      = { defs={} expr=v3543[32] }
        bx      = { defs={} expr=v3544[32] }
        sp      = { defs={0x08048410} expr=(add[32] v3545[32] -4[32]) }
        bp      = { defs={} expr=v3546[32] }
        si      = { defs={} expr=v3547[32] }
        di      = { defs={} expr=v3548[32] }
        es      = { defs={} expr=v3549[16] }
        cs      = { defs={} expr=v3550[16] }
        ss      = { defs={} expr=v3551[16] }
        ds      = { defs={} expr=v3552[16] }
        fs      = { defs={} expr=v3553[16] }
        gs      = { defs={} expr=v3554[16] }
        cf      = { defs={} expr=v3555[1] }
        ?1      = { defs={} expr=v3556[1] }
        pf      = { defs={} expr=v3557[1] }
        ?3      = { defs={} expr=v3558[1] }
        af      = { defs={} expr=v3559[1] }
        ?5      = { defs={} expr=v3560[1] }
        zf      = { defs={} expr=v3561[1] }
        sf      = { defs={} expr=v3562[1] }
        tf      = { defs={} expr=v3563[1] }
        if      = { defs={} expr=v3564[1] }
        df      = { defs={} expr=v3565[1] }
        of      = { defs={} expr=v3566[1] }
        iopl0   = { defs={} expr=v3567[1] }
        iopl1   = { defs={} expr=v3568[1] }
        nt      = { defs={} expr=v3569[1] }
        ?15     = { defs={} expr=v3570[1] }
        rf      = { defs={} expr=v3571[1] }
        vm      = { defs={} expr=v3572[1] }
        ac      = { defs={} expr=v3573[1] }
        vif     = { defs={} expr=v3574[1] }
        vip     = { defs={} expr=v3575[1] }
        id      = { defs={} expr=v3576[1] }
        ?22     = { defs={} expr=v3577[1] }
        ?23     = { defs={} expr=v3578[1] }
        ?24     = { defs={} expr=v3579[1] }
        ?25     = { defs={} expr=v3580[1] }
        ?26     = { defs={} expr=v3581[1] }
        ?27     = { defs={} expr=v3582[1] }
        ?28     = { defs={} expr=v3583[1] }
        ?29     = { defs={} expr=v3584[1] }
        ?30     = { defs={} expr=v3585[1] }
        ?31     = { defs={} expr=v3586[1] }
        ip      = { defs={0x08048410} expr=0x08048411[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3545[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3546[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3545[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3546[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3545[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3546[32]) }
          flags = { }
        address = { defs={0x08048410} expr=(add[32] v3545[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3546[32]) }
          flags = { }
    init mem:
0x8048411:mov    edx, 0x08048480<handler>
    registers:
        ax      = { defs={} expr=v3541[32] }
        cx      = { defs={} expr=v3542[32] }
        dx      = { defs={0x08048411} expr=0x08048480[32] }
        bx      = { defs={} expr=v3544[32] }
        sp      = { defs={0x08048410} expr=(add[32] v3545[32] -4[32]) }
        bp      = { defs={} expr=v3546[32] }
        si      = { defs={} expr=v3547[32] }
        di      = { defs={} expr=v3548[32] }
        es      = { defs={} expr=v3549[16] }
        cs      = { defs={} expr=v3550[16] }
        ss      = { defs={} expr=v3551[16] }
        ds      = { defs={} expr=v3552[16] }
        fs      = { defs={} expr=v3553[16] }
        gs      = { defs={} expr=v3554[16] }
        cf      = { defs={} expr=v3555[1] }
        ?1      = { defs={} expr=v3556[1] }
        pf      = { defs={} expr=v3557[1] }
        ?3      = { defs={} expr=v3558[1] }
        af      = { defs={} expr=v3559[1] }
        ?5      = { defs={} expr=v3560[1] }
        zf      = { defs={} expr=v3561[1] }
        sf      = { defs={} expr=v3562[1] }
        tf      = { defs={} expr=v3563[1] }
        if      = { defs={} expr=v3564[1] }
        df      = { defs={} expr=v3565[1] }
        of      = { defs={} expr=v3566[1] }
        iopl0   = { defs={} expr=v3567[1] }
        iopl1   = { defs={} expr=v3568[1] }
        nt      = { defs={} expr=v3569[1] }
        ?15     = { defs={} expr=v3570[1] }
        rf      = { defs={} expr=v3571[1] }
        vm      = { defs={} expr=v3572[1] }
        ac      = { defs={} expr=v3573[1] }
        vif     = { defs={} expr=v3574[1] }
        vip     = { defs={} expr=v3575[1] }
        id      = { defs={} expr=v3576[1] }
        ?22     = { defs={} expr=v3577[1] }
        ?23     = { defs={} expr=v3578[1] }
        ?24     = { defs={} expr=v3579[1] }
        ?25     = { defs={} expr=v3580[1] }
        ?26     = { defs={} expr=v3581[1] }
        ?27     = { defs={} expr=v3582[1] }
        ?28     = { defs={} expr=v3583[1] }
        ?29     = { defs={} expr=v3584[1] }
        ?30     = { defs={} expr=v3585[1] }
        ?31     = { defs={} expr=v3586[1] }
        ip      = { defs={0x08048410,0x08048411} expr=0x08048416[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3545[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3546[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3545[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3546[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3545[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3546[32]) }
          flags = { }
        address = { defs={0x08048410} expr=(add[32] v3545[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3546[32]) }
          flags = { }
    init mem:
0x8048416:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v3541[32] }
        cx      = { defs={} expr=v3542[32] }
        dx      = { defs={0x08048411} expr=0x08048480[32] }
        bx      = { defs={} expr=v3544[32] }
        sp      = { defs={0x08048410} expr=(add[32] v3545[32] -4[32]) }
        bp      = { defs={0x08048410,0x08048416} expr=(add[32] v3545[32] -4[32]) }
        si      = { defs={} expr=v3547[32] }
        di      = { defs={} expr=v3548[32] }
        es      = { defs={} expr=v3549[16] }
        cs      = { defs={} expr=v3550[16] }
        ss      = { defs={} expr=v3551[16] }
        ds      = { defs={} expr=v3552[16] }
        fs      = { defs={} expr=v3553[16] }
        gs      = { defs={} expr=v3554[16] }
        cf      = { defs={} expr=v3555[1] }
        ?1      = { defs={} expr=v3556[1] }
        pf      = { defs={} expr=v3557[1] }
        ?3      = { defs={} expr=v3558[1] }
        af      = { defs={} expr=v3559[1] }
        ?5      = { defs={} expr=v3560[1] }
        zf      = { defs={} expr=v3561[1] }
        sf      = { defs={} expr=v3562[1] }
        tf      = { defs={} expr=v3563[1] }
        if      = { defs={} expr=v3564[1] }
        df      = { defs={} expr=v3565[1] }
        of      = { defs={} expr=v3566[1] }
        iopl0   = { defs={} expr=v3567[1] }
        iopl1   = { defs={} expr=v3568[1] }
        nt      = { defs={} expr=v3569[1] }
        ?15     = { defs={} expr=v3570[1] }
        rf      = { defs={} expr=v3571[1] }
        vm      = { defs={} expr=v3572[1] }
        ac      = { defs={} expr=v3573[1] }
        vif     = { defs={} expr=v3574[1] }
        vip     = { defs={} expr=v3575[1] }
        id      = { defs={} expr=v3576[1] }
        ?22     = { defs={} expr=v3577[1] }
        ?23     = { defs={} expr=v3578[1] }
        ?24     = { defs={} expr=v3579[1] }
        ?25     = { defs={} expr=v3580[1] }
        ?26     = { defs={} expr=v3581[1] }
        ?27     = { defs={} expr=v3582[1] }
        ?28     = { defs={} expr=v3583[1] }
        ?29     = { defs={} expr=v3584[1] }
        ?30     = { defs={} expr=v3585[1] }
        ?31     = { defs={} expr=v3586[1] }
        ip      = { defs={0x08048410,0x08048411,0x08048416} expr=0x08048418[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3545[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3546[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3545[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3546[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3545[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3546[32]) }
          flags = { }
        address = { defs={0x08048410} expr=(add[32] v3545[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3546[32]) }
          flags = { }
    init mem:
0x8048418:sub    esp, 0x08
    registers:
        ax      = { defs={} expr=v3541[32] }
        cx      = { defs={} expr=v3542[32] }
        dx      = { defs={0x08048411} expr=0x08048480[32] }
        bx      = { defs={} expr=v3544[32] }
        sp      = { defs={0x08048410,0x08048418} expr=(add[32] (add[32] v3545[32] -4[32]) -8[32]) }
        bp      = { defs={0x08048410,0x08048416} expr=(add[32] v3545[32] -4[32]) }
        si      = { defs={} expr=v3547[32] }
        di      = { defs={} expr=v3548[32] }
        es      = { defs={} expr=v3549[16] }
        cs      = { defs={} expr=v3550[16] }
        ss      = { defs={} expr=v3551[16] }
        ds      = { defs={} expr=v3552[16] }
        fs      = { defs={} expr=v3553[16] }
        gs      = { defs={} expr=v3554[16] }
        cf      = { defs={0x08048410,0x08048418} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3545[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3545[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v3556[1] }
        pf      = { defs={0x08048410,0x08048418} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3545[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3545[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3545[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3545[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3545[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3545[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3545[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3545[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v3558[1] }
        af      = { defs={0x08048410,0x08048418} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3545[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3545[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v3560[1] }
        zf      = { defs={0x08048410,0x08048418} expr=(zerop[1] (add[32] (add[32] v3545[32] -4[32]) -8[32])) }
        sf      = { defs={0x08048410,0x08048418} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v3545[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v3563[1] }
        if      = { defs={} expr=v3564[1] }
        df      = { defs={} expr=v3565[1] }
        of      = { defs={0x08048410,0x08048418} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3545[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3545[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3545[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3545[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v3567[1] }
        iopl1   = { defs={} expr=v3568[1] }
        nt      = { defs={} expr=v3569[1] }
        ?15     = { defs={} expr=v3570[1] }
        rf      = { defs={} expr=v3571[1] }
        vm      = { defs={} expr=v3572[1] }
        ac      = { defs={} expr=v3573[1] }
        vif     = { defs={} expr=v3574[1] }
        vip     = { defs={} expr=v3575[1] }
        id      = { defs={} expr=v3576[1] }
        ?22     = { defs={} expr=v3577[1] }
        ?23     = { defs={} expr=v3578[1] }
        ?24     = { defs={} expr=v3579[1] }
        ?25     = { defs={} expr=v3580[1] }
        ?26     = { defs={} expr=v3581[1] }
        ?27     = { defs={} expr=v3582[1] }
        ?28     = { defs={} expr=v3583[1] }
        ?29     = { defs={} expr=v3584[1] }
        ?30     = { defs={} expr=v3585[1] }
        ?31     = { defs={} expr=v3586[1] }
        ip      = { defs={0x08048410,0x08048411,0x08048416,0x08048418} expr=0x0804841b[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3545[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3546[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3545[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3546[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3545[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3546[32]) }
          flags = { }
        address = { defs={0x08048410} expr=(add[32] v3545[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3546[32]) }
          flags = { }
    init mem:
0x804841b:and    esp, 0xf0<-0x10>
    registers:
        ax      = { defs={} expr=v3541[32] }
        cx      = { defs={} expr=v3542[32] }
        dx      = { defs={0x08048411} expr=0x08048480[32] }
        bx      = { defs={} expr=v3544[32] }
        sp      = { defs={0x08048410,0x08048418,0x0804841b} expr=(bv-and[32] (add[32] (add[32] v3545[32] -4[32]) -8[32]) -16[32]) }
        bp      = { defs={0x08048410,0x08048416} expr=(add[32] v3545[32] -4[32]) }
        si      = { defs={} expr=v3547[32] }
        di      = { defs={} expr=v3548[32] }
        es      = { defs={} expr=v3549[16] }
        cs      = { defs={} expr=v3550[16] }
        ss      = { defs={} expr=v3551[16] }
        ds      = { defs={} expr=v3552[16] }
        fs      = { defs={} expr=v3553[16] }
        gs      = { defs={} expr=v3554[16] }
        cf      = { defs={0x0804841b} expr=0[1] }
        ?1      = { defs={} expr=v3556[1] }
        pf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(invert[1] (bv-xor[1] 0[1] (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3545[32] -4[32]) -8[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3545[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3545[32] -4[32]) -8[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3545[32] -4[32]) -8[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v3558[1] }
        af      = { defs={0x0804841b} expr=v3687[1] }
        ?5      = { defs={} expr=v3560[1] }
        zf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(zerop[1] (bv-and[32] (add[32] (add[32] v3545[32] -4[32]) -8[32]) -16[32])) }
        sf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] (add[32] v3545[32] -4[32]) -8[32]) -16[32])) }
        tf      = { defs={} expr=v3563[1] }
        if      = { defs={} expr=v3564[1] }
        df      = { defs={} expr=v3565[1] }
        of      = { defs={0x0804841b} expr=0[1] }
        iopl0   = { defs={} expr=v3567[1] }
        iopl1   = { defs={} expr=v3568[1] }
        nt      = { defs={} expr=v3569[1] }
        ?15     = { defs={} expr=v3570[1] }
        rf      = { defs={} expr=v3571[1] }
        vm      = { defs={} expr=v3572[1] }
        ac      = { defs={} expr=v3573[1] }
        vif     = { defs={} expr=v3574[1] }
        vip     = { defs={} expr=v3575[1] }
        id      = { defs={} expr=v3576[1] }
        ?22     = { defs={} expr=v3577[1] }
        ?23     = { defs={} expr=v3578[1] }
        ?24     = { defs={} expr=v3579[1] }
        ?25     = { defs={} expr=v3580[1] }
        ?26     = { defs={} expr=v3581[1] }
        ?27     = { defs={} expr=v3582[1] }
        ?28     = { defs={} expr=v3583[1] }
        ?29     = { defs={} expr=v3584[1] }
        ?30     = { defs={} expr=v3585[1] }
        ?31     = { defs={} expr=v3586[1] }
        ip      = { defs={0x08048410,0x08048411,0x08048416,0x08048418,0x0804841b} expr=0x0804841e[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3545[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3546[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3545[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3546[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3545[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3546[32]) }
          flags = { }
        address = { defs={0x08048410} expr=(add[32] v3545[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3546[32]) }
          flags = { }
    init mem:
0x804841e:mov    DWORD PTR ss:[esp + 0x04], edx
    registers:
        ax      = { defs={} expr=v3541[32] }
        cx      = { defs={} expr=v3542[32] }
        dx      = { defs={0x08048411} expr=0x08048480[32] }
        bx      = { defs={} expr=v3544[32] }
        sp      = { defs={0x08048410,0x08048418,0x0804841b} expr=(bv-and[32] (add[32] (add[32] v3545[32] -4[32]) -8[32]) -16[32]) }
        bp      = { defs={0x08048410,0x08048416} expr=(add[32] v3545[32] -4[32]) }
        si      = { defs={} expr=v3547[32] }
        di      = { defs={} expr=v3548[32] }
        es      = { defs={} expr=v3549[16] }
        cs      = { defs={} expr=v3550[16] }
        ss      = { defs={} expr=v3551[16] }
        ds      = { defs={} expr=v3552[16] }
        fs      = { defs={} expr=v3553[16] }
        gs      = { defs={} expr=v3554[16] }
        cf      = { defs={0x0804841b} expr=0[1] }
        ?1      = { defs={} expr=v3556[1] }
        pf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(invert[1] (bv-xor[1] 0[1] (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3545[32] -4[32]) -8[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3545[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3545[32] -4[32]) -8[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3545[32] -4[32]) -8[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v3558[1] }
        af      = { defs={0x0804841b} expr=v3687[1] }
        ?5      = { defs={} expr=v3560[1] }
        zf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(zerop[1] (bv-and[32] (add[32] (add[32] v3545[32] -4[32]) -8[32]) -16[32])) }
        sf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] (add[32] v3545[32] -4[32]) -8[32]) -16[32])) }
        tf      = { defs={} expr=v3563[1] }
        if      = { defs={} expr=v3564[1] }
        df      = { defs={} expr=v3565[1] }
        of      = { defs={0x0804841b} expr=0[1] }
        iopl0   = { defs={} expr=v3567[1] }
        iopl1   = { defs={} expr=v3568[1] }
        nt      = { defs={} expr=v3569[1] }
        ?15     = { defs={} expr=v3570[1] }
        rf      = { defs={} expr=v3571[1] }
        vm      = { defs={} expr=v3572[1] }
        ac      = { defs={} expr=v3573[1] }
        vif     = { defs={} expr=v3574[1] }
        vip     = { defs={} expr=v3575[1] }
        id      = { defs={} expr=v3576[1] }
        ?22     = { defs={} expr=v3577[1] }
        ?23     = { defs={} expr=v3578[1] }
        ?24     = { defs={} expr=v3579[1] }
        ?25     = { defs={} expr=v3580[1] }
        ?26     = { defs={} expr=v3581[1] }
        ?27     = { defs={} expr=v3582[1] }
        ?28     = { defs={} expr=v3583[1] }
        ?29     = { defs={} expr=v3584[1] }
        ?30     = { defs={} expr=v3585[1] }
        ?31     = { defs={} expr=v3586[1] }
        ip      = { defs={0x08048410,0x08048411,0x08048416,0x08048418,0x0804841b,0x0804841e} expr=0x08048422[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v3545[32] -4[32]) -8[32]) -16[32]) 4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v3545[32] -4[32]) -8[32]) -16[32]) 4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v3545[32] -4[32]) -8[32]) -16[32]) 4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x08048410,0x08048418,0x0804841b,0x0804841e} expr=(add[32] (bv-and[32] (add[32] (add[32] v3545[32] -4[32]) -8[32]) -16[32]) 4[32]) }
          value = { defs={} expr=-128[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3545[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3546[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3545[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3546[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3545[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3546[32]) }
          flags = { }
        address = { defs={0x08048410} expr=(add[32] v3545[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3546[32]) }
          flags = { }
    init mem:
0x8048422:mov    DWORD PTR ss:[esp], 0x0000000a
    registers:
        ax      = { defs={} expr=v3541[32] }
        cx      = { defs={} expr=v3542[32] }
        dx      = { defs={0x08048411} expr=0x08048480[32] }
        bx      = { defs={} expr=v3544[32] }
        sp      = { defs={0x08048410,0x08048418,0x0804841b} expr=(bv-and[32] (add[32] (add[32] v3545[32] -4[32]) -8[32]) -16[32]) }
        bp      = { defs={0x08048410,0x08048416} expr=(add[32] v3545[32] -4[32]) }
        si      = { defs={} expr=v3547[32] }
        di      = { defs={} expr=v3548[32] }
        es      = { defs={} expr=v3549[16] }
        cs      = { defs={} expr=v3550[16] }
        ss      = { defs={} expr=v3551[16] }
        ds      = { defs={} expr=v3552[16] }
        fs      = { defs={} expr=v3553[16] }
        gs      = { defs={} expr=v3554[16] }
        cf      = { defs={0x0804841b} expr=0[1] }
        ?1      = { defs={} expr=v3556[1] }
        pf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(invert[1] (bv-xor[1] 0[1] (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3545[32] -4[32]) -8[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3545[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3545[32] -4[32]) -8[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3545[32] -4[32]) -8[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v3558[1] }
        af      = { defs={0x0804841b} expr=v3687[1] }
        ?5      = { defs={} expr=v3560[1] }
        zf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(zerop[1] (bv-and[32] (add[32] (add[32] v3545[32] -4[32]) -8[32]) -16[32])) }
        sf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] (add[32] v3545[32] -4[32]) -8[32]) -16[32])) }
        tf      = { defs={} expr=v3563[1] }
        if      = { defs={} expr=v3564[1] }
        df      = { defs={} expr=v3565[1] }
        of      = { defs={0x0804841b} expr=0[1] }
        iopl0   = { defs={} expr=v3567[1] }
        iopl1   = { defs={} expr=v3568[1] }
        nt      = { defs={} expr=v3569[1] }
        ?15     = { defs={} expr=v3570[1] }
        rf      = { defs={} expr=v3571[1] }
        vm      = { defs={} expr=v3572[1] }
        ac      = { defs={} expr=v3573[1] }
        vif     = { defs={} expr=v3574[1] }
        vip     = { defs={} expr=v3575[1] }
        id      = { defs={} expr=v3576[1] }
        ?22     = { defs={} expr=v3577[1] }
        ?23     = { defs={} expr=v3578[1] }
        ?24     = { defs={} expr=v3579[1] }
        ?25     = { defs={} expr=v3580[1] }
        ?26     = { defs={} expr=v3581[1] }
        ?27     = { defs={} expr=v3582[1] }
        ?28     = { defs={} expr=v3583[1] }
        ?29     = { defs={} expr=v3584[1] }
        ?30     = { defs={} expr=v3585[1] }
        ?31     = { defs={} expr=v3586[1] }
        ip      = { defs={0x08048410,0x08048411,0x08048416,0x08048418,0x0804841b,0x0804841e,0x08048422} expr=0x08048429[32] }
    memory:
        address = { defs={} expr=(add[32] (bv-and[32] (add[32] (add[32] v3545[32] -4[32]) -8[32]) -16[32]) 3[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] (bv-and[32] (add[32] (add[32] v3545[32] -4[32]) -8[32]) -16[32]) 2[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] (bv-and[32] (add[32] (add[32] v3545[32] -4[32]) -8[32]) -16[32]) 1[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={0x08048410,0x08048418,0x0804841b,0x08048422} expr=(bv-and[32] (add[32] (add[32] v3545[32] -4[32]) -8[32]) -16[32]) }
          value = { defs={} expr=10[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v3545[32] -4[32]) -8[32]) -16[32]) 4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v3545[32] -4[32]) -8[32]) -16[32]) 4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v3545[32] -4[32]) -8[32]) -16[32]) 4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x08048410,0x08048418,0x0804841b,0x0804841e} expr=(add[32] (bv-and[32] (add[32] (add[32] v3545[32] -4[32]) -8[32]) -16[32]) 4[32]) }
          value = { defs={} expr=-128[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3545[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3546[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3545[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3546[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3545[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3546[32]) }
          flags = { }
        address = { defs={0x08048410} expr=(add[32] v3545[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3546[32]) }
          flags = { }
    init mem:
0x8048429:call   0x080482f0<signal@plt>
    registers:
        ax      = { defs={} expr=v3541[32] }
        cx      = { defs={} expr=v3542[32] }
        dx      = { defs={0x08048411} expr=0x08048480[32] }
        bx      = { defs={} expr=v3544[32] }
        sp      = { defs={0x08048410,0x08048418,0x0804841b,0x08048429} expr=(add[32] (bv-and[32] (add[32] (add[32] v3545[32] -4[32]) -8[32]) -16[32]) -4[32]) }
        bp      = { defs={0x08048410,0x08048416} expr=(add[32] v3545[32] -4[32]) }
        si      = { defs={} expr=v3547[32] }
        di      = { defs={} expr=v3548[32] }
        es      = { defs={} expr=v3549[16] }
        cs      = { defs={} expr=v3550[16] }
        ss      = { defs={} expr=v3551[16] }
        ds      = { defs={} expr=v3552[16] }
        fs      = { defs={} expr=v3553[16] }
        gs      = { defs={} expr=v3554[16] }
        cf      = { defs={0x0804841b} expr=0[1] }
        ?1      = { defs={} expr=v3556[1] }
        pf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(invert[1] (bv-xor[1] 0[1] (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3545[32] -4[32]) -8[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3545[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3545[32] -4[32]) -8[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3545[32] -4[32]) -8[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v3558[1] }
        af      = { defs={0x0804841b} expr=v3687[1] }
        ?5      = { defs={} expr=v3560[1] }
        zf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(zerop[1] (bv-and[32] (add[32] (add[32] v3545[32] -4[32]) -8[32]) -16[32])) }
        sf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] (add[32] v3545[32] -4[32]) -8[32]) -16[32])) }
        tf      = { defs={} expr=v3563[1] }
        if      = { defs={} expr=v3564[1] }
        df      = { defs={} expr=v3565[1] }
        of      = { defs={0x0804841b} expr=0[1] }
        iopl0   = { defs={} expr=v3567[1] }
        iopl1   = { defs={} expr=v3568[1] }
        nt      = { defs={} expr=v3569[1] }
        ?15     = { defs={} expr=v3570[1] }
        rf      = { defs={} expr=v3571[1] }
        vm      = { defs={} expr=v3572[1] }
        ac      = { defs={} expr=v3573[1] }
        vif     = { defs={} expr=v3574[1] }
        vip     = { defs={} expr=v3575[1] }
        id      = { defs={} expr=v3576[1] }
        ?22     = { defs={} expr=v3577[1] }
        ?23     = { defs={} expr=v3578[1] }
        ?24     = { defs={} expr=v3579[1] }
        ?25     = { defs={} expr=v3580[1] }
        ?26     = { defs={} expr=v3581[1] }
        ?27     = { defs={} expr=v3582[1] }
        ?28     = { defs={} expr=v3583[1] }
        ?29     = { defs={} expr=v3584[1] }
        ?30     = { defs={} expr=v3585[1] }
        ?31     = { defs={} expr=v3586[1] }
        ip      = { defs={0x08048429} expr=0x080482f0[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v3545[32] -4[32]) -8[32]) -16[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v3545[32] -4[32]) -8[32]) -16[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v3545[32] -4[32]) -8[32]) -16[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x08048410,0x08048418,0x0804841b,0x08048429} expr=(add[32] (bv-and[32] (add[32] (add[32] v3545[32] -4[32]) -8[32]) -16[32]) -4[32]) }
          value = { defs={} expr=46[8] }
          flags = { }
        address = { defs={} expr=(add[32] (bv-and[32] (add[32] (add[32] v3545[32] -4[32]) -8[32]) -16[32]) 3[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] (bv-and[32] (add[32] (add[32] v3545[32] -4[32]) -8[32]) -16[32]) 2[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] (bv-and[32] (add[32] (add[32] v3545[32] -4[32]) -8[32]) -16[32]) 1[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={0x08048410,0x08048418,0x0804841b,0x08048422} expr=(bv-and[32] (add[32] (add[32] v3545[32] -4[32]) -8[32]) -16[32]) }
          value = { defs={} expr=10[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v3545[32] -4[32]) -8[32]) -16[32]) 4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v3545[32] -4[32]) -8[32]) -16[32]) 4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v3545[32] -4[32]) -8[32]) -16[32]) 4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x08048410,0x08048418,0x0804841b,0x0804841e} expr=(add[32] (bv-and[32] (add[32] (add[32] v3545[32] -4[32]) -8[32]) -16[32]) 4[32]) }
          value = { defs={} expr=-128[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3545[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3546[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3545[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3546[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3545[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3546[32]) }
          flags = { }
        address = { defs={0x08048410} expr=(add[32] v3545[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3546[32]) }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804842e:mov    esp, ebp
    registers:
        ax      = { defs={} expr=v3756[32] }
        cx      = { defs={} expr=v3757[32] }
        dx      = { defs={} expr=v3758[32] }
        bx      = { defs={} expr=v3759[32] }
        sp      = { defs={0x0804842e} expr=v3761[32] }
        bp      = { defs={} expr=v3761[32] }
        si      = { defs={} expr=v3762[32] }
        di      = { defs={} expr=v3763[32] }
        es      = { defs={} expr=v3764[16] }
        cs      = { defs={} expr=v3765[16] }
        ss      = { defs={} expr=v3766[16] }
        ds      = { defs={} expr=v3767[16] }
        fs      = { defs={} expr=v3768[16] }
        gs      = { defs={} expr=v3769[16] }
        cf      = { defs={} expr=v3770[1] }
        ?1      = { defs={} expr=v3771[1] }
        pf      = { defs={} expr=v3772[1] }
        ?3      = { defs={} expr=v3773[1] }
        af      = { defs={} expr=v3774[1] }
        ?5      = { defs={} expr=v3775[1] }
        zf      = { defs={} expr=v3776[1] }
        sf      = { defs={} expr=v3777[1] }
        tf      = { defs={} expr=v3778[1] }
        if      = { defs={} expr=v3779[1] }
        df      = { defs={} expr=v3780[1] }
        of      = { defs={} expr=v3781[1] }
        iopl0   = { defs={} expr=v3782[1] }
        iopl1   = { defs={} expr=v3783[1] }
        nt      = { defs={} expr=v3784[1] }
        ?15     = { defs={} expr=v3785[1] }
        rf      = { defs={} expr=v3786[1] }
        vm      = { defs={} expr=v3787[1] }
        ac      = { defs={} expr=v3788[1] }
        vif     = { defs={} expr=v3789[1] }
        vip     = { defs={} expr=v3790[1] }
        id      = { defs={} expr=v3791[1] }
        ?22     = { defs={} expr=v3792[1] }
        ?23     = { defs={} expr=v3793[1] }
        ?24     = { defs={} expr=v3794[1] }
        ?25     = { defs={} expr=v3795[1] }
        ?26     = { defs={} expr=v3796[1] }
        ?27     = { defs={} expr=v3797[1] }
        ?28     = { defs={} expr=v3798[1] }
        ?29     = { defs={} expr=v3799[1] }
        ?30     = { defs={} expr=v3800[1] }
        ?31     = { defs={} expr=v3801[1] }
        ip      = { defs={0x0804842e} expr=0x08048430[32] }
    memory:
    init mem:
0x8048430:xor    eax, eax
    registers:
        ax      = { defs={0x08048430} expr=0[32] }
        cx      = { defs={} expr=v3757[32] }
        dx      = { defs={} expr=v3758[32] }
        bx      = { defs={} expr=v3759[32] }
        sp      = { defs={0x0804842e} expr=v3761[32] }
        bp      = { defs={} expr=v3761[32] }
        si      = { defs={} expr=v3762[32] }
        di      = { defs={} expr=v3763[32] }
        es      = { defs={} expr=v3764[16] }
        cs      = { defs={} expr=v3765[16] }
        ss      = { defs={} expr=v3766[16] }
        ds      = { defs={} expr=v3767[16] }
        fs      = { defs={} expr=v3768[16] }
        gs      = { defs={} expr=v3769[16] }
        cf      = { defs={0x08048430} expr=0[1] }
        ?1      = { defs={} expr=v3771[1] }
        pf      = { defs={0x08048430} expr=1[1] }
        ?3      = { defs={} expr=v3773[1] }
        af      = { defs={0x08048430} expr=v3840[1] }
        ?5      = { defs={} expr=v3775[1] }
        zf      = { defs={0x08048430} expr=1[1] }
        sf      = { defs={0x08048430} expr=0[1] }
        tf      = { defs={} expr=v3778[1] }
        if      = { defs={} expr=v3779[1] }
        df      = { defs={} expr=v3780[1] }
        of      = { defs={0x08048430} expr=0[1] }
        iopl0   = { defs={} expr=v3782[1] }
        iopl1   = { defs={} expr=v3783[1] }
        nt      = { defs={} expr=v3784[1] }
        ?15     = { defs={} expr=v3785[1] }
        rf      = { defs={} expr=v3786[1] }
        vm      = { defs={} expr=v3787[1] }
        ac      = { defs={} expr=v3788[1] }
        vif     = { defs={} expr=v3789[1] }
        vip     = { defs={} expr=v3790[1] }
        id      = { defs={} expr=v3791[1] }
        ?22     = { defs={} expr=v3792[1] }
        ?23     = { defs={} expr=v3793[1] }
        ?24     = { defs={} expr=v3794[1] }
        ?25     = { defs={} expr=v3795[1] }
        ?26     = { defs={} expr=v3796[1] }
        ?27     = { defs={} expr=v3797[1] }
        ?28     = { defs={} expr=v3798[1] }
        ?29     = { defs={} expr=v3799[1] }
        ?30     = { defs={} expr=v3800[1] }
        ?31     = { defs={} expr=v3801[1] }
        ip      = { defs={0x0804842e,0x08048430} expr=0x08048432[32] }
    memory:
    init mem:
0x8048432:pop    ebp
    registers:
        ax      = { defs={0x08048430} expr=0[32] }
        cx      = { defs={} expr=v3757[32] }
        dx      = { defs={} expr=v3758[32] }
        bx      = { defs={} expr=v3759[32] }
        sp      = { defs={0x0804842e,0x08048432} expr=(add[32] v3761[32] 4[32]) }
        bp      = { defs={0x08048432} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3851[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3852[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3853[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3854[8]))) }
        si      = { defs={} expr=v3762[32] }
        di      = { defs={} expr=v3763[32] }
        es      = { defs={} expr=v3764[16] }
        cs      = { defs={} expr=v3765[16] }
        ss      = { defs={} expr=v3766[16] }
        ds      = { defs={} expr=v3767[16] }
        fs      = { defs={} expr=v3768[16] }
        gs      = { defs={} expr=v3769[16] }
        cf      = { defs={0x08048430} expr=0[1] }
        ?1      = { defs={} expr=v3771[1] }
        pf      = { defs={0x08048430} expr=1[1] }
        ?3      = { defs={} expr=v3773[1] }
        af      = { defs={0x08048430} expr=v3840[1] }
        ?5      = { defs={} expr=v3775[1] }
        zf      = { defs={0x08048430} expr=1[1] }
        sf      = { defs={0x08048430} expr=0[1] }
        tf      = { defs={} expr=v3778[1] }
        if      = { defs={} expr=v3779[1] }
        df      = { defs={} expr=v3780[1] }
        of      = { defs={0x08048430} expr=0[1] }
        iopl0   = { defs={} expr=v3782[1] }
        iopl1   = { defs={} expr=v3783[1] }
        nt      = { defs={} expr=v3784[1] }
        ?15     = { defs={} expr=v3785[1] }
        rf      = { defs={} expr=v3786[1] }
        vm      = { defs={} expr=v3787[1] }
        ac      = { defs={} expr=v3788[1] }
        vif     = { defs={} expr=v3789[1] }
        vip     = { defs={} expr=v3790[1] }
        id      = { defs={} expr=v3791[1] }
        ?22     = { defs={} expr=v3792[1] }
        ?23     = { defs={} expr=v3793[1] }
        ?24     = { defs={} expr=v3794[1] }
        ?25     = { defs={} expr=v3795[1] }
        ?26     = { defs={} expr=v3796[1] }
        ?27     = { defs={} expr=v3797[1] }
        ?28     = { defs={} expr=v3798[1] }
        ?29     = { defs={} expr=v3799[1] }
        ?30     = { defs={} expr=v3800[1] }
        ?31     = { defs={} expr=v3801[1] }
        ip      = { defs={0x0804842e,0x08048430,0x08048432} expr=0x08048433[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v3761[32] 3[32]) }
          value = { defs={} expr=v3854[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3761[32] 2[32]) }
          value = { defs={} expr=v3853[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3761[32] 1[32]) }
          value = { defs={} expr=v3852[8] }
          flags = { rdonly }
        address = { defs={0x0804842e,0x08048432} expr=v3761[32] }
          value = { defs={} expr=v3851[8] }
          flags = { rdonly }
0x8048433:ret    
    registers:
        ax      = { defs={0x08048430} expr=0[32] }
        cx      = { defs={} expr=v3757[32] }
        dx      = { defs={} expr=v3758[32] }
        bx      = { defs={} expr=v3759[32] }
        sp      = { defs={0x0804842e,0x08048432,0x08048433} expr=(add[32] (add[32] v3761[32] 4[32]) 4[32]) }
        bp      = { defs={0x08048432} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3851[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3852[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3853[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3854[8]))) }
        si      = { defs={} expr=v3762[32] }
        di      = { defs={} expr=v3763[32] }
        es      = { defs={} expr=v3764[16] }
        cs      = { defs={} expr=v3765[16] }
        ss      = { defs={} expr=v3766[16] }
        ds      = { defs={} expr=v3767[16] }
        fs      = { defs={} expr=v3768[16] }
        gs      = { defs={} expr=v3769[16] }
        cf      = { defs={0x08048430} expr=0[1] }
        ?1      = { defs={} expr=v3771[1] }
        pf      = { defs={0x08048430} expr=1[1] }
        ?3      = { defs={} expr=v3773[1] }
        af      = { defs={0x08048430} expr=v3840[1] }
        ?5      = { defs={} expr=v3775[1] }
        zf      = { defs={0x08048430} expr=1[1] }
        sf      = { defs={0x08048430} expr=0[1] }
        tf      = { defs={} expr=v3778[1] }
        if      = { defs={} expr=v3779[1] }
        df      = { defs={} expr=v3780[1] }
        of      = { defs={0x08048430} expr=0[1] }
        iopl0   = { defs={} expr=v3782[1] }
        iopl1   = { defs={} expr=v3783[1] }
        nt      = { defs={} expr=v3784[1] }
        ?15     = { defs={} expr=v3785[1] }
        rf      = { defs={} expr=v3786[1] }
        vm      = { defs={} expr=v3787[1] }
        ac      = { defs={} expr=v3788[1] }
        vif     = { defs={} expr=v3789[1] }
        vip     = { defs={} expr=v3790[1] }
        id      = { defs={} expr=v3791[1] }
        ?22     = { defs={} expr=v3792[1] }
        ?23     = { defs={} expr=v3793[1] }
        ?24     = { defs={} expr=v3794[1] }
        ?25     = { defs={} expr=v3795[1] }
        ?26     = { defs={} expr=v3796[1] }
        ?27     = { defs={} expr=v3797[1] }
        ?28     = { defs={} expr=v3798[1] }
        ?29     = { defs={} expr=v3799[1] }
        ?30     = { defs={} expr=v3800[1] }
        ?31     = { defs={} expr=v3801[1] }
        ip      = { defs={0x08048433} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3868[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3869[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3870[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3871[8]))) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v3761[32] 4[32]) 3[32]) }
          value = { defs={} expr=v3871[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v3761[32] 4[32]) 2[32]) }
          value = { defs={} expr=v3870[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v3761[32] 4[32]) 1[32]) }
          value = { defs={} expr=v3869[8] }
          flags = { rdonly }
        address = { defs={0x0804842e,0x08048432,0x08048433} expr=(add[32] v3761[32] 4[32]) }
          value = { defs={} expr=v3868[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3761[32] 3[32]) }
          value = { defs={} expr=v3854[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3761[32] 2[32]) }
          value = { defs={} expr=v3853[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3761[32] 1[32]) }
          value = { defs={} expr=v3852[8] }
          flags = { rdonly }
        address = { defs={0x0804842e,0x08048432} expr=v3761[32] }
          value = { defs={} expr=v3851[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048440:push   ebp
    registers:
        ax      = { defs={} expr=v3926[32] }
        cx      = { defs={} expr=v3927[32] }
        dx      = { defs={} expr=v3928[32] }
        bx      = { defs={} expr=v3929[32] }
        sp      = { defs={0x08048440} expr=(add[32] v3930[32] -4[32]) }
        bp      = { defs={} expr=v3931[32] }
        si      = { defs={} expr=v3932[32] }
        di      = { defs={} expr=v3933[32] }
        es      = { defs={} expr=v3934[16] }
        cs      = { defs={} expr=v3935[16] }
        ss      = { defs={} expr=v3936[16] }
        ds      = { defs={} expr=v3937[16] }
        fs      = { defs={} expr=v3938[16] }
        gs      = { defs={} expr=v3939[16] }
        cf      = { defs={} expr=v3940[1] }
        ?1      = { defs={} expr=v3941[1] }
        pf      = { defs={} expr=v3942[1] }
        ?3      = { defs={} expr=v3943[1] }
        af      = { defs={} expr=v3944[1] }
        ?5      = { defs={} expr=v3945[1] }
        zf      = { defs={} expr=v3946[1] }
        sf      = { defs={} expr=v3947[1] }
        tf      = { defs={} expr=v3948[1] }
        if      = { defs={} expr=v3949[1] }
        df      = { defs={} expr=v3950[1] }
        of      = { defs={} expr=v3951[1] }
        iopl0   = { defs={} expr=v3952[1] }
        iopl1   = { defs={} expr=v3953[1] }
        nt      = { defs={} expr=v3954[1] }
        ?15     = { defs={} expr=v3955[1] }
        rf      = { defs={} expr=v3956[1] }
        vm      = { defs={} expr=v3957[1] }
        ac      = { defs={} expr=v3958[1] }
        vif     = { defs={} expr=v3959[1] }
        vip     = { defs={} expr=v3960[1] }
        id      = { defs={} expr=v3961[1] }
        ?22     = { defs={} expr=v3962[1] }
        ?23     = { defs={} expr=v3963[1] }
        ?24     = { defs={} expr=v3964[1] }
        ?25     = { defs={} expr=v3965[1] }
        ?26     = { defs={} expr=v3966[1] }
        ?27     = { defs={} expr=v3967[1] }
        ?28     = { defs={} expr=v3968[1] }
        ?29     = { defs={} expr=v3969[1] }
        ?30     = { defs={} expr=v3970[1] }
        ?31     = { defs={} expr=v3971[1] }
        ip      = { defs={0x08048440} expr=0x08048441[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3930[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3931[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3930[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3931[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3930[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3931[32]) }
          flags = { }
        address = { defs={0x08048440} expr=(add[32] v3930[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3931[32]) }
          flags = { }
    init mem:
0x8048441:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v3926[32] }
        cx      = { defs={} expr=v3927[32] }
        dx      = { defs={} expr=v3928[32] }
        bx      = { defs={} expr=v3929[32] }
        sp      = { defs={0x08048440} expr=(add[32] v3930[32] -4[32]) }
        bp      = { defs={0x08048440,0x08048441} expr=(add[32] v3930[32] -4[32]) }
        si      = { defs={} expr=v3932[32] }
        di      = { defs={} expr=v3933[32] }
        es      = { defs={} expr=v3934[16] }
        cs      = { defs={} expr=v3935[16] }
        ss      = { defs={} expr=v3936[16] }
        ds      = { defs={} expr=v3937[16] }
        fs      = { defs={} expr=v3938[16] }
        gs      = { defs={} expr=v3939[16] }
        cf      = { defs={} expr=v3940[1] }
        ?1      = { defs={} expr=v3941[1] }
        pf      = { defs={} expr=v3942[1] }
        ?3      = { defs={} expr=v3943[1] }
        af      = { defs={} expr=v3944[1] }
        ?5      = { defs={} expr=v3945[1] }
        zf      = { defs={} expr=v3946[1] }
        sf      = { defs={} expr=v3947[1] }
        tf      = { defs={} expr=v3948[1] }
        if      = { defs={} expr=v3949[1] }
        df      = { defs={} expr=v3950[1] }
        of      = { defs={} expr=v3951[1] }
        iopl0   = { defs={} expr=v3952[1] }
        iopl1   = { defs={} expr=v3953[1] }
        nt      = { defs={} expr=v3954[1] }
        ?15     = { defs={} expr=v3955[1] }
        rf      = { defs={} expr=v3956[1] }
        vm      = { defs={} expr=v3957[1] }
        ac      = { defs={} expr=v3958[1] }
        vif     = { defs={} expr=v3959[1] }
        vip     = { defs={} expr=v3960[1] }
        id      = { defs={} expr=v3961[1] }
        ?22     = { defs={} expr=v3962[1] }
        ?23     = { defs={} expr=v3963[1] }
        ?24     = { defs={} expr=v3964[1] }
        ?25     = { defs={} expr=v3965[1] }
        ?26     = { defs={} expr=v3966[1] }
        ?27     = { defs={} expr=v3967[1] }
        ?28     = { defs={} expr=v3968[1] }
        ?29     = { defs={} expr=v3969[1] }
        ?30     = { defs={} expr=v3970[1] }
        ?31     = { defs={} expr=v3971[1] }
        ip      = { defs={0x08048440,0x08048441} expr=0x08048443[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3930[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3931[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3930[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3931[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3930[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3931[32]) }
          flags = { }
        address = { defs={0x08048440} expr=(add[32] v3930[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3931[32]) }
          flags = { }
    init mem:
0x8048443:sub    esp, 0x08
    registers:
        ax      = { defs={} expr=v3926[32] }
        cx      = { defs={} expr=v3927[32] }
        dx      = { defs={} expr=v3928[32] }
        bx      = { defs={} expr=v3929[32] }
        sp      = { defs={0x08048440,0x08048443} expr=(add[32] (add[32] v3930[32] -4[32]) -8[32]) }
        bp      = { defs={0x08048440,0x08048441} expr=(add[32] v3930[32] -4[32]) }
        si      = { defs={} expr=v3932[32] }
        di      = { defs={} expr=v3933[32] }
        es      = { defs={} expr=v3934[16] }
        cs      = { defs={} expr=v3935[16] }
        ss      = { defs={} expr=v3936[16] }
        ds      = { defs={} expr=v3937[16] }
        fs      = { defs={} expr=v3938[16] }
        gs      = { defs={} expr=v3939[16] }
        cf      = { defs={0x08048440,0x08048443} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3930[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3930[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v3941[1] }
        pf      = { defs={0x08048440,0x08048443} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3930[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3930[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3930[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3930[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3930[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3930[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3930[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3930[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v3943[1] }
        af      = { defs={0x08048440,0x08048443} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3930[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3930[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v3945[1] }
        zf      = { defs={0x08048440,0x08048443} expr=(zerop[1] (add[32] (add[32] v3930[32] -4[32]) -8[32])) }
        sf      = { defs={0x08048440,0x08048443} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v3930[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v3948[1] }
        if      = { defs={} expr=v3949[1] }
        df      = { defs={} expr=v3950[1] }
        of      = { defs={0x08048440,0x08048443} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3930[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3930[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3930[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3930[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v3952[1] }
        iopl1   = { defs={} expr=v3953[1] }
        nt      = { defs={} expr=v3954[1] }
        ?15     = { defs={} expr=v3955[1] }
        rf      = { defs={} expr=v3956[1] }
        vm      = { defs={} expr=v3957[1] }
        ac      = { defs={} expr=v3958[1] }
        vif     = { defs={} expr=v3959[1] }
        vip     = { defs={} expr=v3960[1] }
        id      = { defs={} expr=v3961[1] }
        ?22     = { defs={} expr=v3962[1] }
        ?23     = { defs={} expr=v3963[1] }
        ?24     = { defs={} expr=v3964[1] }
        ?25     = { defs={} expr=v3965[1] }
        ?26     = { defs={} expr=v3966[1] }
        ?27     = { defs={} expr=v3967[1] }
        ?28     = { defs={} expr=v3968[1] }
        ?29     = { defs={} expr=v3969[1] }
        ?30     = { defs={} expr=v3970[1] }
        ?31     = { defs={} expr=v3971[1] }
        ip      = { defs={0x08048440,0x08048441,0x08048443} expr=0x08048446[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3930[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3931[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3930[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3931[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3930[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3931[32]) }
          flags = { }
        address = { defs={0x08048440} expr=(add[32] v3930[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3931[32]) }
          flags = { }
    init mem:
0x8048446:mov    DWORD PTR ss:[esp], 0x080485d4<<StaticData@0x080485ca>+0x0a>
    registers:
        ax      = { defs={} expr=v3926[32] }
        cx      = { defs={} expr=v3927[32] }
        dx      = { defs={} expr=v3928[32] }
        bx      = { defs={} expr=v3929[32] }
        sp      = { defs={0x08048440,0x08048443} expr=(add[32] (add[32] v3930[32] -4[32]) -8[32]) }
        bp      = { defs={0x08048440,0x08048441} expr=(add[32] v3930[32] -4[32]) }
        si      = { defs={} expr=v3932[32] }
        di      = { defs={} expr=v3933[32] }
        es      = { defs={} expr=v3934[16] }
        cs      = { defs={} expr=v3935[16] }
        ss      = { defs={} expr=v3936[16] }
        ds      = { defs={} expr=v3937[16] }
        fs      = { defs={} expr=v3938[16] }
        gs      = { defs={} expr=v3939[16] }
        cf      = { defs={0x08048440,0x08048443} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3930[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3930[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v3941[1] }
        pf      = { defs={0x08048440,0x08048443} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3930[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3930[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3930[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3930[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3930[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3930[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3930[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3930[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v3943[1] }
        af      = { defs={0x08048440,0x08048443} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3930[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3930[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v3945[1] }
        zf      = { defs={0x08048440,0x08048443} expr=(zerop[1] (add[32] (add[32] v3930[32] -4[32]) -8[32])) }
        sf      = { defs={0x08048440,0x08048443} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v3930[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v3948[1] }
        if      = { defs={} expr=v3949[1] }
        df      = { defs={} expr=v3950[1] }
        of      = { defs={0x08048440,0x08048443} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3930[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3930[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3930[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3930[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v3952[1] }
        iopl1   = { defs={} expr=v3953[1] }
        nt      = { defs={} expr=v3954[1] }
        ?15     = { defs={} expr=v3955[1] }
        rf      = { defs={} expr=v3956[1] }
        vm      = { defs={} expr=v3957[1] }
        ac      = { defs={} expr=v3958[1] }
        vif     = { defs={} expr=v3959[1] }
        vip     = { defs={} expr=v3960[1] }
        id      = { defs={} expr=v3961[1] }
        ?22     = { defs={} expr=v3962[1] }
        ?23     = { defs={} expr=v3963[1] }
        ?24     = { defs={} expr=v3964[1] }
        ?25     = { defs={} expr=v3965[1] }
        ?26     = { defs={} expr=v3966[1] }
        ?27     = { defs={} expr=v3967[1] }
        ?28     = { defs={} expr=v3968[1] }
        ?29     = { defs={} expr=v3969[1] }
        ?30     = { defs={} expr=v3970[1] }
        ?31     = { defs={} expr=v3971[1] }
        ip      = { defs={0x08048440,0x08048441,0x08048443,0x08048446} expr=0x0804844d[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v3930[32] -4[32]) -8[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3930[32] -4[32]) -8[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3930[32] -4[32]) -8[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x08048440,0x08048443,0x08048446} expr=(add[32] (add[32] v3930[32] -4[32]) -8[32]) }
          value = { defs={} expr=-44[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3930[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3931[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3930[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3931[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3930[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3931[32]) }
          flags = { }
        address = { defs={0x08048440} expr=(add[32] v3930[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3931[32]) }
          flags = { }
    init mem:
0x804844d:call   0x08048300<puts@plt>
    registers:
        ax      = { defs={} expr=v3926[32] }
        cx      = { defs={} expr=v3927[32] }
        dx      = { defs={} expr=v3928[32] }
        bx      = { defs={} expr=v3929[32] }
        sp      = { defs={0x08048440,0x08048443,0x0804844d} expr=(add[32] (add[32] (add[32] v3930[32] -4[32]) -8[32]) -4[32]) }
        bp      = { defs={0x08048440,0x08048441} expr=(add[32] v3930[32] -4[32]) }
        si      = { defs={} expr=v3932[32] }
        di      = { defs={} expr=v3933[32] }
        es      = { defs={} expr=v3934[16] }
        cs      = { defs={} expr=v3935[16] }
        ss      = { defs={} expr=v3936[16] }
        ds      = { defs={} expr=v3937[16] }
        fs      = { defs={} expr=v3938[16] }
        gs      = { defs={} expr=v3939[16] }
        cf      = { defs={0x08048440,0x08048443} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3930[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3930[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v3941[1] }
        pf      = { defs={0x08048440,0x08048443} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3930[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3930[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3930[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3930[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3930[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3930[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3930[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3930[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v3943[1] }
        af      = { defs={0x08048440,0x08048443} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3930[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3930[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v3945[1] }
        zf      = { defs={0x08048440,0x08048443} expr=(zerop[1] (add[32] (add[32] v3930[32] -4[32]) -8[32])) }
        sf      = { defs={0x08048440,0x08048443} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v3930[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v3948[1] }
        if      = { defs={} expr=v3949[1] }
        df      = { defs={} expr=v3950[1] }
        of      = { defs={0x08048440,0x08048443} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3930[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3930[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3930[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3930[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v3952[1] }
        iopl1   = { defs={} expr=v3953[1] }
        nt      = { defs={} expr=v3954[1] }
        ?15     = { defs={} expr=v3955[1] }
        rf      = { defs={} expr=v3956[1] }
        vm      = { defs={} expr=v3957[1] }
        ac      = { defs={} expr=v3958[1] }
        vif     = { defs={} expr=v3959[1] }
        vip     = { defs={} expr=v3960[1] }
        id      = { defs={} expr=v3961[1] }
        ?22     = { defs={} expr=v3962[1] }
        ?23     = { defs={} expr=v3963[1] }
        ?24     = { defs={} expr=v3964[1] }
        ?25     = { defs={} expr=v3965[1] }
        ?26     = { defs={} expr=v3966[1] }
        ?27     = { defs={} expr=v3967[1] }
        ?28     = { defs={} expr=v3968[1] }
        ?29     = { defs={} expr=v3969[1] }
        ?30     = { defs={} expr=v3970[1] }
        ?31     = { defs={} expr=v3971[1] }
        ip      = { defs={0x0804844d} expr=0x08048300[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3930[32] -4[32]) -8[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3930[32] -4[32]) -8[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3930[32] -4[32]) -8[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x08048440,0x08048443,0x0804844d} expr=(add[32] (add[32] (add[32] v3930[32] -4[32]) -8[32]) -4[32]) }
          value = { defs={} expr=82[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3930[32] -4[32]) -8[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3930[32] -4[32]) -8[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3930[32] -4[32]) -8[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x08048440,0x08048443,0x08048446} expr=(add[32] (add[32] v3930[32] -4[32]) -8[32]) }
          value = { defs={} expr=-44[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3930[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3931[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3930[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3931[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3930[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3931[32]) }
          flags = { }
        address = { defs={0x08048440} expr=(add[32] v3930[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3931[32]) }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048452:mov    esp, ebp
    registers:
        ax      = { defs={} expr=v4097[32] }
        cx      = { defs={} expr=v4098[32] }
        dx      = { defs={} expr=v4099[32] }
        bx      = { defs={} expr=v4100[32] }
        sp      = { defs={0x08048452} expr=v4102[32] }
        bp      = { defs={} expr=v4102[32] }
        si      = { defs={} expr=v4103[32] }
        di      = { defs={} expr=v4104[32] }
        es      = { defs={} expr=v4105[16] }
        cs      = { defs={} expr=v4106[16] }
        ss      = { defs={} expr=v4107[16] }
        ds      = { defs={} expr=v4108[16] }
        fs      = { defs={} expr=v4109[16] }
        gs      = { defs={} expr=v4110[16] }
        cf      = { defs={} expr=v4111[1] }
        ?1      = { defs={} expr=v4112[1] }
        pf      = { defs={} expr=v4113[1] }
        ?3      = { defs={} expr=v4114[1] }
        af      = { defs={} expr=v4115[1] }
        ?5      = { defs={} expr=v4116[1] }
        zf      = { defs={} expr=v4117[1] }
        sf      = { defs={} expr=v4118[1] }
        tf      = { defs={} expr=v4119[1] }
        if      = { defs={} expr=v4120[1] }
        df      = { defs={} expr=v4121[1] }
        of      = { defs={} expr=v4122[1] }
        iopl0   = { defs={} expr=v4123[1] }
        iopl1   = { defs={} expr=v4124[1] }
        nt      = { defs={} expr=v4125[1] }
        ?15     = { defs={} expr=v4126[1] }
        rf      = { defs={} expr=v4127[1] }
        vm      = { defs={} expr=v4128[1] }
        ac      = { defs={} expr=v4129[1] }
        vif     = { defs={} expr=v4130[1] }
        vip     = { defs={} expr=v4131[1] }
        id      = { defs={} expr=v4132[1] }
        ?22     = { defs={} expr=v4133[1] }
        ?23     = { defs={} expr=v4134[1] }
        ?24     = { defs={} expr=v4135[1] }
        ?25     = { defs={} expr=v4136[1] }
        ?26     = { defs={} expr=v4137[1] }
        ?27     = { defs={} expr=v4138[1] }
        ?28     = { defs={} expr=v4139[1] }
        ?29     = { defs={} expr=v4140[1] }
        ?30     = { defs={} expr=v4141[1] }
        ?31     = { defs={} expr=v4142[1] }
        ip      = { defs={0x08048452} expr=0x08048454[32] }
    memory:
    init mem:
0x8048454:pop    ebp
    registers:
        ax      = { defs={} expr=v4097[32] }
        cx      = { defs={} expr=v4098[32] }
        dx      = { defs={} expr=v4099[32] }
        bx      = { defs={} expr=v4100[32] }
        sp      = { defs={0x08048452,0x08048454} expr=(add[32] v4102[32] 4[32]) }
        bp      = { defs={0x08048454} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4157[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4158[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4159[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4160[8]))) }
        si      = { defs={} expr=v4103[32] }
        di      = { defs={} expr=v4104[32] }
        es      = { defs={} expr=v4105[16] }
        cs      = { defs={} expr=v4106[16] }
        ss      = { defs={} expr=v4107[16] }
        ds      = { defs={} expr=v4108[16] }
        fs      = { defs={} expr=v4109[16] }
        gs      = { defs={} expr=v4110[16] }
        cf      = { defs={} expr=v4111[1] }
        ?1      = { defs={} expr=v4112[1] }
        pf      = { defs={} expr=v4113[1] }
        ?3      = { defs={} expr=v4114[1] }
        af      = { defs={} expr=v4115[1] }
        ?5      = { defs={} expr=v4116[1] }
        zf      = { defs={} expr=v4117[1] }
        sf      = { defs={} expr=v4118[1] }
        tf      = { defs={} expr=v4119[1] }
        if      = { defs={} expr=v4120[1] }
        df      = { defs={} expr=v4121[1] }
        of      = { defs={} expr=v4122[1] }
        iopl0   = { defs={} expr=v4123[1] }
        iopl1   = { defs={} expr=v4124[1] }
        nt      = { defs={} expr=v4125[1] }
        ?15     = { defs={} expr=v4126[1] }
        rf      = { defs={} expr=v4127[1] }
        vm      = { defs={} expr=v4128[1] }
        ac      = { defs={} expr=v4129[1] }
        vif     = { defs={} expr=v4130[1] }
        vip     = { defs={} expr=v4131[1] }
        id      = { defs={} expr=v4132[1] }
        ?22     = { defs={} expr=v4133[1] }
        ?23     = { defs={} expr=v4134[1] }
        ?24     = { defs={} expr=v4135[1] }
        ?25     = { defs={} expr=v4136[1] }
        ?26     = { defs={} expr=v4137[1] }
        ?27     = { defs={} expr=v4138[1] }
        ?28     = { defs={} expr=v4139[1] }
        ?29     = { defs={} expr=v4140[1] }
        ?30     = { defs={} expr=v4141[1] }
        ?31     = { defs={} expr=v4142[1] }
        ip      = { defs={0x08048452,0x08048454} expr=0x08048455[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v4102[32] 3[32]) }
          value = { defs={} expr=v4160[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4102[32] 2[32]) }
          value = { defs={} expr=v4159[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4102[32] 1[32]) }
          value = { defs={} expr=v4158[8] }
          flags = { rdonly }
        address = { defs={0x08048452,0x08048454} expr=v4102[32] }
          value = { defs={} expr=v4157[8] }
          flags = { rdonly }
0x8048455:ret    
    registers:
        ax      = { defs={} expr=v4097[32] }
        cx      = { defs={} expr=v4098[32] }
        dx      = { defs={} expr=v4099[32] }
        bx      = { defs={} expr=v4100[32] }
        sp      = { defs={0x08048452,0x08048454,0x08048455} expr=(add[32] (add[32] v4102[32] 4[32]) 4[32]) }
        bp      = { defs={0x08048454} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4157[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4158[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4159[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4160[8]))) }
        si      = { defs={} expr=v4103[32] }
        di      = { defs={} expr=v4104[32] }
        es      = { defs={} expr=v4105[16] }
        cs      = { defs={} expr=v4106[16] }
        ss      = { defs={} expr=v4107[16] }
        ds      = { defs={} expr=v4108[16] }
        fs      = { defs={} expr=v4109[16] }
        gs      = { defs={} expr=v4110[16] }
        cf      = { defs={} expr=v4111[1] }
        ?1      = { defs={} expr=v4112[1] }
        pf      = { defs={} expr=v4113[1] }
        ?3      = { defs={} expr=v4114[1] }
        af      = { defs={} expr=v4115[1] }
        ?5      = { defs={} expr=v4116[1] }
        zf      = { defs={} expr=v4117[1] }
        sf      = { defs={} expr=v4118[1] }
        tf      = { defs={} expr=v4119[1] }
        if      = { defs={} expr=v4120[1] }
        df      = { defs={} expr=v4121[1] }
        of      = { defs={} expr=v4122[1] }
        iopl0   = { defs={} expr=v4123[1] }
        iopl1   = { defs={} expr=v4124[1] }
        nt      = { defs={} expr=v4125[1] }
        ?15     = { defs={} expr=v4126[1] }
        rf      = { defs={} expr=v4127[1] }
        vm      = { defs={} expr=v4128[1] }
        ac      = { defs={} expr=v4129[1] }
        vif     = { defs={} expr=v4130[1] }
        vip     = { defs={} expr=v4131[1] }
        id      = { defs={} expr=v4132[1] }
        ?22     = { defs={} expr=v4133[1] }
        ?23     = { defs={} expr=v4134[1] }
        ?24     = { defs={} expr=v4135[1] }
        ?25     = { defs={} expr=v4136[1] }
        ?26     = { defs={} expr=v4137[1] }
        ?27     = { defs={} expr=v4138[1] }
        ?28     = { defs={} expr=v4139[1] }
        ?29     = { defs={} expr=v4140[1] }
        ?30     = { defs={} expr=v4141[1] }
        ?31     = { defs={} expr=v4142[1] }
        ip      = { defs={0x08048455} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4174[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4175[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4176[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4177[8]))) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v4102[32] 4[32]) 3[32]) }
          value = { defs={} expr=v4177[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4102[32] 4[32]) 2[32]) }
          value = { defs={} expr=v4176[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4102[32] 4[32]) 1[32]) }
          value = { defs={} expr=v4175[8] }
          flags = { rdonly }
        address = { defs={0x08048452,0x08048454,0x08048455} expr=(add[32] v4102[32] 4[32]) }
          value = { defs={} expr=v4174[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4102[32] 3[32]) }
          value = { defs={} expr=v4160[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4102[32] 2[32]) }
          value = { defs={} expr=v4159[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4102[32] 1[32]) }
          value = { defs={} expr=v4158[8] }
          flags = { rdonly }
        address = { defs={0x08048452,0x08048454} expr=v4102[32] }
          value = { defs={} expr=v4157[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048460:push   ebp
    registers:
        ax      = { defs={} expr=v4232[32] }
        cx      = { defs={} expr=v4233[32] }
        dx      = { defs={} expr=v4234[32] }
        bx      = { defs={} expr=v4235[32] }
        sp      = { defs={0x08048460} expr=(add[32] v4236[32] -4[32]) }
        bp      = { defs={} expr=v4237[32] }
        si      = { defs={} expr=v4238[32] }
        di      = { defs={} expr=v4239[32] }
        es      = { defs={} expr=v4240[16] }
        cs      = { defs={} expr=v4241[16] }
        ss      = { defs={} expr=v4242[16] }
        ds      = { defs={} expr=v4243[16] }
        fs      = { defs={} expr=v4244[16] }
        gs      = { defs={} expr=v4245[16] }
        cf      = { defs={} expr=v4246[1] }
        ?1      = { defs={} expr=v4247[1] }
        pf      = { defs={} expr=v4248[1] }
        ?3      = { defs={} expr=v4249[1] }
        af      = { defs={} expr=v4250[1] }
        ?5      = { defs={} expr=v4251[1] }
        zf      = { defs={} expr=v4252[1] }
        sf      = { defs={} expr=v4253[1] }
        tf      = { defs={} expr=v4254[1] }
        if      = { defs={} expr=v4255[1] }
        df      = { defs={} expr=v4256[1] }
        of      = { defs={} expr=v4257[1] }
        iopl0   = { defs={} expr=v4258[1] }
        iopl1   = { defs={} expr=v4259[1] }
        nt      = { defs={} expr=v4260[1] }
        ?15     = { defs={} expr=v4261[1] }
        rf      = { defs={} expr=v4262[1] }
        vm      = { defs={} expr=v4263[1] }
        ac      = { defs={} expr=v4264[1] }
        vif     = { defs={} expr=v4265[1] }
        vip     = { defs={} expr=v4266[1] }
        id      = { defs={} expr=v4267[1] }
        ?22     = { defs={} expr=v4268[1] }
        ?23     = { defs={} expr=v4269[1] }
        ?24     = { defs={} expr=v4270[1] }
        ?25     = { defs={} expr=v4271[1] }
        ?26     = { defs={} expr=v4272[1] }
        ?27     = { defs={} expr=v4273[1] }
        ?28     = { defs={} expr=v4274[1] }
        ?29     = { defs={} expr=v4275[1] }
        ?30     = { defs={} expr=v4276[1] }
        ?31     = { defs={} expr=v4277[1] }
        ip      = { defs={0x08048460} expr=0x08048461[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v4236[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4237[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4236[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4237[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4236[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4237[32]) }
          flags = { }
        address = { defs={0x08048460} expr=(add[32] v4236[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4237[32]) }
          flags = { }
    init mem:
0x8048461:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v4232[32] }
        cx      = { defs={} expr=v4233[32] }
        dx      = { defs={} expr=v4234[32] }
        bx      = { defs={} expr=v4235[32] }
        sp      = { defs={0x08048460} expr=(add[32] v4236[32] -4[32]) }
        bp      = { defs={0x08048460,0x08048461} expr=(add[32] v4236[32] -4[32]) }
        si      = { defs={} expr=v4238[32] }
        di      = { defs={} expr=v4239[32] }
        es      = { defs={} expr=v4240[16] }
        cs      = { defs={} expr=v4241[16] }
        ss      = { defs={} expr=v4242[16] }
        ds      = { defs={} expr=v4243[16] }
        fs      = { defs={} expr=v4244[16] }
        gs      = { defs={} expr=v4245[16] }
        cf      = { defs={} expr=v4246[1] }
        ?1      = { defs={} expr=v4247[1] }
        pf      = { defs={} expr=v4248[1] }
        ?3      = { defs={} expr=v4249[1] }
        af      = { defs={} expr=v4250[1] }
        ?5      = { defs={} expr=v4251[1] }
        zf      = { defs={} expr=v4252[1] }
        sf      = { defs={} expr=v4253[1] }
        tf      = { defs={} expr=v4254[1] }
        if      = { defs={} expr=v4255[1] }
        df      = { defs={} expr=v4256[1] }
        of      = { defs={} expr=v4257[1] }
        iopl0   = { defs={} expr=v4258[1] }
        iopl1   = { defs={} expr=v4259[1] }
        nt      = { defs={} expr=v4260[1] }
        ?15     = { defs={} expr=v4261[1] }
        rf      = { defs={} expr=v4262[1] }
        vm      = { defs={} expr=v4263[1] }
        ac      = { defs={} expr=v4264[1] }
        vif     = { defs={} expr=v4265[1] }
        vip     = { defs={} expr=v4266[1] }
        id      = { defs={} expr=v4267[1] }
        ?22     = { defs={} expr=v4268[1] }
        ?23     = { defs={} expr=v4269[1] }
        ?24     = { defs={} expr=v4270[1] }
        ?25     = { defs={} expr=v4271[1] }
        ?26     = { defs={} expr=v4272[1] }
        ?27     = { defs={} expr=v4273[1] }
        ?28     = { defs={} expr=v4274[1] }
        ?29     = { defs={} expr=v4275[1] }
        ?30     = { defs={} expr=v4276[1] }
        ?31     = { defs={} expr=v4277[1] }
        ip      = { defs={0x08048460,0x08048461} expr=0x08048463[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v4236[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4237[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4236[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4237[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4236[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4237[32]) }
          flags = { }
        address = { defs={0x08048460} expr=(add[32] v4236[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4237[32]) }
          flags = { }
    init mem:
0x8048463:sub    esp, 0x08
    registers:
        ax      = { defs={} expr=v4232[32] }
        cx      = { defs={} expr=v4233[32] }
        dx      = { defs={} expr=v4234[32] }
        bx      = { defs={} expr=v4235[32] }
        sp      = { defs={0x08048460,0x08048463} expr=(add[32] (add[32] v4236[32] -4[32]) -8[32]) }
        bp      = { defs={0x08048460,0x08048461} expr=(add[32] v4236[32] -4[32]) }
        si      = { defs={} expr=v4238[32] }
        di      = { defs={} expr=v4239[32] }
        es      = { defs={} expr=v4240[16] }
        cs      = { defs={} expr=v4241[16] }
        ss      = { defs={} expr=v4242[16] }
        ds      = { defs={} expr=v4243[16] }
        fs      = { defs={} expr=v4244[16] }
        gs      = { defs={} expr=v4245[16] }
        cf      = { defs={0x08048460,0x08048463} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4236[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4236[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v4247[1] }
        pf      = { defs={0x08048460,0x08048463} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4236[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4236[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4236[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4236[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4236[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4236[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4236[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4236[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v4249[1] }
        af      = { defs={0x08048460,0x08048463} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4236[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4236[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v4251[1] }
        zf      = { defs={0x08048460,0x08048463} expr=(zerop[1] (add[32] (add[32] v4236[32] -4[32]) -8[32])) }
        sf      = { defs={0x08048460,0x08048463} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v4236[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v4254[1] }
        if      = { defs={} expr=v4255[1] }
        df      = { defs={} expr=v4256[1] }
        of      = { defs={0x08048460,0x08048463} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4236[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4236[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4236[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4236[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v4258[1] }
        iopl1   = { defs={} expr=v4259[1] }
        nt      = { defs={} expr=v4260[1] }
        ?15     = { defs={} expr=v4261[1] }
        rf      = { defs={} expr=v4262[1] }
        vm      = { defs={} expr=v4263[1] }
        ac      = { defs={} expr=v4264[1] }
        vif     = { defs={} expr=v4265[1] }
        vip     = { defs={} expr=v4266[1] }
        id      = { defs={} expr=v4267[1] }
        ?22     = { defs={} expr=v4268[1] }
        ?23     = { defs={} expr=v4269[1] }
        ?24     = { defs={} expr=v4270[1] }
        ?25     = { defs={} expr=v4271[1] }
        ?26     = { defs={} expr=v4272[1] }
        ?27     = { defs={} expr=v4273[1] }
        ?28     = { defs={} expr=v4274[1] }
        ?29     = { defs={} expr=v4275[1] }
        ?30     = { defs={} expr=v4276[1] }
        ?31     = { defs={} expr=v4277[1] }
        ip      = { defs={0x08048460,0x08048461,0x08048463} expr=0x08048466[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v4236[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4237[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4236[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4237[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4236[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4237[32]) }
          flags = { }
        address = { defs={0x08048460} expr=(add[32] v4236[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4237[32]) }
          flags = { }
    init mem:
0x8048466:mov    DWORD PTR ss:[esp], 0x080485d4<<StaticData@0x080485ca>+0x0a>
    registers:
        ax      = { defs={} expr=v4232[32] }
        cx      = { defs={} expr=v4233[32] }
        dx      = { defs={} expr=v4234[32] }
        bx      = { defs={} expr=v4235[32] }
        sp      = { defs={0x08048460,0x08048463} expr=(add[32] (add[32] v4236[32] -4[32]) -8[32]) }
        bp      = { defs={0x08048460,0x08048461} expr=(add[32] v4236[32] -4[32]) }
        si      = { defs={} expr=v4238[32] }
        di      = { defs={} expr=v4239[32] }
        es      = { defs={} expr=v4240[16] }
        cs      = { defs={} expr=v4241[16] }
        ss      = { defs={} expr=v4242[16] }
        ds      = { defs={} expr=v4243[16] }
        fs      = { defs={} expr=v4244[16] }
        gs      = { defs={} expr=v4245[16] }
        cf      = { defs={0x08048460,0x08048463} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4236[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4236[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v4247[1] }
        pf      = { defs={0x08048460,0x08048463} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4236[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4236[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4236[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4236[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4236[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4236[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4236[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4236[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v4249[1] }
        af      = { defs={0x08048460,0x08048463} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4236[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4236[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v4251[1] }
        zf      = { defs={0x08048460,0x08048463} expr=(zerop[1] (add[32] (add[32] v4236[32] -4[32]) -8[32])) }
        sf      = { defs={0x08048460,0x08048463} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v4236[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v4254[1] }
        if      = { defs={} expr=v4255[1] }
        df      = { defs={} expr=v4256[1] }
        of      = { defs={0x08048460,0x08048463} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4236[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4236[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4236[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4236[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v4258[1] }
        iopl1   = { defs={} expr=v4259[1] }
        nt      = { defs={} expr=v4260[1] }
        ?15     = { defs={} expr=v4261[1] }
        rf      = { defs={} expr=v4262[1] }
        vm      = { defs={} expr=v4263[1] }
        ac      = { defs={} expr=v4264[1] }
        vif     = { defs={} expr=v4265[1] }
        vip     = { defs={} expr=v4266[1] }
        id      = { defs={} expr=v4267[1] }
        ?22     = { defs={} expr=v4268[1] }
        ?23     = { defs={} expr=v4269[1] }
        ?24     = { defs={} expr=v4270[1] }
        ?25     = { defs={} expr=v4271[1] }
        ?26     = { defs={} expr=v4272[1] }
        ?27     = { defs={} expr=v4273[1] }
        ?28     = { defs={} expr=v4274[1] }
        ?29     = { defs={} expr=v4275[1] }
        ?30     = { defs={} expr=v4276[1] }
        ?31     = { defs={} expr=v4277[1] }
        ip      = { defs={0x08048460,0x08048461,0x08048463,0x08048466} expr=0x0804846d[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v4236[32] -4[32]) -8[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4236[32] -4[32]) -8[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4236[32] -4[32]) -8[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x08048460,0x08048463,0x08048466} expr=(add[32] (add[32] v4236[32] -4[32]) -8[32]) }
          value = { defs={} expr=-44[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4236[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4237[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4236[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4237[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4236[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4237[32]) }
          flags = { }
        address = { defs={0x08048460} expr=(add[32] v4236[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4237[32]) }
          flags = { }
    init mem:
0x804846d:call   0x08048300<puts@plt>
    registers:
        ax      = { defs={} expr=v4232[32] }
        cx      = { defs={} expr=v4233[32] }
        dx      = { defs={} expr=v4234[32] }
        bx      = { defs={} expr=v4235[32] }
        sp      = { defs={0x08048460,0x08048463,0x0804846d} expr=(add[32] (add[32] (add[32] v4236[32] -4[32]) -8[32]) -4[32]) }
        bp      = { defs={0x08048460,0x08048461} expr=(add[32] v4236[32] -4[32]) }
        si      = { defs={} expr=v4238[32] }
        di      = { defs={} expr=v4239[32] }
        es      = { defs={} expr=v4240[16] }
        cs      = { defs={} expr=v4241[16] }
        ss      = { defs={} expr=v4242[16] }
        ds      = { defs={} expr=v4243[16] }
        fs      = { defs={} expr=v4244[16] }
        gs      = { defs={} expr=v4245[16] }
        cf      = { defs={0x08048460,0x08048463} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4236[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4236[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v4247[1] }
        pf      = { defs={0x08048460,0x08048463} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4236[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4236[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4236[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4236[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4236[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4236[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4236[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4236[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v4249[1] }
        af      = { defs={0x08048460,0x08048463} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4236[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4236[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v4251[1] }
        zf      = { defs={0x08048460,0x08048463} expr=(zerop[1] (add[32] (add[32] v4236[32] -4[32]) -8[32])) }
        sf      = { defs={0x08048460,0x08048463} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v4236[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v4254[1] }
        if      = { defs={} expr=v4255[1] }
        df      = { defs={} expr=v4256[1] }
        of      = { defs={0x08048460,0x08048463} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4236[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4236[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4236[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4236[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v4258[1] }
        iopl1   = { defs={} expr=v4259[1] }
        nt      = { defs={} expr=v4260[1] }
        ?15     = { defs={} expr=v4261[1] }
        rf      = { defs={} expr=v4262[1] }
        vm      = { defs={} expr=v4263[1] }
        ac      = { defs={} expr=v4264[1] }
        vif     = { defs={} expr=v4265[1] }
        vip     = { defs={} expr=v4266[1] }
        id      = { defs={} expr=v4267[1] }
        ?22     = { defs={} expr=v4268[1] }
        ?23     = { defs={} expr=v4269[1] }
        ?24     = { defs={} expr=v4270[1] }
        ?25     = { defs={} expr=v4271[1] }
        ?26     = { defs={} expr=v4272[1] }
        ?27     = { defs={} expr=v4273[1] }
        ?28     = { defs={} expr=v4274[1] }
        ?29     = { defs={} expr=v4275[1] }
        ?30     = { defs={} expr=v4276[1] }
        ?31     = { defs={} expr=v4277[1] }
        ip      = { defs={0x0804846d} expr=0x08048300[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4236[32] -4[32]) -8[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4236[32] -4[32]) -8[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4236[32] -4[32]) -8[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x08048460,0x08048463,0x0804846d} expr=(add[32] (add[32] (add[32] v4236[32] -4[32]) -8[32]) -4[32]) }
          value = { defs={} expr=114[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4236[32] -4[32]) -8[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4236[32] -4[32]) -8[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4236[32] -4[32]) -8[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x08048460,0x08048463,0x08048466} expr=(add[32] (add[32] v4236[32] -4[32]) -8[32]) }
          value = { defs={} expr=-44[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4236[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4237[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4236[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4237[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4236[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4237[32]) }
          flags = { }
        address = { defs={0x08048460} expr=(add[32] v4236[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4237[32]) }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048472:mov    DWORD PTR ss:[esp], 0x00000000
    registers:
        ax      = { defs={} expr=v4403[32] }
        cx      = { defs={} expr=v4404[32] }
        dx      = { defs={} expr=v4405[32] }
        bx      = { defs={} expr=v4406[32] }
        sp      = { defs={} expr=v4407[32] }
        bp      = { defs={} expr=v4408[32] }
        si      = { defs={} expr=v4409[32] }
        di      = { defs={} expr=v4410[32] }
        es      = { defs={} expr=v4411[16] }
        cs      = { defs={} expr=v4412[16] }
        ss      = { defs={} expr=v4413[16] }
        ds      = { defs={} expr=v4414[16] }
        fs      = { defs={} expr=v4415[16] }
        gs      = { defs={} expr=v4416[16] }
        cf      = { defs={} expr=v4417[1] }
        ?1      = { defs={} expr=v4418[1] }
        pf      = { defs={} expr=v4419[1] }
        ?3      = { defs={} expr=v4420[1] }
        af      = { defs={} expr=v4421[1] }
        ?5      = { defs={} expr=v4422[1] }
        zf      = { defs={} expr=v4423[1] }
        sf      = { defs={} expr=v4424[1] }
        tf      = { defs={} expr=v4425[1] }
        if      = { defs={} expr=v4426[1] }
        df      = { defs={} expr=v4427[1] }
        of      = { defs={} expr=v4428[1] }
        iopl0   = { defs={} expr=v4429[1] }
        iopl1   = { defs={} expr=v4430[1] }
        nt      = { defs={} expr=v4431[1] }
        ?15     = { defs={} expr=v4432[1] }
        rf      = { defs={} expr=v4433[1] }
        vm      = { defs={} expr=v4434[1] }
        ac      = { defs={} expr=v4435[1] }
        vif     = { defs={} expr=v4436[1] }
        vip     = { defs={} expr=v4437[1] }
        id      = { defs={} expr=v4438[1] }
        ?22     = { defs={} expr=v4439[1] }
        ?23     = { defs={} expr=v4440[1] }
        ?24     = { defs={} expr=v4441[1] }
        ?25     = { defs={} expr=v4442[1] }
        ?26     = { defs={} expr=v4443[1] }
        ?27     = { defs={} expr=v4444[1] }
        ?28     = { defs={} expr=v4445[1] }
        ?29     = { defs={} expr=v4446[1] }
        ?30     = { defs={} expr=v4447[1] }
        ?31     = { defs={} expr=v4448[1] }
        ip      = { defs={0x08048472} expr=0x08048479[32] }
    memory:
        address = { defs={} expr=(add[32] v4407[32] 3[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] v4407[32] 2[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] v4407[32] 1[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={0x08048472} expr=v4407[32] }
          value = { defs={} expr=0[8] }
          flags = { }
    init mem:
0x8048479:call   0x08048320<_exit@plt>
    registers:
        ax      = { defs={} expr=v4403[32] }
        cx      = { defs={} expr=v4404[32] }
        dx      = { defs={} expr=v4405[32] }
        bx      = { defs={} expr=v4406[32] }
        sp      = { defs={0x08048479} expr=(add[32] v4407[32] -4[32]) }
        bp      = { defs={} expr=v4408[32] }
        si      = { defs={} expr=v4409[32] }
        di      = { defs={} expr=v4410[32] }
        es      = { defs={} expr=v4411[16] }
        cs      = { defs={} expr=v4412[16] }
        ss      = { defs={} expr=v4413[16] }
        ds      = { defs={} expr=v4414[16] }
        fs      = { defs={} expr=v4415[16] }
        gs      = { defs={} expr=v4416[16] }
        cf      = { defs={} expr=v4417[1] }
        ?1      = { defs={} expr=v4418[1] }
        pf      = { defs={} expr=v4419[1] }
        ?3      = { defs={} expr=v4420[1] }
        af      = { defs={} expr=v4421[1] }
        ?5      = { defs={} expr=v4422[1] }
        zf      = { defs={} expr=v4423[1] }
        sf      = { defs={} expr=v4424[1] }
        tf      = { defs={} expr=v4425[1] }
        if      = { defs={} expr=v4426[1] }
        df      = { defs={} expr=v4427[1] }
        of      = { defs={} expr=v4428[1] }
        iopl0   = { defs={} expr=v4429[1] }
        iopl1   = { defs={} expr=v4430[1] }
        nt      = { defs={} expr=v4431[1] }
        ?15     = { defs={} expr=v4432[1] }
        rf      = { defs={} expr=v4433[1] }
        vm      = { defs={} expr=v4434[1] }
        ac      = { defs={} expr=v4435[1] }
        vif     = { defs={} expr=v4436[1] }
        vip     = { defs={} expr=v4437[1] }
        id      = { defs={} expr=v4438[1] }
        ?22     = { defs={} expr=v4439[1] }
        ?23     = { defs={} expr=v4440[1] }
        ?24     = { defs={} expr=v4441[1] }
        ?25     = { defs={} expr=v4442[1] }
        ?26     = { defs={} expr=v4443[1] }
        ?27     = { defs={} expr=v4444[1] }
        ?28     = { defs={} expr=v4445[1] }
        ?29     = { defs={} expr=v4446[1] }
        ?30     = { defs={} expr=v4447[1] }
        ?31     = { defs={} expr=v4448[1] }
        ip      = { defs={0x08048479} expr=0x08048320[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v4407[32] -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4407[32] -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4407[32] -4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x08048479} expr=(add[32] v4407[32] -4[32]) }
          value = { defs={} expr=126[8] }
          flags = { }
        address = { defs={} expr=(add[32] v4407[32] 3[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] v4407[32] 2[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] v4407[32] 1[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={0x08048472} expr=v4407[32] }
          value = { defs={} expr=0[8] }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048480:push   ebp
    registers:
        ax      = { defs={} expr=v4510[32] }
        cx      = { defs={} expr=v4511[32] }
        dx      = { defs={} expr=v4512[32] }
        bx      = { defs={} expr=v4513[32] }
        sp      = { defs={0x08048480} expr=(add[32] v4514[32] -4[32]) }
        bp      = { defs={} expr=v4515[32] }
        si      = { defs={} expr=v4516[32] }
        di      = { defs={} expr=v4517[32] }
        es      = { defs={} expr=v4518[16] }
        cs      = { defs={} expr=v4519[16] }
        ss      = { defs={} expr=v4520[16] }
        ds      = { defs={} expr=v4521[16] }
        fs      = { defs={} expr=v4522[16] }
        gs      = { defs={} expr=v4523[16] }
        cf      = { defs={} expr=v4524[1] }
        ?1      = { defs={} expr=v4525[1] }
        pf      = { defs={} expr=v4526[1] }
        ?3      = { defs={} expr=v4527[1] }
        af      = { defs={} expr=v4528[1] }
        ?5      = { defs={} expr=v4529[1] }
        zf      = { defs={} expr=v4530[1] }
        sf      = { defs={} expr=v4531[1] }
        tf      = { defs={} expr=v4532[1] }
        if      = { defs={} expr=v4533[1] }
        df      = { defs={} expr=v4534[1] }
        of      = { defs={} expr=v4535[1] }
        iopl0   = { defs={} expr=v4536[1] }
        iopl1   = { defs={} expr=v4537[1] }
        nt      = { defs={} expr=v4538[1] }
        ?15     = { defs={} expr=v4539[1] }
        rf      = { defs={} expr=v4540[1] }
        vm      = { defs={} expr=v4541[1] }
        ac      = { defs={} expr=v4542[1] }
        vif     = { defs={} expr=v4543[1] }
        vip     = { defs={} expr=v4544[1] }
        id      = { defs={} expr=v4545[1] }
        ?22     = { defs={} expr=v4546[1] }
        ?23     = { defs={} expr=v4547[1] }
        ?24     = { defs={} expr=v4548[1] }
        ?25     = { defs={} expr=v4549[1] }
        ?26     = { defs={} expr=v4550[1] }
        ?27     = { defs={} expr=v4551[1] }
        ?28     = { defs={} expr=v4552[1] }
        ?29     = { defs={} expr=v4553[1] }
        ?30     = { defs={} expr=v4554[1] }
        ?31     = { defs={} expr=v4555[1] }
        ip      = { defs={0x08048480} expr=0x08048481[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v4514[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4515[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4514[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4515[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4514[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4515[32]) }
          flags = { }
        address = { defs={0x08048480} expr=(add[32] v4514[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4515[32]) }
          flags = { }
    init mem:
0x8048481:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v4510[32] }
        cx      = { defs={} expr=v4511[32] }
        dx      = { defs={} expr=v4512[32] }
        bx      = { defs={} expr=v4513[32] }
        sp      = { defs={0x08048480} expr=(add[32] v4514[32] -4[32]) }
        bp      = { defs={0x08048480,0x08048481} expr=(add[32] v4514[32] -4[32]) }
        si      = { defs={} expr=v4516[32] }
        di      = { defs={} expr=v4517[32] }
        es      = { defs={} expr=v4518[16] }
        cs      = { defs={} expr=v4519[16] }
        ss      = { defs={} expr=v4520[16] }
        ds      = { defs={} expr=v4521[16] }
        fs      = { defs={} expr=v4522[16] }
        gs      = { defs={} expr=v4523[16] }
        cf      = { defs={} expr=v4524[1] }
        ?1      = { defs={} expr=v4525[1] }
        pf      = { defs={} expr=v4526[1] }
        ?3      = { defs={} expr=v4527[1] }
        af      = { defs={} expr=v4528[1] }
        ?5      = { defs={} expr=v4529[1] }
        zf      = { defs={} expr=v4530[1] }
        sf      = { defs={} expr=v4531[1] }
        tf      = { defs={} expr=v4532[1] }
        if      = { defs={} expr=v4533[1] }
        df      = { defs={} expr=v4534[1] }
        of      = { defs={} expr=v4535[1] }
        iopl0   = { defs={} expr=v4536[1] }
        iopl1   = { defs={} expr=v4537[1] }
        nt      = { defs={} expr=v4538[1] }
        ?15     = { defs={} expr=v4539[1] }
        rf      = { defs={} expr=v4540[1] }
        vm      = { defs={} expr=v4541[1] }
        ac      = { defs={} expr=v4542[1] }
        vif     = { defs={} expr=v4543[1] }
        vip     = { defs={} expr=v4544[1] }
        id      = { defs={} expr=v4545[1] }
        ?22     = { defs={} expr=v4546[1] }
        ?23     = { defs={} expr=v4547[1] }
        ?24     = { defs={} expr=v4548[1] }
        ?25     = { defs={} expr=v4549[1] }
        ?26     = { defs={} expr=v4550[1] }
        ?27     = { defs={} expr=v4551[1] }
        ?28     = { defs={} expr=v4552[1] }
        ?29     = { defs={} expr=v4553[1] }
        ?30     = { defs={} expr=v4554[1] }
        ?31     = { defs={} expr=v4555[1] }
        ip      = { defs={0x08048480,0x08048481} expr=0x08048483[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v4514[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4515[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4514[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4515[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4514[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4515[32]) }
          flags = { }
        address = { defs={0x08048480} expr=(add[32] v4514[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4515[32]) }
          flags = { }
    init mem:
0x8048483:sub    esp, 0x08
    registers:
        ax      = { defs={} expr=v4510[32] }
        cx      = { defs={} expr=v4511[32] }
        dx      = { defs={} expr=v4512[32] }
        bx      = { defs={} expr=v4513[32] }
        sp      = { defs={0x08048480,0x08048483} expr=(add[32] (add[32] v4514[32] -4[32]) -8[32]) }
        bp      = { defs={0x08048480,0x08048481} expr=(add[32] v4514[32] -4[32]) }
        si      = { defs={} expr=v4516[32] }
        di      = { defs={} expr=v4517[32] }
        es      = { defs={} expr=v4518[16] }
        cs      = { defs={} expr=v4519[16] }
        ss      = { defs={} expr=v4520[16] }
        ds      = { defs={} expr=v4521[16] }
        fs      = { defs={} expr=v4522[16] }
        gs      = { defs={} expr=v4523[16] }
        cf      = { defs={0x08048480,0x08048483} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4514[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4514[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v4525[1] }
        pf      = { defs={0x08048480,0x08048483} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4514[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4514[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4514[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4514[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4514[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4514[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4514[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4514[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v4527[1] }
        af      = { defs={0x08048480,0x08048483} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4514[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4514[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v4529[1] }
        zf      = { defs={0x08048480,0x08048483} expr=(zerop[1] (add[32] (add[32] v4514[32] -4[32]) -8[32])) }
        sf      = { defs={0x08048480,0x08048483} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v4514[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v4532[1] }
        if      = { defs={} expr=v4533[1] }
        df      = { defs={} expr=v4534[1] }
        of      = { defs={0x08048480,0x08048483} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4514[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4514[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4514[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4514[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v4536[1] }
        iopl1   = { defs={} expr=v4537[1] }
        nt      = { defs={} expr=v4538[1] }
        ?15     = { defs={} expr=v4539[1] }
        rf      = { defs={} expr=v4540[1] }
        vm      = { defs={} expr=v4541[1] }
        ac      = { defs={} expr=v4542[1] }
        vif     = { defs={} expr=v4543[1] }
        vip     = { defs={} expr=v4544[1] }
        id      = { defs={} expr=v4545[1] }
        ?22     = { defs={} expr=v4546[1] }
        ?23     = { defs={} expr=v4547[1] }
        ?24     = { defs={} expr=v4548[1] }
        ?25     = { defs={} expr=v4549[1] }
        ?26     = { defs={} expr=v4550[1] }
        ?27     = { defs={} expr=v4551[1] }
        ?28     = { defs={} expr=v4552[1] }
        ?29     = { defs={} expr=v4553[1] }
        ?30     = { defs={} expr=v4554[1] }
        ?31     = { defs={} expr=v4555[1] }
        ip      = { defs={0x08048480,0x08048481,0x08048483} expr=0x08048486[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v4514[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4515[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4514[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4515[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4514[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4515[32]) }
          flags = { }
        address = { defs={0x08048480} expr=(add[32] v4514[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4515[32]) }
          flags = { }
    init mem:
0x8048486:inc    DWORD PTR ds:[0x080496f8<.bss+4>]
    registers:
        ax      = { defs={} expr=v4510[32] }
        cx      = { defs={} expr=v4511[32] }
        dx      = { defs={} expr=v4512[32] }
        bx      = { defs={} expr=v4513[32] }
        sp      = { defs={0x08048480,0x08048483} expr=(add[32] (add[32] v4514[32] -4[32]) -8[32]) }
        bp      = { defs={0x08048480,0x08048481} expr=(add[32] v4514[32] -4[32]) }
        si      = { defs={} expr=v4516[32] }
        di      = { defs={} expr=v4517[32] }
        es      = { defs={} expr=v4518[16] }
        cs      = { defs={} expr=v4519[16] }
        ss      = { defs={} expr=v4520[16] }
        ds      = { defs={} expr=v4521[16] }
        fs      = { defs={} expr=v4522[16] }
        gs      = { defs={} expr=v4523[16] }
        cf      = { defs={0x08048480,0x08048483} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4514[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4514[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v4525[1] }
        pf      = { defs={0x08048486} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4627[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f8[32] v4626[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4629[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f9[32] v4628[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4631[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fa[32] v4630[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4633[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fb[32] v4632[8]) 0x080496fb[32])))) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4627[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f8[32] v4626[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4629[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f9[32] v4628[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4631[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fa[32] v4630[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4633[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fb[32] v4632[8]) 0x080496fb[32])))) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4627[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f8[32] v4626[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4629[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f9[32] v4628[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4631[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fa[32] v4630[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4633[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fb[32] v4632[8]) 0x080496fb[32])))) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4627[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f8[32] v4626[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4629[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f9[32] v4628[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4631[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fa[32] v4630[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4633[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fb[32] v4632[8]) 0x080496fb[32])))) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4627[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f8[32] v4626[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4629[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f9[32] v4628[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4631[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fa[32] v4630[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4633[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fb[32] v4632[8]) 0x080496fb[32])))) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4627[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f8[32] v4626[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4629[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f9[32] v4628[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4631[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fa[32] v4630[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4633[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fb[32] v4632[8]) 0x080496fb[32])))) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4627[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f8[32] v4626[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4629[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f9[32] v4628[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4631[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fa[32] v4630[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4633[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fb[32] v4632[8]) 0x080496fb[32])))) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4627[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f8[32] v4626[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4629[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f9[32] v4628[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4631[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fa[32] v4630[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4633[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fb[32] v4632[8]) 0x080496fb[32])))) 1[32]))))))) }
        ?3      = { defs={} expr=v4527[1] }
        af      = { defs={0x08048486} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4627[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f8[32] v4626[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4629[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f9[32] v4628[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4631[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fa[32] v4630[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4633[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fb[32] v4632[8]) 0x080496fb[32]))))) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4627[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f8[32] v4626[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4629[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f9[32] v4628[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4631[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fa[32] v4630[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4633[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fb[32] v4632[8]) 0x080496fb[32]))))) 1[33]))))) }
        ?5      = { defs={} expr=v4529[1] }
        zf      = { defs={0x08048486} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4627[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f8[32] v4626[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4629[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f9[32] v4628[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4631[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fa[32] v4630[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4633[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fb[32] v4632[8]) 0x080496fb[32])))) 1[32])) }
        sf      = { defs={0x08048486} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4627[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f8[32] v4626[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4629[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f9[32] v4628[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4631[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fa[32] v4630[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4633[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fb[32] v4632[8]) 0x080496fb[32])))) 1[32])) }
        tf      = { defs={} expr=v4532[1] }
        if      = { defs={} expr=v4533[1] }
        df      = { defs={} expr=v4534[1] }
        of      = { defs={0x08048486} expr=0[1] }
        iopl0   = { defs={} expr=v4536[1] }
        iopl1   = { defs={} expr=v4537[1] }
        nt      = { defs={} expr=v4538[1] }
        ?15     = { defs={} expr=v4539[1] }
        rf      = { defs={} expr=v4540[1] }
        vm      = { defs={} expr=v4541[1] }
        ac      = { defs={} expr=v4542[1] }
        vif     = { defs={} expr=v4543[1] }
        vip     = { defs={} expr=v4544[1] }
        id      = { defs={} expr=v4545[1] }
        ?22     = { defs={} expr=v4546[1] }
        ?23     = { defs={} expr=v4547[1] }
        ?24     = { defs={} expr=v4548[1] }
        ?25     = { defs={} expr=v4549[1] }
        ?26     = { defs={} expr=v4550[1] }
        ?27     = { defs={} expr=v4551[1] }
        ?28     = { defs={} expr=v4552[1] }
        ?29     = { defs={} expr=v4553[1] }
        ?30     = { defs={} expr=v4554[1] }
        ?31     = { defs={} expr=v4555[1] }
        ip      = { defs={0x08048480,0x08048481,0x08048483,0x08048486} expr=0x0804848c[32] }
    memory:
        address = { defs={} expr=0x080496fb[32] }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4627[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f8[32] v4626[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4629[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f9[32] v4628[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4631[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fa[32] v4630[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4633[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fb[32] v4632[8]) 0x080496fb[32])))) 1[32])) }
          flags = { }
        address = { defs={} expr=0x080496fa[32] }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4627[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f8[32] v4626[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4629[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f9[32] v4628[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4631[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fa[32] v4630[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4633[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fb[32] v4632[8]) 0x080496fb[32])))) 1[32])) }
          flags = { }
        address = { defs={} expr=0x080496f9[32] }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4627[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f8[32] v4626[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4629[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f9[32] v4628[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4631[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fa[32] v4630[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4633[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fb[32] v4632[8]) 0x080496fb[32])))) 1[32])) }
          flags = { }
        address = { defs={0x08048486} expr=0x080496f8[32] }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4627[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f8[32] v4626[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4629[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f9[32] v4628[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4631[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fa[32] v4630[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4633[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fb[32] v4632[8]) 0x080496fb[32])))) 1[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4514[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4515[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4514[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4515[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4514[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4515[32]) }
          flags = { }
        address = { defs={0x08048480} expr=(add[32] v4514[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4515[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=0x080496fb[32] }
          value = { defs={} expr=v4632[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496fa[32] }
          value = { defs={} expr=v4630[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f9[32] }
          value = { defs={} expr=v4628[8] }
          flags = { rdonly }
        address = { defs={0x08048486} expr=0x080496f8[32] }
          value = { defs={} expr=v4626[8] }
          flags = { rdonly }
0x804848c:mov    DWORD PTR ss:[esp], 0x080485d4<<StaticData@0x080485ca>+0x0a>
    registers:
        ax      = { defs={} expr=v4510[32] }
        cx      = { defs={} expr=v4511[32] }
        dx      = { defs={} expr=v4512[32] }
        bx      = { defs={} expr=v4513[32] }
        sp      = { defs={0x08048480,0x08048483} expr=(add[32] (add[32] v4514[32] -4[32]) -8[32]) }
        bp      = { defs={0x08048480,0x08048481} expr=(add[32] v4514[32] -4[32]) }
        si      = { defs={} expr=v4516[32] }
        di      = { defs={} expr=v4517[32] }
        es      = { defs={} expr=v4518[16] }
        cs      = { defs={} expr=v4519[16] }
        ss      = { defs={} expr=v4520[16] }
        ds      = { defs={} expr=v4521[16] }
        fs      = { defs={} expr=v4522[16] }
        gs      = { defs={} expr=v4523[16] }
        cf      = { defs={0x08048480,0x08048483} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4514[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4514[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v4525[1] }
        pf      = { defs={0x08048486} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4627[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f8[32] v4626[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4629[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f9[32] v4628[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4631[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fa[32] v4630[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4633[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fb[32] v4632[8]) 0x080496fb[32])))) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4627[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f8[32] v4626[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4629[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f9[32] v4628[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4631[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fa[32] v4630[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4633[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fb[32] v4632[8]) 0x080496fb[32])))) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4627[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f8[32] v4626[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4629[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f9[32] v4628[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4631[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fa[32] v4630[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4633[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fb[32] v4632[8]) 0x080496fb[32])))) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4627[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f8[32] v4626[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4629[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f9[32] v4628[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4631[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fa[32] v4630[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4633[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fb[32] v4632[8]) 0x080496fb[32])))) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4627[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f8[32] v4626[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4629[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f9[32] v4628[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4631[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fa[32] v4630[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4633[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fb[32] v4632[8]) 0x080496fb[32])))) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4627[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f8[32] v4626[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4629[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f9[32] v4628[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4631[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fa[32] v4630[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4633[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fb[32] v4632[8]) 0x080496fb[32])))) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4627[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f8[32] v4626[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4629[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f9[32] v4628[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4631[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fa[32] v4630[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4633[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fb[32] v4632[8]) 0x080496fb[32])))) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4627[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f8[32] v4626[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4629[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f9[32] v4628[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4631[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fa[32] v4630[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4633[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fb[32] v4632[8]) 0x080496fb[32])))) 1[32]))))))) }
        ?3      = { defs={} expr=v4527[1] }
        af      = { defs={0x08048486} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4627[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f8[32] v4626[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4629[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f9[32] v4628[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4631[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fa[32] v4630[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4633[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fb[32] v4632[8]) 0x080496fb[32]))))) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4627[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f8[32] v4626[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4629[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f9[32] v4628[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4631[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fa[32] v4630[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4633[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fb[32] v4632[8]) 0x080496fb[32]))))) 1[33]))))) }
        ?5      = { defs={} expr=v4529[1] }
        zf      = { defs={0x08048486} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4627[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f8[32] v4626[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4629[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f9[32] v4628[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4631[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fa[32] v4630[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4633[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fb[32] v4632[8]) 0x080496fb[32])))) 1[32])) }
        sf      = { defs={0x08048486} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4627[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f8[32] v4626[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4629[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f9[32] v4628[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4631[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fa[32] v4630[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4633[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fb[32] v4632[8]) 0x080496fb[32])))) 1[32])) }
        tf      = { defs={} expr=v4532[1] }
        if      = { defs={} expr=v4533[1] }
        df      = { defs={} expr=v4534[1] }
        of      = { defs={0x08048486} expr=0[1] }
        iopl0   = { defs={} expr=v4536[1] }
        iopl1   = { defs={} expr=v4537[1] }
        nt      = { defs={} expr=v4538[1] }
        ?15     = { defs={} expr=v4539[1] }
        rf      = { defs={} expr=v4540[1] }
        vm      = { defs={} expr=v4541[1] }
        ac      = { defs={} expr=v4542[1] }
        vif     = { defs={} expr=v4543[1] }
        vip     = { defs={} expr=v4544[1] }
        id      = { defs={} expr=v4545[1] }
        ?22     = { defs={} expr=v4546[1] }
        ?23     = { defs={} expr=v4547[1] }
        ?24     = { defs={} expr=v4548[1] }
        ?25     = { defs={} expr=v4549[1] }
        ?26     = { defs={} expr=v4550[1] }
        ?27     = { defs={} expr=v4551[1] }
        ?28     = { defs={} expr=v4552[1] }
        ?29     = { defs={} expr=v4553[1] }
        ?30     = { defs={} expr=v4554[1] }
        ?31     = { defs={} expr=v4555[1] }
        ip      = { defs={0x08048480,0x08048481,0x08048483,0x08048486,0x0804848c} expr=0x08048493[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v4514[32] -4[32]) -8[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4514[32] -4[32]) -8[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4514[32] -4[32]) -8[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x08048480,0x08048483,0x0804848c} expr=(add[32] (add[32] v4514[32] -4[32]) -8[32]) }
          value = { defs={} expr=-44[8] }
          flags = { }
        address = { defs={} expr=0x080496fb[32] }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4627[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f8[32] v4626[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4629[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f9[32] v4628[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4631[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fa[32] v4630[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4633[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fb[32] v4632[8]) 0x080496fb[32])))) 1[32])) }
          flags = { }
        address = { defs={} expr=0x080496fa[32] }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4627[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f8[32] v4626[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4629[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f9[32] v4628[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4631[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fa[32] v4630[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4633[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fb[32] v4632[8]) 0x080496fb[32])))) 1[32])) }
          flags = { }
        address = { defs={} expr=0x080496f9[32] }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4627[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f8[32] v4626[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4629[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f9[32] v4628[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4631[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fa[32] v4630[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4633[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fb[32] v4632[8]) 0x080496fb[32])))) 1[32])) }
          flags = { }
        address = { defs={0x08048486} expr=0x080496f8[32] }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4627[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f8[32] v4626[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4629[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f9[32] v4628[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4631[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fa[32] v4630[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4633[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fb[32] v4632[8]) 0x080496fb[32])))) 1[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4514[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4515[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4514[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4515[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4514[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4515[32]) }
          flags = { }
        address = { defs={0x08048480} expr=(add[32] v4514[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4515[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=0x080496fb[32] }
          value = { defs={} expr=v4632[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496fa[32] }
          value = { defs={} expr=v4630[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f9[32] }
          value = { defs={} expr=v4628[8] }
          flags = { rdonly }
        address = { defs={0x08048486} expr=0x080496f8[32] }
          value = { defs={} expr=v4626[8] }
          flags = { rdonly }
0x8048493:call   0x08048300<puts@plt>
    registers:
        ax      = { defs={} expr=v4510[32] }
        cx      = { defs={} expr=v4511[32] }
        dx      = { defs={} expr=v4512[32] }
        bx      = { defs={} expr=v4513[32] }
        sp      = { defs={0x08048480,0x08048483,0x08048493} expr=(add[32] (add[32] (add[32] v4514[32] -4[32]) -8[32]) -4[32]) }
        bp      = { defs={0x08048480,0x08048481} expr=(add[32] v4514[32] -4[32]) }
        si      = { defs={} expr=v4516[32] }
        di      = { defs={} expr=v4517[32] }
        es      = { defs={} expr=v4518[16] }
        cs      = { defs={} expr=v4519[16] }
        ss      = { defs={} expr=v4520[16] }
        ds      = { defs={} expr=v4521[16] }
        fs      = { defs={} expr=v4522[16] }
        gs      = { defs={} expr=v4523[16] }
        cf      = { defs={0x08048480,0x08048483} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4514[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4514[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v4525[1] }
        pf      = { defs={0x08048486} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4627[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f8[32] v4626[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4629[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f9[32] v4628[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4631[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fa[32] v4630[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4633[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fb[32] v4632[8]) 0x080496fb[32])))) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4627[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f8[32] v4626[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4629[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f9[32] v4628[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4631[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fa[32] v4630[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4633[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fb[32] v4632[8]) 0x080496fb[32])))) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4627[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f8[32] v4626[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4629[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f9[32] v4628[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4631[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fa[32] v4630[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4633[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fb[32] v4632[8]) 0x080496fb[32])))) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4627[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f8[32] v4626[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4629[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f9[32] v4628[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4631[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fa[32] v4630[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4633[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fb[32] v4632[8]) 0x080496fb[32])))) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4627[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f8[32] v4626[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4629[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f9[32] v4628[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4631[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fa[32] v4630[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4633[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fb[32] v4632[8]) 0x080496fb[32])))) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4627[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f8[32] v4626[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4629[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f9[32] v4628[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4631[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fa[32] v4630[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4633[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fb[32] v4632[8]) 0x080496fb[32])))) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4627[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f8[32] v4626[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4629[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f9[32] v4628[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4631[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fa[32] v4630[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4633[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fb[32] v4632[8]) 0x080496fb[32])))) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4627[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f8[32] v4626[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4629[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f9[32] v4628[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4631[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fa[32] v4630[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4633[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fb[32] v4632[8]) 0x080496fb[32])))) 1[32]))))))) }
        ?3      = { defs={} expr=v4527[1] }
        af      = { defs={0x08048486} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4627[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f8[32] v4626[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4629[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f9[32] v4628[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4631[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fa[32] v4630[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4633[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fb[32] v4632[8]) 0x080496fb[32]))))) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4627[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f8[32] v4626[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4629[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f9[32] v4628[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4631[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fa[32] v4630[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4633[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fb[32] v4632[8]) 0x080496fb[32]))))) 1[33]))))) }
        ?5      = { defs={} expr=v4529[1] }
        zf      = { defs={0x08048486} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4627[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f8[32] v4626[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4629[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f9[32] v4628[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4631[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fa[32] v4630[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4633[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fb[32] v4632[8]) 0x080496fb[32])))) 1[32])) }
        sf      = { defs={0x08048486} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4627[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f8[32] v4626[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4629[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f9[32] v4628[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4631[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fa[32] v4630[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4633[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fb[32] v4632[8]) 0x080496fb[32])))) 1[32])) }
        tf      = { defs={} expr=v4532[1] }
        if      = { defs={} expr=v4533[1] }
        df      = { defs={} expr=v4534[1] }
        of      = { defs={0x08048486} expr=0[1] }
        iopl0   = { defs={} expr=v4536[1] }
        iopl1   = { defs={} expr=v4537[1] }
        nt      = { defs={} expr=v4538[1] }
        ?15     = { defs={} expr=v4539[1] }
        rf      = { defs={} expr=v4540[1] }
        vm      = { defs={} expr=v4541[1] }
        ac      = { defs={} expr=v4542[1] }
        vif     = { defs={} expr=v4543[1] }
        vip     = { defs={} expr=v4544[1] }
        id      = { defs={} expr=v4545[1] }
        ?22     = { defs={} expr=v4546[1] }
        ?23     = { defs={} expr=v4547[1] }
        ?24     = { defs={} expr=v4548[1] }
        ?25     = { defs={} expr=v4549[1] }
        ?26     = { defs={} expr=v4550[1] }
        ?27     = { defs={} expr=v4551[1] }
        ?28     = { defs={} expr=v4552[1] }
        ?29     = { defs={} expr=v4553[1] }
        ?30     = { defs={} expr=v4554[1] }
        ?31     = { defs={} expr=v4555[1] }
        ip      = { defs={0x08048493} expr=0x08048300[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4514[32] -4[32]) -8[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4514[32] -4[32]) -8[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4514[32] -4[32]) -8[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x08048480,0x08048483,0x08048493} expr=(add[32] (add[32] (add[32] v4514[32] -4[32]) -8[32]) -4[32]) }
          value = { defs={} expr=-104[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4514[32] -4[32]) -8[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4514[32] -4[32]) -8[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4514[32] -4[32]) -8[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x08048480,0x08048483,0x0804848c} expr=(add[32] (add[32] v4514[32] -4[32]) -8[32]) }
          value = { defs={} expr=-44[8] }
          flags = { }
        address = { defs={} expr=0x080496fb[32] }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4627[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f8[32] v4626[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4629[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f9[32] v4628[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4631[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fa[32] v4630[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4633[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fb[32] v4632[8]) 0x080496fb[32])))) 1[32])) }
          flags = { }
        address = { defs={} expr=0x080496fa[32] }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4627[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f8[32] v4626[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4629[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f9[32] v4628[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4631[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fa[32] v4630[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4633[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fb[32] v4632[8]) 0x080496fb[32])))) 1[32])) }
          flags = { }
        address = { defs={} expr=0x080496f9[32] }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4627[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f8[32] v4626[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4629[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f9[32] v4628[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4631[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fa[32] v4630[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4633[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fb[32] v4632[8]) 0x080496fb[32])))) 1[32])) }
          flags = { }
        address = { defs={0x08048486} expr=0x080496f8[32] }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4627[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f8[32] v4626[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4629[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496f9[32] v4628[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4631[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fa[32] v4630[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4633[8] (add[32] (add[32] v4514[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4515[32])) (add[32] (add[32] v4514[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4515[32])) (add[32] v4514[32] -4[32]) (extract[8] 0[32] 8[32] v4515[32])) 0x080496fb[32] v4632[8]) 0x080496fb[32])))) 1[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4514[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4515[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4514[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4515[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4514[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4515[32]) }
          flags = { }
        address = { defs={0x08048480} expr=(add[32] v4514[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4515[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=0x080496fb[32] }
          value = { defs={} expr=v4632[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496fa[32] }
          value = { defs={} expr=v4630[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f9[32] }
          value = { defs={} expr=v4628[8] }
          flags = { rdonly }
        address = { defs={0x08048486} expr=0x080496f8[32] }
          value = { defs={} expr=v4626[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048498:mov    DWORD PTR ss:[esp], 0x00000000
    registers:
        ax      = { defs={} expr=v4739[32] }
        cx      = { defs={} expr=v4740[32] }
        dx      = { defs={} expr=v4741[32] }
        bx      = { defs={} expr=v4742[32] }
        sp      = { defs={} expr=v4743[32] }
        bp      = { defs={} expr=v4744[32] }
        si      = { defs={} expr=v4745[32] }
        di      = { defs={} expr=v4746[32] }
        es      = { defs={} expr=v4747[16] }
        cs      = { defs={} expr=v4748[16] }
        ss      = { defs={} expr=v4749[16] }
        ds      = { defs={} expr=v4750[16] }
        fs      = { defs={} expr=v4751[16] }
        gs      = { defs={} expr=v4752[16] }
        cf      = { defs={} expr=v4753[1] }
        ?1      = { defs={} expr=v4754[1] }
        pf      = { defs={} expr=v4755[1] }
        ?3      = { defs={} expr=v4756[1] }
        af      = { defs={} expr=v4757[1] }
        ?5      = { defs={} expr=v4758[1] }
        zf      = { defs={} expr=v4759[1] }
        sf      = { defs={} expr=v4760[1] }
        tf      = { defs={} expr=v4761[1] }
        if      = { defs={} expr=v4762[1] }
        df      = { defs={} expr=v4763[1] }
        of      = { defs={} expr=v4764[1] }
        iopl0   = { defs={} expr=v4765[1] }
        iopl1   = { defs={} expr=v4766[1] }
        nt      = { defs={} expr=v4767[1] }
        ?15     = { defs={} expr=v4768[1] }
        rf      = { defs={} expr=v4769[1] }
        vm      = { defs={} expr=v4770[1] }
        ac      = { defs={} expr=v4771[1] }
        vif     = { defs={} expr=v4772[1] }
        vip     = { defs={} expr=v4773[1] }
        id      = { defs={} expr=v4774[1] }
        ?22     = { defs={} expr=v4775[1] }
        ?23     = { defs={} expr=v4776[1] }
        ?24     = { defs={} expr=v4777[1] }
        ?25     = { defs={} expr=v4778[1] }
        ?26     = { defs={} expr=v4779[1] }
        ?27     = { defs={} expr=v4780[1] }
        ?28     = { defs={} expr=v4781[1] }
        ?29     = { defs={} expr=v4782[1] }
        ?30     = { defs={} expr=v4783[1] }
        ?31     = { defs={} expr=v4784[1] }
        ip      = { defs={0x08048498} expr=0x0804849f[32] }
    memory:
        address = { defs={} expr=(add[32] v4743[32] 3[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] v4743[32] 2[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] v4743[32] 1[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={0x08048498} expr=v4743[32] }
          value = { defs={} expr=0[8] }
          flags = { }
    init mem:
0x804849f:call   0x08048320<_exit@plt>
    registers:
        ax      = { defs={} expr=v4739[32] }
        cx      = { defs={} expr=v4740[32] }
        dx      = { defs={} expr=v4741[32] }
        bx      = { defs={} expr=v4742[32] }
        sp      = { defs={0x0804849f} expr=(add[32] v4743[32] -4[32]) }
        bp      = { defs={} expr=v4744[32] }
        si      = { defs={} expr=v4745[32] }
        di      = { defs={} expr=v4746[32] }
        es      = { defs={} expr=v4747[16] }
        cs      = { defs={} expr=v4748[16] }
        ss      = { defs={} expr=v4749[16] }
        ds      = { defs={} expr=v4750[16] }
        fs      = { defs={} expr=v4751[16] }
        gs      = { defs={} expr=v4752[16] }
        cf      = { defs={} expr=v4753[1] }
        ?1      = { defs={} expr=v4754[1] }
        pf      = { defs={} expr=v4755[1] }
        ?3      = { defs={} expr=v4756[1] }
        af      = { defs={} expr=v4757[1] }
        ?5      = { defs={} expr=v4758[1] }
        zf      = { defs={} expr=v4759[1] }
        sf      = { defs={} expr=v4760[1] }
        tf      = { defs={} expr=v4761[1] }
        if      = { defs={} expr=v4762[1] }
        df      = { defs={} expr=v4763[1] }
        of      = { defs={} expr=v4764[1] }
        iopl0   = { defs={} expr=v4765[1] }
        iopl1   = { defs={} expr=v4766[1] }
        nt      = { defs={} expr=v4767[1] }
        ?15     = { defs={} expr=v4768[1] }
        rf      = { defs={} expr=v4769[1] }
        vm      = { defs={} expr=v4770[1] }
        ac      = { defs={} expr=v4771[1] }
        vif     = { defs={} expr=v4772[1] }
        vip     = { defs={} expr=v4773[1] }
        id      = { defs={} expr=v4774[1] }
        ?22     = { defs={} expr=v4775[1] }
        ?23     = { defs={} expr=v4776[1] }
        ?24     = { defs={} expr=v4777[1] }
        ?25     = { defs={} expr=v4778[1] }
        ?26     = { defs={} expr=v4779[1] }
        ?27     = { defs={} expr=v4780[1] }
        ?28     = { defs={} expr=v4781[1] }
        ?29     = { defs={} expr=v4782[1] }
        ?30     = { defs={} expr=v4783[1] }
        ?31     = { defs={} expr=v4784[1] }
        ip      = { defs={0x0804849f} expr=0x08048320[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v4743[32] -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4743[32] -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4743[32] -4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x0804849f} expr=(add[32] v4743[32] -4[32]) }
          value = { defs={} expr=-92[8] }
          flags = { }
        address = { defs={} expr=(add[32] v4743[32] 3[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] v4743[32] 2[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] v4743[32] 1[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={0x08048498} expr=v4743[32] }
          value = { defs={} expr=0[8] }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80484b0:push   ebp
    registers:
        ax      = { defs={} expr=v4846[32] }
        cx      = { defs={} expr=v4847[32] }
        dx      = { defs={} expr=v4848[32] }
        bx      = { defs={} expr=v4849[32] }
        sp      = { defs={0x080484b0} expr=(add[32] v4850[32] -4[32]) }
        bp      = { defs={} expr=v4851[32] }
        si      = { defs={} expr=v4852[32] }
        di      = { defs={} expr=v4853[32] }
        es      = { defs={} expr=v4854[16] }
        cs      = { defs={} expr=v4855[16] }
        ss      = { defs={} expr=v4856[16] }
        ds      = { defs={} expr=v4857[16] }
        fs      = { defs={} expr=v4858[16] }
        gs      = { defs={} expr=v4859[16] }
        cf      = { defs={} expr=v4860[1] }
        ?1      = { defs={} expr=v4861[1] }
        pf      = { defs={} expr=v4862[1] }
        ?3      = { defs={} expr=v4863[1] }
        af      = { defs={} expr=v4864[1] }
        ?5      = { defs={} expr=v4865[1] }
        zf      = { defs={} expr=v4866[1] }
        sf      = { defs={} expr=v4867[1] }
        tf      = { defs={} expr=v4868[1] }
        if      = { defs={} expr=v4869[1] }
        df      = { defs={} expr=v4870[1] }
        of      = { defs={} expr=v4871[1] }
        iopl0   = { defs={} expr=v4872[1] }
        iopl1   = { defs={} expr=v4873[1] }
        nt      = { defs={} expr=v4874[1] }
        ?15     = { defs={} expr=v4875[1] }
        rf      = { defs={} expr=v4876[1] }
        vm      = { defs={} expr=v4877[1] }
        ac      = { defs={} expr=v4878[1] }
        vif     = { defs={} expr=v4879[1] }
        vip     = { defs={} expr=v4880[1] }
        id      = { defs={} expr=v4881[1] }
        ?22     = { defs={} expr=v4882[1] }
        ?23     = { defs={} expr=v4883[1] }
        ?24     = { defs={} expr=v4884[1] }
        ?25     = { defs={} expr=v4885[1] }
        ?26     = { defs={} expr=v4886[1] }
        ?27     = { defs={} expr=v4887[1] }
        ?28     = { defs={} expr=v4888[1] }
        ?29     = { defs={} expr=v4889[1] }
        ?30     = { defs={} expr=v4890[1] }
        ?31     = { defs={} expr=v4891[1] }
        ip      = { defs={0x080484b0} expr=0x080484b1[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v4850[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4851[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4850[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4851[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4850[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4851[32]) }
          flags = { }
        address = { defs={0x080484b0} expr=(add[32] v4850[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4851[32]) }
          flags = { }
    init mem:
0x80484b1:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v4846[32] }
        cx      = { defs={} expr=v4847[32] }
        dx      = { defs={} expr=v4848[32] }
        bx      = { defs={} expr=v4849[32] }
        sp      = { defs={0x080484b0} expr=(add[32] v4850[32] -4[32]) }
        bp      = { defs={0x080484b0,0x080484b1} expr=(add[32] v4850[32] -4[32]) }
        si      = { defs={} expr=v4852[32] }
        di      = { defs={} expr=v4853[32] }
        es      = { defs={} expr=v4854[16] }
        cs      = { defs={} expr=v4855[16] }
        ss      = { defs={} expr=v4856[16] }
        ds      = { defs={} expr=v4857[16] }
        fs      = { defs={} expr=v4858[16] }
        gs      = { defs={} expr=v4859[16] }
        cf      = { defs={} expr=v4860[1] }
        ?1      = { defs={} expr=v4861[1] }
        pf      = { defs={} expr=v4862[1] }
        ?3      = { defs={} expr=v4863[1] }
        af      = { defs={} expr=v4864[1] }
        ?5      = { defs={} expr=v4865[1] }
        zf      = { defs={} expr=v4866[1] }
        sf      = { defs={} expr=v4867[1] }
        tf      = { defs={} expr=v4868[1] }
        if      = { defs={} expr=v4869[1] }
        df      = { defs={} expr=v4870[1] }
        of      = { defs={} expr=v4871[1] }
        iopl0   = { defs={} expr=v4872[1] }
        iopl1   = { defs={} expr=v4873[1] }
        nt      = { defs={} expr=v4874[1] }
        ?15     = { defs={} expr=v4875[1] }
        rf      = { defs={} expr=v4876[1] }
        vm      = { defs={} expr=v4877[1] }
        ac      = { defs={} expr=v4878[1] }
        vif     = { defs={} expr=v4879[1] }
        vip     = { defs={} expr=v4880[1] }
        id      = { defs={} expr=v4881[1] }
        ?22     = { defs={} expr=v4882[1] }
        ?23     = { defs={} expr=v4883[1] }
        ?24     = { defs={} expr=v4884[1] }
        ?25     = { defs={} expr=v4885[1] }
        ?26     = { defs={} expr=v4886[1] }
        ?27     = { defs={} expr=v4887[1] }
        ?28     = { defs={} expr=v4888[1] }
        ?29     = { defs={} expr=v4889[1] }
        ?30     = { defs={} expr=v4890[1] }
        ?31     = { defs={} expr=v4891[1] }
        ip      = { defs={0x080484b0,0x080484b1} expr=0x080484b3[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v4850[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4851[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4850[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4851[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4850[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4851[32]) }
          flags = { }
        address = { defs={0x080484b0} expr=(add[32] v4850[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4851[32]) }
          flags = { }
    init mem:
0x80484b3:push   edi
    registers:
        ax      = { defs={} expr=v4846[32] }
        cx      = { defs={} expr=v4847[32] }
        dx      = { defs={} expr=v4848[32] }
        bx      = { defs={} expr=v4849[32] }
        sp      = { defs={0x080484b0,0x080484b3} expr=(add[32] (add[32] v4850[32] -4[32]) -4[32]) }
        bp      = { defs={0x080484b0,0x080484b1} expr=(add[32] v4850[32] -4[32]) }
        si      = { defs={} expr=v4852[32] }
        di      = { defs={} expr=v4853[32] }
        es      = { defs={} expr=v4854[16] }
        cs      = { defs={} expr=v4855[16] }
        ss      = { defs={} expr=v4856[16] }
        ds      = { defs={} expr=v4857[16] }
        fs      = { defs={} expr=v4858[16] }
        gs      = { defs={} expr=v4859[16] }
        cf      = { defs={} expr=v4860[1] }
        ?1      = { defs={} expr=v4861[1] }
        pf      = { defs={} expr=v4862[1] }
        ?3      = { defs={} expr=v4863[1] }
        af      = { defs={} expr=v4864[1] }
        ?5      = { defs={} expr=v4865[1] }
        zf      = { defs={} expr=v4866[1] }
        sf      = { defs={} expr=v4867[1] }
        tf      = { defs={} expr=v4868[1] }
        if      = { defs={} expr=v4869[1] }
        df      = { defs={} expr=v4870[1] }
        of      = { defs={} expr=v4871[1] }
        iopl0   = { defs={} expr=v4872[1] }
        iopl1   = { defs={} expr=v4873[1] }
        nt      = { defs={} expr=v4874[1] }
        ?15     = { defs={} expr=v4875[1] }
        rf      = { defs={} expr=v4876[1] }
        vm      = { defs={} expr=v4877[1] }
        ac      = { defs={} expr=v4878[1] }
        vif     = { defs={} expr=v4879[1] }
        vip     = { defs={} expr=v4880[1] }
        id      = { defs={} expr=v4881[1] }
        ?22     = { defs={} expr=v4882[1] }
        ?23     = { defs={} expr=v4883[1] }
        ?24     = { defs={} expr=v4884[1] }
        ?25     = { defs={} expr=v4885[1] }
        ?26     = { defs={} expr=v4886[1] }
        ?27     = { defs={} expr=v4887[1] }
        ?28     = { defs={} expr=v4888[1] }
        ?29     = { defs={} expr=v4889[1] }
        ?30     = { defs={} expr=v4890[1] }
        ?31     = { defs={} expr=v4891[1] }
        ip      = { defs={0x080484b0,0x080484b1,0x080484b3} expr=0x080484b4[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4853[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4853[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4853[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3} expr=(add[32] (add[32] v4850[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4853[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4850[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4851[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4850[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4851[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4850[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4851[32]) }
          flags = { }
        address = { defs={0x080484b0} expr=(add[32] v4850[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4851[32]) }
          flags = { }
    init mem:
0x80484b4:push   esi
    registers:
        ax      = { defs={} expr=v4846[32] }
        cx      = { defs={} expr=v4847[32] }
        dx      = { defs={} expr=v4848[32] }
        bx      = { defs={} expr=v4849[32] }
        sp      = { defs={0x080484b0,0x080484b3,0x080484b4} expr=(add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x080484b0,0x080484b1} expr=(add[32] v4850[32] -4[32]) }
        si      = { defs={} expr=v4852[32] }
        di      = { defs={} expr=v4853[32] }
        es      = { defs={} expr=v4854[16] }
        cs      = { defs={} expr=v4855[16] }
        ss      = { defs={} expr=v4856[16] }
        ds      = { defs={} expr=v4857[16] }
        fs      = { defs={} expr=v4858[16] }
        gs      = { defs={} expr=v4859[16] }
        cf      = { defs={} expr=v4860[1] }
        ?1      = { defs={} expr=v4861[1] }
        pf      = { defs={} expr=v4862[1] }
        ?3      = { defs={} expr=v4863[1] }
        af      = { defs={} expr=v4864[1] }
        ?5      = { defs={} expr=v4865[1] }
        zf      = { defs={} expr=v4866[1] }
        sf      = { defs={} expr=v4867[1] }
        tf      = { defs={} expr=v4868[1] }
        if      = { defs={} expr=v4869[1] }
        df      = { defs={} expr=v4870[1] }
        of      = { defs={} expr=v4871[1] }
        iopl0   = { defs={} expr=v4872[1] }
        iopl1   = { defs={} expr=v4873[1] }
        nt      = { defs={} expr=v4874[1] }
        ?15     = { defs={} expr=v4875[1] }
        rf      = { defs={} expr=v4876[1] }
        vm      = { defs={} expr=v4877[1] }
        ac      = { defs={} expr=v4878[1] }
        vif     = { defs={} expr=v4879[1] }
        vip     = { defs={} expr=v4880[1] }
        id      = { defs={} expr=v4881[1] }
        ?22     = { defs={} expr=v4882[1] }
        ?23     = { defs={} expr=v4883[1] }
        ?24     = { defs={} expr=v4884[1] }
        ?25     = { defs={} expr=v4885[1] }
        ?26     = { defs={} expr=v4886[1] }
        ?27     = { defs={} expr=v4887[1] }
        ?28     = { defs={} expr=v4888[1] }
        ?29     = { defs={} expr=v4889[1] }
        ?30     = { defs={} expr=v4890[1] }
        ?31     = { defs={} expr=v4891[1] }
        ip      = { defs={0x080484b0,0x080484b1,0x080484b3,0x080484b4} expr=0x080484b5[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4852[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4852[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4852[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3,0x080484b4} expr=(add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4852[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4853[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4853[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4853[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3} expr=(add[32] (add[32] v4850[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4853[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4850[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4851[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4850[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4851[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4850[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4851[32]) }
          flags = { }
        address = { defs={0x080484b0} expr=(add[32] v4850[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4851[32]) }
          flags = { }
    init mem:
0x80484b5:push   ebx
    registers:
        ax      = { defs={} expr=v4846[32] }
        cx      = { defs={} expr=v4847[32] }
        dx      = { defs={} expr=v4848[32] }
        bx      = { defs={} expr=v4849[32] }
        sp      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5} expr=(add[32] (add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x080484b0,0x080484b1} expr=(add[32] v4850[32] -4[32]) }
        si      = { defs={} expr=v4852[32] }
        di      = { defs={} expr=v4853[32] }
        es      = { defs={} expr=v4854[16] }
        cs      = { defs={} expr=v4855[16] }
        ss      = { defs={} expr=v4856[16] }
        ds      = { defs={} expr=v4857[16] }
        fs      = { defs={} expr=v4858[16] }
        gs      = { defs={} expr=v4859[16] }
        cf      = { defs={} expr=v4860[1] }
        ?1      = { defs={} expr=v4861[1] }
        pf      = { defs={} expr=v4862[1] }
        ?3      = { defs={} expr=v4863[1] }
        af      = { defs={} expr=v4864[1] }
        ?5      = { defs={} expr=v4865[1] }
        zf      = { defs={} expr=v4866[1] }
        sf      = { defs={} expr=v4867[1] }
        tf      = { defs={} expr=v4868[1] }
        if      = { defs={} expr=v4869[1] }
        df      = { defs={} expr=v4870[1] }
        of      = { defs={} expr=v4871[1] }
        iopl0   = { defs={} expr=v4872[1] }
        iopl1   = { defs={} expr=v4873[1] }
        nt      = { defs={} expr=v4874[1] }
        ?15     = { defs={} expr=v4875[1] }
        rf      = { defs={} expr=v4876[1] }
        vm      = { defs={} expr=v4877[1] }
        ac      = { defs={} expr=v4878[1] }
        vif     = { defs={} expr=v4879[1] }
        vip     = { defs={} expr=v4880[1] }
        id      = { defs={} expr=v4881[1] }
        ?22     = { defs={} expr=v4882[1] }
        ?23     = { defs={} expr=v4883[1] }
        ?24     = { defs={} expr=v4884[1] }
        ?25     = { defs={} expr=v4885[1] }
        ?26     = { defs={} expr=v4886[1] }
        ?27     = { defs={} expr=v4887[1] }
        ?28     = { defs={} expr=v4888[1] }
        ?29     = { defs={} expr=v4889[1] }
        ?30     = { defs={} expr=v4890[1] }
        ?31     = { defs={} expr=v4891[1] }
        ip      = { defs={0x080484b0,0x080484b1,0x080484b3,0x080484b4,0x080484b5} expr=0x080484b6[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4849[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4849[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4849[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5} expr=(add[32] (add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4849[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4852[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4852[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4852[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3,0x080484b4} expr=(add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4852[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4853[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4853[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4853[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3} expr=(add[32] (add[32] v4850[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4853[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4850[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4851[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4850[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4851[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4850[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4851[32]) }
          flags = { }
        address = { defs={0x080484b0} expr=(add[32] v4850[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4851[32]) }
          flags = { }
    init mem:
0x80484b6:sub    esp, 0x0c
    registers:
        ax      = { defs={} expr=v4846[32] }
        cx      = { defs={} expr=v4847[32] }
        dx      = { defs={} expr=v4848[32] }
        bx      = { defs={} expr=v4849[32] }
        sp      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) }
        bp      = { defs={0x080484b0,0x080484b1} expr=(add[32] v4850[32] -4[32]) }
        si      = { defs={} expr=v4852[32] }
        di      = { defs={} expr=v4853[32] }
        es      = { defs={} expr=v4854[16] }
        cs      = { defs={} expr=v4855[16] }
        ss      = { defs={} expr=v4856[16] }
        ds      = { defs={} expr=v4857[16] }
        fs      = { defs={} expr=v4858[16] }
        gs      = { defs={} expr=v4859[16] }
        cf      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        ?1      = { defs={} expr=v4861[1] }
        pf      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))))) }
        ?3      = { defs={} expr=v4863[1] }
        af      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        ?5      = { defs={} expr=v4865[1] }
        zf      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(zerop[1] (add[32] (add[32] (add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])) }
        sf      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])) }
        tf      = { defs={} expr=v4868[1] }
        if      = { defs={} expr=v4869[1] }
        df      = { defs={} expr=v4870[1] }
        of      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        iopl0   = { defs={} expr=v4872[1] }
        iopl1   = { defs={} expr=v4873[1] }
        nt      = { defs={} expr=v4874[1] }
        ?15     = { defs={} expr=v4875[1] }
        rf      = { defs={} expr=v4876[1] }
        vm      = { defs={} expr=v4877[1] }
        ac      = { defs={} expr=v4878[1] }
        vif     = { defs={} expr=v4879[1] }
        vip     = { defs={} expr=v4880[1] }
        id      = { defs={} expr=v4881[1] }
        ?22     = { defs={} expr=v4882[1] }
        ?23     = { defs={} expr=v4883[1] }
        ?24     = { defs={} expr=v4884[1] }
        ?25     = { defs={} expr=v4885[1] }
        ?26     = { defs={} expr=v4886[1] }
        ?27     = { defs={} expr=v4887[1] }
        ?28     = { defs={} expr=v4888[1] }
        ?29     = { defs={} expr=v4889[1] }
        ?30     = { defs={} expr=v4890[1] }
        ?31     = { defs={} expr=v4891[1] }
        ip      = { defs={0x080484b0,0x080484b1,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=0x080484b9[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4849[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4849[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4849[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5} expr=(add[32] (add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4849[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4852[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4852[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4852[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3,0x080484b4} expr=(add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4852[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4853[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4853[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4853[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3} expr=(add[32] (add[32] v4850[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4853[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4850[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4851[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4850[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4851[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4850[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4851[32]) }
          flags = { }
        address = { defs={0x080484b0} expr=(add[32] v4850[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4851[32]) }
          flags = { }
    init mem:
0x80484b9:call   0x080484be<<Insn>>
    registers:
        ax      = { defs={} expr=v4846[32] }
        cx      = { defs={} expr=v4847[32] }
        dx      = { defs={} expr=v4848[32] }
        bx      = { defs={} expr=v4849[32] }
        sp      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6,0x080484b9} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) }
        bp      = { defs={0x080484b0,0x080484b1} expr=(add[32] v4850[32] -4[32]) }
        si      = { defs={} expr=v4852[32] }
        di      = { defs={} expr=v4853[32] }
        es      = { defs={} expr=v4854[16] }
        cs      = { defs={} expr=v4855[16] }
        ss      = { defs={} expr=v4856[16] }
        ds      = { defs={} expr=v4857[16] }
        fs      = { defs={} expr=v4858[16] }
        gs      = { defs={} expr=v4859[16] }
        cf      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        ?1      = { defs={} expr=v4861[1] }
        pf      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))))) }
        ?3      = { defs={} expr=v4863[1] }
        af      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        ?5      = { defs={} expr=v4865[1] }
        zf      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(zerop[1] (add[32] (add[32] (add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])) }
        sf      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])) }
        tf      = { defs={} expr=v4868[1] }
        if      = { defs={} expr=v4869[1] }
        df      = { defs={} expr=v4870[1] }
        of      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        iopl0   = { defs={} expr=v4872[1] }
        iopl1   = { defs={} expr=v4873[1] }
        nt      = { defs={} expr=v4874[1] }
        ?15     = { defs={} expr=v4875[1] }
        rf      = { defs={} expr=v4876[1] }
        vm      = { defs={} expr=v4877[1] }
        ac      = { defs={} expr=v4878[1] }
        vif     = { defs={} expr=v4879[1] }
        vip     = { defs={} expr=v4880[1] }
        id      = { defs={} expr=v4881[1] }
        ?22     = { defs={} expr=v4882[1] }
        ?23     = { defs={} expr=v4883[1] }
        ?24     = { defs={} expr=v4884[1] }
        ?25     = { defs={} expr=v4885[1] }
        ?26     = { defs={} expr=v4886[1] }
        ?27     = { defs={} expr=v4887[1] }
        ?28     = { defs={} expr=v4888[1] }
        ?29     = { defs={} expr=v4889[1] }
        ?30     = { defs={} expr=v4890[1] }
        ?31     = { defs={} expr=v4891[1] }
        ip      = { defs={0x080484b9} expr=0x080484be[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6,0x080484b9} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) }
          value = { defs={} expr=-66[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4849[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4849[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4849[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5} expr=(add[32] (add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4849[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4852[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4852[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4852[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3,0x080484b4} expr=(add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4852[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4853[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4853[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4850[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4853[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3} expr=(add[32] (add[32] v4850[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4853[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4850[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4851[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4850[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4851[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4850[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4851[32]) }
          flags = { }
        address = { defs={0x080484b0} expr=(add[32] v4850[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4851[32]) }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80484be:pop    ebx
    registers:
        ax      = { defs={} expr=v5034[32] }
        cx      = { defs={} expr=v5035[32] }
        dx      = { defs={} expr=v5036[32] }
        bx      = { defs={0x080484be} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5089[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5090[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5091[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5092[8]))) }
        sp      = { defs={0x080484be} expr=(add[32] v5038[32] 4[32]) }
        bp      = { defs={} expr=v5039[32] }
        si      = { defs={} expr=v5040[32] }
        di      = { defs={} expr=v5041[32] }
        es      = { defs={} expr=v5042[16] }
        cs      = { defs={} expr=v5043[16] }
        ss      = { defs={} expr=v5044[16] }
        ds      = { defs={} expr=v5045[16] }
        fs      = { defs={} expr=v5046[16] }
        gs      = { defs={} expr=v5047[16] }
        cf      = { defs={} expr=v5048[1] }
        ?1      = { defs={} expr=v5049[1] }
        pf      = { defs={} expr=v5050[1] }
        ?3      = { defs={} expr=v5051[1] }
        af      = { defs={} expr=v5052[1] }
        ?5      = { defs={} expr=v5053[1] }
        zf      = { defs={} expr=v5054[1] }
        sf      = { defs={} expr=v5055[1] }
        tf      = { defs={} expr=v5056[1] }
        if      = { defs={} expr=v5057[1] }
        df      = { defs={} expr=v5058[1] }
        of      = { defs={} expr=v5059[1] }
        iopl0   = { defs={} expr=v5060[1] }
        iopl1   = { defs={} expr=v5061[1] }
        nt      = { defs={} expr=v5062[1] }
        ?15     = { defs={} expr=v5063[1] }
        rf      = { defs={} expr=v5064[1] }
        vm      = { defs={} expr=v5065[1] }
        ac      = { defs={} expr=v5066[1] }
        vif     = { defs={} expr=v5067[1] }
        vip     = { defs={} expr=v5068[1] }
        id      = { defs={} expr=v5069[1] }
        ?22     = { defs={} expr=v5070[1] }
        ?23     = { defs={} expr=v5071[1] }
        ?24     = { defs={} expr=v5072[1] }
        ?25     = { defs={} expr=v5073[1] }
        ?26     = { defs={} expr=v5074[1] }
        ?27     = { defs={} expr=v5075[1] }
        ?28     = { defs={} expr=v5076[1] }
        ?29     = { defs={} expr=v5077[1] }
        ?30     = { defs={} expr=v5078[1] }
        ?31     = { defs={} expr=v5079[1] }
        ip      = { defs={0x080484be} expr=0x080484bf[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v5038[32] 3[32]) }
          value = { defs={} expr=v5092[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5038[32] 2[32]) }
          value = { defs={} expr=v5091[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5038[32] 1[32]) }
          value = { defs={} expr=v5090[8] }
          flags = { rdonly }
        address = { defs={0x080484be} expr=v5038[32] }
          value = { defs={} expr=v5089[8] }
          flags = { rdonly }
0x80484bf:add    ebx, 0x0000120a
    registers:
        ax      = { defs={} expr=v5034[32] }
        cx      = { defs={} expr=v5035[32] }
        dx      = { defs={} expr=v5036[32] }
        bx      = { defs={0x080484be,0x080484bf} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5089[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5090[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5091[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5092[8]))) 4618[32]) }
        sp      = { defs={0x080484be} expr=(add[32] v5038[32] 4[32]) }
        bp      = { defs={} expr=v5039[32] }
        si      = { defs={} expr=v5040[32] }
        di      = { defs={} expr=v5041[32] }
        es      = { defs={} expr=v5042[16] }
        cs      = { defs={} expr=v5043[16] }
        ss      = { defs={} expr=v5044[16] }
        ds      = { defs={} expr=v5045[16] }
        fs      = { defs={} expr=v5046[16] }
        gs      = { defs={} expr=v5047[16] }
        cf      = { defs={0x080484be,0x080484bf} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5089[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5090[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5091[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5092[8])))) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5089[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5090[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5091[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5092[8])))) 4618[33]))))) }
        ?1      = { defs={} expr=v5049[1] }
        pf      = { defs={0x080484be,0x080484bf} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5089[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5090[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5091[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5092[8]))) 4618[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5089[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5090[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5091[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5092[8]))) 4618[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5089[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5090[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5091[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5092[8]))) 4618[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5089[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5090[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5091[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5092[8]))) 4618[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5089[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5090[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5091[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5092[8]))) 4618[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5089[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5090[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5091[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5092[8]))) 4618[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5089[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5090[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5091[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5092[8]))) 4618[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5089[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5090[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5091[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5092[8]))) 4618[32]))))))) }
        ?3      = { defs={} expr=v5051[1] }
        af      = { defs={0x080484be,0x080484bf} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5089[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5090[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5091[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5092[8])))) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5089[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5090[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5091[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5092[8])))) 4618[33]))))) }
        ?5      = { defs={} expr=v5053[1] }
        zf      = { defs={0x080484be,0x080484bf} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5089[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5090[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5091[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5092[8]))) 4618[32])) }
        sf      = { defs={0x080484be,0x080484bf} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5089[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5090[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5091[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5092[8]))) 4618[32])) }
        tf      = { defs={} expr=v5056[1] }
        if      = { defs={} expr=v5057[1] }
        df      = { defs={} expr=v5058[1] }
        of      = { defs={0x080484be,0x080484bf} expr=0[1] }
        iopl0   = { defs={} expr=v5060[1] }
        iopl1   = { defs={} expr=v5061[1] }
        nt      = { defs={} expr=v5062[1] }
        ?15     = { defs={} expr=v5063[1] }
        rf      = { defs={} expr=v5064[1] }
        vm      = { defs={} expr=v5065[1] }
        ac      = { defs={} expr=v5066[1] }
        vif     = { defs={} expr=v5067[1] }
        vip     = { defs={} expr=v5068[1] }
        id      = { defs={} expr=v5069[1] }
        ?22     = { defs={} expr=v5070[1] }
        ?23     = { defs={} expr=v5071[1] }
        ?24     = { defs={} expr=v5072[1] }
        ?25     = { defs={} expr=v5073[1] }
        ?26     = { defs={} expr=v5074[1] }
        ?27     = { defs={} expr=v5075[1] }
        ?28     = { defs={} expr=v5076[1] }
        ?29     = { defs={} expr=v5077[1] }
        ?30     = { defs={} expr=v5078[1] }
        ?31     = { defs={} expr=v5079[1] }
        ip      = { defs={0x080484be,0x080484bf} expr=0x080484c5[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v5038[32] 3[32]) }
          value = { defs={} expr=v5092[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5038[32] 2[32]) }
          value = { defs={} expr=v5091[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5038[32] 1[32]) }
          value = { defs={} expr=v5090[8] }
          flags = { rdonly }
        address = { defs={0x080484be} expr=v5038[32] }
          value = { defs={} expr=v5089[8] }
          flags = { rdonly }
0x80484c5:call   0x080482c8<_init>
    registers:
        ax      = { defs={} expr=v5034[32] }
        cx      = { defs={} expr=v5035[32] }
        dx      = { defs={} expr=v5036[32] }
        bx      = { defs={0x080484be,0x080484bf} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5089[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5090[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5091[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5092[8]))) 4618[32]) }
        sp      = { defs={0x080484be,0x080484c5} expr=(add[32] (add[32] v5038[32] 4[32]) -4[32]) }
        bp      = { defs={} expr=v5039[32] }
        si      = { defs={} expr=v5040[32] }
        di      = { defs={} expr=v5041[32] }
        es      = { defs={} expr=v5042[16] }
        cs      = { defs={} expr=v5043[16] }
        ss      = { defs={} expr=v5044[16] }
        ds      = { defs={} expr=v5045[16] }
        fs      = { defs={} expr=v5046[16] }
        gs      = { defs={} expr=v5047[16] }
        cf      = { defs={0x080484be,0x080484bf} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5089[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5090[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5091[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5092[8])))) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5089[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5090[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5091[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5092[8])))) 4618[33]))))) }
        ?1      = { defs={} expr=v5049[1] }
        pf      = { defs={0x080484be,0x080484bf} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5089[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5090[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5091[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5092[8]))) 4618[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5089[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5090[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5091[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5092[8]))) 4618[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5089[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5090[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5091[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5092[8]))) 4618[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5089[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5090[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5091[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5092[8]))) 4618[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5089[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5090[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5091[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5092[8]))) 4618[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5089[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5090[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5091[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5092[8]))) 4618[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5089[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5090[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5091[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5092[8]))) 4618[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5089[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5090[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5091[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5092[8]))) 4618[32]))))))) }
        ?3      = { defs={} expr=v5051[1] }
        af      = { defs={0x080484be,0x080484bf} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5089[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5090[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5091[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5092[8])))) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5089[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5090[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5091[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5092[8])))) 4618[33]))))) }
        ?5      = { defs={} expr=v5053[1] }
        zf      = { defs={0x080484be,0x080484bf} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5089[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5090[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5091[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5092[8]))) 4618[32])) }
        sf      = { defs={0x080484be,0x080484bf} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5089[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5090[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5091[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5092[8]))) 4618[32])) }
        tf      = { defs={} expr=v5056[1] }
        if      = { defs={} expr=v5057[1] }
        df      = { defs={} expr=v5058[1] }
        of      = { defs={0x080484be,0x080484bf} expr=0[1] }
        iopl0   = { defs={} expr=v5060[1] }
        iopl1   = { defs={} expr=v5061[1] }
        nt      = { defs={} expr=v5062[1] }
        ?15     = { defs={} expr=v5063[1] }
        rf      = { defs={} expr=v5064[1] }
        vm      = { defs={} expr=v5065[1] }
        ac      = { defs={} expr=v5066[1] }
        vif     = { defs={} expr=v5067[1] }
        vip     = { defs={} expr=v5068[1] }
        id      = { defs={} expr=v5069[1] }
        ?22     = { defs={} expr=v5070[1] }
        ?23     = { defs={} expr=v5071[1] }
        ?24     = { defs={} expr=v5072[1] }
        ?25     = { defs={} expr=v5073[1] }
        ?26     = { defs={} expr=v5074[1] }
        ?27     = { defs={} expr=v5075[1] }
        ?28     = { defs={} expr=v5076[1] }
        ?29     = { defs={} expr=v5077[1] }
        ?30     = { defs={} expr=v5078[1] }
        ?31     = { defs={} expr=v5079[1] }
        ip      = { defs={0x080484c5} expr=0x080482c8[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v5038[32] 4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5038[32] 4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5038[32] 4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x080484be,0x080484c5} expr=(add[32] (add[32] v5038[32] 4[32]) -4[32]) }
          value = { defs={} expr=-54[8] }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v5038[32] 3[32]) }
          value = { defs={} expr=v5092[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5038[32] 2[32]) }
          value = { defs={} expr=v5091[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5038[32] 1[32]) }
          value = { defs={} expr=v5090[8] }
          flags = { rdonly }
        address = { defs={0x080484be} expr=v5038[32] }
          value = { defs={} expr=v5089[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80484ca:lea    eax, [ebx + 0xffffff20<-0x000000e0>]
    registers:
        ax      = { defs={0x080484ca} expr=(add[32] v5205[32] -224[32]) }
        cx      = { defs={} expr=v5203[32] }
        dx      = { defs={} expr=v5204[32] }
        bx      = { defs={} expr=v5205[32] }
        sp      = { defs={} expr=v5206[32] }
        bp      = { defs={} expr=v5207[32] }
        si      = { defs={} expr=v5208[32] }
        di      = { defs={} expr=v5209[32] }
        es      = { defs={} expr=v5210[16] }
        cs      = { defs={} expr=v5211[16] }
        ss      = { defs={} expr=v5212[16] }
        ds      = { defs={} expr=v5213[16] }
        fs      = { defs={} expr=v5214[16] }
        gs      = { defs={} expr=v5215[16] }
        cf      = { defs={} expr=v5216[1] }
        ?1      = { defs={} expr=v5217[1] }
        pf      = { defs={} expr=v5218[1] }
        ?3      = { defs={} expr=v5219[1] }
        af      = { defs={} expr=v5220[1] }
        ?5      = { defs={} expr=v5221[1] }
        zf      = { defs={} expr=v5222[1] }
        sf      = { defs={} expr=v5223[1] }
        tf      = { defs={} expr=v5224[1] }
        if      = { defs={} expr=v5225[1] }
        df      = { defs={} expr=v5226[1] }
        of      = { defs={} expr=v5227[1] }
        iopl0   = { defs={} expr=v5228[1] }
        iopl1   = { defs={} expr=v5229[1] }
        nt      = { defs={} expr=v5230[1] }
        ?15     = { defs={} expr=v5231[1] }
        rf      = { defs={} expr=v5232[1] }
        vm      = { defs={} expr=v5233[1] }
        ac      = { defs={} expr=v5234[1] }
        vif     = { defs={} expr=v5235[1] }
        vip     = { defs={} expr=v5236[1] }
        id      = { defs={} expr=v5237[1] }
        ?22     = { defs={} expr=v5238[1] }
        ?23     = { defs={} expr=v5239[1] }
        ?24     = { defs={} expr=v5240[1] }
        ?25     = { defs={} expr=v5241[1] }
        ?26     = { defs={} expr=v5242[1] }
        ?27     = { defs={} expr=v5243[1] }
        ?28     = { defs={} expr=v5244[1] }
        ?29     = { defs={} expr=v5245[1] }
        ?30     = { defs={} expr=v5246[1] }
        ?31     = { defs={} expr=v5247[1] }
        ip      = { defs={0x080484ca} expr=0x080484d0[32] }
    memory:
    init mem:
0x80484d0:lea    edx, [ebx + 0xffffff20<-0x000000e0>]
    registers:
        ax      = { defs={0x080484ca} expr=(add[32] v5205[32] -224[32]) }
        cx      = { defs={} expr=v5203[32] }
        dx      = { defs={0x080484d0} expr=(add[32] v5205[32] -224[32]) }
        bx      = { defs={} expr=v5205[32] }
        sp      = { defs={} expr=v5206[32] }
        bp      = { defs={} expr=v5207[32] }
        si      = { defs={} expr=v5208[32] }
        di      = { defs={} expr=v5209[32] }
        es      = { defs={} expr=v5210[16] }
        cs      = { defs={} expr=v5211[16] }
        ss      = { defs={} expr=v5212[16] }
        ds      = { defs={} expr=v5213[16] }
        fs      = { defs={} expr=v5214[16] }
        gs      = { defs={} expr=v5215[16] }
        cf      = { defs={} expr=v5216[1] }
        ?1      = { defs={} expr=v5217[1] }
        pf      = { defs={} expr=v5218[1] }
        ?3      = { defs={} expr=v5219[1] }
        af      = { defs={} expr=v5220[1] }
        ?5      = { defs={} expr=v5221[1] }
        zf      = { defs={} expr=v5222[1] }
        sf      = { defs={} expr=v5223[1] }
        tf      = { defs={} expr=v5224[1] }
        if      = { defs={} expr=v5225[1] }
        df      = { defs={} expr=v5226[1] }
        of      = { defs={} expr=v5227[1] }
        iopl0   = { defs={} expr=v5228[1] }
        iopl1   = { defs={} expr=v5229[1] }
        nt      = { defs={} expr=v5230[1] }
        ?15     = { defs={} expr=v5231[1] }
        rf      = { defs={} expr=v5232[1] }
        vm      = { defs={} expr=v5233[1] }
        ac      = { defs={} expr=v5234[1] }
        vif     = { defs={} expr=v5235[1] }
        vip     = { defs={} expr=v5236[1] }
        id      = { defs={} expr=v5237[1] }
        ?22     = { defs={} expr=v5238[1] }
        ?23     = { defs={} expr=v5239[1] }
        ?24     = { defs={} expr=v5240[1] }
        ?25     = { defs={} expr=v5241[1] }
        ?26     = { defs={} expr=v5242[1] }
        ?27     = { defs={} expr=v5243[1] }
        ?28     = { defs={} expr=v5244[1] }
        ?29     = { defs={} expr=v5245[1] }
        ?30     = { defs={} expr=v5246[1] }
        ?31     = { defs={} expr=v5247[1] }
        ip      = { defs={0x080484ca,0x080484d0} expr=0x080484d6[32] }
    memory:
    init mem:
0x80484d6:sub    eax, edx
    registers:
        ax      = { defs={0x080484ca,0x080484d0,0x080484d6} expr=(add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32])) }
        cx      = { defs={} expr=v5203[32] }
        dx      = { defs={0x080484d0} expr=(add[32] v5205[32] -224[32]) }
        bx      = { defs={} expr=v5205[32] }
        sp      = { defs={} expr=v5206[32] }
        bp      = { defs={} expr=v5207[32] }
        si      = { defs={} expr=v5208[32] }
        di      = { defs={} expr=v5209[32] }
        es      = { defs={} expr=v5210[16] }
        cs      = { defs={} expr=v5211[16] }
        ss      = { defs={} expr=v5212[16] }
        ds      = { defs={} expr=v5213[16] }
        fs      = { defs={} expr=v5214[16] }
        gs      = { defs={} expr=v5215[16] }
        cf      = { defs={0x080484ca,0x080484d0,0x080484d6} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v5205[32] -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v5205[32] -224[32]))) (add[33] (uextend[33] 33[32] (add[32] v5205[32] -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v5205[32] -224[32]))) 1[33]))))))) }
        ?1      = { defs={} expr=v5217[1] }
        pf      = { defs={0x080484ca,0x080484d0,0x080484d6} expr=1[1] }
        ?3      = { defs={} expr=v5219[1] }
        af      = { defs={0x080484ca,0x080484d0,0x080484d6} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v5205[32] -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v5205[32] -224[32]))) (add[33] (uextend[33] 33[32] (add[32] v5205[32] -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v5205[32] -224[32]))) 1[33]))))))) }
        ?5      = { defs={} expr=v5221[1] }
        zf      = { defs={0x080484ca,0x080484d0,0x080484d6} expr=(zerop[1] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))) }
        sf      = { defs={0x080484ca,0x080484d0,0x080484d6} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))) }
        tf      = { defs={} expr=v5224[1] }
        if      = { defs={} expr=v5225[1] }
        df      = { defs={} expr=v5226[1] }
        of      = { defs={0x080484ca,0x080484d0,0x080484d6} expr=0[1] }
        iopl0   = { defs={} expr=v5228[1] }
        iopl1   = { defs={} expr=v5229[1] }
        nt      = { defs={} expr=v5230[1] }
        ?15     = { defs={} expr=v5231[1] }
        rf      = { defs={} expr=v5232[1] }
        vm      = { defs={} expr=v5233[1] }
        ac      = { defs={} expr=v5234[1] }
        vif     = { defs={} expr=v5235[1] }
        vip     = { defs={} expr=v5236[1] }
        id      = { defs={} expr=v5237[1] }
        ?22     = { defs={} expr=v5238[1] }
        ?23     = { defs={} expr=v5239[1] }
        ?24     = { defs={} expr=v5240[1] }
        ?25     = { defs={} expr=v5241[1] }
        ?26     = { defs={} expr=v5242[1] }
        ?27     = { defs={} expr=v5243[1] }
        ?28     = { defs={} expr=v5244[1] }
        ?29     = { defs={} expr=v5245[1] }
        ?30     = { defs={} expr=v5246[1] }
        ?31     = { defs={} expr=v5247[1] }
        ip      = { defs={0x080484ca,0x080484d0,0x080484d6} expr=0x080484d8[32] }
    memory:
    init mem:
0x80484d8:sar    eax, 0x02
    registers:
        ax      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))) }
        cx      = { defs={} expr=v5203[32] }
        dx      = { defs={0x080484d0} expr=(add[32] v5205[32] -224[32]) }
        bx      = { defs={} expr=v5205[32] }
        sp      = { defs={} expr=v5206[32] }
        bp      = { defs={} expr=v5207[32] }
        si      = { defs={} expr=v5208[32] }
        di      = { defs={} expr=v5209[32] }
        es      = { defs={} expr=v5210[16] }
        cs      = { defs={} expr=v5211[16] }
        ss      = { defs={} expr=v5212[16] }
        ds      = { defs={} expr=v5213[16] }
        fs      = { defs={} expr=v5214[16] }
        gs      = { defs={} expr=v5215[16] }
        cf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32])))) }
        ?1      = { defs={} expr=v5217[1] }
        pf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=1[1] }
        ?3      = { defs={} expr=v5219[1] }
        af      = { defs={0x080484d8} expr=v5329[1] }
        ?5      = { defs={} expr=v5221[1] }
        zf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(zerop[1] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32])))) }
        sf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32])))) }
        tf      = { defs={} expr=v5224[1] }
        if      = { defs={} expr=v5225[1] }
        df      = { defs={} expr=v5226[1] }
        of      = { defs={0x080484d8} expr=v5344[1] }
        iopl0   = { defs={} expr=v5228[1] }
        iopl1   = { defs={} expr=v5229[1] }
        nt      = { defs={} expr=v5230[1] }
        ?15     = { defs={} expr=v5231[1] }
        rf      = { defs={} expr=v5232[1] }
        vm      = { defs={} expr=v5233[1] }
        ac      = { defs={} expr=v5234[1] }
        vif     = { defs={} expr=v5235[1] }
        vip     = { defs={} expr=v5236[1] }
        id      = { defs={} expr=v5237[1] }
        ?22     = { defs={} expr=v5238[1] }
        ?23     = { defs={} expr=v5239[1] }
        ?24     = { defs={} expr=v5240[1] }
        ?25     = { defs={} expr=v5241[1] }
        ?26     = { defs={} expr=v5242[1] }
        ?27     = { defs={} expr=v5243[1] }
        ?28     = { defs={} expr=v5244[1] }
        ?29     = { defs={} expr=v5245[1] }
        ?30     = { defs={} expr=v5246[1] }
        ?31     = { defs={} expr=v5247[1] }
        ip      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=0x080484db[32] }
    memory:
    init mem:
0x80484db:mov    DWORD PTR ss:[ebp + 0xf0<-0x10>], eax
    registers:
        ax      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))) }
        cx      = { defs={} expr=v5203[32] }
        dx      = { defs={0x080484d0} expr=(add[32] v5205[32] -224[32]) }
        bx      = { defs={} expr=v5205[32] }
        sp      = { defs={} expr=v5206[32] }
        bp      = { defs={} expr=v5207[32] }
        si      = { defs={} expr=v5208[32] }
        di      = { defs={} expr=v5209[32] }
        es      = { defs={} expr=v5210[16] }
        cs      = { defs={} expr=v5211[16] }
        ss      = { defs={} expr=v5212[16] }
        ds      = { defs={} expr=v5213[16] }
        fs      = { defs={} expr=v5214[16] }
        gs      = { defs={} expr=v5215[16] }
        cf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32])))) }
        ?1      = { defs={} expr=v5217[1] }
        pf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=1[1] }
        ?3      = { defs={} expr=v5219[1] }
        af      = { defs={0x080484d8} expr=v5329[1] }
        ?5      = { defs={} expr=v5221[1] }
        zf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(zerop[1] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32])))) }
        sf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32])))) }
        tf      = { defs={} expr=v5224[1] }
        if      = { defs={} expr=v5225[1] }
        df      = { defs={} expr=v5226[1] }
        of      = { defs={0x080484d8} expr=v5344[1] }
        iopl0   = { defs={} expr=v5228[1] }
        iopl1   = { defs={} expr=v5229[1] }
        nt      = { defs={} expr=v5230[1] }
        ?15     = { defs={} expr=v5231[1] }
        rf      = { defs={} expr=v5232[1] }
        vm      = { defs={} expr=v5233[1] }
        ac      = { defs={} expr=v5234[1] }
        vif     = { defs={} expr=v5235[1] }
        vip     = { defs={} expr=v5236[1] }
        id      = { defs={} expr=v5237[1] }
        ?22     = { defs={} expr=v5238[1] }
        ?23     = { defs={} expr=v5239[1] }
        ?24     = { defs={} expr=v5240[1] }
        ?25     = { defs={} expr=v5241[1] }
        ?26     = { defs={} expr=v5242[1] }
        ?27     = { defs={} expr=v5243[1] }
        ?28     = { defs={} expr=v5244[1] }
        ?29     = { defs={} expr=v5245[1] }
        ?30     = { defs={} expr=v5246[1] }
        ?31     = { defs={} expr=v5247[1] }
        ip      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db} expr=0x080484de[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v5207[32] -16[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5207[32] -16[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5207[32] -16[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={0x080484db} expr=(add[32] v5207[32] -16[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32])))) }
          flags = { }
    init mem:
0x80484de:jne    0x080484f0<<StaticData@0x080484e8>+8>
    registers:
        ax      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))) }
        cx      = { defs={} expr=v5203[32] }
        dx      = { defs={0x080484d0} expr=(add[32] v5205[32] -224[32]) }
        bx      = { defs={} expr=v5205[32] }
        sp      = { defs={} expr=v5206[32] }
        bp      = { defs={} expr=v5207[32] }
        si      = { defs={} expr=v5208[32] }
        di      = { defs={} expr=v5209[32] }
        es      = { defs={} expr=v5210[16] }
        cs      = { defs={} expr=v5211[16] }
        ss      = { defs={} expr=v5212[16] }
        ds      = { defs={} expr=v5213[16] }
        fs      = { defs={} expr=v5214[16] }
        gs      = { defs={} expr=v5215[16] }
        cf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32])))) }
        ?1      = { defs={} expr=v5217[1] }
        pf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=1[1] }
        ?3      = { defs={} expr=v5219[1] }
        af      = { defs={0x080484d8} expr=v5329[1] }
        ?5      = { defs={} expr=v5221[1] }
        zf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(zerop[1] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32])))) }
        sf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32])))) }
        tf      = { defs={} expr=v5224[1] }
        if      = { defs={} expr=v5225[1] }
        df      = { defs={} expr=v5226[1] }
        of      = { defs={0x080484d8} expr=v5344[1] }
        iopl0   = { defs={} expr=v5228[1] }
        iopl1   = { defs={} expr=v5229[1] }
        nt      = { defs={} expr=v5230[1] }
        ?15     = { defs={} expr=v5231[1] }
        rf      = { defs={} expr=v5232[1] }
        vm      = { defs={} expr=v5233[1] }
        ac      = { defs={} expr=v5234[1] }
        vif     = { defs={} expr=v5235[1] }
        vip     = { defs={} expr=v5236[1] }
        id      = { defs={} expr=v5237[1] }
        ?22     = { defs={} expr=v5238[1] }
        ?23     = { defs={} expr=v5239[1] }
        ?24     = { defs={} expr=v5240[1] }
        ?25     = { defs={} expr=v5241[1] }
        ?26     = { defs={} expr=v5242[1] }
        ?27     = { defs={} expr=v5243[1] }
        ?28     = { defs={} expr=v5244[1] }
        ?29     = { defs={} expr=v5245[1] }
        ?30     = { defs={} expr=v5246[1] }
        ?31     = { defs={} expr=v5247[1] }
        ip      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db,0x080484de} expr=0x080484e0[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v5207[32] -16[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5207[32] -16[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5207[32] -16[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={0x080484db} expr=(add[32] v5207[32] -16[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32])))) }
          flags = { }
    init mem:
0x80484e0:add    esp, 0x0c
    registers:
        ax      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))) }
        cx      = { defs={} expr=v5203[32] }
        dx      = { defs={0x080484d0} expr=(add[32] v5205[32] -224[32]) }
        bx      = { defs={} expr=v5205[32] }
        sp      = { defs={0x080484e0} expr=(add[32] v5206[32] 12[32]) }
        bp      = { defs={} expr=v5207[32] }
        si      = { defs={} expr=v5208[32] }
        di      = { defs={} expr=v5209[32] }
        es      = { defs={} expr=v5210[16] }
        cs      = { defs={} expr=v5211[16] }
        ss      = { defs={} expr=v5212[16] }
        ds      = { defs={} expr=v5213[16] }
        fs      = { defs={} expr=v5214[16] }
        gs      = { defs={} expr=v5215[16] }
        cf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5206[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5206[32]) 12[33]))))) }
        ?1      = { defs={} expr=v5217[1] }
        pf      = { defs={0x080484e0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v5206[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v5206[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v5206[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v5206[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v5206[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v5206[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v5206[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v5206[32] 12[32]))))))) }
        ?3      = { defs={} expr=v5219[1] }
        af      = { defs={0x080484e0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5206[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5206[32]) 12[33]))))) }
        ?5      = { defs={} expr=v5221[1] }
        zf      = { defs={0x080484e0} expr=(zerop[1] (add[32] v5206[32] 12[32])) }
        sf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (add[32] v5206[32] 12[32])) }
        tf      = { defs={} expr=v5224[1] }
        if      = { defs={} expr=v5225[1] }
        df      = { defs={} expr=v5226[1] }
        of      = { defs={0x080484e0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5206[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5206[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5206[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5206[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v5228[1] }
        iopl1   = { defs={} expr=v5229[1] }
        nt      = { defs={} expr=v5230[1] }
        ?15     = { defs={} expr=v5231[1] }
        rf      = { defs={} expr=v5232[1] }
        vm      = { defs={} expr=v5233[1] }
        ac      = { defs={} expr=v5234[1] }
        vif     = { defs={} expr=v5235[1] }
        vip     = { defs={} expr=v5236[1] }
        id      = { defs={} expr=v5237[1] }
        ?22     = { defs={} expr=v5238[1] }
        ?23     = { defs={} expr=v5239[1] }
        ?24     = { defs={} expr=v5240[1] }
        ?25     = { defs={} expr=v5241[1] }
        ?26     = { defs={} expr=v5242[1] }
        ?27     = { defs={} expr=v5243[1] }
        ?28     = { defs={} expr=v5244[1] }
        ?29     = { defs={} expr=v5245[1] }
        ?30     = { defs={} expr=v5246[1] }
        ?31     = { defs={} expr=v5247[1] }
        ip      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db,0x080484de,0x080484e0} expr=0x080484e3[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v5207[32] -16[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5207[32] -16[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5207[32] -16[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={0x080484db} expr=(add[32] v5207[32] -16[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32])))) }
          flags = { }
    init mem:
0x80484e3:pop    ebx
    registers:
        ax      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))) }
        cx      = { defs={} expr=v5203[32] }
        dx      = { defs={0x080484d0} expr=(add[32] v5205[32] -224[32]) }
        bx      = { defs={0x080484e3} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5452[8] (add[32] (add[32] v5207[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] v5207[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] v5206[32] 12[32]) v5451[8]) (add[32] v5206[32] 12[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5454[8] (add[32] (add[32] v5207[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] v5207[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5206[32] 12[32]) 1[32]) v5453[8]) (add[32] (add[32] v5206[32] 12[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5456[8] (add[32] (add[32] v5207[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] v5207[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5206[32] 12[32]) 2[32]) v5455[8]) (add[32] (add[32] v5206[32] 12[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5458[8] (add[32] (add[32] v5207[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] v5207[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5206[32] 12[32]) 3[32]) v5457[8]) (add[32] (add[32] v5206[32] 12[32]) 3[32]))))) }
        sp      = { defs={0x080484e0,0x080484e3} expr=(add[32] (add[32] v5206[32] 12[32]) 4[32]) }
        bp      = { defs={} expr=v5207[32] }
        si      = { defs={} expr=v5208[32] }
        di      = { defs={} expr=v5209[32] }
        es      = { defs={} expr=v5210[16] }
        cs      = { defs={} expr=v5211[16] }
        ss      = { defs={} expr=v5212[16] }
        ds      = { defs={} expr=v5213[16] }
        fs      = { defs={} expr=v5214[16] }
        gs      = { defs={} expr=v5215[16] }
        cf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5206[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5206[32]) 12[33]))))) }
        ?1      = { defs={} expr=v5217[1] }
        pf      = { defs={0x080484e0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v5206[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v5206[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v5206[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v5206[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v5206[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v5206[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v5206[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v5206[32] 12[32]))))))) }
        ?3      = { defs={} expr=v5219[1] }
        af      = { defs={0x080484e0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5206[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5206[32]) 12[33]))))) }
        ?5      = { defs={} expr=v5221[1] }
        zf      = { defs={0x080484e0} expr=(zerop[1] (add[32] v5206[32] 12[32])) }
        sf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (add[32] v5206[32] 12[32])) }
        tf      = { defs={} expr=v5224[1] }
        if      = { defs={} expr=v5225[1] }
        df      = { defs={} expr=v5226[1] }
        of      = { defs={0x080484e0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5206[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5206[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5206[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5206[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v5228[1] }
        iopl1   = { defs={} expr=v5229[1] }
        nt      = { defs={} expr=v5230[1] }
        ?15     = { defs={} expr=v5231[1] }
        rf      = { defs={} expr=v5232[1] }
        vm      = { defs={} expr=v5233[1] }
        ac      = { defs={} expr=v5234[1] }
        vif     = { defs={} expr=v5235[1] }
        vip     = { defs={} expr=v5236[1] }
        id      = { defs={} expr=v5237[1] }
        ?22     = { defs={} expr=v5238[1] }
        ?23     = { defs={} expr=v5239[1] }
        ?24     = { defs={} expr=v5240[1] }
        ?25     = { defs={} expr=v5241[1] }
        ?26     = { defs={} expr=v5242[1] }
        ?27     = { defs={} expr=v5243[1] }
        ?28     = { defs={} expr=v5244[1] }
        ?29     = { defs={} expr=v5245[1] }
        ?30     = { defs={} expr=v5246[1] }
        ?31     = { defs={} expr=v5247[1] }
        ip      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db,0x080484de,0x080484e0,0x080484e3} expr=0x080484e4[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v5207[32] -16[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5207[32] -16[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5207[32] -16[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={0x080484db} expr=(add[32] v5207[32] -16[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32])))) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] (add[32] v5206[32] 12[32]) 3[32]) }
          value = { defs={} expr=v5457[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v5206[32] 12[32]) 2[32]) }
          value = { defs={} expr=v5455[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v5206[32] 12[32]) 1[32]) }
          value = { defs={} expr=v5453[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3} expr=(add[32] v5206[32] 12[32]) }
          value = { defs={} expr=v5451[8] }
          flags = { rdonly }
0x80484e4:pop    esi
    registers:
        ax      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))) }
        cx      = { defs={} expr=v5203[32] }
        dx      = { defs={0x080484d0} expr=(add[32] v5205[32] -224[32]) }
        bx      = { defs={0x080484e3} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5452[8] (add[32] (add[32] v5207[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] v5207[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] v5206[32] 12[32]) v5451[8]) (add[32] v5206[32] 12[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5454[8] (add[32] (add[32] v5207[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] v5207[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5206[32] 12[32]) 1[32]) v5453[8]) (add[32] (add[32] v5206[32] 12[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5456[8] (add[32] (add[32] v5207[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] v5207[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5206[32] 12[32]) 2[32]) v5455[8]) (add[32] (add[32] v5206[32] 12[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5458[8] (add[32] (add[32] v5207[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] v5207[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5206[32] 12[32]) 3[32]) v5457[8]) (add[32] (add[32] v5206[32] 12[32]) 3[32]))))) }
        sp      = { defs={0x080484e0,0x080484e3,0x080484e4} expr=(add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) }
        bp      = { defs={} expr=v5207[32] }
        si      = { defs={0x080484e4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5473[8] (add[32] (add[32] v5207[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] v5207[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5206[32] 12[32]) 4[32]) v5472[8]) (add[32] (add[32] v5206[32] 12[32]) 4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5475[8] (add[32] (add[32] v5207[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] v5207[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 1[32]) v5474[8]) (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5477[8] (add[32] (add[32] v5207[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] v5207[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 2[32]) v5476[8]) (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5479[8] (add[32] (add[32] v5207[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] v5207[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 3[32]) v5478[8]) (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 3[32]))))) }
        di      = { defs={} expr=v5209[32] }
        es      = { defs={} expr=v5210[16] }
        cs      = { defs={} expr=v5211[16] }
        ss      = { defs={} expr=v5212[16] }
        ds      = { defs={} expr=v5213[16] }
        fs      = { defs={} expr=v5214[16] }
        gs      = { defs={} expr=v5215[16] }
        cf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5206[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5206[32]) 12[33]))))) }
        ?1      = { defs={} expr=v5217[1] }
        pf      = { defs={0x080484e0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v5206[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v5206[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v5206[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v5206[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v5206[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v5206[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v5206[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v5206[32] 12[32]))))))) }
        ?3      = { defs={} expr=v5219[1] }
        af      = { defs={0x080484e0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5206[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5206[32]) 12[33]))))) }
        ?5      = { defs={} expr=v5221[1] }
        zf      = { defs={0x080484e0} expr=(zerop[1] (add[32] v5206[32] 12[32])) }
        sf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (add[32] v5206[32] 12[32])) }
        tf      = { defs={} expr=v5224[1] }
        if      = { defs={} expr=v5225[1] }
        df      = { defs={} expr=v5226[1] }
        of      = { defs={0x080484e0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5206[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5206[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5206[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5206[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v5228[1] }
        iopl1   = { defs={} expr=v5229[1] }
        nt      = { defs={} expr=v5230[1] }
        ?15     = { defs={} expr=v5231[1] }
        rf      = { defs={} expr=v5232[1] }
        vm      = { defs={} expr=v5233[1] }
        ac      = { defs={} expr=v5234[1] }
        vif     = { defs={} expr=v5235[1] }
        vip     = { defs={} expr=v5236[1] }
        id      = { defs={} expr=v5237[1] }
        ?22     = { defs={} expr=v5238[1] }
        ?23     = { defs={} expr=v5239[1] }
        ?24     = { defs={} expr=v5240[1] }
        ?25     = { defs={} expr=v5241[1] }
        ?26     = { defs={} expr=v5242[1] }
        ?27     = { defs={} expr=v5243[1] }
        ?28     = { defs={} expr=v5244[1] }
        ?29     = { defs={} expr=v5245[1] }
        ?30     = { defs={} expr=v5246[1] }
        ?31     = { defs={} expr=v5247[1] }
        ip      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db,0x080484de,0x080484e0,0x080484e3,0x080484e4} expr=0x080484e5[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v5207[32] -16[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5207[32] -16[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5207[32] -16[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={0x080484db} expr=(add[32] v5207[32] -16[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32])))) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v5478[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v5476[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v5474[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3,0x080484e4} expr=(add[32] (add[32] v5206[32] 12[32]) 4[32]) }
          value = { defs={} expr=v5472[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v5206[32] 12[32]) 3[32]) }
          value = { defs={} expr=v5457[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v5206[32] 12[32]) 2[32]) }
          value = { defs={} expr=v5455[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v5206[32] 12[32]) 1[32]) }
          value = { defs={} expr=v5453[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3} expr=(add[32] v5206[32] 12[32]) }
          value = { defs={} expr=v5451[8] }
          flags = { rdonly }
0x80484e5:pop    edi
    registers:
        ax      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))) }
        cx      = { defs={} expr=v5203[32] }
        dx      = { defs={0x080484d0} expr=(add[32] v5205[32] -224[32]) }
        bx      = { defs={0x080484e3} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5452[8] (add[32] (add[32] v5207[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] v5207[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] v5206[32] 12[32]) v5451[8]) (add[32] v5206[32] 12[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5454[8] (add[32] (add[32] v5207[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] v5207[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5206[32] 12[32]) 1[32]) v5453[8]) (add[32] (add[32] v5206[32] 12[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5456[8] (add[32] (add[32] v5207[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] v5207[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5206[32] 12[32]) 2[32]) v5455[8]) (add[32] (add[32] v5206[32] 12[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5458[8] (add[32] (add[32] v5207[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] v5207[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5206[32] 12[32]) 3[32]) v5457[8]) (add[32] (add[32] v5206[32] 12[32]) 3[32]))))) }
        sp      = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5} expr=(add[32] (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) 4[32]) }
        bp      = { defs={} expr=v5207[32] }
        si      = { defs={0x080484e4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5473[8] (add[32] (add[32] v5207[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] v5207[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5206[32] 12[32]) 4[32]) v5472[8]) (add[32] (add[32] v5206[32] 12[32]) 4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5475[8] (add[32] (add[32] v5207[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] v5207[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 1[32]) v5474[8]) (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5477[8] (add[32] (add[32] v5207[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] v5207[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 2[32]) v5476[8]) (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5479[8] (add[32] (add[32] v5207[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] v5207[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 3[32]) v5478[8]) (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 3[32]))))) }
        di      = { defs={0x080484e5} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5494[8] (add[32] (add[32] v5207[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] v5207[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) v5493[8]) (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5496[8] (add[32] (add[32] v5207[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] v5207[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) 1[32]) v5495[8]) (add[32] (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5498[8] (add[32] (add[32] v5207[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] v5207[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) 2[32]) v5497[8]) (add[32] (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5500[8] (add[32] (add[32] v5207[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] v5207[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) 3[32]) v5499[8]) (add[32] (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) 3[32]))))) }
        es      = { defs={} expr=v5210[16] }
        cs      = { defs={} expr=v5211[16] }
        ss      = { defs={} expr=v5212[16] }
        ds      = { defs={} expr=v5213[16] }
        fs      = { defs={} expr=v5214[16] }
        gs      = { defs={} expr=v5215[16] }
        cf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5206[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5206[32]) 12[33]))))) }
        ?1      = { defs={} expr=v5217[1] }
        pf      = { defs={0x080484e0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v5206[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v5206[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v5206[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v5206[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v5206[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v5206[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v5206[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v5206[32] 12[32]))))))) }
        ?3      = { defs={} expr=v5219[1] }
        af      = { defs={0x080484e0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5206[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5206[32]) 12[33]))))) }
        ?5      = { defs={} expr=v5221[1] }
        zf      = { defs={0x080484e0} expr=(zerop[1] (add[32] v5206[32] 12[32])) }
        sf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (add[32] v5206[32] 12[32])) }
        tf      = { defs={} expr=v5224[1] }
        if      = { defs={} expr=v5225[1] }
        df      = { defs={} expr=v5226[1] }
        of      = { defs={0x080484e0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5206[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5206[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5206[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5206[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v5228[1] }
        iopl1   = { defs={} expr=v5229[1] }
        nt      = { defs={} expr=v5230[1] }
        ?15     = { defs={} expr=v5231[1] }
        rf      = { defs={} expr=v5232[1] }
        vm      = { defs={} expr=v5233[1] }
        ac      = { defs={} expr=v5234[1] }
        vif     = { defs={} expr=v5235[1] }
        vip     = { defs={} expr=v5236[1] }
        id      = { defs={} expr=v5237[1] }
        ?22     = { defs={} expr=v5238[1] }
        ?23     = { defs={} expr=v5239[1] }
        ?24     = { defs={} expr=v5240[1] }
        ?25     = { defs={} expr=v5241[1] }
        ?26     = { defs={} expr=v5242[1] }
        ?27     = { defs={} expr=v5243[1] }
        ?28     = { defs={} expr=v5244[1] }
        ?29     = { defs={} expr=v5245[1] }
        ?30     = { defs={} expr=v5246[1] }
        ?31     = { defs={} expr=v5247[1] }
        ip      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db,0x080484de,0x080484e0,0x080484e3,0x080484e4,0x080484e5} expr=0x080484e6[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v5207[32] -16[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5207[32] -16[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5207[32] -16[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={0x080484db} expr=(add[32] v5207[32] -16[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32])))) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v5499[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v5497[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v5495[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5} expr=(add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v5493[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v5478[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v5476[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v5474[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3,0x080484e4} expr=(add[32] (add[32] v5206[32] 12[32]) 4[32]) }
          value = { defs={} expr=v5472[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v5206[32] 12[32]) 3[32]) }
          value = { defs={} expr=v5457[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v5206[32] 12[32]) 2[32]) }
          value = { defs={} expr=v5455[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v5206[32] 12[32]) 1[32]) }
          value = { defs={} expr=v5453[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3} expr=(add[32] v5206[32] 12[32]) }
          value = { defs={} expr=v5451[8] }
          flags = { rdonly }
0x80484e6:pop    ebp
    registers:
        ax      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))) }
        cx      = { defs={} expr=v5203[32] }
        dx      = { defs={0x080484d0} expr=(add[32] v5205[32] -224[32]) }
        bx      = { defs={0x080484e3} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5452[8] (add[32] (add[32] v5207[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] v5207[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] v5206[32] 12[32]) v5451[8]) (add[32] v5206[32] 12[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5454[8] (add[32] (add[32] v5207[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] v5207[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5206[32] 12[32]) 1[32]) v5453[8]) (add[32] (add[32] v5206[32] 12[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5456[8] (add[32] (add[32] v5207[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] v5207[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5206[32] 12[32]) 2[32]) v5455[8]) (add[32] (add[32] v5206[32] 12[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5458[8] (add[32] (add[32] v5207[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] v5207[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5206[32] 12[32]) 3[32]) v5457[8]) (add[32] (add[32] v5206[32] 12[32]) 3[32]))))) }
        sp      = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) }
        bp      = { defs={0x080484e6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5515[8] (add[32] (add[32] v5207[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] v5207[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) 4[32]) v5514[8]) (add[32] (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) 4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5517[8] (add[32] (add[32] v5207[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] v5207[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) 4[32]) 1[32]) v5516[8]) (add[32] (add[32] (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) 4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5519[8] (add[32] (add[32] v5207[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] v5207[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) 4[32]) 2[32]) v5518[8]) (add[32] (add[32] (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) 4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5521[8] (add[32] (add[32] v5207[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] v5207[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) 4[32]) 3[32]) v5520[8]) (add[32] (add[32] (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) 4[32]) 3[32]))))) }
        si      = { defs={0x080484e4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5473[8] (add[32] (add[32] v5207[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] v5207[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5206[32] 12[32]) 4[32]) v5472[8]) (add[32] (add[32] v5206[32] 12[32]) 4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5475[8] (add[32] (add[32] v5207[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] v5207[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 1[32]) v5474[8]) (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5477[8] (add[32] (add[32] v5207[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] v5207[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 2[32]) v5476[8]) (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5479[8] (add[32] (add[32] v5207[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] v5207[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 3[32]) v5478[8]) (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 3[32]))))) }
        di      = { defs={0x080484e5} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5494[8] (add[32] (add[32] v5207[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] v5207[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) v5493[8]) (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5496[8] (add[32] (add[32] v5207[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] v5207[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) 1[32]) v5495[8]) (add[32] (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5498[8] (add[32] (add[32] v5207[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] v5207[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) 2[32]) v5497[8]) (add[32] (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5500[8] (add[32] (add[32] v5207[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] v5207[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) 3[32]) v5499[8]) (add[32] (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) 3[32]))))) }
        es      = { defs={} expr=v5210[16] }
        cs      = { defs={} expr=v5211[16] }
        ss      = { defs={} expr=v5212[16] }
        ds      = { defs={} expr=v5213[16] }
        fs      = { defs={} expr=v5214[16] }
        gs      = { defs={} expr=v5215[16] }
        cf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5206[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5206[32]) 12[33]))))) }
        ?1      = { defs={} expr=v5217[1] }
        pf      = { defs={0x080484e0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v5206[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v5206[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v5206[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v5206[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v5206[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v5206[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v5206[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v5206[32] 12[32]))))))) }
        ?3      = { defs={} expr=v5219[1] }
        af      = { defs={0x080484e0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5206[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5206[32]) 12[33]))))) }
        ?5      = { defs={} expr=v5221[1] }
        zf      = { defs={0x080484e0} expr=(zerop[1] (add[32] v5206[32] 12[32])) }
        sf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (add[32] v5206[32] 12[32])) }
        tf      = { defs={} expr=v5224[1] }
        if      = { defs={} expr=v5225[1] }
        df      = { defs={} expr=v5226[1] }
        of      = { defs={0x080484e0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5206[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5206[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5206[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5206[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v5228[1] }
        iopl1   = { defs={} expr=v5229[1] }
        nt      = { defs={} expr=v5230[1] }
        ?15     = { defs={} expr=v5231[1] }
        rf      = { defs={} expr=v5232[1] }
        vm      = { defs={} expr=v5233[1] }
        ac      = { defs={} expr=v5234[1] }
        vif     = { defs={} expr=v5235[1] }
        vip     = { defs={} expr=v5236[1] }
        id      = { defs={} expr=v5237[1] }
        ?22     = { defs={} expr=v5238[1] }
        ?23     = { defs={} expr=v5239[1] }
        ?24     = { defs={} expr=v5240[1] }
        ?25     = { defs={} expr=v5241[1] }
        ?26     = { defs={} expr=v5242[1] }
        ?27     = { defs={} expr=v5243[1] }
        ?28     = { defs={} expr=v5244[1] }
        ?29     = { defs={} expr=v5245[1] }
        ?30     = { defs={} expr=v5246[1] }
        ?31     = { defs={} expr=v5247[1] }
        ip      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db,0x080484de,0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6} expr=0x080484e7[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v5207[32] -16[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5207[32] -16[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5207[32] -16[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={0x080484db} expr=(add[32] v5207[32] -16[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32])))) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v5520[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v5518[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v5516[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6} expr=(add[32] (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v5514[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v5499[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v5497[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v5495[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5} expr=(add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v5493[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v5478[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v5476[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v5474[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3,0x080484e4} expr=(add[32] (add[32] v5206[32] 12[32]) 4[32]) }
          value = { defs={} expr=v5472[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v5206[32] 12[32]) 3[32]) }
          value = { defs={} expr=v5457[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v5206[32] 12[32]) 2[32]) }
          value = { defs={} expr=v5455[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v5206[32] 12[32]) 1[32]) }
          value = { defs={} expr=v5453[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3} expr=(add[32] v5206[32] 12[32]) }
          value = { defs={} expr=v5451[8] }
          flags = { rdonly }
0x80484e7:ret    
    registers:
        ax      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))) }
        cx      = { defs={} expr=v5203[32] }
        dx      = { defs={0x080484d0} expr=(add[32] v5205[32] -224[32]) }
        bx      = { defs={0x080484e3} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5452[8] (add[32] (add[32] v5207[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] v5207[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] v5206[32] 12[32]) v5451[8]) (add[32] v5206[32] 12[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5454[8] (add[32] (add[32] v5207[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] v5207[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5206[32] 12[32]) 1[32]) v5453[8]) (add[32] (add[32] v5206[32] 12[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5456[8] (add[32] (add[32] v5207[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] v5207[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5206[32] 12[32]) 2[32]) v5455[8]) (add[32] (add[32] v5206[32] 12[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5458[8] (add[32] (add[32] v5207[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] v5207[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5206[32] 12[32]) 3[32]) v5457[8]) (add[32] (add[32] v5206[32] 12[32]) 3[32]))))) }
        sp      = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6,0x080484e7} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 4[32]) }
        bp      = { defs={0x080484e6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5515[8] (add[32] (add[32] v5207[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] v5207[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) 4[32]) v5514[8]) (add[32] (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) 4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5517[8] (add[32] (add[32] v5207[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] v5207[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) 4[32]) 1[32]) v5516[8]) (add[32] (add[32] (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) 4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5519[8] (add[32] (add[32] v5207[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] v5207[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) 4[32]) 2[32]) v5518[8]) (add[32] (add[32] (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) 4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5521[8] (add[32] (add[32] v5207[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] v5207[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) 4[32]) 3[32]) v5520[8]) (add[32] (add[32] (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) 4[32]) 3[32]))))) }
        si      = { defs={0x080484e4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5473[8] (add[32] (add[32] v5207[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] v5207[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5206[32] 12[32]) 4[32]) v5472[8]) (add[32] (add[32] v5206[32] 12[32]) 4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5475[8] (add[32] (add[32] v5207[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] v5207[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 1[32]) v5474[8]) (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5477[8] (add[32] (add[32] v5207[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] v5207[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 2[32]) v5476[8]) (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5479[8] (add[32] (add[32] v5207[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] v5207[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 3[32]) v5478[8]) (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 3[32]))))) }
        di      = { defs={0x080484e5} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5494[8] (add[32] (add[32] v5207[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] v5207[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) v5493[8]) (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5496[8] (add[32] (add[32] v5207[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] v5207[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) 1[32]) v5495[8]) (add[32] (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5498[8] (add[32] (add[32] v5207[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] v5207[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) 2[32]) v5497[8]) (add[32] (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5500[8] (add[32] (add[32] v5207[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] v5207[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) 3[32]) v5499[8]) (add[32] (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) 3[32]))))) }
        es      = { defs={} expr=v5210[16] }
        cs      = { defs={} expr=v5211[16] }
        ss      = { defs={} expr=v5212[16] }
        ds      = { defs={} expr=v5213[16] }
        fs      = { defs={} expr=v5214[16] }
        gs      = { defs={} expr=v5215[16] }
        cf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5206[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5206[32]) 12[33]))))) }
        ?1      = { defs={} expr=v5217[1] }
        pf      = { defs={0x080484e0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v5206[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v5206[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v5206[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v5206[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v5206[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v5206[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v5206[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v5206[32] 12[32]))))))) }
        ?3      = { defs={} expr=v5219[1] }
        af      = { defs={0x080484e0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5206[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5206[32]) 12[33]))))) }
        ?5      = { defs={} expr=v5221[1] }
        zf      = { defs={0x080484e0} expr=(zerop[1] (add[32] v5206[32] 12[32])) }
        sf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (add[32] v5206[32] 12[32])) }
        tf      = { defs={} expr=v5224[1] }
        if      = { defs={} expr=v5225[1] }
        df      = { defs={} expr=v5226[1] }
        of      = { defs={0x080484e0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5206[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5206[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5206[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5206[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v5228[1] }
        iopl1   = { defs={} expr=v5229[1] }
        nt      = { defs={} expr=v5230[1] }
        ?15     = { defs={} expr=v5231[1] }
        rf      = { defs={} expr=v5232[1] }
        vm      = { defs={} expr=v5233[1] }
        ac      = { defs={} expr=v5234[1] }
        vif     = { defs={} expr=v5235[1] }
        vip     = { defs={} expr=v5236[1] }
        id      = { defs={} expr=v5237[1] }
        ?22     = { defs={} expr=v5238[1] }
        ?23     = { defs={} expr=v5239[1] }
        ?24     = { defs={} expr=v5240[1] }
        ?25     = { defs={} expr=v5241[1] }
        ?26     = { defs={} expr=v5242[1] }
        ?27     = { defs={} expr=v5243[1] }
        ?28     = { defs={} expr=v5244[1] }
        ?29     = { defs={} expr=v5245[1] }
        ?30     = { defs={} expr=v5246[1] }
        ?31     = { defs={} expr=v5247[1] }
        ip      = { defs={0x080484e7} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5536[8] (add[32] (add[32] v5207[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] v5207[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) v5535[8]) (add[32] (add[32] (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5538[8] (add[32] (add[32] v5207[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] v5207[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 1[32]) v5537[8]) (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5540[8] (add[32] (add[32] v5207[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] v5207[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 2[32]) v5539[8]) (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m5542[8] (add[32] (add[32] v5207[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] v5207[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] v5207[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 3[32]) v5541[8]) (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 3[32]))))) }
    memory:
        address = { defs={} expr=(add[32] (add[32] v5207[32] -16[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5207[32] -16[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5207[32] -16[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={0x080484db} expr=(add[32] v5207[32] -16[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5205[32] -224[32]) (add[32] (invert[32] (add[32] v5205[32] -224[32])) 1[32])))) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v5541[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v5539[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v5537[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6,0x080484e7} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v5535[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v5520[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v5518[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v5516[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6} expr=(add[32] (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v5514[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v5499[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v5497[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v5495[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5} expr=(add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v5493[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v5478[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v5476[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5206[32] 12[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v5474[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3,0x080484e4} expr=(add[32] (add[32] v5206[32] 12[32]) 4[32]) }
          value = { defs={} expr=v5472[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v5206[32] 12[32]) 3[32]) }
          value = { defs={} expr=v5457[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v5206[32] 12[32]) 2[32]) }
          value = { defs={} expr=v5455[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v5206[32] 12[32]) 1[32]) }
          value = { defs={} expr=v5453[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3} expr=(add[32] v5206[32] 12[32]) }
          value = { defs={} expr=v5451[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048520:push   ebp
    registers:
        ax      = { defs={} expr=v5597[32] }
        cx      = { defs={} expr=v5598[32] }
        dx      = { defs={} expr=v5599[32] }
        bx      = { defs={} expr=v5600[32] }
        sp      = { defs={0x08048520} expr=(add[32] v5601[32] -4[32]) }
        bp      = { defs={} expr=v5602[32] }
        si      = { defs={} expr=v5603[32] }
        di      = { defs={} expr=v5604[32] }
        es      = { defs={} expr=v5605[16] }
        cs      = { defs={} expr=v5606[16] }
        ss      = { defs={} expr=v5607[16] }
        ds      = { defs={} expr=v5608[16] }
        fs      = { defs={} expr=v5609[16] }
        gs      = { defs={} expr=v5610[16] }
        cf      = { defs={} expr=v5611[1] }
        ?1      = { defs={} expr=v5612[1] }
        pf      = { defs={} expr=v5613[1] }
        ?3      = { defs={} expr=v5614[1] }
        af      = { defs={} expr=v5615[1] }
        ?5      = { defs={} expr=v5616[1] }
        zf      = { defs={} expr=v5617[1] }
        sf      = { defs={} expr=v5618[1] }
        tf      = { defs={} expr=v5619[1] }
        if      = { defs={} expr=v5620[1] }
        df      = { defs={} expr=v5621[1] }
        of      = { defs={} expr=v5622[1] }
        iopl0   = { defs={} expr=v5623[1] }
        iopl1   = { defs={} expr=v5624[1] }
        nt      = { defs={} expr=v5625[1] }
        ?15     = { defs={} expr=v5626[1] }
        rf      = { defs={} expr=v5627[1] }
        vm      = { defs={} expr=v5628[1] }
        ac      = { defs={} expr=v5629[1] }
        vif     = { defs={} expr=v5630[1] }
        vip     = { defs={} expr=v5631[1] }
        id      = { defs={} expr=v5632[1] }
        ?22     = { defs={} expr=v5633[1] }
        ?23     = { defs={} expr=v5634[1] }
        ?24     = { defs={} expr=v5635[1] }
        ?25     = { defs={} expr=v5636[1] }
        ?26     = { defs={} expr=v5637[1] }
        ?27     = { defs={} expr=v5638[1] }
        ?28     = { defs={} expr=v5639[1] }
        ?29     = { defs={} expr=v5640[1] }
        ?30     = { defs={} expr=v5641[1] }
        ?31     = { defs={} expr=v5642[1] }
        ip      = { defs={0x08048520} expr=0x08048521[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v5601[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v5602[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5601[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v5602[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5601[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v5602[32]) }
          flags = { }
        address = { defs={0x08048520} expr=(add[32] v5601[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v5602[32]) }
          flags = { }
    init mem:
0x8048521:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v5597[32] }
        cx      = { defs={} expr=v5598[32] }
        dx      = { defs={} expr=v5599[32] }
        bx      = { defs={} expr=v5600[32] }
        sp      = { defs={0x08048520} expr=(add[32] v5601[32] -4[32]) }
        bp      = { defs={0x08048520,0x08048521} expr=(add[32] v5601[32] -4[32]) }
        si      = { defs={} expr=v5603[32] }
        di      = { defs={} expr=v5604[32] }
        es      = { defs={} expr=v5605[16] }
        cs      = { defs={} expr=v5606[16] }
        ss      = { defs={} expr=v5607[16] }
        ds      = { defs={} expr=v5608[16] }
        fs      = { defs={} expr=v5609[16] }
        gs      = { defs={} expr=v5610[16] }
        cf      = { defs={} expr=v5611[1] }
        ?1      = { defs={} expr=v5612[1] }
        pf      = { defs={} expr=v5613[1] }
        ?3      = { defs={} expr=v5614[1] }
        af      = { defs={} expr=v5615[1] }
        ?5      = { defs={} expr=v5616[1] }
        zf      = { defs={} expr=v5617[1] }
        sf      = { defs={} expr=v5618[1] }
        tf      = { defs={} expr=v5619[1] }
        if      = { defs={} expr=v5620[1] }
        df      = { defs={} expr=v5621[1] }
        of      = { defs={} expr=v5622[1] }
        iopl0   = { defs={} expr=v5623[1] }
        iopl1   = { defs={} expr=v5624[1] }
        nt      = { defs={} expr=v5625[1] }
        ?15     = { defs={} expr=v5626[1] }
        rf      = { defs={} expr=v5627[1] }
        vm      = { defs={} expr=v5628[1] }
        ac      = { defs={} expr=v5629[1] }
        vif     = { defs={} expr=v5630[1] }
        vip     = { defs={} expr=v5631[1] }
        id      = { defs={} expr=v5632[1] }
        ?22     = { defs={} expr=v5633[1] }
        ?23     = { defs={} expr=v5634[1] }
        ?24     = { defs={} expr=v5635[1] }
        ?25     = { defs={} expr=v5636[1] }
        ?26     = { defs={} expr=v5637[1] }
        ?27     = { defs={} expr=v5638[1] }
        ?28     = { defs={} expr=v5639[1] }
        ?29     = { defs={} expr=v5640[1] }
        ?30     = { defs={} expr=v5641[1] }
        ?31     = { defs={} expr=v5642[1] }
        ip      = { defs={0x08048520,0x08048521} expr=0x08048523[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v5601[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v5602[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5601[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v5602[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5601[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v5602[32]) }
          flags = { }
        address = { defs={0x08048520} expr=(add[32] v5601[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v5602[32]) }
          flags = { }
    init mem:
0x8048523:push   edi
    registers:
        ax      = { defs={} expr=v5597[32] }
        cx      = { defs={} expr=v5598[32] }
        dx      = { defs={} expr=v5599[32] }
        bx      = { defs={} expr=v5600[32] }
        sp      = { defs={0x08048520,0x08048523} expr=(add[32] (add[32] v5601[32] -4[32]) -4[32]) }
        bp      = { defs={0x08048520,0x08048521} expr=(add[32] v5601[32] -4[32]) }
        si      = { defs={} expr=v5603[32] }
        di      = { defs={} expr=v5604[32] }
        es      = { defs={} expr=v5605[16] }
        cs      = { defs={} expr=v5606[16] }
        ss      = { defs={} expr=v5607[16] }
        ds      = { defs={} expr=v5608[16] }
        fs      = { defs={} expr=v5609[16] }
        gs      = { defs={} expr=v5610[16] }
        cf      = { defs={} expr=v5611[1] }
        ?1      = { defs={} expr=v5612[1] }
        pf      = { defs={} expr=v5613[1] }
        ?3      = { defs={} expr=v5614[1] }
        af      = { defs={} expr=v5615[1] }
        ?5      = { defs={} expr=v5616[1] }
        zf      = { defs={} expr=v5617[1] }
        sf      = { defs={} expr=v5618[1] }
        tf      = { defs={} expr=v5619[1] }
        if      = { defs={} expr=v5620[1] }
        df      = { defs={} expr=v5621[1] }
        of      = { defs={} expr=v5622[1] }
        iopl0   = { defs={} expr=v5623[1] }
        iopl1   = { defs={} expr=v5624[1] }
        nt      = { defs={} expr=v5625[1] }
        ?15     = { defs={} expr=v5626[1] }
        rf      = { defs={} expr=v5627[1] }
        vm      = { defs={} expr=v5628[1] }
        ac      = { defs={} expr=v5629[1] }
        vif     = { defs={} expr=v5630[1] }
        vip     = { defs={} expr=v5631[1] }
        id      = { defs={} expr=v5632[1] }
        ?22     = { defs={} expr=v5633[1] }
        ?23     = { defs={} expr=v5634[1] }
        ?24     = { defs={} expr=v5635[1] }
        ?25     = { defs={} expr=v5636[1] }
        ?26     = { defs={} expr=v5637[1] }
        ?27     = { defs={} expr=v5638[1] }
        ?28     = { defs={} expr=v5639[1] }
        ?29     = { defs={} expr=v5640[1] }
        ?30     = { defs={} expr=v5641[1] }
        ?31     = { defs={} expr=v5642[1] }
        ip      = { defs={0x08048520,0x08048521,0x08048523} expr=0x08048524[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v5604[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v5604[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v5604[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523} expr=(add[32] (add[32] v5601[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v5604[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5601[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v5602[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5601[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v5602[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5601[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v5602[32]) }
          flags = { }
        address = { defs={0x08048520} expr=(add[32] v5601[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v5602[32]) }
          flags = { }
    init mem:
0x8048524:push   esi
    registers:
        ax      = { defs={} expr=v5597[32] }
        cx      = { defs={} expr=v5598[32] }
        dx      = { defs={} expr=v5599[32] }
        bx      = { defs={} expr=v5600[32] }
        sp      = { defs={0x08048520,0x08048523,0x08048524} expr=(add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048520,0x08048521} expr=(add[32] v5601[32] -4[32]) }
        si      = { defs={} expr=v5603[32] }
        di      = { defs={} expr=v5604[32] }
        es      = { defs={} expr=v5605[16] }
        cs      = { defs={} expr=v5606[16] }
        ss      = { defs={} expr=v5607[16] }
        ds      = { defs={} expr=v5608[16] }
        fs      = { defs={} expr=v5609[16] }
        gs      = { defs={} expr=v5610[16] }
        cf      = { defs={} expr=v5611[1] }
        ?1      = { defs={} expr=v5612[1] }
        pf      = { defs={} expr=v5613[1] }
        ?3      = { defs={} expr=v5614[1] }
        af      = { defs={} expr=v5615[1] }
        ?5      = { defs={} expr=v5616[1] }
        zf      = { defs={} expr=v5617[1] }
        sf      = { defs={} expr=v5618[1] }
        tf      = { defs={} expr=v5619[1] }
        if      = { defs={} expr=v5620[1] }
        df      = { defs={} expr=v5621[1] }
        of      = { defs={} expr=v5622[1] }
        iopl0   = { defs={} expr=v5623[1] }
        iopl1   = { defs={} expr=v5624[1] }
        nt      = { defs={} expr=v5625[1] }
        ?15     = { defs={} expr=v5626[1] }
        rf      = { defs={} expr=v5627[1] }
        vm      = { defs={} expr=v5628[1] }
        ac      = { defs={} expr=v5629[1] }
        vif     = { defs={} expr=v5630[1] }
        vip     = { defs={} expr=v5631[1] }
        id      = { defs={} expr=v5632[1] }
        ?22     = { defs={} expr=v5633[1] }
        ?23     = { defs={} expr=v5634[1] }
        ?24     = { defs={} expr=v5635[1] }
        ?25     = { defs={} expr=v5636[1] }
        ?26     = { defs={} expr=v5637[1] }
        ?27     = { defs={} expr=v5638[1] }
        ?28     = { defs={} expr=v5639[1] }
        ?29     = { defs={} expr=v5640[1] }
        ?30     = { defs={} expr=v5641[1] }
        ?31     = { defs={} expr=v5642[1] }
        ip      = { defs={0x08048520,0x08048521,0x08048523,0x08048524} expr=0x08048525[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v5603[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v5603[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v5603[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523,0x08048524} expr=(add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v5603[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v5604[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v5604[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v5604[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523} expr=(add[32] (add[32] v5601[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v5604[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5601[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v5602[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5601[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v5602[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5601[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v5602[32]) }
          flags = { }
        address = { defs={0x08048520} expr=(add[32] v5601[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v5602[32]) }
          flags = { }
    init mem:
0x8048525:push   ebx
    registers:
        ax      = { defs={} expr=v5597[32] }
        cx      = { defs={} expr=v5598[32] }
        dx      = { defs={} expr=v5599[32] }
        bx      = { defs={} expr=v5600[32] }
        sp      = { defs={0x08048520,0x08048523,0x08048524,0x08048525} expr=(add[32] (add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048520,0x08048521} expr=(add[32] v5601[32] -4[32]) }
        si      = { defs={} expr=v5603[32] }
        di      = { defs={} expr=v5604[32] }
        es      = { defs={} expr=v5605[16] }
        cs      = { defs={} expr=v5606[16] }
        ss      = { defs={} expr=v5607[16] }
        ds      = { defs={} expr=v5608[16] }
        fs      = { defs={} expr=v5609[16] }
        gs      = { defs={} expr=v5610[16] }
        cf      = { defs={} expr=v5611[1] }
        ?1      = { defs={} expr=v5612[1] }
        pf      = { defs={} expr=v5613[1] }
        ?3      = { defs={} expr=v5614[1] }
        af      = { defs={} expr=v5615[1] }
        ?5      = { defs={} expr=v5616[1] }
        zf      = { defs={} expr=v5617[1] }
        sf      = { defs={} expr=v5618[1] }
        tf      = { defs={} expr=v5619[1] }
        if      = { defs={} expr=v5620[1] }
        df      = { defs={} expr=v5621[1] }
        of      = { defs={} expr=v5622[1] }
        iopl0   = { defs={} expr=v5623[1] }
        iopl1   = { defs={} expr=v5624[1] }
        nt      = { defs={} expr=v5625[1] }
        ?15     = { defs={} expr=v5626[1] }
        rf      = { defs={} expr=v5627[1] }
        vm      = { defs={} expr=v5628[1] }
        ac      = { defs={} expr=v5629[1] }
        vif     = { defs={} expr=v5630[1] }
        vip     = { defs={} expr=v5631[1] }
        id      = { defs={} expr=v5632[1] }
        ?22     = { defs={} expr=v5633[1] }
        ?23     = { defs={} expr=v5634[1] }
        ?24     = { defs={} expr=v5635[1] }
        ?25     = { defs={} expr=v5636[1] }
        ?26     = { defs={} expr=v5637[1] }
        ?27     = { defs={} expr=v5638[1] }
        ?28     = { defs={} expr=v5639[1] }
        ?29     = { defs={} expr=v5640[1] }
        ?30     = { defs={} expr=v5641[1] }
        ?31     = { defs={} expr=v5642[1] }
        ip      = { defs={0x08048520,0x08048521,0x08048523,0x08048524,0x08048525} expr=0x08048526[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v5600[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v5600[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v5600[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523,0x08048524,0x08048525} expr=(add[32] (add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v5600[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v5603[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v5603[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v5603[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523,0x08048524} expr=(add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v5603[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v5604[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v5604[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v5604[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523} expr=(add[32] (add[32] v5601[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v5604[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5601[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v5602[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5601[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v5602[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5601[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v5602[32]) }
          flags = { }
        address = { defs={0x08048520} expr=(add[32] v5601[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v5602[32]) }
          flags = { }
    init mem:
0x8048526:sub    esp, 0x0c
    registers:
        ax      = { defs={} expr=v5597[32] }
        cx      = { defs={} expr=v5598[32] }
        dx      = { defs={} expr=v5599[32] }
        bx      = { defs={} expr=v5600[32] }
        sp      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) }
        bp      = { defs={0x08048520,0x08048521} expr=(add[32] v5601[32] -4[32]) }
        si      = { defs={} expr=v5603[32] }
        di      = { defs={} expr=v5604[32] }
        es      = { defs={} expr=v5605[16] }
        cs      = { defs={} expr=v5606[16] }
        ss      = { defs={} expr=v5607[16] }
        ds      = { defs={} expr=v5608[16] }
        fs      = { defs={} expr=v5609[16] }
        gs      = { defs={} expr=v5610[16] }
        cf      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        ?1      = { defs={} expr=v5612[1] }
        pf      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))))) }
        ?3      = { defs={} expr=v5614[1] }
        af      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        ?5      = { defs={} expr=v5616[1] }
        zf      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(zerop[1] (add[32] (add[32] (add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])) }
        sf      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])) }
        tf      = { defs={} expr=v5619[1] }
        if      = { defs={} expr=v5620[1] }
        df      = { defs={} expr=v5621[1] }
        of      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        iopl0   = { defs={} expr=v5623[1] }
        iopl1   = { defs={} expr=v5624[1] }
        nt      = { defs={} expr=v5625[1] }
        ?15     = { defs={} expr=v5626[1] }
        rf      = { defs={} expr=v5627[1] }
        vm      = { defs={} expr=v5628[1] }
        ac      = { defs={} expr=v5629[1] }
        vif     = { defs={} expr=v5630[1] }
        vip     = { defs={} expr=v5631[1] }
        id      = { defs={} expr=v5632[1] }
        ?22     = { defs={} expr=v5633[1] }
        ?23     = { defs={} expr=v5634[1] }
        ?24     = { defs={} expr=v5635[1] }
        ?25     = { defs={} expr=v5636[1] }
        ?26     = { defs={} expr=v5637[1] }
        ?27     = { defs={} expr=v5638[1] }
        ?28     = { defs={} expr=v5639[1] }
        ?29     = { defs={} expr=v5640[1] }
        ?30     = { defs={} expr=v5641[1] }
        ?31     = { defs={} expr=v5642[1] }
        ip      = { defs={0x08048520,0x08048521,0x08048523,0x08048524,0x08048525,0x08048526} expr=0x08048529[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v5600[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v5600[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v5600[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523,0x08048524,0x08048525} expr=(add[32] (add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v5600[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v5603[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v5603[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v5603[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523,0x08048524} expr=(add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v5603[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v5604[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v5604[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v5604[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523} expr=(add[32] (add[32] v5601[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v5604[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5601[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v5602[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5601[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v5602[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5601[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v5602[32]) }
          flags = { }
        address = { defs={0x08048520} expr=(add[32] v5601[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v5602[32]) }
          flags = { }
    init mem:
0x8048529:call   0x0804852e<<Insn>>
    registers:
        ax      = { defs={} expr=v5597[32] }
        cx      = { defs={} expr=v5598[32] }
        dx      = { defs={} expr=v5599[32] }
        bx      = { defs={} expr=v5600[32] }
        sp      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526,0x08048529} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) }
        bp      = { defs={0x08048520,0x08048521} expr=(add[32] v5601[32] -4[32]) }
        si      = { defs={} expr=v5603[32] }
        di      = { defs={} expr=v5604[32] }
        es      = { defs={} expr=v5605[16] }
        cs      = { defs={} expr=v5606[16] }
        ss      = { defs={} expr=v5607[16] }
        ds      = { defs={} expr=v5608[16] }
        fs      = { defs={} expr=v5609[16] }
        gs      = { defs={} expr=v5610[16] }
        cf      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        ?1      = { defs={} expr=v5612[1] }
        pf      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))))) }
        ?3      = { defs={} expr=v5614[1] }
        af      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        ?5      = { defs={} expr=v5616[1] }
        zf      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(zerop[1] (add[32] (add[32] (add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])) }
        sf      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])) }
        tf      = { defs={} expr=v5619[1] }
        if      = { defs={} expr=v5620[1] }
        df      = { defs={} expr=v5621[1] }
        of      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        iopl0   = { defs={} expr=v5623[1] }
        iopl1   = { defs={} expr=v5624[1] }
        nt      = { defs={} expr=v5625[1] }
        ?15     = { defs={} expr=v5626[1] }
        rf      = { defs={} expr=v5627[1] }
        vm      = { defs={} expr=v5628[1] }
        ac      = { defs={} expr=v5629[1] }
        vif     = { defs={} expr=v5630[1] }
        vip     = { defs={} expr=v5631[1] }
        id      = { defs={} expr=v5632[1] }
        ?22     = { defs={} expr=v5633[1] }
        ?23     = { defs={} expr=v5634[1] }
        ?24     = { defs={} expr=v5635[1] }
        ?25     = { defs={} expr=v5636[1] }
        ?26     = { defs={} expr=v5637[1] }
        ?27     = { defs={} expr=v5638[1] }
        ?28     = { defs={} expr=v5639[1] }
        ?29     = { defs={} expr=v5640[1] }
        ?30     = { defs={} expr=v5641[1] }
        ?31     = { defs={} expr=v5642[1] }
        ip      = { defs={0x08048529} expr=0x0804852e[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526,0x08048529} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) }
          value = { defs={} expr=46[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v5600[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v5600[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v5600[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523,0x08048524,0x08048525} expr=(add[32] (add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v5600[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v5603[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v5603[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v5603[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523,0x08048524} expr=(add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v5603[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v5604[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v5604[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5601[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v5604[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523} expr=(add[32] (add[32] v5601[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v5604[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5601[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v5602[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5601[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v5602[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5601[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v5602[32]) }
          flags = { }
        address = { defs={0x08048520} expr=(add[32] v5601[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v5602[32]) }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804852e:pop    ebx
    registers:
        ax      = { defs={} expr=v5785[32] }
        cx      = { defs={} expr=v5786[32] }
        dx      = { defs={} expr=v5787[32] }
        bx      = { defs={0x0804852e} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) }
        sp      = { defs={0x0804852e} expr=(add[32] v5789[32] 4[32]) }
        bp      = { defs={} expr=v5790[32] }
        si      = { defs={} expr=v5791[32] }
        di      = { defs={} expr=v5792[32] }
        es      = { defs={} expr=v5793[16] }
        cs      = { defs={} expr=v5794[16] }
        ss      = { defs={} expr=v5795[16] }
        ds      = { defs={} expr=v5796[16] }
        fs      = { defs={} expr=v5797[16] }
        gs      = { defs={} expr=v5798[16] }
        cf      = { defs={} expr=v5799[1] }
        ?1      = { defs={} expr=v5800[1] }
        pf      = { defs={} expr=v5801[1] }
        ?3      = { defs={} expr=v5802[1] }
        af      = { defs={} expr=v5803[1] }
        ?5      = { defs={} expr=v5804[1] }
        zf      = { defs={} expr=v5805[1] }
        sf      = { defs={} expr=v5806[1] }
        tf      = { defs={} expr=v5807[1] }
        if      = { defs={} expr=v5808[1] }
        df      = { defs={} expr=v5809[1] }
        of      = { defs={} expr=v5810[1] }
        iopl0   = { defs={} expr=v5811[1] }
        iopl1   = { defs={} expr=v5812[1] }
        nt      = { defs={} expr=v5813[1] }
        ?15     = { defs={} expr=v5814[1] }
        rf      = { defs={} expr=v5815[1] }
        vm      = { defs={} expr=v5816[1] }
        ac      = { defs={} expr=v5817[1] }
        vif     = { defs={} expr=v5818[1] }
        vip     = { defs={} expr=v5819[1] }
        id      = { defs={} expr=v5820[1] }
        ?22     = { defs={} expr=v5821[1] }
        ?23     = { defs={} expr=v5822[1] }
        ?24     = { defs={} expr=v5823[1] }
        ?25     = { defs={} expr=v5824[1] }
        ?26     = { defs={} expr=v5825[1] }
        ?27     = { defs={} expr=v5826[1] }
        ?28     = { defs={} expr=v5827[1] }
        ?29     = { defs={} expr=v5828[1] }
        ?30     = { defs={} expr=v5829[1] }
        ?31     = { defs={} expr=v5830[1] }
        ip      = { defs={0x0804852e} expr=0x0804852f[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v5789[32] 3[32]) }
          value = { defs={} expr=v5843[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5789[32] 2[32]) }
          value = { defs={} expr=v5842[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5789[32] 1[32]) }
          value = { defs={} expr=v5841[8] }
          flags = { rdonly }
        address = { defs={0x0804852e} expr=v5789[32] }
          value = { defs={} expr=v5840[8] }
          flags = { rdonly }
0x804852f:add    ebx, 0x0000119a
    registers:
        ax      = { defs={} expr=v5785[32] }
        cx      = { defs={} expr=v5786[32] }
        dx      = { defs={} expr=v5787[32] }
        bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) }
        sp      = { defs={0x0804852e} expr=(add[32] v5789[32] 4[32]) }
        bp      = { defs={} expr=v5790[32] }
        si      = { defs={} expr=v5791[32] }
        di      = { defs={} expr=v5792[32] }
        es      = { defs={} expr=v5793[16] }
        cs      = { defs={} expr=v5794[16] }
        ss      = { defs={} expr=v5795[16] }
        ds      = { defs={} expr=v5796[16] }
        fs      = { defs={} expr=v5797[16] }
        gs      = { defs={} expr=v5798[16] }
        cf      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8])))) 4506[33]))))) }
        ?1      = { defs={} expr=v5800[1] }
        pf      = { defs={0x0804852e,0x0804852f} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]))))))) }
        ?3      = { defs={} expr=v5802[1] }
        af      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8])))) 4506[33]))))) }
        ?5      = { defs={} expr=v5804[1] }
        zf      = { defs={0x0804852e,0x0804852f} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32])) }
        sf      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32])) }
        tf      = { defs={} expr=v5807[1] }
        if      = { defs={} expr=v5808[1] }
        df      = { defs={} expr=v5809[1] }
        of      = { defs={0x0804852e,0x0804852f} expr=0[1] }
        iopl0   = { defs={} expr=v5811[1] }
        iopl1   = { defs={} expr=v5812[1] }
        nt      = { defs={} expr=v5813[1] }
        ?15     = { defs={} expr=v5814[1] }
        rf      = { defs={} expr=v5815[1] }
        vm      = { defs={} expr=v5816[1] }
        ac      = { defs={} expr=v5817[1] }
        vif     = { defs={} expr=v5818[1] }
        vip     = { defs={} expr=v5819[1] }
        id      = { defs={} expr=v5820[1] }
        ?22     = { defs={} expr=v5821[1] }
        ?23     = { defs={} expr=v5822[1] }
        ?24     = { defs={} expr=v5823[1] }
        ?25     = { defs={} expr=v5824[1] }
        ?26     = { defs={} expr=v5825[1] }
        ?27     = { defs={} expr=v5826[1] }
        ?28     = { defs={} expr=v5827[1] }
        ?29     = { defs={} expr=v5828[1] }
        ?30     = { defs={} expr=v5829[1] }
        ?31     = { defs={} expr=v5830[1] }
        ip      = { defs={0x0804852e,0x0804852f} expr=0x08048535[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v5789[32] 3[32]) }
          value = { defs={} expr=v5843[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5789[32] 2[32]) }
          value = { defs={} expr=v5842[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5789[32] 1[32]) }
          value = { defs={} expr=v5841[8] }
          flags = { rdonly }
        address = { defs={0x0804852e} expr=v5789[32] }
          value = { defs={} expr=v5840[8] }
          flags = { rdonly }
0x8048535:lea    eax, [ebx + 0xffffff20<-0x000000e0>]
    registers:
        ax      = { defs={0x0804852e,0x0804852f,0x08048535} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]) }
        cx      = { defs={} expr=v5786[32] }
        dx      = { defs={} expr=v5787[32] }
        bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) }
        sp      = { defs={0x0804852e} expr=(add[32] v5789[32] 4[32]) }
        bp      = { defs={} expr=v5790[32] }
        si      = { defs={} expr=v5791[32] }
        di      = { defs={} expr=v5792[32] }
        es      = { defs={} expr=v5793[16] }
        cs      = { defs={} expr=v5794[16] }
        ss      = { defs={} expr=v5795[16] }
        ds      = { defs={} expr=v5796[16] }
        fs      = { defs={} expr=v5797[16] }
        gs      = { defs={} expr=v5798[16] }
        cf      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8])))) 4506[33]))))) }
        ?1      = { defs={} expr=v5800[1] }
        pf      = { defs={0x0804852e,0x0804852f} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]))))))) }
        ?3      = { defs={} expr=v5802[1] }
        af      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8])))) 4506[33]))))) }
        ?5      = { defs={} expr=v5804[1] }
        zf      = { defs={0x0804852e,0x0804852f} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32])) }
        sf      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32])) }
        tf      = { defs={} expr=v5807[1] }
        if      = { defs={} expr=v5808[1] }
        df      = { defs={} expr=v5809[1] }
        of      = { defs={0x0804852e,0x0804852f} expr=0[1] }
        iopl0   = { defs={} expr=v5811[1] }
        iopl1   = { defs={} expr=v5812[1] }
        nt      = { defs={} expr=v5813[1] }
        ?15     = { defs={} expr=v5814[1] }
        rf      = { defs={} expr=v5815[1] }
        vm      = { defs={} expr=v5816[1] }
        ac      = { defs={} expr=v5817[1] }
        vif     = { defs={} expr=v5818[1] }
        vip     = { defs={} expr=v5819[1] }
        id      = { defs={} expr=v5820[1] }
        ?22     = { defs={} expr=v5821[1] }
        ?23     = { defs={} expr=v5822[1] }
        ?24     = { defs={} expr=v5823[1] }
        ?25     = { defs={} expr=v5824[1] }
        ?26     = { defs={} expr=v5825[1] }
        ?27     = { defs={} expr=v5826[1] }
        ?28     = { defs={} expr=v5827[1] }
        ?29     = { defs={} expr=v5828[1] }
        ?30     = { defs={} expr=v5829[1] }
        ?31     = { defs={} expr=v5830[1] }
        ip      = { defs={0x0804852e,0x0804852f,0x08048535} expr=0x0804853b[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v5789[32] 3[32]) }
          value = { defs={} expr=v5843[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5789[32] 2[32]) }
          value = { defs={} expr=v5842[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5789[32] 1[32]) }
          value = { defs={} expr=v5841[8] }
          flags = { rdonly }
        address = { defs={0x0804852e} expr=v5789[32] }
          value = { defs={} expr=v5840[8] }
          flags = { rdonly }
0x804853b:lea    edx, [ebx + 0xffffff20<-0x000000e0>]
    registers:
        ax      = { defs={0x0804852e,0x0804852f,0x08048535} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]) }
        cx      = { defs={} expr=v5786[32] }
        dx      = { defs={0x0804852e,0x0804852f,0x0804853b} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]) }
        bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) }
        sp      = { defs={0x0804852e} expr=(add[32] v5789[32] 4[32]) }
        bp      = { defs={} expr=v5790[32] }
        si      = { defs={} expr=v5791[32] }
        di      = { defs={} expr=v5792[32] }
        es      = { defs={} expr=v5793[16] }
        cs      = { defs={} expr=v5794[16] }
        ss      = { defs={} expr=v5795[16] }
        ds      = { defs={} expr=v5796[16] }
        fs      = { defs={} expr=v5797[16] }
        gs      = { defs={} expr=v5798[16] }
        cf      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8])))) 4506[33]))))) }
        ?1      = { defs={} expr=v5800[1] }
        pf      = { defs={0x0804852e,0x0804852f} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]))))))) }
        ?3      = { defs={} expr=v5802[1] }
        af      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8])))) 4506[33]))))) }
        ?5      = { defs={} expr=v5804[1] }
        zf      = { defs={0x0804852e,0x0804852f} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32])) }
        sf      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32])) }
        tf      = { defs={} expr=v5807[1] }
        if      = { defs={} expr=v5808[1] }
        df      = { defs={} expr=v5809[1] }
        of      = { defs={0x0804852e,0x0804852f} expr=0[1] }
        iopl0   = { defs={} expr=v5811[1] }
        iopl1   = { defs={} expr=v5812[1] }
        nt      = { defs={} expr=v5813[1] }
        ?15     = { defs={} expr=v5814[1] }
        rf      = { defs={} expr=v5815[1] }
        vm      = { defs={} expr=v5816[1] }
        ac      = { defs={} expr=v5817[1] }
        vif     = { defs={} expr=v5818[1] }
        vip     = { defs={} expr=v5819[1] }
        id      = { defs={} expr=v5820[1] }
        ?22     = { defs={} expr=v5821[1] }
        ?23     = { defs={} expr=v5822[1] }
        ?24     = { defs={} expr=v5823[1] }
        ?25     = { defs={} expr=v5824[1] }
        ?26     = { defs={} expr=v5825[1] }
        ?27     = { defs={} expr=v5826[1] }
        ?28     = { defs={} expr=v5827[1] }
        ?29     = { defs={} expr=v5828[1] }
        ?30     = { defs={} expr=v5829[1] }
        ?31     = { defs={} expr=v5830[1] }
        ip      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b} expr=0x08048541[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v5789[32] 3[32]) }
          value = { defs={} expr=v5843[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5789[32] 2[32]) }
          value = { defs={} expr=v5842[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5789[32] 1[32]) }
          value = { defs={} expr=v5841[8] }
          flags = { rdonly }
        address = { defs={0x0804852e} expr=v5789[32] }
          value = { defs={} expr=v5840[8] }
          flags = { rdonly }
0x8048541:sub    eax, edx
    registers:
        ax      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32])) 1[32])) }
        cx      = { defs={} expr=v5786[32] }
        dx      = { defs={0x0804852e,0x0804852f,0x0804853b} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]) }
        bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) }
        sp      = { defs={0x0804852e} expr=(add[32] v5789[32] 4[32]) }
        bp      = { defs={} expr=v5790[32] }
        si      = { defs={} expr=v5791[32] }
        di      = { defs={} expr=v5792[32] }
        es      = { defs={} expr=v5793[16] }
        cs      = { defs={} expr=v5794[16] }
        ss      = { defs={} expr=v5795[16] }
        ds      = { defs={} expr=v5796[16] }
        fs      = { defs={} expr=v5797[16] }
        gs      = { defs={} expr=v5798[16] }
        cf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]))) (add[33] (uextend[33] 33[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]))) 1[33]))))))) }
        ?1      = { defs={} expr=v5800[1] }
        pf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541} expr=1[1] }
        ?3      = { defs={} expr=v5802[1] }
        af      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]))) (add[33] (uextend[33] 33[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]))) 1[33]))))))) }
        ?5      = { defs={} expr=v5804[1] }
        zf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541} expr=(zerop[1] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32])) 1[32]))) }
        sf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32])) 1[32]))) }
        tf      = { defs={} expr=v5807[1] }
        if      = { defs={} expr=v5808[1] }
        df      = { defs={} expr=v5809[1] }
        of      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541} expr=0[1] }
        iopl0   = { defs={} expr=v5811[1] }
        iopl1   = { defs={} expr=v5812[1] }
        nt      = { defs={} expr=v5813[1] }
        ?15     = { defs={} expr=v5814[1] }
        rf      = { defs={} expr=v5815[1] }
        vm      = { defs={} expr=v5816[1] }
        ac      = { defs={} expr=v5817[1] }
        vif     = { defs={} expr=v5818[1] }
        vip     = { defs={} expr=v5819[1] }
        id      = { defs={} expr=v5820[1] }
        ?22     = { defs={} expr=v5821[1] }
        ?23     = { defs={} expr=v5822[1] }
        ?24     = { defs={} expr=v5823[1] }
        ?25     = { defs={} expr=v5824[1] }
        ?26     = { defs={} expr=v5825[1] }
        ?27     = { defs={} expr=v5826[1] }
        ?28     = { defs={} expr=v5827[1] }
        ?29     = { defs={} expr=v5828[1] }
        ?30     = { defs={} expr=v5829[1] }
        ?31     = { defs={} expr=v5830[1] }
        ip      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541} expr=0x08048543[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v5789[32] 3[32]) }
          value = { defs={} expr=v5843[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5789[32] 2[32]) }
          value = { defs={} expr=v5842[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5789[32] 1[32]) }
          value = { defs={} expr=v5841[8] }
          flags = { rdonly }
        address = { defs={0x0804852e} expr=v5789[32] }
          value = { defs={} expr=v5840[8] }
          flags = { rdonly }
0x8048543:sar    eax, 0x02
    registers:
        ax      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32])) 1[32]))) }
        cx      = { defs={} expr=v5786[32] }
        dx      = { defs={0x0804852e,0x0804852f,0x0804853b} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]) }
        bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) }
        sp      = { defs={0x0804852e} expr=(add[32] v5789[32] 4[32]) }
        bp      = { defs={} expr=v5790[32] }
        si      = { defs={} expr=v5791[32] }
        di      = { defs={} expr=v5792[32] }
        es      = { defs={} expr=v5793[16] }
        cs      = { defs={} expr=v5794[16] }
        ss      = { defs={} expr=v5795[16] }
        ds      = { defs={} expr=v5796[16] }
        fs      = { defs={} expr=v5797[16] }
        gs      = { defs={} expr=v5798[16] }
        cf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32])) 1[32])))) }
        ?1      = { defs={} expr=v5800[1] }
        pf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=1[1] }
        ?3      = { defs={} expr=v5802[1] }
        af      = { defs={0x08048543} expr=v5977[1] }
        ?5      = { defs={} expr=v5804[1] }
        zf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(zerop[1] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32])) 1[32])))) }
        sf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32])) 1[32])))) }
        tf      = { defs={} expr=v5807[1] }
        if      = { defs={} expr=v5808[1] }
        df      = { defs={} expr=v5809[1] }
        of      = { defs={0x08048543} expr=v5992[1] }
        iopl0   = { defs={} expr=v5811[1] }
        iopl1   = { defs={} expr=v5812[1] }
        nt      = { defs={} expr=v5813[1] }
        ?15     = { defs={} expr=v5814[1] }
        rf      = { defs={} expr=v5815[1] }
        vm      = { defs={} expr=v5816[1] }
        ac      = { defs={} expr=v5817[1] }
        vif     = { defs={} expr=v5818[1] }
        vip     = { defs={} expr=v5819[1] }
        id      = { defs={} expr=v5820[1] }
        ?22     = { defs={} expr=v5821[1] }
        ?23     = { defs={} expr=v5822[1] }
        ?24     = { defs={} expr=v5823[1] }
        ?25     = { defs={} expr=v5824[1] }
        ?26     = { defs={} expr=v5825[1] }
        ?27     = { defs={} expr=v5826[1] }
        ?28     = { defs={} expr=v5827[1] }
        ?29     = { defs={} expr=v5828[1] }
        ?30     = { defs={} expr=v5829[1] }
        ?31     = { defs={} expr=v5830[1] }
        ip      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=0x08048546[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v5789[32] 3[32]) }
          value = { defs={} expr=v5843[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5789[32] 2[32]) }
          value = { defs={} expr=v5842[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5789[32] 1[32]) }
          value = { defs={} expr=v5841[8] }
          flags = { rdonly }
        address = { defs={0x0804852e} expr=v5789[32] }
          value = { defs={} expr=v5840[8] }
          flags = { rdonly }
0x8048546:mov    DWORD PTR ss:[ebp + 0xf0<-0x10>], eax
    registers:
        ax      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32])) 1[32]))) }
        cx      = { defs={} expr=v5786[32] }
        dx      = { defs={0x0804852e,0x0804852f,0x0804853b} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]) }
        bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) }
        sp      = { defs={0x0804852e} expr=(add[32] v5789[32] 4[32]) }
        bp      = { defs={} expr=v5790[32] }
        si      = { defs={} expr=v5791[32] }
        di      = { defs={} expr=v5792[32] }
        es      = { defs={} expr=v5793[16] }
        cs      = { defs={} expr=v5794[16] }
        ss      = { defs={} expr=v5795[16] }
        ds      = { defs={} expr=v5796[16] }
        fs      = { defs={} expr=v5797[16] }
        gs      = { defs={} expr=v5798[16] }
        cf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32])) 1[32])))) }
        ?1      = { defs={} expr=v5800[1] }
        pf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=1[1] }
        ?3      = { defs={} expr=v5802[1] }
        af      = { defs={0x08048543} expr=v5977[1] }
        ?5      = { defs={} expr=v5804[1] }
        zf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(zerop[1] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32])) 1[32])))) }
        sf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32])) 1[32])))) }
        tf      = { defs={} expr=v5807[1] }
        if      = { defs={} expr=v5808[1] }
        df      = { defs={} expr=v5809[1] }
        of      = { defs={0x08048543} expr=v5992[1] }
        iopl0   = { defs={} expr=v5811[1] }
        iopl1   = { defs={} expr=v5812[1] }
        nt      = { defs={} expr=v5813[1] }
        ?15     = { defs={} expr=v5814[1] }
        rf      = { defs={} expr=v5815[1] }
        vm      = { defs={} expr=v5816[1] }
        ac      = { defs={} expr=v5817[1] }
        vif     = { defs={} expr=v5818[1] }
        vip     = { defs={} expr=v5819[1] }
        id      = { defs={} expr=v5820[1] }
        ?22     = { defs={} expr=v5821[1] }
        ?23     = { defs={} expr=v5822[1] }
        ?24     = { defs={} expr=v5823[1] }
        ?25     = { defs={} expr=v5824[1] }
        ?26     = { defs={} expr=v5825[1] }
        ?27     = { defs={} expr=v5826[1] }
        ?28     = { defs={} expr=v5827[1] }
        ?29     = { defs={} expr=v5828[1] }
        ?30     = { defs={} expr=v5829[1] }
        ?31     = { defs={} expr=v5830[1] }
        ip      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546} expr=0x08048549[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v5790[32] -16[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5790[32] -16[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5790[32] -16[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={0x08048546} expr=(add[32] v5790[32] -16[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v5789[32] 3[32]) }
          value = { defs={} expr=v5843[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5789[32] 2[32]) }
          value = { defs={} expr=v5842[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5789[32] 1[32]) }
          value = { defs={} expr=v5841[8] }
          flags = { rdonly }
        address = { defs={0x0804852e} expr=v5789[32] }
          value = { defs={} expr=v5840[8] }
          flags = { rdonly }
0x8048549:dec    eax
    registers:
        ax      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=(add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) }
        cx      = { defs={} expr=v5786[32] }
        dx      = { defs={0x0804852e,0x0804852f,0x0804853b} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]) }
        bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) }
        sp      = { defs={0x0804852e} expr=(add[32] v5789[32] 4[32]) }
        bp      = { defs={} expr=v5790[32] }
        si      = { defs={} expr=v5791[32] }
        di      = { defs={} expr=v5792[32] }
        es      = { defs={} expr=v5793[16] }
        cs      = { defs={} expr=v5794[16] }
        ss      = { defs={} expr=v5795[16] }
        ds      = { defs={} expr=v5796[16] }
        fs      = { defs={} expr=v5797[16] }
        gs      = { defs={} expr=v5798[16] }
        cf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32])) 1[32])))) }
        ?1      = { defs={} expr=v5800[1] }
        pf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=1[1] }
        ?3      = { defs={} expr=v5802[1] }
        af      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=1[1] }
        ?5      = { defs={} expr=v5804[1] }
        zf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=(zerop[1] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) }
        sf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=(extract[1] 31[32] 32[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) }
        tf      = { defs={} expr=v5807[1] }
        if      = { defs={} expr=v5808[1] }
        df      = { defs={} expr=v5809[1] }
        of      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=0[1] }
        iopl0   = { defs={} expr=v5811[1] }
        iopl1   = { defs={} expr=v5812[1] }
        nt      = { defs={} expr=v5813[1] }
        ?15     = { defs={} expr=v5814[1] }
        rf      = { defs={} expr=v5815[1] }
        vm      = { defs={} expr=v5816[1] }
        ac      = { defs={} expr=v5817[1] }
        vif     = { defs={} expr=v5818[1] }
        vip     = { defs={} expr=v5819[1] }
        id      = { defs={} expr=v5820[1] }
        ?22     = { defs={} expr=v5821[1] }
        ?23     = { defs={} expr=v5822[1] }
        ?24     = { defs={} expr=v5823[1] }
        ?25     = { defs={} expr=v5824[1] }
        ?26     = { defs={} expr=v5825[1] }
        ?27     = { defs={} expr=v5826[1] }
        ?28     = { defs={} expr=v5827[1] }
        ?29     = { defs={} expr=v5828[1] }
        ?30     = { defs={} expr=v5829[1] }
        ?31     = { defs={} expr=v5830[1] }
        ip      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546,0x08048549} expr=0x0804854a[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v5790[32] -16[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5790[32] -16[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5790[32] -16[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={0x08048546} expr=(add[32] v5790[32] -16[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v5789[32] 3[32]) }
          value = { defs={} expr=v5843[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5789[32] 2[32]) }
          value = { defs={} expr=v5842[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5789[32] 1[32]) }
          value = { defs={} expr=v5841[8] }
          flags = { rdonly }
        address = { defs={0x0804852e} expr=v5789[32] }
          value = { defs={} expr=v5840[8] }
          flags = { rdonly }
0x804854a:cmp    eax, 0xff<-0x01>
    registers:
        ax      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=(add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) }
        cx      = { defs={} expr=v5786[32] }
        dx      = { defs={0x0804852e,0x0804852f,0x0804853b} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]) }
        bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) }
        sp      = { defs={0x0804852e} expr=(add[32] v5789[32] 4[32]) }
        bp      = { defs={} expr=v5790[32] }
        si      = { defs={} expr=v5791[32] }
        di      = { defs={} expr=v5792[32] }
        es      = { defs={} expr=v5793[16] }
        cs      = { defs={} expr=v5794[16] }
        ss      = { defs={} expr=v5795[16] }
        ds      = { defs={} expr=v5796[16] }
        fs      = { defs={} expr=v5797[16] }
        gs      = { defs={} expr=v5798[16] }
        cf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33])))))) }
        ?1      = { defs={} expr=v5800[1] }
        pf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=1[1] }
        ?3      = { defs={} expr=v5802[1] }
        af      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33])))))) }
        ?5      = { defs={} expr=v5804[1] }
        zf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(zerop[1] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])) }
        sf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])) }
        tf      = { defs={} expr=v5807[1] }
        if      = { defs={} expr=v5808[1] }
        df      = { defs={} expr=v5809[1] }
        of      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=0[1] }
        iopl0   = { defs={} expr=v5811[1] }
        iopl1   = { defs={} expr=v5812[1] }
        nt      = { defs={} expr=v5813[1] }
        ?15     = { defs={} expr=v5814[1] }
        rf      = { defs={} expr=v5815[1] }
        vm      = { defs={} expr=v5816[1] }
        ac      = { defs={} expr=v5817[1] }
        vif     = { defs={} expr=v5818[1] }
        vip     = { defs={} expr=v5819[1] }
        id      = { defs={} expr=v5820[1] }
        ?22     = { defs={} expr=v5821[1] }
        ?23     = { defs={} expr=v5822[1] }
        ?24     = { defs={} expr=v5823[1] }
        ?25     = { defs={} expr=v5824[1] }
        ?26     = { defs={} expr=v5825[1] }
        ?27     = { defs={} expr=v5826[1] }
        ?28     = { defs={} expr=v5827[1] }
        ?29     = { defs={} expr=v5828[1] }
        ?30     = { defs={} expr=v5829[1] }
        ?31     = { defs={} expr=v5830[1] }
        ip      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546,0x08048549,0x0804854a} expr=0x0804854d[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v5790[32] -16[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5790[32] -16[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5790[32] -16[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={0x08048546} expr=(add[32] v5790[32] -16[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v5789[32] 3[32]) }
          value = { defs={} expr=v5843[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5789[32] 2[32]) }
          value = { defs={} expr=v5842[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5789[32] 1[32]) }
          value = { defs={} expr=v5841[8] }
          flags = { rdonly }
        address = { defs={0x0804852e} expr=v5789[32] }
          value = { defs={} expr=v5840[8] }
          flags = { rdonly }
0x804854d:je     0x0804856b<<Insn>>
    registers:
        ax      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=(add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) }
        cx      = { defs={} expr=v5786[32] }
        dx      = { defs={0x0804852e,0x0804852f,0x0804853b} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]) }
        bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) }
        sp      = { defs={0x0804852e} expr=(add[32] v5789[32] 4[32]) }
        bp      = { defs={} expr=v5790[32] }
        si      = { defs={} expr=v5791[32] }
        di      = { defs={} expr=v5792[32] }
        es      = { defs={} expr=v5793[16] }
        cs      = { defs={} expr=v5794[16] }
        ss      = { defs={} expr=v5795[16] }
        ds      = { defs={} expr=v5796[16] }
        fs      = { defs={} expr=v5797[16] }
        gs      = { defs={} expr=v5798[16] }
        cf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33])))))) }
        ?1      = { defs={} expr=v5800[1] }
        pf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=1[1] }
        ?3      = { defs={} expr=v5802[1] }
        af      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33])))))) }
        ?5      = { defs={} expr=v5804[1] }
        zf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(zerop[1] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])) }
        sf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])) }
        tf      = { defs={} expr=v5807[1] }
        if      = { defs={} expr=v5808[1] }
        df      = { defs={} expr=v5809[1] }
        of      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=0[1] }
        iopl0   = { defs={} expr=v5811[1] }
        iopl1   = { defs={} expr=v5812[1] }
        nt      = { defs={} expr=v5813[1] }
        ?15     = { defs={} expr=v5814[1] }
        rf      = { defs={} expr=v5815[1] }
        vm      = { defs={} expr=v5816[1] }
        ac      = { defs={} expr=v5817[1] }
        vif     = { defs={} expr=v5818[1] }
        vip     = { defs={} expr=v5819[1] }
        id      = { defs={} expr=v5820[1] }
        ?22     = { defs={} expr=v5821[1] }
        ?23     = { defs={} expr=v5822[1] }
        ?24     = { defs={} expr=v5823[1] }
        ?25     = { defs={} expr=v5824[1] }
        ?26     = { defs={} expr=v5825[1] }
        ?27     = { defs={} expr=v5826[1] }
        ?28     = { defs={} expr=v5827[1] }
        ?29     = { defs={} expr=v5828[1] }
        ?30     = { defs={} expr=v5829[1] }
        ?31     = { defs={} expr=v5830[1] }
        ip      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a,0x0804854d} expr=0x0804856b[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v5790[32] -16[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5790[32] -16[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5790[32] -16[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={0x08048546} expr=(add[32] v5790[32] -16[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v5789[32] 3[32]) }
          value = { defs={} expr=v5843[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5789[32] 2[32]) }
          value = { defs={} expr=v5842[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5789[32] 1[32]) }
          value = { defs={} expr=v5841[8] }
          flags = { rdonly }
        address = { defs={0x0804852e} expr=v5789[32] }
          value = { defs={} expr=v5840[8] }
          flags = { rdonly }
0x804856b:call   0x080485b0<_fini>
    registers:
        ax      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=(add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) }
        cx      = { defs={} expr=v5786[32] }
        dx      = { defs={0x0804852e,0x0804852f,0x0804853b} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]) }
        bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) }
        sp      = { defs={0x0804852e,0x0804856b} expr=(add[32] (add[32] v5789[32] 4[32]) -4[32]) }
        bp      = { defs={} expr=v5790[32] }
        si      = { defs={} expr=v5791[32] }
        di      = { defs={} expr=v5792[32] }
        es      = { defs={} expr=v5793[16] }
        cs      = { defs={} expr=v5794[16] }
        ss      = { defs={} expr=v5795[16] }
        ds      = { defs={} expr=v5796[16] }
        fs      = { defs={} expr=v5797[16] }
        gs      = { defs={} expr=v5798[16] }
        cf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33])))))) }
        ?1      = { defs={} expr=v5800[1] }
        pf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=1[1] }
        ?3      = { defs={} expr=v5802[1] }
        af      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33])))))) }
        ?5      = { defs={} expr=v5804[1] }
        zf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(zerop[1] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])) }
        sf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])) }
        tf      = { defs={} expr=v5807[1] }
        if      = { defs={} expr=v5808[1] }
        df      = { defs={} expr=v5809[1] }
        of      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=0[1] }
        iopl0   = { defs={} expr=v5811[1] }
        iopl1   = { defs={} expr=v5812[1] }
        nt      = { defs={} expr=v5813[1] }
        ?15     = { defs={} expr=v5814[1] }
        rf      = { defs={} expr=v5815[1] }
        vm      = { defs={} expr=v5816[1] }
        ac      = { defs={} expr=v5817[1] }
        vif     = { defs={} expr=v5818[1] }
        vip     = { defs={} expr=v5819[1] }
        id      = { defs={} expr=v5820[1] }
        ?22     = { defs={} expr=v5821[1] }
        ?23     = { defs={} expr=v5822[1] }
        ?24     = { defs={} expr=v5823[1] }
        ?25     = { defs={} expr=v5824[1] }
        ?26     = { defs={} expr=v5825[1] }
        ?27     = { defs={} expr=v5826[1] }
        ?28     = { defs={} expr=v5827[1] }
        ?29     = { defs={} expr=v5828[1] }
        ?30     = { defs={} expr=v5829[1] }
        ?31     = { defs={} expr=v5830[1] }
        ip      = { defs={0x0804856b} expr=0x080485b0[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v5789[32] 4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5789[32] 4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5789[32] 4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x0804852e,0x0804856b} expr=(add[32] (add[32] v5789[32] 4[32]) -4[32]) }
          value = { defs={} expr=112[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5790[32] -16[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5790[32] -16[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5790[32] -16[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={0x08048546} expr=(add[32] v5790[32] -16[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5840[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5841[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5842[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5843[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v5789[32] 3[32]) }
          value = { defs={} expr=v5843[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5789[32] 2[32]) }
          value = { defs={} expr=v5842[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5789[32] 1[32]) }
          value = { defs={} expr=v5841[8] }
          flags = { rdonly }
        address = { defs={0x0804852e} expr=v5789[32] }
          value = { defs={} expr=v5840[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804854f:lea    esi, [edx + eax*0x04]
    registers:
        ax      = { defs={} expr=v6196[32] }
        cx      = { defs={} expr=v6197[32] }
        dx      = { defs={} expr=v6198[32] }
        bx      = { defs={} expr=v6199[32] }
        sp      = { defs={} expr=v6200[32] }
        bp      = { defs={} expr=v6201[32] }
        si      = { defs={0x0804854f} expr=(add[32] v6198[32] (extract[32] 0[32] 32[32] (umul[40] v6196[32] 4[8]))) }
        di      = { defs={} expr=v6203[32] }
        es      = { defs={} expr=v6204[16] }
        cs      = { defs={} expr=v6205[16] }
        ss      = { defs={} expr=v6206[16] }
        ds      = { defs={} expr=v6207[16] }
        fs      = { defs={} expr=v6208[16] }
        gs      = { defs={} expr=v6209[16] }
        cf      = { defs={} expr=v6210[1] }
        ?1      = { defs={} expr=v6211[1] }
        pf      = { defs={} expr=v6212[1] }
        ?3      = { defs={} expr=v6213[1] }
        af      = { defs={} expr=v6214[1] }
        ?5      = { defs={} expr=v6215[1] }
        zf      = { defs={} expr=v6216[1] }
        sf      = { defs={} expr=v6217[1] }
        tf      = { defs={} expr=v6218[1] }
        if      = { defs={} expr=v6219[1] }
        df      = { defs={} expr=v6220[1] }
        of      = { defs={} expr=v6221[1] }
        iopl0   = { defs={} expr=v6222[1] }
        iopl1   = { defs={} expr=v6223[1] }
        nt      = { defs={} expr=v6224[1] }
        ?15     = { defs={} expr=v6225[1] }
        rf      = { defs={} expr=v6226[1] }
        vm      = { defs={} expr=v6227[1] }
        ac      = { defs={} expr=v6228[1] }
        vif     = { defs={} expr=v6229[1] }
        vip     = { defs={} expr=v6230[1] }
        id      = { defs={} expr=v6231[1] }
        ?22     = { defs={} expr=v6232[1] }
        ?23     = { defs={} expr=v6233[1] }
        ?24     = { defs={} expr=v6234[1] }
        ?25     = { defs={} expr=v6235[1] }
        ?26     = { defs={} expr=v6236[1] }
        ?27     = { defs={} expr=v6237[1] }
        ?28     = { defs={} expr=v6238[1] }
        ?29     = { defs={} expr=v6239[1] }
        ?30     = { defs={} expr=v6240[1] }
        ?31     = { defs={} expr=v6241[1] }
        ip      = { defs={0x0804854f} expr=0x08048552[32] }
    memory:
    init mem:
0x8048552:xor    edi, edi
    registers:
        ax      = { defs={} expr=v6196[32] }
        cx      = { defs={} expr=v6197[32] }
        dx      = { defs={} expr=v6198[32] }
        bx      = { defs={} expr=v6199[32] }
        sp      = { defs={} expr=v6200[32] }
        bp      = { defs={} expr=v6201[32] }
        si      = { defs={0x0804854f} expr=(add[32] v6198[32] (extract[32] 0[32] 32[32] (umul[40] v6196[32] 4[8]))) }
        di      = { defs={0x08048552} expr=0[32] }
        es      = { defs={} expr=v6204[16] }
        cs      = { defs={} expr=v6205[16] }
        ss      = { defs={} expr=v6206[16] }
        ds      = { defs={} expr=v6207[16] }
        fs      = { defs={} expr=v6208[16] }
        gs      = { defs={} expr=v6209[16] }
        cf      = { defs={0x08048552} expr=0[1] }
        ?1      = { defs={} expr=v6211[1] }
        pf      = { defs={0x08048552} expr=1[1] }
        ?3      = { defs={} expr=v6213[1] }
        af      = { defs={0x08048552} expr=v6285[1] }
        ?5      = { defs={} expr=v6215[1] }
        zf      = { defs={0x08048552} expr=1[1] }
        sf      = { defs={0x08048552} expr=0[1] }
        tf      = { defs={} expr=v6218[1] }
        if      = { defs={} expr=v6219[1] }
        df      = { defs={} expr=v6220[1] }
        of      = { defs={0x08048552} expr=0[1] }
        iopl0   = { defs={} expr=v6222[1] }
        iopl1   = { defs={} expr=v6223[1] }
        nt      = { defs={} expr=v6224[1] }
        ?15     = { defs={} expr=v6225[1] }
        rf      = { defs={} expr=v6226[1] }
        vm      = { defs={} expr=v6227[1] }
        ac      = { defs={} expr=v6228[1] }
        vif     = { defs={} expr=v6229[1] }
        vip     = { defs={} expr=v6230[1] }
        id      = { defs={} expr=v6231[1] }
        ?22     = { defs={} expr=v6232[1] }
        ?23     = { defs={} expr=v6233[1] }
        ?24     = { defs={} expr=v6234[1] }
        ?25     = { defs={} expr=v6235[1] }
        ?26     = { defs={} expr=v6236[1] }
        ?27     = { defs={} expr=v6237[1] }
        ?28     = { defs={} expr=v6238[1] }
        ?29     = { defs={} expr=v6239[1] }
        ?30     = { defs={} expr=v6240[1] }
        ?31     = { defs={} expr=v6241[1] }
        ip      = { defs={0x0804854f,0x08048552} expr=0x08048554[32] }
    memory:
    init mem:
0x8048554:lea    esi, [esi + 0x00000000]
    registers:
        ax      = { defs={} expr=v6196[32] }
        cx      = { defs={} expr=v6197[32] }
        dx      = { defs={} expr=v6198[32] }
        bx      = { defs={} expr=v6199[32] }
        sp      = { defs={} expr=v6200[32] }
        bp      = { defs={} expr=v6201[32] }
        si      = { defs={0x0804854f,0x08048554} expr=(add[32] v6198[32] (extract[32] 0[32] 32[32] (umul[40] v6196[32] 4[8]))) }
        di      = { defs={0x08048552} expr=0[32] }
        es      = { defs={} expr=v6204[16] }
        cs      = { defs={} expr=v6205[16] }
        ss      = { defs={} expr=v6206[16] }
        ds      = { defs={} expr=v6207[16] }
        fs      = { defs={} expr=v6208[16] }
        gs      = { defs={} expr=v6209[16] }
        cf      = { defs={0x08048552} expr=0[1] }
        ?1      = { defs={} expr=v6211[1] }
        pf      = { defs={0x08048552} expr=1[1] }
        ?3      = { defs={} expr=v6213[1] }
        af      = { defs={0x08048552} expr=v6285[1] }
        ?5      = { defs={} expr=v6215[1] }
        zf      = { defs={0x08048552} expr=1[1] }
        sf      = { defs={0x08048552} expr=0[1] }
        tf      = { defs={} expr=v6218[1] }
        if      = { defs={} expr=v6219[1] }
        df      = { defs={} expr=v6220[1] }
        of      = { defs={0x08048552} expr=0[1] }
        iopl0   = { defs={} expr=v6222[1] }
        iopl1   = { defs={} expr=v6223[1] }
        nt      = { defs={} expr=v6224[1] }
        ?15     = { defs={} expr=v6225[1] }
        rf      = { defs={} expr=v6226[1] }
        vm      = { defs={} expr=v6227[1] }
        ac      = { defs={} expr=v6228[1] }
        vif     = { defs={} expr=v6229[1] }
        vip     = { defs={} expr=v6230[1] }
        id      = { defs={} expr=v6231[1] }
        ?22     = { defs={} expr=v6232[1] }
        ?23     = { defs={} expr=v6233[1] }
        ?24     = { defs={} expr=v6234[1] }
        ?25     = { defs={} expr=v6235[1] }
        ?26     = { defs={} expr=v6236[1] }
        ?27     = { defs={} expr=v6237[1] }
        ?28     = { defs={} expr=v6238[1] }
        ?29     = { defs={} expr=v6239[1] }
        ?30     = { defs={} expr=v6240[1] }
        ?31     = { defs={} expr=v6241[1] }
        ip      = { defs={0x0804854f,0x08048552,0x08048554} expr=0x0804855a[32] }
    memory:
    init mem:
0x804855a:lea    edi, [edi + 0x00000000]
    registers:
        ax      = { defs={} expr=v6196[32] }
        cx      = { defs={} expr=v6197[32] }
        dx      = { defs={} expr=v6198[32] }
        bx      = { defs={} expr=v6199[32] }
        sp      = { defs={} expr=v6200[32] }
        bp      = { defs={} expr=v6201[32] }
        si      = { defs={0x0804854f,0x08048554} expr=(add[32] v6198[32] (extract[32] 0[32] 32[32] (umul[40] v6196[32] 4[8]))) }
        di      = { defs={0x08048552,0x0804855a} expr=0[32] }
        es      = { defs={} expr=v6204[16] }
        cs      = { defs={} expr=v6205[16] }
        ss      = { defs={} expr=v6206[16] }
        ds      = { defs={} expr=v6207[16] }
        fs      = { defs={} expr=v6208[16] }
        gs      = { defs={} expr=v6209[16] }
        cf      = { defs={0x08048552} expr=0[1] }
        ?1      = { defs={} expr=v6211[1] }
        pf      = { defs={0x08048552} expr=1[1] }
        ?3      = { defs={} expr=v6213[1] }
        af      = { defs={0x08048552} expr=v6285[1] }
        ?5      = { defs={} expr=v6215[1] }
        zf      = { defs={0x08048552} expr=1[1] }
        sf      = { defs={0x08048552} expr=0[1] }
        tf      = { defs={} expr=v6218[1] }
        if      = { defs={} expr=v6219[1] }
        df      = { defs={} expr=v6220[1] }
        of      = { defs={0x08048552} expr=0[1] }
        iopl0   = { defs={} expr=v6222[1] }
        iopl1   = { defs={} expr=v6223[1] }
        nt      = { defs={} expr=v6224[1] }
        ?15     = { defs={} expr=v6225[1] }
        rf      = { defs={} expr=v6226[1] }
        vm      = { defs={} expr=v6227[1] }
        ac      = { defs={} expr=v6228[1] }
        vif     = { defs={} expr=v6229[1] }
        vip     = { defs={} expr=v6230[1] }
        id      = { defs={} expr=v6231[1] }
        ?22     = { defs={} expr=v6232[1] }
        ?23     = { defs={} expr=v6233[1] }
        ?24     = { defs={} expr=v6234[1] }
        ?25     = { defs={} expr=v6235[1] }
        ?26     = { defs={} expr=v6236[1] }
        ?27     = { defs={} expr=v6237[1] }
        ?28     = { defs={} expr=v6238[1] }
        ?29     = { defs={} expr=v6239[1] }
        ?30     = { defs={} expr=v6240[1] }
        ?31     = { defs={} expr=v6241[1] }
        ip      = { defs={0x0804854f,0x08048552,0x08048554,0x0804855a} expr=0x08048560[32] }
    memory:
    init mem:
0x8048560:call   DWORD PTR ds:[esi]
    registers:
        ax      = { defs={} expr=v6196[32] }
        cx      = { defs={} expr=v6197[32] }
        dx      = { defs={} expr=v6198[32] }
        bx      = { defs={} expr=v6199[32] }
        sp      = { defs={0x08048560} expr=(add[32] v6200[32] -4[32]) }
        bp      = { defs={} expr=v6201[32] }
        si      = { defs={0x0804854f,0x08048554} expr=(add[32] v6198[32] (extract[32] 0[32] 32[32] (umul[40] v6196[32] 4[8]))) }
        di      = { defs={0x08048552,0x0804855a} expr=0[32] }
        es      = { defs={} expr=v6204[16] }
        cs      = { defs={} expr=v6205[16] }
        ss      = { defs={} expr=v6206[16] }
        ds      = { defs={} expr=v6207[16] }
        fs      = { defs={} expr=v6208[16] }
        gs      = { defs={} expr=v6209[16] }
        cf      = { defs={0x08048552} expr=0[1] }
        ?1      = { defs={} expr=v6211[1] }
        pf      = { defs={0x08048552} expr=1[1] }
        ?3      = { defs={} expr=v6213[1] }
        af      = { defs={0x08048552} expr=v6285[1] }
        ?5      = { defs={} expr=v6215[1] }
        zf      = { defs={0x08048552} expr=1[1] }
        sf      = { defs={0x08048552} expr=0[1] }
        tf      = { defs={} expr=v6218[1] }
        if      = { defs={} expr=v6219[1] }
        df      = { defs={} expr=v6220[1] }
        of      = { defs={0x08048552} expr=0[1] }
        iopl0   = { defs={} expr=v6222[1] }
        iopl1   = { defs={} expr=v6223[1] }
        nt      = { defs={} expr=v6224[1] }
        ?15     = { defs={} expr=v6225[1] }
        rf      = { defs={} expr=v6226[1] }
        vm      = { defs={} expr=v6227[1] }
        ac      = { defs={} expr=v6228[1] }
        vif     = { defs={} expr=v6229[1] }
        vip     = { defs={} expr=v6230[1] }
        id      = { defs={} expr=v6231[1] }
        ?22     = { defs={} expr=v6232[1] }
        ?23     = { defs={} expr=v6233[1] }
        ?24     = { defs={} expr=v6234[1] }
        ?25     = { defs={} expr=v6235[1] }
        ?26     = { defs={} expr=v6236[1] }
        ?27     = { defs={} expr=v6237[1] }
        ?28     = { defs={} expr=v6238[1] }
        ?29     = { defs={} expr=v6239[1] }
        ?30     = { defs={} expr=v6240[1] }
        ?31     = { defs={} expr=v6241[1] }
        ip      = { defs={0x08048560} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6310[8] (add[32] (add[32] v6200[32] -4[32]) 3[32]) 8[8]) (add[32] (add[32] v6200[32] -4[32]) 2[32]) 4[8]) (add[32] (add[32] v6200[32] -4[32]) 1[32]) -123[8]) (add[32] v6200[32] -4[32]) 98[8]) (add[32] v6198[32] (extract[32] 0[32] 32[32] (umul[40] v6196[32] 4[8]))) v6309[8]) (add[32] v6198[32] (extract[32] 0[32] 32[32] (umul[40] v6196[32] 4[8]))))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6312[8] (add[32] (add[32] v6200[32] -4[32]) 3[32]) 8[8]) (add[32] (add[32] v6200[32] -4[32]) 2[32]) 4[8]) (add[32] (add[32] v6200[32] -4[32]) 1[32]) -123[8]) (add[32] v6200[32] -4[32]) 98[8]) (add[32] (add[32] v6198[32] (extract[32] 0[32] 32[32] (umul[40] v6196[32] 4[8]))) 1[32]) v6311[8]) (add[32] (add[32] v6198[32] (extract[32] 0[32] 32[32] (umul[40] v6196[32] 4[8]))) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6314[8] (add[32] (add[32] v6200[32] -4[32]) 3[32]) 8[8]) (add[32] (add[32] v6200[32] -4[32]) 2[32]) 4[8]) (add[32] (add[32] v6200[32] -4[32]) 1[32]) -123[8]) (add[32] v6200[32] -4[32]) 98[8]) (add[32] (add[32] v6198[32] (extract[32] 0[32] 32[32] (umul[40] v6196[32] 4[8]))) 2[32]) v6313[8]) (add[32] (add[32] v6198[32] (extract[32] 0[32] 32[32] (umul[40] v6196[32] 4[8]))) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6316[8] (add[32] (add[32] v6200[32] -4[32]) 3[32]) 8[8]) (add[32] (add[32] v6200[32] -4[32]) 2[32]) 4[8]) (add[32] (add[32] v6200[32] -4[32]) 1[32]) -123[8]) (add[32] v6200[32] -4[32]) 98[8]) (add[32] (add[32] v6198[32] (extract[32] 0[32] 32[32] (umul[40] v6196[32] 4[8]))) 3[32]) v6315[8]) (add[32] (add[32] v6198[32] (extract[32] 0[32] 32[32] (umul[40] v6196[32] 4[8]))) 3[32]))))) }
    memory:
        address = { defs={} expr=(add[32] (add[32] v6200[32] -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v6200[32] -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v6200[32] -4[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x08048560} expr=(add[32] v6200[32] -4[32]) }
          value = { defs={} expr=98[8] }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] (add[32] v6198[32] (extract[32] 0[32] 32[32] (umul[40] v6196[32] 4[8]))) 3[32]) }
          value = { defs={} expr=v6315[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v6198[32] (extract[32] 0[32] 32[32] (umul[40] v6196[32] 4[8]))) 2[32]) }
          value = { defs={} expr=v6313[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v6198[32] (extract[32] 0[32] 32[32] (umul[40] v6196[32] 4[8]))) 1[32]) }
          value = { defs={} expr=v6311[8] }
          flags = { rdonly }
        address = { defs={0x0804854f,0x08048554,0x08048560} expr=(add[32] v6198[32] (extract[32] 0[32] 32[32] (umul[40] v6196[32] 4[8]))) }
          value = { defs={} expr=v6309[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048562:inc    edi
    registers:
        ax      = { defs={} expr=v6371[32] }
        cx      = { defs={} expr=v6372[32] }
        dx      = { defs={} expr=v6373[32] }
        bx      = { defs={} expr=v6374[32] }
        sp      = { defs={} expr=v6375[32] }
        bp      = { defs={} expr=v6376[32] }
        si      = { defs={} expr=v6377[32] }
        di      = { defs={0x08048562} expr=(add[32] v6378[32] 1[32]) }
        es      = { defs={} expr=v6379[16] }
        cs      = { defs={} expr=v6380[16] }
        ss      = { defs={} expr=v6381[16] }
        ds      = { defs={} expr=v6382[16] }
        fs      = { defs={} expr=v6383[16] }
        gs      = { defs={} expr=v6384[16] }
        cf      = { defs={} expr=v6385[1] }
        ?1      = { defs={} expr=v6386[1] }
        pf      = { defs={0x08048562} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v6378[32] 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v6378[32] 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v6378[32] 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v6378[32] 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v6378[32] 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v6378[32] 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v6378[32] 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v6378[32] 1[32]))))))) }
        ?3      = { defs={} expr=v6388[1] }
        af      = { defs={0x08048562} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6378[32]) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] v6378[32]) 1[33]))))) }
        ?5      = { defs={} expr=v6390[1] }
        zf      = { defs={0x08048562} expr=(zerop[1] (add[32] v6378[32] 1[32])) }
        sf      = { defs={0x08048562} expr=(extract[1] 31[32] 32[32] (add[32] v6378[32] 1[32])) }
        tf      = { defs={} expr=v6393[1] }
        if      = { defs={} expr=v6394[1] }
        df      = { defs={} expr=v6395[1] }
        of      = { defs={0x08048562} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6378[32]) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] v6378[32]) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6378[32]) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] v6378[32]) 1[33])))))) }
        iopl0   = { defs={} expr=v6397[1] }
        iopl1   = { defs={} expr=v6398[1] }
        nt      = { defs={} expr=v6399[1] }
        ?15     = { defs={} expr=v6400[1] }
        rf      = { defs={} expr=v6401[1] }
        vm      = { defs={} expr=v6402[1] }
        ac      = { defs={} expr=v6403[1] }
        vif     = { defs={} expr=v6404[1] }
        vip     = { defs={} expr=v6405[1] }
        id      = { defs={} expr=v6406[1] }
        ?22     = { defs={} expr=v6407[1] }
        ?23     = { defs={} expr=v6408[1] }
        ?24     = { defs={} expr=v6409[1] }
        ?25     = { defs={} expr=v6410[1] }
        ?26     = { defs={} expr=v6411[1] }
        ?27     = { defs={} expr=v6412[1] }
        ?28     = { defs={} expr=v6413[1] }
        ?29     = { defs={} expr=v6414[1] }
        ?30     = { defs={} expr=v6415[1] }
        ?31     = { defs={} expr=v6416[1] }
        ip      = { defs={0x08048562} expr=0x08048563[32] }
    memory:
    init mem:
0x8048563:sub    esi, 0x04
    registers:
        ax      = { defs={} expr=v6371[32] }
        cx      = { defs={} expr=v6372[32] }
        dx      = { defs={} expr=v6373[32] }
        bx      = { defs={} expr=v6374[32] }
        sp      = { defs={} expr=v6375[32] }
        bp      = { defs={} expr=v6376[32] }
        si      = { defs={0x08048563} expr=(add[32] v6377[32] -4[32]) }
        di      = { defs={0x08048562} expr=(add[32] v6378[32] 1[32]) }
        es      = { defs={} expr=v6379[16] }
        cs      = { defs={} expr=v6380[16] }
        ss      = { defs={} expr=v6381[16] }
        ds      = { defs={} expr=v6382[16] }
        fs      = { defs={} expr=v6383[16] }
        gs      = { defs={} expr=v6384[16] }
        cf      = { defs={0x08048563} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6377[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v6377[32]) 4294967292[33])))))) }
        ?1      = { defs={} expr=v6386[1] }
        pf      = { defs={0x08048563} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v6377[32] -4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v6377[32] -4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v6377[32] -4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v6377[32] -4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v6377[32] -4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v6377[32] -4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v6377[32] -4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v6377[32] -4[32]))))))) }
        ?3      = { defs={} expr=v6388[1] }
        af      = { defs={0x08048563} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6377[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v6377[32]) 4294967292[33])))))) }
        ?5      = { defs={} expr=v6390[1] }
        zf      = { defs={0x08048563} expr=(zerop[1] (add[32] v6377[32] -4[32])) }
        sf      = { defs={0x08048563} expr=(extract[1] 31[32] 32[32] (add[32] v6377[32] -4[32])) }
        tf      = { defs={} expr=v6393[1] }
        if      = { defs={} expr=v6394[1] }
        df      = { defs={} expr=v6395[1] }
        of      = { defs={0x08048563} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6377[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v6377[32]) 4294967292[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6377[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v6377[32]) 4294967292[33])))))) }
        iopl0   = { defs={} expr=v6397[1] }
        iopl1   = { defs={} expr=v6398[1] }
        nt      = { defs={} expr=v6399[1] }
        ?15     = { defs={} expr=v6400[1] }
        rf      = { defs={} expr=v6401[1] }
        vm      = { defs={} expr=v6402[1] }
        ac      = { defs={} expr=v6403[1] }
        vif     = { defs={} expr=v6404[1] }
        vip     = { defs={} expr=v6405[1] }
        id      = { defs={} expr=v6406[1] }
        ?22     = { defs={} expr=v6407[1] }
        ?23     = { defs={} expr=v6408[1] }
        ?24     = { defs={} expr=v6409[1] }
        ?25     = { defs={} expr=v6410[1] }
        ?26     = { defs={} expr=v6411[1] }
        ?27     = { defs={} expr=v6412[1] }
        ?28     = { defs={} expr=v6413[1] }
        ?29     = { defs={} expr=v6414[1] }
        ?30     = { defs={} expr=v6415[1] }
        ?31     = { defs={} expr=v6416[1] }
        ip      = { defs={0x08048562,0x08048563} expr=0x08048566[32] }
    memory:
    init mem:
0x8048566:cmp    DWORD PTR ss:[ebp + 0xf0<-0x10>], edi
    registers:
        ax      = { defs={} expr=v6371[32] }
        cx      = { defs={} expr=v6372[32] }
        dx      = { defs={} expr=v6373[32] }
        bx      = { defs={} expr=v6374[32] }
        sp      = { defs={} expr=v6375[32] }
        bp      = { defs={} expr=v6376[32] }
        si      = { defs={0x08048563} expr=(add[32] v6377[32] -4[32]) }
        di      = { defs={0x08048562} expr=(add[32] v6378[32] 1[32]) }
        es      = { defs={} expr=v6379[16] }
        cs      = { defs={} expr=v6380[16] }
        ss      = { defs={} expr=v6381[16] }
        ds      = { defs={} expr=v6382[16] }
        fs      = { defs={} expr=v6383[16] }
        gs      = { defs={} expr=v6384[16] }
        cf      = { defs={0x08048562,0x08048566} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6525[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6526[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6527[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6528[8])))) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v6378[32] 1[32]))) (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6525[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6526[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6527[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6528[8])))) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v6378[32] 1[32]))) 1[33]))))))) }
        ?1      = { defs={} expr=v6386[1] }
        pf      = { defs={0x08048562,0x08048566} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6525[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6526[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6527[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6528[8]))) (add[32] (invert[32] (add[32] v6378[32] 1[32])) 1[32])))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6525[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6526[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6527[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6528[8]))) (add[32] (invert[32] (add[32] v6378[32] 1[32])) 1[32]))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6525[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6526[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6527[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6528[8]))) (add[32] (invert[32] (add[32] v6378[32] 1[32])) 1[32])))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6525[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6526[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6527[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6528[8]))) (add[32] (invert[32] (add[32] v6378[32] 1[32])) 1[32])))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6525[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6526[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6527[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6528[8]))) (add[32] (invert[32] (add[32] v6378[32] 1[32])) 1[32])))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6525[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6526[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6527[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6528[8]))) (add[32] (invert[32] (add[32] v6378[32] 1[32])) 1[32]))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6525[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6526[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6527[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6528[8]))) (add[32] (invert[32] (add[32] v6378[32] 1[32])) 1[32])))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6525[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6526[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6527[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6528[8]))) (add[32] (invert[32] (add[32] v6378[32] 1[32])) 1[32])))))))) }
        ?3      = { defs={} expr=v6388[1] }
        af      = { defs={0x08048562,0x08048566} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6525[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6526[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6527[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6528[8])))) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v6378[32] 1[32]))) (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6525[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6526[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6527[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6528[8])))) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v6378[32] 1[32]))) 1[33]))))))) }
        ?5      = { defs={} expr=v6390[1] }
        zf      = { defs={0x08048562,0x08048566} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6525[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6526[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6527[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6528[8]))) (add[32] (invert[32] (add[32] v6378[32] 1[32])) 1[32]))) }
        sf      = { defs={0x08048562,0x08048566} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6525[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6526[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6527[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6528[8]))) (add[32] (invert[32] (add[32] v6378[32] 1[32])) 1[32]))) }
        tf      = { defs={} expr=v6393[1] }
        if      = { defs={} expr=v6394[1] }
        df      = { defs={} expr=v6395[1] }
        of      = { defs={0x08048562,0x08048566} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6525[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6526[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6527[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6528[8])))) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v6378[32] 1[32]))) (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6525[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6526[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6527[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6528[8])))) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v6378[32] 1[32]))) 1[33])))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6525[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6526[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6527[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6528[8])))) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v6378[32] 1[32]))) (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6525[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6526[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6527[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6528[8])))) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v6378[32] 1[32]))) 1[33]))))))) }
        iopl0   = { defs={} expr=v6397[1] }
        iopl1   = { defs={} expr=v6398[1] }
        nt      = { defs={} expr=v6399[1] }
        ?15     = { defs={} expr=v6400[1] }
        rf      = { defs={} expr=v6401[1] }
        vm      = { defs={} expr=v6402[1] }
        ac      = { defs={} expr=v6403[1] }
        vif     = { defs={} expr=v6404[1] }
        vip     = { defs={} expr=v6405[1] }
        id      = { defs={} expr=v6406[1] }
        ?22     = { defs={} expr=v6407[1] }
        ?23     = { defs={} expr=v6408[1] }
        ?24     = { defs={} expr=v6409[1] }
        ?25     = { defs={} expr=v6410[1] }
        ?26     = { defs={} expr=v6411[1] }
        ?27     = { defs={} expr=v6412[1] }
        ?28     = { defs={} expr=v6413[1] }
        ?29     = { defs={} expr=v6414[1] }
        ?30     = { defs={} expr=v6415[1] }
        ?31     = { defs={} expr=v6416[1] }
        ip      = { defs={0x08048562,0x08048563,0x08048566} expr=0x08048569[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v6376[32] -16[32]) 3[32]) }
          value = { defs={} expr=v6528[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v6376[32] -16[32]) 2[32]) }
          value = { defs={} expr=v6527[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v6376[32] -16[32]) 1[32]) }
          value = { defs={} expr=v6526[8] }
          flags = { rdonly }
        address = { defs={0x08048566} expr=(add[32] v6376[32] -16[32]) }
          value = { defs={} expr=v6525[8] }
          flags = { rdonly }
0x8048569:jne    0x08048560<<Insn>>
    registers:
        ax      = { defs={} expr=v6371[32] }
        cx      = { defs={} expr=v6372[32] }
        dx      = { defs={} expr=v6373[32] }
        bx      = { defs={} expr=v6374[32] }
        sp      = { defs={} expr=v6375[32] }
        bp      = { defs={} expr=v6376[32] }
        si      = { defs={0x08048563} expr=(add[32] v6377[32] -4[32]) }
        di      = { defs={0x08048562} expr=(add[32] v6378[32] 1[32]) }
        es      = { defs={} expr=v6379[16] }
        cs      = { defs={} expr=v6380[16] }
        ss      = { defs={} expr=v6381[16] }
        ds      = { defs={} expr=v6382[16] }
        fs      = { defs={} expr=v6383[16] }
        gs      = { defs={} expr=v6384[16] }
        cf      = { defs={0x08048562,0x08048566} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6525[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6526[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6527[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6528[8])))) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v6378[32] 1[32]))) (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6525[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6526[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6527[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6528[8])))) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v6378[32] 1[32]))) 1[33]))))))) }
        ?1      = { defs={} expr=v6386[1] }
        pf      = { defs={0x08048562,0x08048566} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6525[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6526[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6527[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6528[8]))) (add[32] (invert[32] (add[32] v6378[32] 1[32])) 1[32])))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6525[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6526[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6527[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6528[8]))) (add[32] (invert[32] (add[32] v6378[32] 1[32])) 1[32]))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6525[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6526[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6527[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6528[8]))) (add[32] (invert[32] (add[32] v6378[32] 1[32])) 1[32])))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6525[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6526[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6527[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6528[8]))) (add[32] (invert[32] (add[32] v6378[32] 1[32])) 1[32])))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6525[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6526[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6527[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6528[8]))) (add[32] (invert[32] (add[32] v6378[32] 1[32])) 1[32])))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6525[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6526[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6527[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6528[8]))) (add[32] (invert[32] (add[32] v6378[32] 1[32])) 1[32]))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6525[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6526[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6527[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6528[8]))) (add[32] (invert[32] (add[32] v6378[32] 1[32])) 1[32])))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6525[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6526[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6527[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6528[8]))) (add[32] (invert[32] (add[32] v6378[32] 1[32])) 1[32])))))))) }
        ?3      = { defs={} expr=v6388[1] }
        af      = { defs={0x08048562,0x08048566} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6525[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6526[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6527[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6528[8])))) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v6378[32] 1[32]))) (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6525[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6526[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6527[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6528[8])))) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v6378[32] 1[32]))) 1[33]))))))) }
        ?5      = { defs={} expr=v6390[1] }
        zf      = { defs={0x08048562,0x08048566} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6525[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6526[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6527[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6528[8]))) (add[32] (invert[32] (add[32] v6378[32] 1[32])) 1[32]))) }
        sf      = { defs={0x08048562,0x08048566} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6525[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6526[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6527[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6528[8]))) (add[32] (invert[32] (add[32] v6378[32] 1[32])) 1[32]))) }
        tf      = { defs={} expr=v6393[1] }
        if      = { defs={} expr=v6394[1] }
        df      = { defs={} expr=v6395[1] }
        of      = { defs={0x08048562,0x08048566} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6525[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6526[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6527[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6528[8])))) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v6378[32] 1[32]))) (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6525[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6526[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6527[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6528[8])))) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v6378[32] 1[32]))) 1[33])))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6525[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6526[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6527[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6528[8])))) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v6378[32] 1[32]))) (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6525[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6526[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6527[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6528[8])))) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v6378[32] 1[32]))) 1[33]))))))) }
        iopl0   = { defs={} expr=v6397[1] }
        iopl1   = { defs={} expr=v6398[1] }
        nt      = { defs={} expr=v6399[1] }
        ?15     = { defs={} expr=v6400[1] }
        rf      = { defs={} expr=v6401[1] }
        vm      = { defs={} expr=v6402[1] }
        ac      = { defs={} expr=v6403[1] }
        vif     = { defs={} expr=v6404[1] }
        vip     = { defs={} expr=v6405[1] }
        id      = { defs={} expr=v6406[1] }
        ?22     = { defs={} expr=v6407[1] }
        ?23     = { defs={} expr=v6408[1] }
        ?24     = { defs={} expr=v6409[1] }
        ?25     = { defs={} expr=v6410[1] }
        ?26     = { defs={} expr=v6411[1] }
        ?27     = { defs={} expr=v6412[1] }
        ?28     = { defs={} expr=v6413[1] }
        ?29     = { defs={} expr=v6414[1] }
        ?30     = { defs={} expr=v6415[1] }
        ?31     = { defs={} expr=v6416[1] }
        ip      = { defs={0x08048562,0x08048563,0x08048566,0x08048569} expr=(ite[32] (invert[1] (zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6525[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6526[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6527[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6528[8]))) (add[32] (invert[32] (add[32] v6378[32] 1[32])) 1[32])))) 0x08048560[32] 0x0804856b[32]) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v6376[32] -16[32]) 3[32]) }
          value = { defs={} expr=v6528[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v6376[32] -16[32]) 2[32]) }
          value = { defs={} expr=v6527[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v6376[32] -16[32]) 1[32]) }
          value = { defs={} expr=v6526[8] }
          flags = { rdonly }
        address = { defs={0x08048566} expr=(add[32] v6376[32] -16[32]) }
          value = { defs={} expr=v6525[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048570:add    esp, 0x0c
    registers:
        ax      = { defs={} expr=v6635[32] }
        cx      = { defs={} expr=v6636[32] }
        dx      = { defs={} expr=v6637[32] }
        bx      = { defs={} expr=v6638[32] }
        sp      = { defs={0x08048570} expr=(add[32] v6639[32] 12[32]) }
        bp      = { defs={} expr=v6640[32] }
        si      = { defs={} expr=v6641[32] }
        di      = { defs={} expr=v6642[32] }
        es      = { defs={} expr=v6643[16] }
        cs      = { defs={} expr=v6644[16] }
        ss      = { defs={} expr=v6645[16] }
        ds      = { defs={} expr=v6646[16] }
        fs      = { defs={} expr=v6647[16] }
        gs      = { defs={} expr=v6648[16] }
        cf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6639[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6639[32]) 12[33]))))) }
        ?1      = { defs={} expr=v6650[1] }
        pf      = { defs={0x08048570} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v6639[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v6639[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v6639[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v6639[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v6639[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v6639[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v6639[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v6639[32] 12[32]))))))) }
        ?3      = { defs={} expr=v6652[1] }
        af      = { defs={0x08048570} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6639[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6639[32]) 12[33]))))) }
        ?5      = { defs={} expr=v6654[1] }
        zf      = { defs={0x08048570} expr=(zerop[1] (add[32] v6639[32] 12[32])) }
        sf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (add[32] v6639[32] 12[32])) }
        tf      = { defs={} expr=v6657[1] }
        if      = { defs={} expr=v6658[1] }
        df      = { defs={} expr=v6659[1] }
        of      = { defs={0x08048570} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6639[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6639[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6639[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6639[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v6661[1] }
        iopl1   = { defs={} expr=v6662[1] }
        nt      = { defs={} expr=v6663[1] }
        ?15     = { defs={} expr=v6664[1] }
        rf      = { defs={} expr=v6665[1] }
        vm      = { defs={} expr=v6666[1] }
        ac      = { defs={} expr=v6667[1] }
        vif     = { defs={} expr=v6668[1] }
        vip     = { defs={} expr=v6669[1] }
        id      = { defs={} expr=v6670[1] }
        ?22     = { defs={} expr=v6671[1] }
        ?23     = { defs={} expr=v6672[1] }
        ?24     = { defs={} expr=v6673[1] }
        ?25     = { defs={} expr=v6674[1] }
        ?26     = { defs={} expr=v6675[1] }
        ?27     = { defs={} expr=v6676[1] }
        ?28     = { defs={} expr=v6677[1] }
        ?29     = { defs={} expr=v6678[1] }
        ?30     = { defs={} expr=v6679[1] }
        ?31     = { defs={} expr=v6680[1] }
        ip      = { defs={0x08048570} expr=0x08048573[32] }
    memory:
    init mem:
0x8048573:pop    ebx
    registers:
        ax      = { defs={} expr=v6635[32] }
        cx      = { defs={} expr=v6636[32] }
        dx      = { defs={} expr=v6637[32] }
        bx      = { defs={0x08048573} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6738[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6739[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6740[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6741[8]))) }
        sp      = { defs={0x08048570,0x08048573} expr=(add[32] (add[32] v6639[32] 12[32]) 4[32]) }
        bp      = { defs={} expr=v6640[32] }
        si      = { defs={} expr=v6641[32] }
        di      = { defs={} expr=v6642[32] }
        es      = { defs={} expr=v6643[16] }
        cs      = { defs={} expr=v6644[16] }
        ss      = { defs={} expr=v6645[16] }
        ds      = { defs={} expr=v6646[16] }
        fs      = { defs={} expr=v6647[16] }
        gs      = { defs={} expr=v6648[16] }
        cf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6639[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6639[32]) 12[33]))))) }
        ?1      = { defs={} expr=v6650[1] }
        pf      = { defs={0x08048570} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v6639[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v6639[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v6639[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v6639[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v6639[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v6639[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v6639[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v6639[32] 12[32]))))))) }
        ?3      = { defs={} expr=v6652[1] }
        af      = { defs={0x08048570} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6639[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6639[32]) 12[33]))))) }
        ?5      = { defs={} expr=v6654[1] }
        zf      = { defs={0x08048570} expr=(zerop[1] (add[32] v6639[32] 12[32])) }
        sf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (add[32] v6639[32] 12[32])) }
        tf      = { defs={} expr=v6657[1] }
        if      = { defs={} expr=v6658[1] }
        df      = { defs={} expr=v6659[1] }
        of      = { defs={0x08048570} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6639[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6639[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6639[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6639[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v6661[1] }
        iopl1   = { defs={} expr=v6662[1] }
        nt      = { defs={} expr=v6663[1] }
        ?15     = { defs={} expr=v6664[1] }
        rf      = { defs={} expr=v6665[1] }
        vm      = { defs={} expr=v6666[1] }
        ac      = { defs={} expr=v6667[1] }
        vif     = { defs={} expr=v6668[1] }
        vip     = { defs={} expr=v6669[1] }
        id      = { defs={} expr=v6670[1] }
        ?22     = { defs={} expr=v6671[1] }
        ?23     = { defs={} expr=v6672[1] }
        ?24     = { defs={} expr=v6673[1] }
        ?25     = { defs={} expr=v6674[1] }
        ?26     = { defs={} expr=v6675[1] }
        ?27     = { defs={} expr=v6676[1] }
        ?28     = { defs={} expr=v6677[1] }
        ?29     = { defs={} expr=v6678[1] }
        ?30     = { defs={} expr=v6679[1] }
        ?31     = { defs={} expr=v6680[1] }
        ip      = { defs={0x08048570,0x08048573} expr=0x08048574[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v6639[32] 12[32]) 3[32]) }
          value = { defs={} expr=v6741[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v6639[32] 12[32]) 2[32]) }
          value = { defs={} expr=v6740[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v6639[32] 12[32]) 1[32]) }
          value = { defs={} expr=v6739[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573} expr=(add[32] v6639[32] 12[32]) }
          value = { defs={} expr=v6738[8] }
          flags = { rdonly }
0x8048574:pop    esi
    registers:
        ax      = { defs={} expr=v6635[32] }
        cx      = { defs={} expr=v6636[32] }
        dx      = { defs={} expr=v6637[32] }
        bx      = { defs={0x08048573} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6738[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6739[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6740[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6741[8]))) }
        sp      = { defs={0x08048570,0x08048573,0x08048574} expr=(add[32] (add[32] (add[32] v6639[32] 12[32]) 4[32]) 4[32]) }
        bp      = { defs={} expr=v6640[32] }
        si      = { defs={0x08048574} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6755[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6756[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6757[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6758[8]))) }
        di      = { defs={} expr=v6642[32] }
        es      = { defs={} expr=v6643[16] }
        cs      = { defs={} expr=v6644[16] }
        ss      = { defs={} expr=v6645[16] }
        ds      = { defs={} expr=v6646[16] }
        fs      = { defs={} expr=v6647[16] }
        gs      = { defs={} expr=v6648[16] }
        cf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6639[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6639[32]) 12[33]))))) }
        ?1      = { defs={} expr=v6650[1] }
        pf      = { defs={0x08048570} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v6639[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v6639[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v6639[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v6639[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v6639[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v6639[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v6639[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v6639[32] 12[32]))))))) }
        ?3      = { defs={} expr=v6652[1] }
        af      = { defs={0x08048570} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6639[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6639[32]) 12[33]))))) }
        ?5      = { defs={} expr=v6654[1] }
        zf      = { defs={0x08048570} expr=(zerop[1] (add[32] v6639[32] 12[32])) }
        sf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (add[32] v6639[32] 12[32])) }
        tf      = { defs={} expr=v6657[1] }
        if      = { defs={} expr=v6658[1] }
        df      = { defs={} expr=v6659[1] }
        of      = { defs={0x08048570} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6639[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6639[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6639[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6639[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v6661[1] }
        iopl1   = { defs={} expr=v6662[1] }
        nt      = { defs={} expr=v6663[1] }
        ?15     = { defs={} expr=v6664[1] }
        rf      = { defs={} expr=v6665[1] }
        vm      = { defs={} expr=v6666[1] }
        ac      = { defs={} expr=v6667[1] }
        vif     = { defs={} expr=v6668[1] }
        vip     = { defs={} expr=v6669[1] }
        id      = { defs={} expr=v6670[1] }
        ?22     = { defs={} expr=v6671[1] }
        ?23     = { defs={} expr=v6672[1] }
        ?24     = { defs={} expr=v6673[1] }
        ?25     = { defs={} expr=v6674[1] }
        ?26     = { defs={} expr=v6675[1] }
        ?27     = { defs={} expr=v6676[1] }
        ?28     = { defs={} expr=v6677[1] }
        ?29     = { defs={} expr=v6678[1] }
        ?30     = { defs={} expr=v6679[1] }
        ?31     = { defs={} expr=v6680[1] }
        ip      = { defs={0x08048570,0x08048573,0x08048574} expr=0x08048575[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] v6639[32] 12[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v6758[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v6639[32] 12[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v6757[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v6639[32] 12[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v6756[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573,0x08048574} expr=(add[32] (add[32] v6639[32] 12[32]) 4[32]) }
          value = { defs={} expr=v6755[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v6639[32] 12[32]) 3[32]) }
          value = { defs={} expr=v6741[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v6639[32] 12[32]) 2[32]) }
          value = { defs={} expr=v6740[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v6639[32] 12[32]) 1[32]) }
          value = { defs={} expr=v6739[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573} expr=(add[32] v6639[32] 12[32]) }
          value = { defs={} expr=v6738[8] }
          flags = { rdonly }
0x8048575:pop    edi
    registers:
        ax      = { defs={} expr=v6635[32] }
        cx      = { defs={} expr=v6636[32] }
        dx      = { defs={} expr=v6637[32] }
        bx      = { defs={0x08048573} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6738[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6739[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6740[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6741[8]))) }
        sp      = { defs={0x08048570,0x08048573,0x08048574,0x08048575} expr=(add[32] (add[32] (add[32] (add[32] v6639[32] 12[32]) 4[32]) 4[32]) 4[32]) }
        bp      = { defs={} expr=v6640[32] }
        si      = { defs={0x08048574} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6755[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6756[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6757[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6758[8]))) }
        di      = { defs={0x08048575} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6772[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6773[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6774[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6775[8]))) }
        es      = { defs={} expr=v6643[16] }
        cs      = { defs={} expr=v6644[16] }
        ss      = { defs={} expr=v6645[16] }
        ds      = { defs={} expr=v6646[16] }
        fs      = { defs={} expr=v6647[16] }
        gs      = { defs={} expr=v6648[16] }
        cf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6639[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6639[32]) 12[33]))))) }
        ?1      = { defs={} expr=v6650[1] }
        pf      = { defs={0x08048570} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v6639[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v6639[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v6639[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v6639[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v6639[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v6639[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v6639[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v6639[32] 12[32]))))))) }
        ?3      = { defs={} expr=v6652[1] }
        af      = { defs={0x08048570} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6639[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6639[32]) 12[33]))))) }
        ?5      = { defs={} expr=v6654[1] }
        zf      = { defs={0x08048570} expr=(zerop[1] (add[32] v6639[32] 12[32])) }
        sf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (add[32] v6639[32] 12[32])) }
        tf      = { defs={} expr=v6657[1] }
        if      = { defs={} expr=v6658[1] }
        df      = { defs={} expr=v6659[1] }
        of      = { defs={0x08048570} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6639[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6639[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6639[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6639[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v6661[1] }
        iopl1   = { defs={} expr=v6662[1] }
        nt      = { defs={} expr=v6663[1] }
        ?15     = { defs={} expr=v6664[1] }
        rf      = { defs={} expr=v6665[1] }
        vm      = { defs={} expr=v6666[1] }
        ac      = { defs={} expr=v6667[1] }
        vif     = { defs={} expr=v6668[1] }
        vip     = { defs={} expr=v6669[1] }
        id      = { defs={} expr=v6670[1] }
        ?22     = { defs={} expr=v6671[1] }
        ?23     = { defs={} expr=v6672[1] }
        ?24     = { defs={} expr=v6673[1] }
        ?25     = { defs={} expr=v6674[1] }
        ?26     = { defs={} expr=v6675[1] }
        ?27     = { defs={} expr=v6676[1] }
        ?28     = { defs={} expr=v6677[1] }
        ?29     = { defs={} expr=v6678[1] }
        ?30     = { defs={} expr=v6679[1] }
        ?31     = { defs={} expr=v6680[1] }
        ip      = { defs={0x08048570,0x08048573,0x08048574,0x08048575} expr=0x08048576[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v6639[32] 12[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v6775[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v6639[32] 12[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v6774[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v6639[32] 12[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v6773[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573,0x08048574,0x08048575} expr=(add[32] (add[32] (add[32] v6639[32] 12[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v6772[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v6639[32] 12[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v6758[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v6639[32] 12[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v6757[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v6639[32] 12[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v6756[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573,0x08048574} expr=(add[32] (add[32] v6639[32] 12[32]) 4[32]) }
          value = { defs={} expr=v6755[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v6639[32] 12[32]) 3[32]) }
          value = { defs={} expr=v6741[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v6639[32] 12[32]) 2[32]) }
          value = { defs={} expr=v6740[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v6639[32] 12[32]) 1[32]) }
          value = { defs={} expr=v6739[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573} expr=(add[32] v6639[32] 12[32]) }
          value = { defs={} expr=v6738[8] }
          flags = { rdonly }
0x8048576:pop    ebp
    registers:
        ax      = { defs={} expr=v6635[32] }
        cx      = { defs={} expr=v6636[32] }
        dx      = { defs={} expr=v6637[32] }
        bx      = { defs={0x08048573} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6738[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6739[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6740[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6741[8]))) }
        sp      = { defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v6639[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) }
        bp      = { defs={0x08048576} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6789[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6790[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6791[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6792[8]))) }
        si      = { defs={0x08048574} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6755[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6756[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6757[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6758[8]))) }
        di      = { defs={0x08048575} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6772[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6773[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6774[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6775[8]))) }
        es      = { defs={} expr=v6643[16] }
        cs      = { defs={} expr=v6644[16] }
        ss      = { defs={} expr=v6645[16] }
        ds      = { defs={} expr=v6646[16] }
        fs      = { defs={} expr=v6647[16] }
        gs      = { defs={} expr=v6648[16] }
        cf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6639[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6639[32]) 12[33]))))) }
        ?1      = { defs={} expr=v6650[1] }
        pf      = { defs={0x08048570} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v6639[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v6639[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v6639[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v6639[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v6639[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v6639[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v6639[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v6639[32] 12[32]))))))) }
        ?3      = { defs={} expr=v6652[1] }
        af      = { defs={0x08048570} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6639[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6639[32]) 12[33]))))) }
        ?5      = { defs={} expr=v6654[1] }
        zf      = { defs={0x08048570} expr=(zerop[1] (add[32] v6639[32] 12[32])) }
        sf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (add[32] v6639[32] 12[32])) }
        tf      = { defs={} expr=v6657[1] }
        if      = { defs={} expr=v6658[1] }
        df      = { defs={} expr=v6659[1] }
        of      = { defs={0x08048570} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6639[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6639[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6639[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6639[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v6661[1] }
        iopl1   = { defs={} expr=v6662[1] }
        nt      = { defs={} expr=v6663[1] }
        ?15     = { defs={} expr=v6664[1] }
        rf      = { defs={} expr=v6665[1] }
        vm      = { defs={} expr=v6666[1] }
        ac      = { defs={} expr=v6667[1] }
        vif     = { defs={} expr=v6668[1] }
        vip     = { defs={} expr=v6669[1] }
        id      = { defs={} expr=v6670[1] }
        ?22     = { defs={} expr=v6671[1] }
        ?23     = { defs={} expr=v6672[1] }
        ?24     = { defs={} expr=v6673[1] }
        ?25     = { defs={} expr=v6674[1] }
        ?26     = { defs={} expr=v6675[1] }
        ?27     = { defs={} expr=v6676[1] }
        ?28     = { defs={} expr=v6677[1] }
        ?29     = { defs={} expr=v6678[1] }
        ?30     = { defs={} expr=v6679[1] }
        ?31     = { defs={} expr=v6680[1] }
        ip      = { defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576} expr=0x08048577[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v6639[32] 12[32]) 4[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v6792[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v6639[32] 12[32]) 4[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v6791[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v6639[32] 12[32]) 4[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v6790[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576} expr=(add[32] (add[32] (add[32] (add[32] v6639[32] 12[32]) 4[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v6789[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v6639[32] 12[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v6775[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v6639[32] 12[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v6774[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v6639[32] 12[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v6773[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573,0x08048574,0x08048575} expr=(add[32] (add[32] (add[32] v6639[32] 12[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v6772[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v6639[32] 12[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v6758[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v6639[32] 12[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v6757[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v6639[32] 12[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v6756[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573,0x08048574} expr=(add[32] (add[32] v6639[32] 12[32]) 4[32]) }
          value = { defs={} expr=v6755[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v6639[32] 12[32]) 3[32]) }
          value = { defs={} expr=v6741[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v6639[32] 12[32]) 2[32]) }
          value = { defs={} expr=v6740[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v6639[32] 12[32]) 1[32]) }
          value = { defs={} expr=v6739[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573} expr=(add[32] v6639[32] 12[32]) }
          value = { defs={} expr=v6738[8] }
          flags = { rdonly }
0x8048577:ret    
    registers:
        ax      = { defs={} expr=v6635[32] }
        cx      = { defs={} expr=v6636[32] }
        dx      = { defs={} expr=v6637[32] }
        bx      = { defs={0x08048573} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6738[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6739[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6740[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6741[8]))) }
        sp      = { defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576,0x08048577} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v6639[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 4[32]) }
        bp      = { defs={0x08048576} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6789[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6790[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6791[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6792[8]))) }
        si      = { defs={0x08048574} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6755[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6756[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6757[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6758[8]))) }
        di      = { defs={0x08048575} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6772[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6773[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6774[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6775[8]))) }
        es      = { defs={} expr=v6643[16] }
        cs      = { defs={} expr=v6644[16] }
        ss      = { defs={} expr=v6645[16] }
        ds      = { defs={} expr=v6646[16] }
        fs      = { defs={} expr=v6647[16] }
        gs      = { defs={} expr=v6648[16] }
        cf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6639[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6639[32]) 12[33]))))) }
        ?1      = { defs={} expr=v6650[1] }
        pf      = { defs={0x08048570} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v6639[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v6639[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v6639[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v6639[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v6639[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v6639[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v6639[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v6639[32] 12[32]))))))) }
        ?3      = { defs={} expr=v6652[1] }
        af      = { defs={0x08048570} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6639[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6639[32]) 12[33]))))) }
        ?5      = { defs={} expr=v6654[1] }
        zf      = { defs={0x08048570} expr=(zerop[1] (add[32] v6639[32] 12[32])) }
        sf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (add[32] v6639[32] 12[32])) }
        tf      = { defs={} expr=v6657[1] }
        if      = { defs={} expr=v6658[1] }
        df      = { defs={} expr=v6659[1] }
        of      = { defs={0x08048570} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6639[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6639[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6639[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6639[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v6661[1] }
        iopl1   = { defs={} expr=v6662[1] }
        nt      = { defs={} expr=v6663[1] }
        ?15     = { defs={} expr=v6664[1] }
        rf      = { defs={} expr=v6665[1] }
        vm      = { defs={} expr=v6666[1] }
        ac      = { defs={} expr=v6667[1] }
        vif     = { defs={} expr=v6668[1] }
        vip     = { defs={} expr=v6669[1] }
        id      = { defs={} expr=v6670[1] }
        ?22     = { defs={} expr=v6671[1] }
        ?23     = { defs={} expr=v6672[1] }
        ?24     = { defs={} expr=v6673[1] }
        ?25     = { defs={} expr=v6674[1] }
        ?26     = { defs={} expr=v6675[1] }
        ?27     = { defs={} expr=v6676[1] }
        ?28     = { defs={} expr=v6677[1] }
        ?29     = { defs={} expr=v6678[1] }
        ?30     = { defs={} expr=v6679[1] }
        ?31     = { defs={} expr=v6680[1] }
        ip      = { defs={0x08048577} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6806[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6807[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6808[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6809[8]))) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v6639[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v6809[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v6639[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v6808[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v6639[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v6807[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576,0x08048577} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v6639[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v6806[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v6639[32] 12[32]) 4[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v6792[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v6639[32] 12[32]) 4[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v6791[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v6639[32] 12[32]) 4[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v6790[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576} expr=(add[32] (add[32] (add[32] (add[32] v6639[32] 12[32]) 4[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v6789[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v6639[32] 12[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v6775[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v6639[32] 12[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v6774[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v6639[32] 12[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v6773[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573,0x08048574,0x08048575} expr=(add[32] (add[32] (add[32] v6639[32] 12[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v6772[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v6639[32] 12[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v6758[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v6639[32] 12[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v6757[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v6639[32] 12[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v6756[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573,0x08048574} expr=(add[32] (add[32] v6639[32] 12[32]) 4[32]) }
          value = { defs={} expr=v6755[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v6639[32] 12[32]) 3[32]) }
          value = { defs={} expr=v6741[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v6639[32] 12[32]) 2[32]) }
          value = { defs={} expr=v6740[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v6639[32] 12[32]) 1[32]) }
          value = { defs={} expr=v6739[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573} expr=(add[32] v6639[32] 12[32]) }
          value = { defs={} expr=v6738[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048580:push   ebp
    registers:
        ax      = { defs={} expr=v6864[32] }
        cx      = { defs={} expr=v6865[32] }
        dx      = { defs={} expr=v6866[32] }
        bx      = { defs={} expr=v6867[32] }
        sp      = { defs={0x08048580} expr=(add[32] v6868[32] -4[32]) }
        bp      = { defs={} expr=v6869[32] }
        si      = { defs={} expr=v6870[32] }
        di      = { defs={} expr=v6871[32] }
        es      = { defs={} expr=v6872[16] }
        cs      = { defs={} expr=v6873[16] }
        ss      = { defs={} expr=v6874[16] }
        ds      = { defs={} expr=v6875[16] }
        fs      = { defs={} expr=v6876[16] }
        gs      = { defs={} expr=v6877[16] }
        cf      = { defs={} expr=v6878[1] }
        ?1      = { defs={} expr=v6879[1] }
        pf      = { defs={} expr=v6880[1] }
        ?3      = { defs={} expr=v6881[1] }
        af      = { defs={} expr=v6882[1] }
        ?5      = { defs={} expr=v6883[1] }
        zf      = { defs={} expr=v6884[1] }
        sf      = { defs={} expr=v6885[1] }
        tf      = { defs={} expr=v6886[1] }
        if      = { defs={} expr=v6887[1] }
        df      = { defs={} expr=v6888[1] }
        of      = { defs={} expr=v6889[1] }
        iopl0   = { defs={} expr=v6890[1] }
        iopl1   = { defs={} expr=v6891[1] }
        nt      = { defs={} expr=v6892[1] }
        ?15     = { defs={} expr=v6893[1] }
        rf      = { defs={} expr=v6894[1] }
        vm      = { defs={} expr=v6895[1] }
        ac      = { defs={} expr=v6896[1] }
        vif     = { defs={} expr=v6897[1] }
        vip     = { defs={} expr=v6898[1] }
        id      = { defs={} expr=v6899[1] }
        ?22     = { defs={} expr=v6900[1] }
        ?23     = { defs={} expr=v6901[1] }
        ?24     = { defs={} expr=v6902[1] }
        ?25     = { defs={} expr=v6903[1] }
        ?26     = { defs={} expr=v6904[1] }
        ?27     = { defs={} expr=v6905[1] }
        ?28     = { defs={} expr=v6906[1] }
        ?29     = { defs={} expr=v6907[1] }
        ?30     = { defs={} expr=v6908[1] }
        ?31     = { defs={} expr=v6909[1] }
        ip      = { defs={0x08048580} expr=0x08048581[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v6868[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v6869[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v6868[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v6869[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v6868[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v6869[32]) }
          flags = { }
        address = { defs={0x08048580} expr=(add[32] v6868[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v6869[32]) }
          flags = { }
    init mem:
0x8048581:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v6864[32] }
        cx      = { defs={} expr=v6865[32] }
        dx      = { defs={} expr=v6866[32] }
        bx      = { defs={} expr=v6867[32] }
        sp      = { defs={0x08048580} expr=(add[32] v6868[32] -4[32]) }
        bp      = { defs={0x08048580,0x08048581} expr=(add[32] v6868[32] -4[32]) }
        si      = { defs={} expr=v6870[32] }
        di      = { defs={} expr=v6871[32] }
        es      = { defs={} expr=v6872[16] }
        cs      = { defs={} expr=v6873[16] }
        ss      = { defs={} expr=v6874[16] }
        ds      = { defs={} expr=v6875[16] }
        fs      = { defs={} expr=v6876[16] }
        gs      = { defs={} expr=v6877[16] }
        cf      = { defs={} expr=v6878[1] }
        ?1      = { defs={} expr=v6879[1] }
        pf      = { defs={} expr=v6880[1] }
        ?3      = { defs={} expr=v6881[1] }
        af      = { defs={} expr=v6882[1] }
        ?5      = { defs={} expr=v6883[1] }
        zf      = { defs={} expr=v6884[1] }
        sf      = { defs={} expr=v6885[1] }
        tf      = { defs={} expr=v6886[1] }
        if      = { defs={} expr=v6887[1] }
        df      = { defs={} expr=v6888[1] }
        of      = { defs={} expr=v6889[1] }
        iopl0   = { defs={} expr=v6890[1] }
        iopl1   = { defs={} expr=v6891[1] }
        nt      = { defs={} expr=v6892[1] }
        ?15     = { defs={} expr=v6893[1] }
        rf      = { defs={} expr=v6894[1] }
        vm      = { defs={} expr=v6895[1] }
        ac      = { defs={} expr=v6896[1] }
        vif     = { defs={} expr=v6897[1] }
        vip     = { defs={} expr=v6898[1] }
        id      = { defs={} expr=v6899[1] }
        ?22     = { defs={} expr=v6900[1] }
        ?23     = { defs={} expr=v6901[1] }
        ?24     = { defs={} expr=v6902[1] }
        ?25     = { defs={} expr=v6903[1] }
        ?26     = { defs={} expr=v6904[1] }
        ?27     = { defs={} expr=v6905[1] }
        ?28     = { defs={} expr=v6906[1] }
        ?29     = { defs={} expr=v6907[1] }
        ?30     = { defs={} expr=v6908[1] }
        ?31     = { defs={} expr=v6909[1] }
        ip      = { defs={0x08048580,0x08048581} expr=0x08048583[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v6868[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v6869[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v6868[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v6869[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v6868[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v6869[32]) }
          flags = { }
        address = { defs={0x08048580} expr=(add[32] v6868[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v6869[32]) }
          flags = { }
    init mem:
0x8048583:push   ebx
    registers:
        ax      = { defs={} expr=v6864[32] }
        cx      = { defs={} expr=v6865[32] }
        dx      = { defs={} expr=v6866[32] }
        bx      = { defs={} expr=v6867[32] }
        sp      = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v6868[32] -4[32]) -4[32]) }
        bp      = { defs={0x08048580,0x08048581} expr=(add[32] v6868[32] -4[32]) }
        si      = { defs={} expr=v6870[32] }
        di      = { defs={} expr=v6871[32] }
        es      = { defs={} expr=v6872[16] }
        cs      = { defs={} expr=v6873[16] }
        ss      = { defs={} expr=v6874[16] }
        ds      = { defs={} expr=v6875[16] }
        fs      = { defs={} expr=v6876[16] }
        gs      = { defs={} expr=v6877[16] }
        cf      = { defs={} expr=v6878[1] }
        ?1      = { defs={} expr=v6879[1] }
        pf      = { defs={} expr=v6880[1] }
        ?3      = { defs={} expr=v6881[1] }
        af      = { defs={} expr=v6882[1] }
        ?5      = { defs={} expr=v6883[1] }
        zf      = { defs={} expr=v6884[1] }
        sf      = { defs={} expr=v6885[1] }
        tf      = { defs={} expr=v6886[1] }
        if      = { defs={} expr=v6887[1] }
        df      = { defs={} expr=v6888[1] }
        of      = { defs={} expr=v6889[1] }
        iopl0   = { defs={} expr=v6890[1] }
        iopl1   = { defs={} expr=v6891[1] }
        nt      = { defs={} expr=v6892[1] }
        ?15     = { defs={} expr=v6893[1] }
        rf      = { defs={} expr=v6894[1] }
        vm      = { defs={} expr=v6895[1] }
        ac      = { defs={} expr=v6896[1] }
        vif     = { defs={} expr=v6897[1] }
        vip     = { defs={} expr=v6898[1] }
        id      = { defs={} expr=v6899[1] }
        ?22     = { defs={} expr=v6900[1] }
        ?23     = { defs={} expr=v6901[1] }
        ?24     = { defs={} expr=v6902[1] }
        ?25     = { defs={} expr=v6903[1] }
        ?26     = { defs={} expr=v6904[1] }
        ?27     = { defs={} expr=v6905[1] }
        ?28     = { defs={} expr=v6906[1] }
        ?29     = { defs={} expr=v6907[1] }
        ?30     = { defs={} expr=v6908[1] }
        ?31     = { defs={} expr=v6909[1] }
        ip      = { defs={0x08048580,0x08048581,0x08048583} expr=0x08048584[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v6867[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v6867[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v6867[32]) }
          flags = { }
        address = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v6868[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v6867[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v6868[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v6869[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v6868[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v6869[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v6868[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v6869[32]) }
          flags = { }
        address = { defs={0x08048580} expr=(add[32] v6868[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v6869[32]) }
          flags = { }
    init mem:
0x8048584:sub    esp, 0x04
    registers:
        ax      = { defs={} expr=v6864[32] }
        cx      = { defs={} expr=v6865[32] }
        dx      = { defs={} expr=v6866[32] }
        bx      = { defs={} expr=v6867[32] }
        sp      = { defs={0x08048580,0x08048583,0x08048584} expr=(add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048580,0x08048581} expr=(add[32] v6868[32] -4[32]) }
        si      = { defs={} expr=v6870[32] }
        di      = { defs={} expr=v6871[32] }
        es      = { defs={} expr=v6872[16] }
        cs      = { defs={} expr=v6873[16] }
        ss      = { defs={} expr=v6874[16] }
        ds      = { defs={} expr=v6875[16] }
        fs      = { defs={} expr=v6876[16] }
        gs      = { defs={} expr=v6877[16] }
        cf      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v6868[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v6868[32] -4[32]) -4[32])) 4294967292[33])))))) }
        ?1      = { defs={} expr=v6879[1] }
        pf      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) -4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) -4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) -4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) -4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) -4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) -4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) -4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) -4[32]))))))) }
        ?3      = { defs={} expr=v6881[1] }
        af      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v6868[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v6868[32] -4[32]) -4[32])) 4294967292[33])))))) }
        ?5      = { defs={} expr=v6883[1] }
        zf      = { defs={0x08048580,0x08048583,0x08048584} expr=(zerop[1] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) -4[32])) }
        sf      = { defs={0x08048580,0x08048583,0x08048584} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) -4[32])) }
        tf      = { defs={} expr=v6886[1] }
        if      = { defs={} expr=v6887[1] }
        df      = { defs={} expr=v6888[1] }
        of      = { defs={0x08048580,0x08048583,0x08048584} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v6868[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v6868[32] -4[32]) -4[32])) 4294967292[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v6868[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v6868[32] -4[32]) -4[32])) 4294967292[33])))))) }
        iopl0   = { defs={} expr=v6890[1] }
        iopl1   = { defs={} expr=v6891[1] }
        nt      = { defs={} expr=v6892[1] }
        ?15     = { defs={} expr=v6893[1] }
        rf      = { defs={} expr=v6894[1] }
        vm      = { defs={} expr=v6895[1] }
        ac      = { defs={} expr=v6896[1] }
        vif     = { defs={} expr=v6897[1] }
        vip     = { defs={} expr=v6898[1] }
        id      = { defs={} expr=v6899[1] }
        ?22     = { defs={} expr=v6900[1] }
        ?23     = { defs={} expr=v6901[1] }
        ?24     = { defs={} expr=v6902[1] }
        ?25     = { defs={} expr=v6903[1] }
        ?26     = { defs={} expr=v6904[1] }
        ?27     = { defs={} expr=v6905[1] }
        ?28     = { defs={} expr=v6906[1] }
        ?29     = { defs={} expr=v6907[1] }
        ?30     = { defs={} expr=v6908[1] }
        ?31     = { defs={} expr=v6909[1] }
        ip      = { defs={0x08048580,0x08048581,0x08048583,0x08048584} expr=0x08048587[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v6867[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v6867[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v6867[32]) }
          flags = { }
        address = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v6868[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v6867[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v6868[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v6869[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v6868[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v6869[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v6868[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v6869[32]) }
          flags = { }
        address = { defs={0x08048580} expr=(add[32] v6868[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v6869[32]) }
          flags = { }
    init mem:
0x8048587:mov    ebx, 0x080495e8<.ctors>
    registers:
        ax      = { defs={} expr=v6864[32] }
        cx      = { defs={} expr=v6865[32] }
        dx      = { defs={} expr=v6866[32] }
        bx      = { defs={0x08048587} expr=0x080495e8[32] }
        sp      = { defs={0x08048580,0x08048583,0x08048584} expr=(add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048580,0x08048581} expr=(add[32] v6868[32] -4[32]) }
        si      = { defs={} expr=v6870[32] }
        di      = { defs={} expr=v6871[32] }
        es      = { defs={} expr=v6872[16] }
        cs      = { defs={} expr=v6873[16] }
        ss      = { defs={} expr=v6874[16] }
        ds      = { defs={} expr=v6875[16] }
        fs      = { defs={} expr=v6876[16] }
        gs      = { defs={} expr=v6877[16] }
        cf      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v6868[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v6868[32] -4[32]) -4[32])) 4294967292[33])))))) }
        ?1      = { defs={} expr=v6879[1] }
        pf      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) -4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) -4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) -4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) -4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) -4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) -4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) -4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) -4[32]))))))) }
        ?3      = { defs={} expr=v6881[1] }
        af      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v6868[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v6868[32] -4[32]) -4[32])) 4294967292[33])))))) }
        ?5      = { defs={} expr=v6883[1] }
        zf      = { defs={0x08048580,0x08048583,0x08048584} expr=(zerop[1] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) -4[32])) }
        sf      = { defs={0x08048580,0x08048583,0x08048584} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) -4[32])) }
        tf      = { defs={} expr=v6886[1] }
        if      = { defs={} expr=v6887[1] }
        df      = { defs={} expr=v6888[1] }
        of      = { defs={0x08048580,0x08048583,0x08048584} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v6868[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v6868[32] -4[32]) -4[32])) 4294967292[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v6868[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v6868[32] -4[32]) -4[32])) 4294967292[33])))))) }
        iopl0   = { defs={} expr=v6890[1] }
        iopl1   = { defs={} expr=v6891[1] }
        nt      = { defs={} expr=v6892[1] }
        ?15     = { defs={} expr=v6893[1] }
        rf      = { defs={} expr=v6894[1] }
        vm      = { defs={} expr=v6895[1] }
        ac      = { defs={} expr=v6896[1] }
        vif     = { defs={} expr=v6897[1] }
        vip     = { defs={} expr=v6898[1] }
        id      = { defs={} expr=v6899[1] }
        ?22     = { defs={} expr=v6900[1] }
        ?23     = { defs={} expr=v6901[1] }
        ?24     = { defs={} expr=v6902[1] }
        ?25     = { defs={} expr=v6903[1] }
        ?26     = { defs={} expr=v6904[1] }
        ?27     = { defs={} expr=v6905[1] }
        ?28     = { defs={} expr=v6906[1] }
        ?29     = { defs={} expr=v6907[1] }
        ?30     = { defs={} expr=v6908[1] }
        ?31     = { defs={} expr=v6909[1] }
        ip      = { defs={0x08048580,0x08048581,0x08048583,0x08048584,0x08048587} expr=0x0804858c[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v6867[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v6867[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v6867[32]) }
          flags = { }
        address = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v6868[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v6867[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v6868[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v6869[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v6868[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v6869[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v6868[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v6869[32]) }
          flags = { }
        address = { defs={0x08048580} expr=(add[32] v6868[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v6869[32]) }
          flags = { }
    init mem:
0x804858c:mov    eax, DWORD PTR ds:[0x080495e8<.ctors>]
    registers:
        ax      = { defs={0x0804858c} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6992[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e8[32] v6991[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6994[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e9[32] v6993[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6996[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495ea[32] v6995[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6998[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495eb[32] v6997[8]) 0x080495eb[32])))) }
        cx      = { defs={} expr=v6865[32] }
        dx      = { defs={} expr=v6866[32] }
        bx      = { defs={0x08048587} expr=0x080495e8[32] }
        sp      = { defs={0x08048580,0x08048583,0x08048584} expr=(add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048580,0x08048581} expr=(add[32] v6868[32] -4[32]) }
        si      = { defs={} expr=v6870[32] }
        di      = { defs={} expr=v6871[32] }
        es      = { defs={} expr=v6872[16] }
        cs      = { defs={} expr=v6873[16] }
        ss      = { defs={} expr=v6874[16] }
        ds      = { defs={} expr=v6875[16] }
        fs      = { defs={} expr=v6876[16] }
        gs      = { defs={} expr=v6877[16] }
        cf      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v6868[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v6868[32] -4[32]) -4[32])) 4294967292[33])))))) }
        ?1      = { defs={} expr=v6879[1] }
        pf      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) -4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) -4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) -4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) -4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) -4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) -4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) -4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) -4[32]))))))) }
        ?3      = { defs={} expr=v6881[1] }
        af      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v6868[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v6868[32] -4[32]) -4[32])) 4294967292[33])))))) }
        ?5      = { defs={} expr=v6883[1] }
        zf      = { defs={0x08048580,0x08048583,0x08048584} expr=(zerop[1] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) -4[32])) }
        sf      = { defs={0x08048580,0x08048583,0x08048584} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) -4[32])) }
        tf      = { defs={} expr=v6886[1] }
        if      = { defs={} expr=v6887[1] }
        df      = { defs={} expr=v6888[1] }
        of      = { defs={0x08048580,0x08048583,0x08048584} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v6868[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v6868[32] -4[32]) -4[32])) 4294967292[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v6868[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v6868[32] -4[32]) -4[32])) 4294967292[33])))))) }
        iopl0   = { defs={} expr=v6890[1] }
        iopl1   = { defs={} expr=v6891[1] }
        nt      = { defs={} expr=v6892[1] }
        ?15     = { defs={} expr=v6893[1] }
        rf      = { defs={} expr=v6894[1] }
        vm      = { defs={} expr=v6895[1] }
        ac      = { defs={} expr=v6896[1] }
        vif     = { defs={} expr=v6897[1] }
        vip     = { defs={} expr=v6898[1] }
        id      = { defs={} expr=v6899[1] }
        ?22     = { defs={} expr=v6900[1] }
        ?23     = { defs={} expr=v6901[1] }
        ?24     = { defs={} expr=v6902[1] }
        ?25     = { defs={} expr=v6903[1] }
        ?26     = { defs={} expr=v6904[1] }
        ?27     = { defs={} expr=v6905[1] }
        ?28     = { defs={} expr=v6906[1] }
        ?29     = { defs={} expr=v6907[1] }
        ?30     = { defs={} expr=v6908[1] }
        ?31     = { defs={} expr=v6909[1] }
        ip      = { defs={0x08048580,0x08048581,0x08048583,0x08048584,0x08048587,0x0804858c} expr=0x08048591[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v6867[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v6867[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v6867[32]) }
          flags = { }
        address = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v6868[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v6867[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v6868[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v6869[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v6868[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v6869[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v6868[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v6869[32]) }
          flags = { }
        address = { defs={0x08048580} expr=(add[32] v6868[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v6869[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=0x080495eb[32] }
          value = { defs={} expr=v6997[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495ea[32] }
          value = { defs={} expr=v6995[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495e9[32] }
          value = { defs={} expr=v6993[8] }
          flags = { rdonly }
        address = { defs={0x0804858c} expr=0x080495e8[32] }
          value = { defs={} expr=v6991[8] }
          flags = { rdonly }
0x8048591:cmp    eax, 0xff<-0x01>
    registers:
        ax      = { defs={0x0804858c} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6992[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e8[32] v6991[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6994[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e9[32] v6993[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6996[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495ea[32] v6995[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6998[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495eb[32] v6997[8]) 0x080495eb[32])))) }
        cx      = { defs={} expr=v6865[32] }
        dx      = { defs={} expr=v6866[32] }
        bx      = { defs={0x08048587} expr=0x080495e8[32] }
        sp      = { defs={0x08048580,0x08048583,0x08048584} expr=(add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048580,0x08048581} expr=(add[32] v6868[32] -4[32]) }
        si      = { defs={} expr=v6870[32] }
        di      = { defs={} expr=v6871[32] }
        es      = { defs={} expr=v6872[16] }
        cs      = { defs={} expr=v6873[16] }
        ss      = { defs={} expr=v6874[16] }
        ds      = { defs={} expr=v6875[16] }
        fs      = { defs={} expr=v6876[16] }
        gs      = { defs={} expr=v6877[16] }
        cf      = { defs={0x0804858c,0x08048591} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6992[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e8[32] v6991[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6994[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e9[32] v6993[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6996[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495ea[32] v6995[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6998[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495eb[32] v6997[8]) 0x080495eb[32]))))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6992[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e8[32] v6991[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6994[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e9[32] v6993[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6996[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495ea[32] v6995[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6998[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495eb[32] v6997[8]) 0x080495eb[32]))))) 1[33])))))) }
        ?1      = { defs={} expr=v6879[1] }
        pf      = { defs={0x0804858c,0x08048591} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6992[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e8[32] v6991[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6994[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e9[32] v6993[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6996[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495ea[32] v6995[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6998[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495eb[32] v6997[8]) 0x080495eb[32])))) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6992[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e8[32] v6991[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6994[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e9[32] v6993[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6996[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495ea[32] v6995[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6998[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495eb[32] v6997[8]) 0x080495eb[32])))) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6992[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e8[32] v6991[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6994[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e9[32] v6993[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6996[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495ea[32] v6995[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6998[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495eb[32] v6997[8]) 0x080495eb[32])))) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6992[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e8[32] v6991[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6994[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e9[32] v6993[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6996[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495ea[32] v6995[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6998[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495eb[32] v6997[8]) 0x080495eb[32])))) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6992[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e8[32] v6991[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6994[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e9[32] v6993[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6996[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495ea[32] v6995[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6998[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495eb[32] v6997[8]) 0x080495eb[32])))) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6992[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e8[32] v6991[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6994[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e9[32] v6993[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6996[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495ea[32] v6995[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6998[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495eb[32] v6997[8]) 0x080495eb[32])))) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6992[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e8[32] v6991[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6994[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e9[32] v6993[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6996[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495ea[32] v6995[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6998[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495eb[32] v6997[8]) 0x080495eb[32])))) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6992[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e8[32] v6991[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6994[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e9[32] v6993[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6996[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495ea[32] v6995[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6998[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495eb[32] v6997[8]) 0x080495eb[32])))) 1[32]))))))) }
        ?3      = { defs={} expr=v6881[1] }
        af      = { defs={0x0804858c,0x08048591} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6992[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e8[32] v6991[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6994[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e9[32] v6993[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6996[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495ea[32] v6995[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6998[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495eb[32] v6997[8]) 0x080495eb[32]))))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6992[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e8[32] v6991[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6994[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e9[32] v6993[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6996[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495ea[32] v6995[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6998[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495eb[32] v6997[8]) 0x080495eb[32]))))) 1[33])))))) }
        ?5      = { defs={} expr=v6883[1] }
        zf      = { defs={0x0804858c,0x08048591} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6992[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e8[32] v6991[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6994[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e9[32] v6993[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6996[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495ea[32] v6995[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6998[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495eb[32] v6997[8]) 0x080495eb[32])))) 1[32])) }
        sf      = { defs={0x0804858c,0x08048591} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6992[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e8[32] v6991[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6994[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e9[32] v6993[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6996[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495ea[32] v6995[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6998[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495eb[32] v6997[8]) 0x080495eb[32])))) 1[32])) }
        tf      = { defs={} expr=v6886[1] }
        if      = { defs={} expr=v6887[1] }
        df      = { defs={} expr=v6888[1] }
        of      = { defs={0x0804858c,0x08048591} expr=0[1] }
        iopl0   = { defs={} expr=v6890[1] }
        iopl1   = { defs={} expr=v6891[1] }
        nt      = { defs={} expr=v6892[1] }
        ?15     = { defs={} expr=v6893[1] }
        rf      = { defs={} expr=v6894[1] }
        vm      = { defs={} expr=v6895[1] }
        ac      = { defs={} expr=v6896[1] }
        vif     = { defs={} expr=v6897[1] }
        vip     = { defs={} expr=v6898[1] }
        id      = { defs={} expr=v6899[1] }
        ?22     = { defs={} expr=v6900[1] }
        ?23     = { defs={} expr=v6901[1] }
        ?24     = { defs={} expr=v6902[1] }
        ?25     = { defs={} expr=v6903[1] }
        ?26     = { defs={} expr=v6904[1] }
        ?27     = { defs={} expr=v6905[1] }
        ?28     = { defs={} expr=v6906[1] }
        ?29     = { defs={} expr=v6907[1] }
        ?30     = { defs={} expr=v6908[1] }
        ?31     = { defs={} expr=v6909[1] }
        ip      = { defs={0x08048580,0x08048581,0x08048583,0x08048584,0x08048587,0x0804858c,0x08048591} expr=0x08048594[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v6867[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v6867[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v6867[32]) }
          flags = { }
        address = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v6868[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v6867[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v6868[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v6869[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v6868[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v6869[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v6868[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v6869[32]) }
          flags = { }
        address = { defs={0x08048580} expr=(add[32] v6868[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v6869[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=0x080495eb[32] }
          value = { defs={} expr=v6997[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495ea[32] }
          value = { defs={} expr=v6995[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495e9[32] }
          value = { defs={} expr=v6993[8] }
          flags = { rdonly }
        address = { defs={0x0804858c} expr=0x080495e8[32] }
          value = { defs={} expr=v6991[8] }
          flags = { rdonly }
0x8048594:je     0x080485ac<<Insn>>
    registers:
        ax      = { defs={0x0804858c} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6992[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e8[32] v6991[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6994[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e9[32] v6993[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6996[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495ea[32] v6995[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6998[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495eb[32] v6997[8]) 0x080495eb[32])))) }
        cx      = { defs={} expr=v6865[32] }
        dx      = { defs={} expr=v6866[32] }
        bx      = { defs={0x08048587} expr=0x080495e8[32] }
        sp      = { defs={0x08048580,0x08048583,0x08048584} expr=(add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048580,0x08048581} expr=(add[32] v6868[32] -4[32]) }
        si      = { defs={} expr=v6870[32] }
        di      = { defs={} expr=v6871[32] }
        es      = { defs={} expr=v6872[16] }
        cs      = { defs={} expr=v6873[16] }
        ss      = { defs={} expr=v6874[16] }
        ds      = { defs={} expr=v6875[16] }
        fs      = { defs={} expr=v6876[16] }
        gs      = { defs={} expr=v6877[16] }
        cf      = { defs={0x0804858c,0x08048591} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6992[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e8[32] v6991[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6994[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e9[32] v6993[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6996[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495ea[32] v6995[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6998[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495eb[32] v6997[8]) 0x080495eb[32]))))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6992[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e8[32] v6991[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6994[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e9[32] v6993[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6996[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495ea[32] v6995[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6998[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495eb[32] v6997[8]) 0x080495eb[32]))))) 1[33])))))) }
        ?1      = { defs={} expr=v6879[1] }
        pf      = { defs={0x0804858c,0x08048591} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6992[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e8[32] v6991[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6994[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e9[32] v6993[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6996[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495ea[32] v6995[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6998[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495eb[32] v6997[8]) 0x080495eb[32])))) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6992[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e8[32] v6991[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6994[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e9[32] v6993[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6996[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495ea[32] v6995[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6998[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495eb[32] v6997[8]) 0x080495eb[32])))) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6992[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e8[32] v6991[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6994[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e9[32] v6993[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6996[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495ea[32] v6995[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6998[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495eb[32] v6997[8]) 0x080495eb[32])))) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6992[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e8[32] v6991[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6994[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e9[32] v6993[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6996[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495ea[32] v6995[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6998[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495eb[32] v6997[8]) 0x080495eb[32])))) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6992[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e8[32] v6991[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6994[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e9[32] v6993[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6996[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495ea[32] v6995[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6998[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495eb[32] v6997[8]) 0x080495eb[32])))) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6992[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e8[32] v6991[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6994[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e9[32] v6993[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6996[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495ea[32] v6995[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6998[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495eb[32] v6997[8]) 0x080495eb[32])))) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6992[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e8[32] v6991[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6994[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e9[32] v6993[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6996[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495ea[32] v6995[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6998[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495eb[32] v6997[8]) 0x080495eb[32])))) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6992[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e8[32] v6991[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6994[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e9[32] v6993[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6996[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495ea[32] v6995[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6998[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495eb[32] v6997[8]) 0x080495eb[32])))) 1[32]))))))) }
        ?3      = { defs={} expr=v6881[1] }
        af      = { defs={0x0804858c,0x08048591} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6992[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e8[32] v6991[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6994[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e9[32] v6993[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6996[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495ea[32] v6995[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6998[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495eb[32] v6997[8]) 0x080495eb[32]))))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6992[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e8[32] v6991[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6994[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e9[32] v6993[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6996[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495ea[32] v6995[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6998[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495eb[32] v6997[8]) 0x080495eb[32]))))) 1[33])))))) }
        ?5      = { defs={} expr=v6883[1] }
        zf      = { defs={0x0804858c,0x08048591} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6992[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e8[32] v6991[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6994[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e9[32] v6993[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6996[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495ea[32] v6995[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6998[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495eb[32] v6997[8]) 0x080495eb[32])))) 1[32])) }
        sf      = { defs={0x0804858c,0x08048591} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6992[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e8[32] v6991[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6994[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e9[32] v6993[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6996[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495ea[32] v6995[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6998[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495eb[32] v6997[8]) 0x080495eb[32])))) 1[32])) }
        tf      = { defs={} expr=v6886[1] }
        if      = { defs={} expr=v6887[1] }
        df      = { defs={} expr=v6888[1] }
        of      = { defs={0x0804858c,0x08048591} expr=0[1] }
        iopl0   = { defs={} expr=v6890[1] }
        iopl1   = { defs={} expr=v6891[1] }
        nt      = { defs={} expr=v6892[1] }
        ?15     = { defs={} expr=v6893[1] }
        rf      = { defs={} expr=v6894[1] }
        vm      = { defs={} expr=v6895[1] }
        ac      = { defs={} expr=v6896[1] }
        vif     = { defs={} expr=v6897[1] }
        vip     = { defs={} expr=v6898[1] }
        id      = { defs={} expr=v6899[1] }
        ?22     = { defs={} expr=v6900[1] }
        ?23     = { defs={} expr=v6901[1] }
        ?24     = { defs={} expr=v6902[1] }
        ?25     = { defs={} expr=v6903[1] }
        ?26     = { defs={} expr=v6904[1] }
        ?27     = { defs={} expr=v6905[1] }
        ?28     = { defs={} expr=v6906[1] }
        ?29     = { defs={} expr=v6907[1] }
        ?30     = { defs={} expr=v6908[1] }
        ?31     = { defs={} expr=v6909[1] }
        ip      = { defs={0x08048580,0x08048581,0x08048583,0x08048584,0x08048587,0x0804858c,0x08048591,0x08048594} expr=0x08048596[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v6867[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v6867[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v6867[32]) }
          flags = { }
        address = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v6868[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v6867[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v6868[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v6869[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v6868[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v6869[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v6868[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v6869[32]) }
          flags = { }
        address = { defs={0x08048580} expr=(add[32] v6868[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v6869[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=0x080495eb[32] }
          value = { defs={} expr=v6997[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495ea[32] }
          value = { defs={} expr=v6995[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495e9[32] }
          value = { defs={} expr=v6993[8] }
          flags = { rdonly }
        address = { defs={0x0804858c} expr=0x080495e8[32] }
          value = { defs={} expr=v6991[8] }
          flags = { rdonly }
0x8048596:lea    esi, [esi + 0x00]
    registers:
        ax      = { defs={0x0804858c} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6992[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e8[32] v6991[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6994[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e9[32] v6993[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6996[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495ea[32] v6995[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6998[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495eb[32] v6997[8]) 0x080495eb[32])))) }
        cx      = { defs={} expr=v6865[32] }
        dx      = { defs={} expr=v6866[32] }
        bx      = { defs={0x08048587} expr=0x080495e8[32] }
        sp      = { defs={0x08048580,0x08048583,0x08048584} expr=(add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048580,0x08048581} expr=(add[32] v6868[32] -4[32]) }
        si      = { defs={0x08048596} expr=v6870[32] }
        di      = { defs={} expr=v6871[32] }
        es      = { defs={} expr=v6872[16] }
        cs      = { defs={} expr=v6873[16] }
        ss      = { defs={} expr=v6874[16] }
        ds      = { defs={} expr=v6875[16] }
        fs      = { defs={} expr=v6876[16] }
        gs      = { defs={} expr=v6877[16] }
        cf      = { defs={0x0804858c,0x08048591} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6992[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e8[32] v6991[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6994[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e9[32] v6993[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6996[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495ea[32] v6995[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6998[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495eb[32] v6997[8]) 0x080495eb[32]))))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6992[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e8[32] v6991[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6994[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e9[32] v6993[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6996[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495ea[32] v6995[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6998[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495eb[32] v6997[8]) 0x080495eb[32]))))) 1[33])))))) }
        ?1      = { defs={} expr=v6879[1] }
        pf      = { defs={0x0804858c,0x08048591} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6992[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e8[32] v6991[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6994[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e9[32] v6993[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6996[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495ea[32] v6995[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6998[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495eb[32] v6997[8]) 0x080495eb[32])))) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6992[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e8[32] v6991[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6994[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e9[32] v6993[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6996[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495ea[32] v6995[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6998[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495eb[32] v6997[8]) 0x080495eb[32])))) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6992[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e8[32] v6991[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6994[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e9[32] v6993[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6996[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495ea[32] v6995[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6998[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495eb[32] v6997[8]) 0x080495eb[32])))) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6992[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e8[32] v6991[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6994[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e9[32] v6993[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6996[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495ea[32] v6995[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6998[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495eb[32] v6997[8]) 0x080495eb[32])))) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6992[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e8[32] v6991[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6994[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e9[32] v6993[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6996[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495ea[32] v6995[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6998[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495eb[32] v6997[8]) 0x080495eb[32])))) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6992[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e8[32] v6991[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6994[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e9[32] v6993[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6996[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495ea[32] v6995[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6998[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495eb[32] v6997[8]) 0x080495eb[32])))) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6992[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e8[32] v6991[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6994[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e9[32] v6993[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6996[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495ea[32] v6995[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6998[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495eb[32] v6997[8]) 0x080495eb[32])))) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6992[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e8[32] v6991[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6994[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e9[32] v6993[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6996[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495ea[32] v6995[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6998[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495eb[32] v6997[8]) 0x080495eb[32])))) 1[32]))))))) }
        ?3      = { defs={} expr=v6881[1] }
        af      = { defs={0x0804858c,0x08048591} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6992[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e8[32] v6991[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6994[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e9[32] v6993[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6996[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495ea[32] v6995[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6998[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495eb[32] v6997[8]) 0x080495eb[32]))))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6992[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e8[32] v6991[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6994[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e9[32] v6993[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6996[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495ea[32] v6995[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6998[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495eb[32] v6997[8]) 0x080495eb[32]))))) 1[33])))))) }
        ?5      = { defs={} expr=v6883[1] }
        zf      = { defs={0x0804858c,0x08048591} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6992[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e8[32] v6991[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6994[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e9[32] v6993[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6996[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495ea[32] v6995[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6998[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495eb[32] v6997[8]) 0x080495eb[32])))) 1[32])) }
        sf      = { defs={0x0804858c,0x08048591} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6992[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e8[32] v6991[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6994[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e9[32] v6993[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6996[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495ea[32] v6995[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6998[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495eb[32] v6997[8]) 0x080495eb[32])))) 1[32])) }
        tf      = { defs={} expr=v6886[1] }
        if      = { defs={} expr=v6887[1] }
        df      = { defs={} expr=v6888[1] }
        of      = { defs={0x0804858c,0x08048591} expr=0[1] }
        iopl0   = { defs={} expr=v6890[1] }
        iopl1   = { defs={} expr=v6891[1] }
        nt      = { defs={} expr=v6892[1] }
        ?15     = { defs={} expr=v6893[1] }
        rf      = { defs={} expr=v6894[1] }
        vm      = { defs={} expr=v6895[1] }
        ac      = { defs={} expr=v6896[1] }
        vif     = { defs={} expr=v6897[1] }
        vip     = { defs={} expr=v6898[1] }
        id      = { defs={} expr=v6899[1] }
        ?22     = { defs={} expr=v6900[1] }
        ?23     = { defs={} expr=v6901[1] }
        ?24     = { defs={} expr=v6902[1] }
        ?25     = { defs={} expr=v6903[1] }
        ?26     = { defs={} expr=v6904[1] }
        ?27     = { defs={} expr=v6905[1] }
        ?28     = { defs={} expr=v6906[1] }
        ?29     = { defs={} expr=v6907[1] }
        ?30     = { defs={} expr=v6908[1] }
        ?31     = { defs={} expr=v6909[1] }
        ip      = { defs={0x08048580,0x08048581,0x08048583,0x08048584,0x08048587,0x0804858c,0x08048591,0x08048594,0x08048596} expr=0x08048599[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v6867[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v6867[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v6867[32]) }
          flags = { }
        address = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v6868[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v6867[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v6868[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v6869[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v6868[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v6869[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v6868[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v6869[32]) }
          flags = { }
        address = { defs={0x08048580} expr=(add[32] v6868[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v6869[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=0x080495eb[32] }
          value = { defs={} expr=v6997[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495ea[32] }
          value = { defs={} expr=v6995[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495e9[32] }
          value = { defs={} expr=v6993[8] }
          flags = { rdonly }
        address = { defs={0x0804858c} expr=0x080495e8[32] }
          value = { defs={} expr=v6991[8] }
          flags = { rdonly }
0x8048599:lea    edi, [edi + 0x00000000]
    registers:
        ax      = { defs={0x0804858c} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6992[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e8[32] v6991[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6994[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e9[32] v6993[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6996[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495ea[32] v6995[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6998[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495eb[32] v6997[8]) 0x080495eb[32])))) }
        cx      = { defs={} expr=v6865[32] }
        dx      = { defs={} expr=v6866[32] }
        bx      = { defs={0x08048587} expr=0x080495e8[32] }
        sp      = { defs={0x08048580,0x08048583,0x08048584} expr=(add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048580,0x08048581} expr=(add[32] v6868[32] -4[32]) }
        si      = { defs={0x08048596} expr=v6870[32] }
        di      = { defs={0x08048599} expr=v6871[32] }
        es      = { defs={} expr=v6872[16] }
        cs      = { defs={} expr=v6873[16] }
        ss      = { defs={} expr=v6874[16] }
        ds      = { defs={} expr=v6875[16] }
        fs      = { defs={} expr=v6876[16] }
        gs      = { defs={} expr=v6877[16] }
        cf      = { defs={0x0804858c,0x08048591} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6992[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e8[32] v6991[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6994[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e9[32] v6993[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6996[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495ea[32] v6995[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6998[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495eb[32] v6997[8]) 0x080495eb[32]))))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6992[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e8[32] v6991[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6994[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e9[32] v6993[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6996[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495ea[32] v6995[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6998[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495eb[32] v6997[8]) 0x080495eb[32]))))) 1[33])))))) }
        ?1      = { defs={} expr=v6879[1] }
        pf      = { defs={0x0804858c,0x08048591} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6992[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e8[32] v6991[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6994[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e9[32] v6993[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6996[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495ea[32] v6995[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6998[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495eb[32] v6997[8]) 0x080495eb[32])))) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6992[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e8[32] v6991[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6994[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e9[32] v6993[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6996[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495ea[32] v6995[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6998[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495eb[32] v6997[8]) 0x080495eb[32])))) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6992[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e8[32] v6991[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6994[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e9[32] v6993[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6996[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495ea[32] v6995[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6998[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495eb[32] v6997[8]) 0x080495eb[32])))) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6992[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e8[32] v6991[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6994[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e9[32] v6993[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6996[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495ea[32] v6995[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6998[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495eb[32] v6997[8]) 0x080495eb[32])))) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6992[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e8[32] v6991[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6994[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e9[32] v6993[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6996[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495ea[32] v6995[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6998[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495eb[32] v6997[8]) 0x080495eb[32])))) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6992[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e8[32] v6991[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6994[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e9[32] v6993[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6996[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495ea[32] v6995[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6998[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495eb[32] v6997[8]) 0x080495eb[32])))) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6992[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e8[32] v6991[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6994[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e9[32] v6993[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6996[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495ea[32] v6995[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6998[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495eb[32] v6997[8]) 0x080495eb[32])))) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6992[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e8[32] v6991[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6994[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e9[32] v6993[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6996[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495ea[32] v6995[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6998[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495eb[32] v6997[8]) 0x080495eb[32])))) 1[32]))))))) }
        ?3      = { defs={} expr=v6881[1] }
        af      = { defs={0x0804858c,0x08048591} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6992[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e8[32] v6991[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6994[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e9[32] v6993[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6996[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495ea[32] v6995[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6998[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495eb[32] v6997[8]) 0x080495eb[32]))))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6992[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e8[32] v6991[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6994[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e9[32] v6993[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6996[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495ea[32] v6995[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6998[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495eb[32] v6997[8]) 0x080495eb[32]))))) 1[33])))))) }
        ?5      = { defs={} expr=v6883[1] }
        zf      = { defs={0x0804858c,0x08048591} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6992[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e8[32] v6991[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6994[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e9[32] v6993[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6996[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495ea[32] v6995[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6998[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495eb[32] v6997[8]) 0x080495eb[32])))) 1[32])) }
        sf      = { defs={0x0804858c,0x08048591} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6992[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e8[32] v6991[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6994[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e9[32] v6993[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6996[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495ea[32] v6995[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6998[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495eb[32] v6997[8]) 0x080495eb[32])))) 1[32])) }
        tf      = { defs={} expr=v6886[1] }
        if      = { defs={} expr=v6887[1] }
        df      = { defs={} expr=v6888[1] }
        of      = { defs={0x0804858c,0x08048591} expr=0[1] }
        iopl0   = { defs={} expr=v6890[1] }
        iopl1   = { defs={} expr=v6891[1] }
        nt      = { defs={} expr=v6892[1] }
        ?15     = { defs={} expr=v6893[1] }
        rf      = { defs={} expr=v6894[1] }
        vm      = { defs={} expr=v6895[1] }
        ac      = { defs={} expr=v6896[1] }
        vif     = { defs={} expr=v6897[1] }
        vip     = { defs={} expr=v6898[1] }
        id      = { defs={} expr=v6899[1] }
        ?22     = { defs={} expr=v6900[1] }
        ?23     = { defs={} expr=v6901[1] }
        ?24     = { defs={} expr=v6902[1] }
        ?25     = { defs={} expr=v6903[1] }
        ?26     = { defs={} expr=v6904[1] }
        ?27     = { defs={} expr=v6905[1] }
        ?28     = { defs={} expr=v6906[1] }
        ?29     = { defs={} expr=v6907[1] }
        ?30     = { defs={} expr=v6908[1] }
        ?31     = { defs={} expr=v6909[1] }
        ip      = { defs={0x08048580,0x08048581,0x08048583,0x08048584,0x08048587,0x0804858c,0x08048591,0x08048594,0x08048596,0x08048599} expr=0x080485a0[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v6867[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v6867[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v6867[32]) }
          flags = { }
        address = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v6868[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v6867[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v6868[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v6869[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v6868[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v6869[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v6868[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v6869[32]) }
          flags = { }
        address = { defs={0x08048580} expr=(add[32] v6868[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v6869[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=0x080495eb[32] }
          value = { defs={} expr=v6997[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495ea[32] }
          value = { defs={} expr=v6995[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495e9[32] }
          value = { defs={} expr=v6993[8] }
          flags = { rdonly }
        address = { defs={0x0804858c} expr=0x080495e8[32] }
          value = { defs={} expr=v6991[8] }
          flags = { rdonly }
0x80485a0:sub    ebx, 0x04
    registers:
        ax      = { defs={0x0804858c} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6992[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e8[32] v6991[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6994[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e9[32] v6993[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6996[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495ea[32] v6995[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6998[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495eb[32] v6997[8]) 0x080495eb[32])))) }
        cx      = { defs={} expr=v6865[32] }
        dx      = { defs={} expr=v6866[32] }
        bx      = { defs={0x08048587,0x080485a0} expr=0x080495e4[32] }
        sp      = { defs={0x08048580,0x08048583,0x08048584} expr=(add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048580,0x08048581} expr=(add[32] v6868[32] -4[32]) }
        si      = { defs={0x08048596} expr=v6870[32] }
        di      = { defs={0x08048599} expr=v6871[32] }
        es      = { defs={} expr=v6872[16] }
        cs      = { defs={} expr=v6873[16] }
        ss      = { defs={} expr=v6874[16] }
        ds      = { defs={} expr=v6875[16] }
        fs      = { defs={} expr=v6876[16] }
        gs      = { defs={} expr=v6877[16] }
        cf      = { defs={0x08048587,0x080485a0} expr=0[1] }
        ?1      = { defs={} expr=v6879[1] }
        pf      = { defs={0x08048587,0x080485a0} expr=1[1] }
        ?3      = { defs={} expr=v6881[1] }
        af      = { defs={0x08048587,0x080485a0} expr=0[1] }
        ?5      = { defs={} expr=v6883[1] }
        zf      = { defs={0x08048587,0x080485a0} expr=0[1] }
        sf      = { defs={0x08048587,0x080485a0} expr=0[1] }
        tf      = { defs={} expr=v6886[1] }
        if      = { defs={} expr=v6887[1] }
        df      = { defs={} expr=v6888[1] }
        of      = { defs={0x08048587,0x080485a0} expr=0[1] }
        iopl0   = { defs={} expr=v6890[1] }
        iopl1   = { defs={} expr=v6891[1] }
        nt      = { defs={} expr=v6892[1] }
        ?15     = { defs={} expr=v6893[1] }
        rf      = { defs={} expr=v6894[1] }
        vm      = { defs={} expr=v6895[1] }
        ac      = { defs={} expr=v6896[1] }
        vif     = { defs={} expr=v6897[1] }
        vip     = { defs={} expr=v6898[1] }
        id      = { defs={} expr=v6899[1] }
        ?22     = { defs={} expr=v6900[1] }
        ?23     = { defs={} expr=v6901[1] }
        ?24     = { defs={} expr=v6902[1] }
        ?25     = { defs={} expr=v6903[1] }
        ?26     = { defs={} expr=v6904[1] }
        ?27     = { defs={} expr=v6905[1] }
        ?28     = { defs={} expr=v6906[1] }
        ?29     = { defs={} expr=v6907[1] }
        ?30     = { defs={} expr=v6908[1] }
        ?31     = { defs={} expr=v6909[1] }
        ip      = { defs={0x08048580,0x08048581,0x08048583,0x08048584,0x08048587,0x0804858c,0x08048591,0x08048594,0x08048596,0x08048599,0x080485a0} expr=0x080485a3[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v6867[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v6867[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v6867[32]) }
          flags = { }
        address = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v6868[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v6867[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v6868[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v6869[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v6868[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v6869[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v6868[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v6869[32]) }
          flags = { }
        address = { defs={0x08048580} expr=(add[32] v6868[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v6869[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=0x080495eb[32] }
          value = { defs={} expr=v6997[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495ea[32] }
          value = { defs={} expr=v6995[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495e9[32] }
          value = { defs={} expr=v6993[8] }
          flags = { rdonly }
        address = { defs={0x0804858c} expr=0x080495e8[32] }
          value = { defs={} expr=v6991[8] }
          flags = { rdonly }
0x80485a3:call   eax
    registers:
        ax      = { defs={0x0804858c} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6992[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e8[32] v6991[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6994[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e9[32] v6993[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6996[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495ea[32] v6995[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6998[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495eb[32] v6997[8]) 0x080495eb[32])))) }
        cx      = { defs={} expr=v6865[32] }
        dx      = { defs={} expr=v6866[32] }
        bx      = { defs={0x08048587,0x080485a0} expr=0x080495e4[32] }
        sp      = { defs={0x08048580,0x08048583,0x08048584,0x080485a3} expr=(add[32] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048580,0x08048581} expr=(add[32] v6868[32] -4[32]) }
        si      = { defs={0x08048596} expr=v6870[32] }
        di      = { defs={0x08048599} expr=v6871[32] }
        es      = { defs={} expr=v6872[16] }
        cs      = { defs={} expr=v6873[16] }
        ss      = { defs={} expr=v6874[16] }
        ds      = { defs={} expr=v6875[16] }
        fs      = { defs={} expr=v6876[16] }
        gs      = { defs={} expr=v6877[16] }
        cf      = { defs={0x08048587,0x080485a0} expr=0[1] }
        ?1      = { defs={} expr=v6879[1] }
        pf      = { defs={0x08048587,0x080485a0} expr=1[1] }
        ?3      = { defs={} expr=v6881[1] }
        af      = { defs={0x08048587,0x080485a0} expr=0[1] }
        ?5      = { defs={} expr=v6883[1] }
        zf      = { defs={0x08048587,0x080485a0} expr=0[1] }
        sf      = { defs={0x08048587,0x080485a0} expr=0[1] }
        tf      = { defs={} expr=v6886[1] }
        if      = { defs={} expr=v6887[1] }
        df      = { defs={} expr=v6888[1] }
        of      = { defs={0x08048587,0x080485a0} expr=0[1] }
        iopl0   = { defs={} expr=v6890[1] }
        iopl1   = { defs={} expr=v6891[1] }
        nt      = { defs={} expr=v6892[1] }
        ?15     = { defs={} expr=v6893[1] }
        rf      = { defs={} expr=v6894[1] }
        vm      = { defs={} expr=v6895[1] }
        ac      = { defs={} expr=v6896[1] }
        vif     = { defs={} expr=v6897[1] }
        vip     = { defs={} expr=v6898[1] }
        id      = { defs={} expr=v6899[1] }
        ?22     = { defs={} expr=v6900[1] }
        ?23     = { defs={} expr=v6901[1] }
        ?24     = { defs={} expr=v6902[1] }
        ?25     = { defs={} expr=v6903[1] }
        ?26     = { defs={} expr=v6904[1] }
        ?27     = { defs={} expr=v6905[1] }
        ?28     = { defs={} expr=v6906[1] }
        ?29     = { defs={} expr=v6907[1] }
        ?30     = { defs={} expr=v6908[1] }
        ?31     = { defs={} expr=v6909[1] }
        ip      = { defs={0x0804858c,0x080485a3} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6992[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e8[32] v6991[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6994[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495e9[32] v6993[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6996[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495ea[32] v6995[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m6998[8] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6867[32])) (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v6867[32])) (add[32] (add[32] v6868[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v6869[32])) (add[32] (add[32] v6868[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v6869[32])) (add[32] v6868[32] -4[32]) (extract[8] 0[32] 8[32] v6869[32])) 0x080495eb[32] v6997[8]) 0x080495eb[32])))) }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x08048580,0x08048583,0x08048584,0x080485a3} expr=(add[32] (add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=-91[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v6867[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v6867[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v6868[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v6867[32]) }
          flags = { }
        address = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v6868[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v6867[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v6868[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v6869[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v6868[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v6869[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v6868[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v6869[32]) }
          flags = { }
        address = { defs={0x08048580} expr=(add[32] v6868[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v6869[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=0x080495eb[32] }
          value = { defs={} expr=v6997[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495ea[32] }
          value = { defs={} expr=v6995[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495e9[32] }
          value = { defs={} expr=v6993[8] }
          flags = { rdonly }
        address = { defs={0x0804858c} expr=0x080495e8[32] }
          value = { defs={} expr=v6991[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80485a5:mov    eax, DWORD PTR ds:[ebx]
    registers:
        ax      = { defs={0x080485a5} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7236[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7237[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7238[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7239[8]))) }
        cx      = { defs={} expr=v7184[32] }
        dx      = { defs={} expr=v7185[32] }
        bx      = { defs={} expr=v7186[32] }
        sp      = { defs={} expr=v7187[32] }
        bp      = { defs={} expr=v7188[32] }
        si      = { defs={} expr=v7189[32] }
        di      = { defs={} expr=v7190[32] }
        es      = { defs={} expr=v7191[16] }
        cs      = { defs={} expr=v7192[16] }
        ss      = { defs={} expr=v7193[16] }
        ds      = { defs={} expr=v7194[16] }
        fs      = { defs={} expr=v7195[16] }
        gs      = { defs={} expr=v7196[16] }
        cf      = { defs={} expr=v7197[1] }
        ?1      = { defs={} expr=v7198[1] }
        pf      = { defs={} expr=v7199[1] }
        ?3      = { defs={} expr=v7200[1] }
        af      = { defs={} expr=v7201[1] }
        ?5      = { defs={} expr=v7202[1] }
        zf      = { defs={} expr=v7203[1] }
        sf      = { defs={} expr=v7204[1] }
        tf      = { defs={} expr=v7205[1] }
        if      = { defs={} expr=v7206[1] }
        df      = { defs={} expr=v7207[1] }
        of      = { defs={} expr=v7208[1] }
        iopl0   = { defs={} expr=v7209[1] }
        iopl1   = { defs={} expr=v7210[1] }
        nt      = { defs={} expr=v7211[1] }
        ?15     = { defs={} expr=v7212[1] }
        rf      = { defs={} expr=v7213[1] }
        vm      = { defs={} expr=v7214[1] }
        ac      = { defs={} expr=v7215[1] }
        vif     = { defs={} expr=v7216[1] }
        vip     = { defs={} expr=v7217[1] }
        id      = { defs={} expr=v7218[1] }
        ?22     = { defs={} expr=v7219[1] }
        ?23     = { defs={} expr=v7220[1] }
        ?24     = { defs={} expr=v7221[1] }
        ?25     = { defs={} expr=v7222[1] }
        ?26     = { defs={} expr=v7223[1] }
        ?27     = { defs={} expr=v7224[1] }
        ?28     = { defs={} expr=v7225[1] }
        ?29     = { defs={} expr=v7226[1] }
        ?30     = { defs={} expr=v7227[1] }
        ?31     = { defs={} expr=v7228[1] }
        ip      = { defs={0x080485a5} expr=0x080485a7[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v7186[32] 3[32]) }
          value = { defs={} expr=v7239[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7186[32] 2[32]) }
          value = { defs={} expr=v7238[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7186[32] 1[32]) }
          value = { defs={} expr=v7237[8] }
          flags = { rdonly }
        address = { defs={0x080485a5} expr=v7186[32] }
          value = { defs={} expr=v7236[8] }
          flags = { rdonly }
0x80485a7:cmp    eax, 0xff<-0x01>
    registers:
        ax      = { defs={0x080485a5} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7236[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7237[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7238[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7239[8]))) }
        cx      = { defs={} expr=v7184[32] }
        dx      = { defs={} expr=v7185[32] }
        bx      = { defs={} expr=v7186[32] }
        sp      = { defs={} expr=v7187[32] }
        bp      = { defs={} expr=v7188[32] }
        si      = { defs={} expr=v7189[32] }
        di      = { defs={} expr=v7190[32] }
        es      = { defs={} expr=v7191[16] }
        cs      = { defs={} expr=v7192[16] }
        ss      = { defs={} expr=v7193[16] }
        ds      = { defs={} expr=v7194[16] }
        fs      = { defs={} expr=v7195[16] }
        gs      = { defs={} expr=v7196[16] }
        cf      = { defs={0x080485a5,0x080485a7} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7236[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7237[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7238[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7239[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7236[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7237[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7238[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7239[8])))) 1[33])))))) }
        ?1      = { defs={} expr=v7198[1] }
        pf      = { defs={0x080485a5,0x080485a7} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7236[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7237[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7238[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7239[8]))) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7236[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7237[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7238[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7239[8]))) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7236[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7237[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7238[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7239[8]))) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7236[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7237[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7238[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7239[8]))) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7236[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7237[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7238[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7239[8]))) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7236[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7237[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7238[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7239[8]))) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7236[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7237[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7238[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7239[8]))) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7236[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7237[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7238[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7239[8]))) 1[32]))))))) }
        ?3      = { defs={} expr=v7200[1] }
        af      = { defs={0x080485a5,0x080485a7} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7236[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7237[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7238[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7239[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7236[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7237[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7238[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7239[8])))) 1[33])))))) }
        ?5      = { defs={} expr=v7202[1] }
        zf      = { defs={0x080485a5,0x080485a7} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7236[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7237[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7238[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7239[8]))) 1[32])) }
        sf      = { defs={0x080485a5,0x080485a7} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7236[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7237[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7238[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7239[8]))) 1[32])) }
        tf      = { defs={} expr=v7205[1] }
        if      = { defs={} expr=v7206[1] }
        df      = { defs={} expr=v7207[1] }
        of      = { defs={0x080485a5,0x080485a7} expr=0[1] }
        iopl0   = { defs={} expr=v7209[1] }
        iopl1   = { defs={} expr=v7210[1] }
        nt      = { defs={} expr=v7211[1] }
        ?15     = { defs={} expr=v7212[1] }
        rf      = { defs={} expr=v7213[1] }
        vm      = { defs={} expr=v7214[1] }
        ac      = { defs={} expr=v7215[1] }
        vif     = { defs={} expr=v7216[1] }
        vip     = { defs={} expr=v7217[1] }
        id      = { defs={} expr=v7218[1] }
        ?22     = { defs={} expr=v7219[1] }
        ?23     = { defs={} expr=v7220[1] }
        ?24     = { defs={} expr=v7221[1] }
        ?25     = { defs={} expr=v7222[1] }
        ?26     = { defs={} expr=v7223[1] }
        ?27     = { defs={} expr=v7224[1] }
        ?28     = { defs={} expr=v7225[1] }
        ?29     = { defs={} expr=v7226[1] }
        ?30     = { defs={} expr=v7227[1] }
        ?31     = { defs={} expr=v7228[1] }
        ip      = { defs={0x080485a5,0x080485a7} expr=0x080485aa[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v7186[32] 3[32]) }
          value = { defs={} expr=v7239[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7186[32] 2[32]) }
          value = { defs={} expr=v7238[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7186[32] 1[32]) }
          value = { defs={} expr=v7237[8] }
          flags = { rdonly }
        address = { defs={0x080485a5} expr=v7186[32] }
          value = { defs={} expr=v7236[8] }
          flags = { rdonly }
0x80485aa:jne    0x080485a0<<Insn>>
    registers:
        ax      = { defs={0x080485a5} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7236[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7237[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7238[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7239[8]))) }
        cx      = { defs={} expr=v7184[32] }
        dx      = { defs={} expr=v7185[32] }
        bx      = { defs={} expr=v7186[32] }
        sp      = { defs={} expr=v7187[32] }
        bp      = { defs={} expr=v7188[32] }
        si      = { defs={} expr=v7189[32] }
        di      = { defs={} expr=v7190[32] }
        es      = { defs={} expr=v7191[16] }
        cs      = { defs={} expr=v7192[16] }
        ss      = { defs={} expr=v7193[16] }
        ds      = { defs={} expr=v7194[16] }
        fs      = { defs={} expr=v7195[16] }
        gs      = { defs={} expr=v7196[16] }
        cf      = { defs={0x080485a5,0x080485a7} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7236[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7237[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7238[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7239[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7236[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7237[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7238[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7239[8])))) 1[33])))))) }
        ?1      = { defs={} expr=v7198[1] }
        pf      = { defs={0x080485a5,0x080485a7} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7236[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7237[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7238[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7239[8]))) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7236[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7237[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7238[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7239[8]))) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7236[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7237[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7238[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7239[8]))) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7236[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7237[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7238[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7239[8]))) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7236[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7237[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7238[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7239[8]))) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7236[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7237[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7238[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7239[8]))) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7236[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7237[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7238[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7239[8]))) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7236[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7237[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7238[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7239[8]))) 1[32]))))))) }
        ?3      = { defs={} expr=v7200[1] }
        af      = { defs={0x080485a5,0x080485a7} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7236[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7237[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7238[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7239[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7236[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7237[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7238[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7239[8])))) 1[33])))))) }
        ?5      = { defs={} expr=v7202[1] }
        zf      = { defs={0x080485a5,0x080485a7} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7236[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7237[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7238[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7239[8]))) 1[32])) }
        sf      = { defs={0x080485a5,0x080485a7} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7236[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7237[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7238[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7239[8]))) 1[32])) }
        tf      = { defs={} expr=v7205[1] }
        if      = { defs={} expr=v7206[1] }
        df      = { defs={} expr=v7207[1] }
        of      = { defs={0x080485a5,0x080485a7} expr=0[1] }
        iopl0   = { defs={} expr=v7209[1] }
        iopl1   = { defs={} expr=v7210[1] }
        nt      = { defs={} expr=v7211[1] }
        ?15     = { defs={} expr=v7212[1] }
        rf      = { defs={} expr=v7213[1] }
        vm      = { defs={} expr=v7214[1] }
        ac      = { defs={} expr=v7215[1] }
        vif     = { defs={} expr=v7216[1] }
        vip     = { defs={} expr=v7217[1] }
        id      = { defs={} expr=v7218[1] }
        ?22     = { defs={} expr=v7219[1] }
        ?23     = { defs={} expr=v7220[1] }
        ?24     = { defs={} expr=v7221[1] }
        ?25     = { defs={} expr=v7222[1] }
        ?26     = { defs={} expr=v7223[1] }
        ?27     = { defs={} expr=v7224[1] }
        ?28     = { defs={} expr=v7225[1] }
        ?29     = { defs={} expr=v7226[1] }
        ?30     = { defs={} expr=v7227[1] }
        ?31     = { defs={} expr=v7228[1] }
        ip      = { defs={0x080485a5,0x080485a7,0x080485aa} expr=0x080485a0[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v7186[32] 3[32]) }
          value = { defs={} expr=v7239[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7186[32] 2[32]) }
          value = { defs={} expr=v7238[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7186[32] 1[32]) }
          value = { defs={} expr=v7237[8] }
          flags = { rdonly }
        address = { defs={0x080485a5} expr=v7186[32] }
          value = { defs={} expr=v7236[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80485ac:pop    eax
    registers:
        ax      = { defs={0x080485ac} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7407[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7408[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7409[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7410[8]))) }
        cx      = { defs={} expr=v7353[32] }
        dx      = { defs={} expr=v7354[32] }
        bx      = { defs={} expr=v7355[32] }
        sp      = { defs={0x080485ac} expr=(add[32] v7356[32] 4[32]) }
        bp      = { defs={} expr=v7357[32] }
        si      = { defs={} expr=v7358[32] }
        di      = { defs={} expr=v7359[32] }
        es      = { defs={} expr=v7360[16] }
        cs      = { defs={} expr=v7361[16] }
        ss      = { defs={} expr=v7362[16] }
        ds      = { defs={} expr=v7363[16] }
        fs      = { defs={} expr=v7364[16] }
        gs      = { defs={} expr=v7365[16] }
        cf      = { defs={} expr=v7366[1] }
        ?1      = { defs={} expr=v7367[1] }
        pf      = { defs={} expr=v7368[1] }
        ?3      = { defs={} expr=v7369[1] }
        af      = { defs={} expr=v7370[1] }
        ?5      = { defs={} expr=v7371[1] }
        zf      = { defs={} expr=v7372[1] }
        sf      = { defs={} expr=v7373[1] }
        tf      = { defs={} expr=v7374[1] }
        if      = { defs={} expr=v7375[1] }
        df      = { defs={} expr=v7376[1] }
        of      = { defs={} expr=v7377[1] }
        iopl0   = { defs={} expr=v7378[1] }
        iopl1   = { defs={} expr=v7379[1] }
        nt      = { defs={} expr=v7380[1] }
        ?15     = { defs={} expr=v7381[1] }
        rf      = { defs={} expr=v7382[1] }
        vm      = { defs={} expr=v7383[1] }
        ac      = { defs={} expr=v7384[1] }
        vif     = { defs={} expr=v7385[1] }
        vip     = { defs={} expr=v7386[1] }
        id      = { defs={} expr=v7387[1] }
        ?22     = { defs={} expr=v7388[1] }
        ?23     = { defs={} expr=v7389[1] }
        ?24     = { defs={} expr=v7390[1] }
        ?25     = { defs={} expr=v7391[1] }
        ?26     = { defs={} expr=v7392[1] }
        ?27     = { defs={} expr=v7393[1] }
        ?28     = { defs={} expr=v7394[1] }
        ?29     = { defs={} expr=v7395[1] }
        ?30     = { defs={} expr=v7396[1] }
        ?31     = { defs={} expr=v7397[1] }
        ip      = { defs={0x080485ac} expr=0x080485ad[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v7356[32] 3[32]) }
          value = { defs={} expr=v7410[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7356[32] 2[32]) }
          value = { defs={} expr=v7409[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7356[32] 1[32]) }
          value = { defs={} expr=v7408[8] }
          flags = { rdonly }
        address = { defs={0x080485ac} expr=v7356[32] }
          value = { defs={} expr=v7407[8] }
          flags = { rdonly }
0x80485ad:pop    ebx
    registers:
        ax      = { defs={0x080485ac} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7407[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7408[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7409[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7410[8]))) }
        cx      = { defs={} expr=v7353[32] }
        dx      = { defs={} expr=v7354[32] }
        bx      = { defs={0x080485ad} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7424[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7425[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7426[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7427[8]))) }
        sp      = { defs={0x080485ac,0x080485ad} expr=(add[32] (add[32] v7356[32] 4[32]) 4[32]) }
        bp      = { defs={} expr=v7357[32] }
        si      = { defs={} expr=v7358[32] }
        di      = { defs={} expr=v7359[32] }
        es      = { defs={} expr=v7360[16] }
        cs      = { defs={} expr=v7361[16] }
        ss      = { defs={} expr=v7362[16] }
        ds      = { defs={} expr=v7363[16] }
        fs      = { defs={} expr=v7364[16] }
        gs      = { defs={} expr=v7365[16] }
        cf      = { defs={} expr=v7366[1] }
        ?1      = { defs={} expr=v7367[1] }
        pf      = { defs={} expr=v7368[1] }
        ?3      = { defs={} expr=v7369[1] }
        af      = { defs={} expr=v7370[1] }
        ?5      = { defs={} expr=v7371[1] }
        zf      = { defs={} expr=v7372[1] }
        sf      = { defs={} expr=v7373[1] }
        tf      = { defs={} expr=v7374[1] }
        if      = { defs={} expr=v7375[1] }
        df      = { defs={} expr=v7376[1] }
        of      = { defs={} expr=v7377[1] }
        iopl0   = { defs={} expr=v7378[1] }
        iopl1   = { defs={} expr=v7379[1] }
        nt      = { defs={} expr=v7380[1] }
        ?15     = { defs={} expr=v7381[1] }
        rf      = { defs={} expr=v7382[1] }
        vm      = { defs={} expr=v7383[1] }
        ac      = { defs={} expr=v7384[1] }
        vif     = { defs={} expr=v7385[1] }
        vip     = { defs={} expr=v7386[1] }
        id      = { defs={} expr=v7387[1] }
        ?22     = { defs={} expr=v7388[1] }
        ?23     = { defs={} expr=v7389[1] }
        ?24     = { defs={} expr=v7390[1] }
        ?25     = { defs={} expr=v7391[1] }
        ?26     = { defs={} expr=v7392[1] }
        ?27     = { defs={} expr=v7393[1] }
        ?28     = { defs={} expr=v7394[1] }
        ?29     = { defs={} expr=v7395[1] }
        ?30     = { defs={} expr=v7396[1] }
        ?31     = { defs={} expr=v7397[1] }
        ip      = { defs={0x080485ac,0x080485ad} expr=0x080485ae[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v7356[32] 4[32]) 3[32]) }
          value = { defs={} expr=v7427[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v7356[32] 4[32]) 2[32]) }
          value = { defs={} expr=v7426[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v7356[32] 4[32]) 1[32]) }
          value = { defs={} expr=v7425[8] }
          flags = { rdonly }
        address = { defs={0x080485ac,0x080485ad} expr=(add[32] v7356[32] 4[32]) }
          value = { defs={} expr=v7424[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7356[32] 3[32]) }
          value = { defs={} expr=v7410[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7356[32] 2[32]) }
          value = { defs={} expr=v7409[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7356[32] 1[32]) }
          value = { defs={} expr=v7408[8] }
          flags = { rdonly }
        address = { defs={0x080485ac} expr=v7356[32] }
          value = { defs={} expr=v7407[8] }
          flags = { rdonly }
0x80485ae:pop    ebp
    registers:
        ax      = { defs={0x080485ac} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7407[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7408[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7409[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7410[8]))) }
        cx      = { defs={} expr=v7353[32] }
        dx      = { defs={} expr=v7354[32] }
        bx      = { defs={0x080485ad} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7424[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7425[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7426[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7427[8]))) }
        sp      = { defs={0x080485ac,0x080485ad,0x080485ae} expr=(add[32] (add[32] (add[32] v7356[32] 4[32]) 4[32]) 4[32]) }
        bp      = { defs={0x080485ae} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7441[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7442[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7443[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7444[8]))) }
        si      = { defs={} expr=v7358[32] }
        di      = { defs={} expr=v7359[32] }
        es      = { defs={} expr=v7360[16] }
        cs      = { defs={} expr=v7361[16] }
        ss      = { defs={} expr=v7362[16] }
        ds      = { defs={} expr=v7363[16] }
        fs      = { defs={} expr=v7364[16] }
        gs      = { defs={} expr=v7365[16] }
        cf      = { defs={} expr=v7366[1] }
        ?1      = { defs={} expr=v7367[1] }
        pf      = { defs={} expr=v7368[1] }
        ?3      = { defs={} expr=v7369[1] }
        af      = { defs={} expr=v7370[1] }
        ?5      = { defs={} expr=v7371[1] }
        zf      = { defs={} expr=v7372[1] }
        sf      = { defs={} expr=v7373[1] }
        tf      = { defs={} expr=v7374[1] }
        if      = { defs={} expr=v7375[1] }
        df      = { defs={} expr=v7376[1] }
        of      = { defs={} expr=v7377[1] }
        iopl0   = { defs={} expr=v7378[1] }
        iopl1   = { defs={} expr=v7379[1] }
        nt      = { defs={} expr=v7380[1] }
        ?15     = { defs={} expr=v7381[1] }
        rf      = { defs={} expr=v7382[1] }
        vm      = { defs={} expr=v7383[1] }
        ac      = { defs={} expr=v7384[1] }
        vif     = { defs={} expr=v7385[1] }
        vip     = { defs={} expr=v7386[1] }
        id      = { defs={} expr=v7387[1] }
        ?22     = { defs={} expr=v7388[1] }
        ?23     = { defs={} expr=v7389[1] }
        ?24     = { defs={} expr=v7390[1] }
        ?25     = { defs={} expr=v7391[1] }
        ?26     = { defs={} expr=v7392[1] }
        ?27     = { defs={} expr=v7393[1] }
        ?28     = { defs={} expr=v7394[1] }
        ?29     = { defs={} expr=v7395[1] }
        ?30     = { defs={} expr=v7396[1] }
        ?31     = { defs={} expr=v7397[1] }
        ip      = { defs={0x080485ac,0x080485ad,0x080485ae} expr=0x080485af[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] v7356[32] 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v7444[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7356[32] 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v7443[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7356[32] 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v7442[8] }
          flags = { rdonly }
        address = { defs={0x080485ac,0x080485ad,0x080485ae} expr=(add[32] (add[32] v7356[32] 4[32]) 4[32]) }
          value = { defs={} expr=v7441[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v7356[32] 4[32]) 3[32]) }
          value = { defs={} expr=v7427[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v7356[32] 4[32]) 2[32]) }
          value = { defs={} expr=v7426[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v7356[32] 4[32]) 1[32]) }
          value = { defs={} expr=v7425[8] }
          flags = { rdonly }
        address = { defs={0x080485ac,0x080485ad} expr=(add[32] v7356[32] 4[32]) }
          value = { defs={} expr=v7424[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7356[32] 3[32]) }
          value = { defs={} expr=v7410[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7356[32] 2[32]) }
          value = { defs={} expr=v7409[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7356[32] 1[32]) }
          value = { defs={} expr=v7408[8] }
          flags = { rdonly }
        address = { defs={0x080485ac} expr=v7356[32] }
          value = { defs={} expr=v7407[8] }
          flags = { rdonly }
0x80485af:ret    
    registers:
        ax      = { defs={0x080485ac} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7407[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7408[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7409[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7410[8]))) }
        cx      = { defs={} expr=v7353[32] }
        dx      = { defs={} expr=v7354[32] }
        bx      = { defs={0x080485ad} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7424[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7425[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7426[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7427[8]))) }
        sp      = { defs={0x080485ac,0x080485ad,0x080485ae,0x080485af} expr=(add[32] (add[32] (add[32] (add[32] v7356[32] 4[32]) 4[32]) 4[32]) 4[32]) }
        bp      = { defs={0x080485ae} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7441[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7442[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7443[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7444[8]))) }
        si      = { defs={} expr=v7358[32] }
        di      = { defs={} expr=v7359[32] }
        es      = { defs={} expr=v7360[16] }
        cs      = { defs={} expr=v7361[16] }
        ss      = { defs={} expr=v7362[16] }
        ds      = { defs={} expr=v7363[16] }
        fs      = { defs={} expr=v7364[16] }
        gs      = { defs={} expr=v7365[16] }
        cf      = { defs={} expr=v7366[1] }
        ?1      = { defs={} expr=v7367[1] }
        pf      = { defs={} expr=v7368[1] }
        ?3      = { defs={} expr=v7369[1] }
        af      = { defs={} expr=v7370[1] }
        ?5      = { defs={} expr=v7371[1] }
        zf      = { defs={} expr=v7372[1] }
        sf      = { defs={} expr=v7373[1] }
        tf      = { defs={} expr=v7374[1] }
        if      = { defs={} expr=v7375[1] }
        df      = { defs={} expr=v7376[1] }
        of      = { defs={} expr=v7377[1] }
        iopl0   = { defs={} expr=v7378[1] }
        iopl1   = { defs={} expr=v7379[1] }
        nt      = { defs={} expr=v7380[1] }
        ?15     = { defs={} expr=v7381[1] }
        rf      = { defs={} expr=v7382[1] }
        vm      = { defs={} expr=v7383[1] }
        ac      = { defs={} expr=v7384[1] }
        vif     = { defs={} expr=v7385[1] }
        vip     = { defs={} expr=v7386[1] }
        id      = { defs={} expr=v7387[1] }
        ?22     = { defs={} expr=v7388[1] }
        ?23     = { defs={} expr=v7389[1] }
        ?24     = { defs={} expr=v7390[1] }
        ?25     = { defs={} expr=v7391[1] }
        ?26     = { defs={} expr=v7392[1] }
        ?27     = { defs={} expr=v7393[1] }
        ?28     = { defs={} expr=v7394[1] }
        ?29     = { defs={} expr=v7395[1] }
        ?30     = { defs={} expr=v7396[1] }
        ?31     = { defs={} expr=v7397[1] }
        ip      = { defs={0x080485af} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7458[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7459[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7460[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7461[8]))) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v7356[32] 4[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v7461[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v7356[32] 4[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v7460[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v7356[32] 4[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v7459[8] }
          flags = { rdonly }
        address = { defs={0x080485ac,0x080485ad,0x080485ae,0x080485af} expr=(add[32] (add[32] (add[32] v7356[32] 4[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v7458[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7356[32] 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v7444[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7356[32] 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v7443[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7356[32] 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v7442[8] }
          flags = { rdonly }
        address = { defs={0x080485ac,0x080485ad,0x080485ae} expr=(add[32] (add[32] v7356[32] 4[32]) 4[32]) }
          value = { defs={} expr=v7441[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v7356[32] 4[32]) 3[32]) }
          value = { defs={} expr=v7427[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v7356[32] 4[32]) 2[32]) }
          value = { defs={} expr=v7426[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v7356[32] 4[32]) 1[32]) }
          value = { defs={} expr=v7425[8] }
          flags = { rdonly }
        address = { defs={0x080485ac,0x080485ad} expr=(add[32] v7356[32] 4[32]) }
          value = { defs={} expr=v7424[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7356[32] 3[32]) }
          value = { defs={} expr=v7410[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7356[32] 2[32]) }
          value = { defs={} expr=v7409[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7356[32] 1[32]) }
          value = { defs={} expr=v7408[8] }
          flags = { rdonly }
        address = { defs={0x080485ac} expr=v7356[32] }
          value = { defs={} expr=v7407[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80485b0:push   ebp
    registers:
        ax      = { defs={} expr=v7516[32] }
        cx      = { defs={} expr=v7517[32] }
        dx      = { defs={} expr=v7518[32] }
        bx      = { defs={} expr=v7519[32] }
        sp      = { defs={0x080485b0} expr=(add[32] v7520[32] -4[32]) }
        bp      = { defs={} expr=v7521[32] }
        si      = { defs={} expr=v7522[32] }
        di      = { defs={} expr=v7523[32] }
        es      = { defs={} expr=v7524[16] }
        cs      = { defs={} expr=v7525[16] }
        ss      = { defs={} expr=v7526[16] }
        ds      = { defs={} expr=v7527[16] }
        fs      = { defs={} expr=v7528[16] }
        gs      = { defs={} expr=v7529[16] }
        cf      = { defs={} expr=v7530[1] }
        ?1      = { defs={} expr=v7531[1] }
        pf      = { defs={} expr=v7532[1] }
        ?3      = { defs={} expr=v7533[1] }
        af      = { defs={} expr=v7534[1] }
        ?5      = { defs={} expr=v7535[1] }
        zf      = { defs={} expr=v7536[1] }
        sf      = { defs={} expr=v7537[1] }
        tf      = { defs={} expr=v7538[1] }
        if      = { defs={} expr=v7539[1] }
        df      = { defs={} expr=v7540[1] }
        of      = { defs={} expr=v7541[1] }
        iopl0   = { defs={} expr=v7542[1] }
        iopl1   = { defs={} expr=v7543[1] }
        nt      = { defs={} expr=v7544[1] }
        ?15     = { defs={} expr=v7545[1] }
        rf      = { defs={} expr=v7546[1] }
        vm      = { defs={} expr=v7547[1] }
        ac      = { defs={} expr=v7548[1] }
        vif     = { defs={} expr=v7549[1] }
        vip     = { defs={} expr=v7550[1] }
        id      = { defs={} expr=v7551[1] }
        ?22     = { defs={} expr=v7552[1] }
        ?23     = { defs={} expr=v7553[1] }
        ?24     = { defs={} expr=v7554[1] }
        ?25     = { defs={} expr=v7555[1] }
        ?26     = { defs={} expr=v7556[1] }
        ?27     = { defs={} expr=v7557[1] }
        ?28     = { defs={} expr=v7558[1] }
        ?29     = { defs={} expr=v7559[1] }
        ?30     = { defs={} expr=v7560[1] }
        ?31     = { defs={} expr=v7561[1] }
        ip      = { defs={0x080485b0} expr=0x080485b1[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v7520[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v7521[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7520[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v7521[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7520[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v7521[32]) }
          flags = { }
        address = { defs={0x080485b0} expr=(add[32] v7520[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v7521[32]) }
          flags = { }
    init mem:
0x80485b1:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v7516[32] }
        cx      = { defs={} expr=v7517[32] }
        dx      = { defs={} expr=v7518[32] }
        bx      = { defs={} expr=v7519[32] }
        sp      = { defs={0x080485b0} expr=(add[32] v7520[32] -4[32]) }
        bp      = { defs={0x080485b0,0x080485b1} expr=(add[32] v7520[32] -4[32]) }
        si      = { defs={} expr=v7522[32] }
        di      = { defs={} expr=v7523[32] }
        es      = { defs={} expr=v7524[16] }
        cs      = { defs={} expr=v7525[16] }
        ss      = { defs={} expr=v7526[16] }
        ds      = { defs={} expr=v7527[16] }
        fs      = { defs={} expr=v7528[16] }
        gs      = { defs={} expr=v7529[16] }
        cf      = { defs={} expr=v7530[1] }
        ?1      = { defs={} expr=v7531[1] }
        pf      = { defs={} expr=v7532[1] }
        ?3      = { defs={} expr=v7533[1] }
        af      = { defs={} expr=v7534[1] }
        ?5      = { defs={} expr=v7535[1] }
        zf      = { defs={} expr=v7536[1] }
        sf      = { defs={} expr=v7537[1] }
        tf      = { defs={} expr=v7538[1] }
        if      = { defs={} expr=v7539[1] }
        df      = { defs={} expr=v7540[1] }
        of      = { defs={} expr=v7541[1] }
        iopl0   = { defs={} expr=v7542[1] }
        iopl1   = { defs={} expr=v7543[1] }
        nt      = { defs={} expr=v7544[1] }
        ?15     = { defs={} expr=v7545[1] }
        rf      = { defs={} expr=v7546[1] }
        vm      = { defs={} expr=v7547[1] }
        ac      = { defs={} expr=v7548[1] }
        vif     = { defs={} expr=v7549[1] }
        vip     = { defs={} expr=v7550[1] }
        id      = { defs={} expr=v7551[1] }
        ?22     = { defs={} expr=v7552[1] }
        ?23     = { defs={} expr=v7553[1] }
        ?24     = { defs={} expr=v7554[1] }
        ?25     = { defs={} expr=v7555[1] }
        ?26     = { defs={} expr=v7556[1] }
        ?27     = { defs={} expr=v7557[1] }
        ?28     = { defs={} expr=v7558[1] }
        ?29     = { defs={} expr=v7559[1] }
        ?30     = { defs={} expr=v7560[1] }
        ?31     = { defs={} expr=v7561[1] }
        ip      = { defs={0x080485b0,0x080485b1} expr=0x080485b3[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v7520[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v7521[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7520[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v7521[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7520[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v7521[32]) }
          flags = { }
        address = { defs={0x080485b0} expr=(add[32] v7520[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v7521[32]) }
          flags = { }
    init mem:
0x80485b3:push   ebx
    registers:
        ax      = { defs={} expr=v7516[32] }
        cx      = { defs={} expr=v7517[32] }
        dx      = { defs={} expr=v7518[32] }
        bx      = { defs={} expr=v7519[32] }
        sp      = { defs={0x080485b0,0x080485b3} expr=(add[32] (add[32] v7520[32] -4[32]) -4[32]) }
        bp      = { defs={0x080485b0,0x080485b1} expr=(add[32] v7520[32] -4[32]) }
        si      = { defs={} expr=v7522[32] }
        di      = { defs={} expr=v7523[32] }
        es      = { defs={} expr=v7524[16] }
        cs      = { defs={} expr=v7525[16] }
        ss      = { defs={} expr=v7526[16] }
        ds      = { defs={} expr=v7527[16] }
        fs      = { defs={} expr=v7528[16] }
        gs      = { defs={} expr=v7529[16] }
        cf      = { defs={} expr=v7530[1] }
        ?1      = { defs={} expr=v7531[1] }
        pf      = { defs={} expr=v7532[1] }
        ?3      = { defs={} expr=v7533[1] }
        af      = { defs={} expr=v7534[1] }
        ?5      = { defs={} expr=v7535[1] }
        zf      = { defs={} expr=v7536[1] }
        sf      = { defs={} expr=v7537[1] }
        tf      = { defs={} expr=v7538[1] }
        if      = { defs={} expr=v7539[1] }
        df      = { defs={} expr=v7540[1] }
        of      = { defs={} expr=v7541[1] }
        iopl0   = { defs={} expr=v7542[1] }
        iopl1   = { defs={} expr=v7543[1] }
        nt      = { defs={} expr=v7544[1] }
        ?15     = { defs={} expr=v7545[1] }
        rf      = { defs={} expr=v7546[1] }
        vm      = { defs={} expr=v7547[1] }
        ac      = { defs={} expr=v7548[1] }
        vif     = { defs={} expr=v7549[1] }
        vip     = { defs={} expr=v7550[1] }
        id      = { defs={} expr=v7551[1] }
        ?22     = { defs={} expr=v7552[1] }
        ?23     = { defs={} expr=v7553[1] }
        ?24     = { defs={} expr=v7554[1] }
        ?25     = { defs={} expr=v7555[1] }
        ?26     = { defs={} expr=v7556[1] }
        ?27     = { defs={} expr=v7557[1] }
        ?28     = { defs={} expr=v7558[1] }
        ?29     = { defs={} expr=v7559[1] }
        ?30     = { defs={} expr=v7560[1] }
        ?31     = { defs={} expr=v7561[1] }
        ip      = { defs={0x080485b0,0x080485b1,0x080485b3} expr=0x080485b4[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v7520[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v7519[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7520[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v7519[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7520[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v7519[32]) }
          flags = { }
        address = { defs={0x080485b0,0x080485b3} expr=(add[32] (add[32] v7520[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v7519[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7520[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v7521[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7520[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v7521[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7520[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v7521[32]) }
          flags = { }
        address = { defs={0x080485b0} expr=(add[32] v7520[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v7521[32]) }
          flags = { }
    init mem:
0x80485b4:push   eax
    registers:
        ax      = { defs={} expr=v7516[32] }
        cx      = { defs={} expr=v7517[32] }
        dx      = { defs={} expr=v7518[32] }
        bx      = { defs={} expr=v7519[32] }
        sp      = { defs={0x080485b0,0x080485b3,0x080485b4} expr=(add[32] (add[32] (add[32] v7520[32] -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x080485b0,0x080485b1} expr=(add[32] v7520[32] -4[32]) }
        si      = { defs={} expr=v7522[32] }
        di      = { defs={} expr=v7523[32] }
        es      = { defs={} expr=v7524[16] }
        cs      = { defs={} expr=v7525[16] }
        ss      = { defs={} expr=v7526[16] }
        ds      = { defs={} expr=v7527[16] }
        fs      = { defs={} expr=v7528[16] }
        gs      = { defs={} expr=v7529[16] }
        cf      = { defs={} expr=v7530[1] }
        ?1      = { defs={} expr=v7531[1] }
        pf      = { defs={} expr=v7532[1] }
        ?3      = { defs={} expr=v7533[1] }
        af      = { defs={} expr=v7534[1] }
        ?5      = { defs={} expr=v7535[1] }
        zf      = { defs={} expr=v7536[1] }
        sf      = { defs={} expr=v7537[1] }
        tf      = { defs={} expr=v7538[1] }
        if      = { defs={} expr=v7539[1] }
        df      = { defs={} expr=v7540[1] }
        of      = { defs={} expr=v7541[1] }
        iopl0   = { defs={} expr=v7542[1] }
        iopl1   = { defs={} expr=v7543[1] }
        nt      = { defs={} expr=v7544[1] }
        ?15     = { defs={} expr=v7545[1] }
        rf      = { defs={} expr=v7546[1] }
        vm      = { defs={} expr=v7547[1] }
        ac      = { defs={} expr=v7548[1] }
        vif     = { defs={} expr=v7549[1] }
        vip     = { defs={} expr=v7550[1] }
        id      = { defs={} expr=v7551[1] }
        ?22     = { defs={} expr=v7552[1] }
        ?23     = { defs={} expr=v7553[1] }
        ?24     = { defs={} expr=v7554[1] }
        ?25     = { defs={} expr=v7555[1] }
        ?26     = { defs={} expr=v7556[1] }
        ?27     = { defs={} expr=v7557[1] }
        ?28     = { defs={} expr=v7558[1] }
        ?29     = { defs={} expr=v7559[1] }
        ?30     = { defs={} expr=v7560[1] }
        ?31     = { defs={} expr=v7561[1] }
        ip      = { defs={0x080485b0,0x080485b1,0x080485b3,0x080485b4} expr=0x080485b5[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v7520[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v7516[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v7520[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v7516[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v7520[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v7516[32]) }
          flags = { }
        address = { defs={0x080485b0,0x080485b3,0x080485b4} expr=(add[32] (add[32] (add[32] v7520[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v7516[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7520[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v7519[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7520[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v7519[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7520[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v7519[32]) }
          flags = { }
        address = { defs={0x080485b0,0x080485b3} expr=(add[32] (add[32] v7520[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v7519[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7520[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v7521[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7520[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v7521[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7520[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v7521[32]) }
          flags = { }
        address = { defs={0x080485b0} expr=(add[32] v7520[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v7521[32]) }
          flags = { }
    init mem:
0x80485b5:call   0x080485ba<<Insn>>
    registers:
        ax      = { defs={} expr=v7516[32] }
        cx      = { defs={} expr=v7517[32] }
        dx      = { defs={} expr=v7518[32] }
        bx      = { defs={} expr=v7519[32] }
        sp      = { defs={0x080485b0,0x080485b3,0x080485b4,0x080485b5} expr=(add[32] (add[32] (add[32] (add[32] v7520[32] -4[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x080485b0,0x080485b1} expr=(add[32] v7520[32] -4[32]) }
        si      = { defs={} expr=v7522[32] }
        di      = { defs={} expr=v7523[32] }
        es      = { defs={} expr=v7524[16] }
        cs      = { defs={} expr=v7525[16] }
        ss      = { defs={} expr=v7526[16] }
        ds      = { defs={} expr=v7527[16] }
        fs      = { defs={} expr=v7528[16] }
        gs      = { defs={} expr=v7529[16] }
        cf      = { defs={} expr=v7530[1] }
        ?1      = { defs={} expr=v7531[1] }
        pf      = { defs={} expr=v7532[1] }
        ?3      = { defs={} expr=v7533[1] }
        af      = { defs={} expr=v7534[1] }
        ?5      = { defs={} expr=v7535[1] }
        zf      = { defs={} expr=v7536[1] }
        sf      = { defs={} expr=v7537[1] }
        tf      = { defs={} expr=v7538[1] }
        if      = { defs={} expr=v7539[1] }
        df      = { defs={} expr=v7540[1] }
        of      = { defs={} expr=v7541[1] }
        iopl0   = { defs={} expr=v7542[1] }
        iopl1   = { defs={} expr=v7543[1] }
        nt      = { defs={} expr=v7544[1] }
        ?15     = { defs={} expr=v7545[1] }
        rf      = { defs={} expr=v7546[1] }
        vm      = { defs={} expr=v7547[1] }
        ac      = { defs={} expr=v7548[1] }
        vif     = { defs={} expr=v7549[1] }
        vip     = { defs={} expr=v7550[1] }
        id      = { defs={} expr=v7551[1] }
        ?22     = { defs={} expr=v7552[1] }
        ?23     = { defs={} expr=v7553[1] }
        ?24     = { defs={} expr=v7554[1] }
        ?25     = { defs={} expr=v7555[1] }
        ?26     = { defs={} expr=v7556[1] }
        ?27     = { defs={} expr=v7557[1] }
        ?28     = { defs={} expr=v7558[1] }
        ?29     = { defs={} expr=v7559[1] }
        ?30     = { defs={} expr=v7560[1] }
        ?31     = { defs={} expr=v7561[1] }
        ip      = { defs={0x080485b5} expr=0x080485ba[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v7520[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v7520[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v7520[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x080485b0,0x080485b3,0x080485b4,0x080485b5} expr=(add[32] (add[32] (add[32] (add[32] v7520[32] -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=-70[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v7520[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v7516[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v7520[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v7516[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v7520[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v7516[32]) }
          flags = { }
        address = { defs={0x080485b0,0x080485b3,0x080485b4} expr=(add[32] (add[32] (add[32] v7520[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v7516[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7520[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v7519[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7520[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v7519[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7520[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v7519[32]) }
          flags = { }
        address = { defs={0x080485b0,0x080485b3} expr=(add[32] (add[32] v7520[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v7519[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7520[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v7521[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7520[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v7521[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7520[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v7521[32]) }
          flags = { }
        address = { defs={0x080485b0} expr=(add[32] v7520[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v7521[32]) }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80485ba:pop    ebx
    registers:
        ax      = { defs={} expr=v7645[32] }
        cx      = { defs={} expr=v7646[32] }
        dx      = { defs={} expr=v7647[32] }
        bx      = { defs={0x080485ba} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7700[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7701[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7702[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7703[8]))) }
        sp      = { defs={0x080485ba} expr=(add[32] v7649[32] 4[32]) }
        bp      = { defs={} expr=v7650[32] }
        si      = { defs={} expr=v7651[32] }
        di      = { defs={} expr=v7652[32] }
        es      = { defs={} expr=v7653[16] }
        cs      = { defs={} expr=v7654[16] }
        ss      = { defs={} expr=v7655[16] }
        ds      = { defs={} expr=v7656[16] }
        fs      = { defs={} expr=v7657[16] }
        gs      = { defs={} expr=v7658[16] }
        cf      = { defs={} expr=v7659[1] }
        ?1      = { defs={} expr=v7660[1] }
        pf      = { defs={} expr=v7661[1] }
        ?3      = { defs={} expr=v7662[1] }
        af      = { defs={} expr=v7663[1] }
        ?5      = { defs={} expr=v7664[1] }
        zf      = { defs={} expr=v7665[1] }
        sf      = { defs={} expr=v7666[1] }
        tf      = { defs={} expr=v7667[1] }
        if      = { defs={} expr=v7668[1] }
        df      = { defs={} expr=v7669[1] }
        of      = { defs={} expr=v7670[1] }
        iopl0   = { defs={} expr=v7671[1] }
        iopl1   = { defs={} expr=v7672[1] }
        nt      = { defs={} expr=v7673[1] }
        ?15     = { defs={} expr=v7674[1] }
        rf      = { defs={} expr=v7675[1] }
        vm      = { defs={} expr=v7676[1] }
        ac      = { defs={} expr=v7677[1] }
        vif     = { defs={} expr=v7678[1] }
        vip     = { defs={} expr=v7679[1] }
        id      = { defs={} expr=v7680[1] }
        ?22     = { defs={} expr=v7681[1] }
        ?23     = { defs={} expr=v7682[1] }
        ?24     = { defs={} expr=v7683[1] }
        ?25     = { defs={} expr=v7684[1] }
        ?26     = { defs={} expr=v7685[1] }
        ?27     = { defs={} expr=v7686[1] }
        ?28     = { defs={} expr=v7687[1] }
        ?29     = { defs={} expr=v7688[1] }
        ?30     = { defs={} expr=v7689[1] }
        ?31     = { defs={} expr=v7690[1] }
        ip      = { defs={0x080485ba} expr=0x080485bb[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v7649[32] 3[32]) }
          value = { defs={} expr=v7703[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7649[32] 2[32]) }
          value = { defs={} expr=v7702[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7649[32] 1[32]) }
          value = { defs={} expr=v7701[8] }
          flags = { rdonly }
        address = { defs={0x080485ba} expr=v7649[32] }
          value = { defs={} expr=v7700[8] }
          flags = { rdonly }
0x80485bb:add    ebx, 0x0000110e
    registers:
        ax      = { defs={} expr=v7645[32] }
        cx      = { defs={} expr=v7646[32] }
        dx      = { defs={} expr=v7647[32] }
        bx      = { defs={0x080485ba,0x080485bb} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7700[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7701[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7702[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7703[8]))) 4366[32]) }
        sp      = { defs={0x080485ba} expr=(add[32] v7649[32] 4[32]) }
        bp      = { defs={} expr=v7650[32] }
        si      = { defs={} expr=v7651[32] }
        di      = { defs={} expr=v7652[32] }
        es      = { defs={} expr=v7653[16] }
        cs      = { defs={} expr=v7654[16] }
        ss      = { defs={} expr=v7655[16] }
        ds      = { defs={} expr=v7656[16] }
        fs      = { defs={} expr=v7657[16] }
        gs      = { defs={} expr=v7658[16] }
        cf      = { defs={0x080485ba,0x080485bb} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7700[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7701[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7702[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7703[8])))) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7700[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7701[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7702[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7703[8])))) 4366[33]))))) }
        ?1      = { defs={} expr=v7660[1] }
        pf      = { defs={0x080485ba,0x080485bb} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7700[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7701[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7702[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7703[8]))) 4366[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7700[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7701[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7702[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7703[8]))) 4366[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7700[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7701[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7702[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7703[8]))) 4366[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7700[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7701[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7702[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7703[8]))) 4366[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7700[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7701[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7702[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7703[8]))) 4366[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7700[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7701[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7702[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7703[8]))) 4366[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7700[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7701[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7702[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7703[8]))) 4366[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7700[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7701[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7702[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7703[8]))) 4366[32]))))))) }
        ?3      = { defs={} expr=v7662[1] }
        af      = { defs={0x080485ba,0x080485bb} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7700[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7701[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7702[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7703[8])))) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7700[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7701[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7702[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7703[8])))) 4366[33]))))) }
        ?5      = { defs={} expr=v7664[1] }
        zf      = { defs={0x080485ba,0x080485bb} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7700[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7701[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7702[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7703[8]))) 4366[32])) }
        sf      = { defs={0x080485ba,0x080485bb} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7700[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7701[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7702[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7703[8]))) 4366[32])) }
        tf      = { defs={} expr=v7667[1] }
        if      = { defs={} expr=v7668[1] }
        df      = { defs={} expr=v7669[1] }
        of      = { defs={0x080485ba,0x080485bb} expr=0[1] }
        iopl0   = { defs={} expr=v7671[1] }
        iopl1   = { defs={} expr=v7672[1] }
        nt      = { defs={} expr=v7673[1] }
        ?15     = { defs={} expr=v7674[1] }
        rf      = { defs={} expr=v7675[1] }
        vm      = { defs={} expr=v7676[1] }
        ac      = { defs={} expr=v7677[1] }
        vif     = { defs={} expr=v7678[1] }
        vip     = { defs={} expr=v7679[1] }
        id      = { defs={} expr=v7680[1] }
        ?22     = { defs={} expr=v7681[1] }
        ?23     = { defs={} expr=v7682[1] }
        ?24     = { defs={} expr=v7683[1] }
        ?25     = { defs={} expr=v7684[1] }
        ?26     = { defs={} expr=v7685[1] }
        ?27     = { defs={} expr=v7686[1] }
        ?28     = { defs={} expr=v7687[1] }
        ?29     = { defs={} expr=v7688[1] }
        ?30     = { defs={} expr=v7689[1] }
        ?31     = { defs={} expr=v7690[1] }
        ip      = { defs={0x080485ba,0x080485bb} expr=0x080485c1[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v7649[32] 3[32]) }
          value = { defs={} expr=v7703[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7649[32] 2[32]) }
          value = { defs={} expr=v7702[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7649[32] 1[32]) }
          value = { defs={} expr=v7701[8] }
          flags = { rdonly }
        address = { defs={0x080485ba} expr=v7649[32] }
          value = { defs={} expr=v7700[8] }
          flags = { rdonly }
0x80485c1:call   0x08048390<__do_global_dtors_aux>
    registers:
        ax      = { defs={} expr=v7645[32] }
        cx      = { defs={} expr=v7646[32] }
        dx      = { defs={} expr=v7647[32] }
        bx      = { defs={0x080485ba,0x080485bb} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7700[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7701[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7702[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7703[8]))) 4366[32]) }
        sp      = { defs={0x080485ba,0x080485c1} expr=(add[32] (add[32] v7649[32] 4[32]) -4[32]) }
        bp      = { defs={} expr=v7650[32] }
        si      = { defs={} expr=v7651[32] }
        di      = { defs={} expr=v7652[32] }
        es      = { defs={} expr=v7653[16] }
        cs      = { defs={} expr=v7654[16] }
        ss      = { defs={} expr=v7655[16] }
        ds      = { defs={} expr=v7656[16] }
        fs      = { defs={} expr=v7657[16] }
        gs      = { defs={} expr=v7658[16] }
        cf      = { defs={0x080485ba,0x080485bb} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7700[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7701[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7702[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7703[8])))) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7700[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7701[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7702[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7703[8])))) 4366[33]))))) }
        ?1      = { defs={} expr=v7660[1] }
        pf      = { defs={0x080485ba,0x080485bb} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7700[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7701[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7702[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7703[8]))) 4366[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7700[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7701[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7702[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7703[8]))) 4366[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7700[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7701[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7702[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7703[8]))) 4366[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7700[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7701[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7702[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7703[8]))) 4366[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7700[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7701[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7702[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7703[8]))) 4366[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7700[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7701[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7702[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7703[8]))) 4366[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7700[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7701[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7702[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7703[8]))) 4366[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7700[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7701[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7702[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7703[8]))) 4366[32]))))))) }
        ?3      = { defs={} expr=v7662[1] }
        af      = { defs={0x080485ba,0x080485bb} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7700[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7701[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7702[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7703[8])))) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7700[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7701[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7702[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7703[8])))) 4366[33]))))) }
        ?5      = { defs={} expr=v7664[1] }
        zf      = { defs={0x080485ba,0x080485bb} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7700[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7701[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7702[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7703[8]))) 4366[32])) }
        sf      = { defs={0x080485ba,0x080485bb} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7700[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7701[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7702[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7703[8]))) 4366[32])) }
        tf      = { defs={} expr=v7667[1] }
        if      = { defs={} expr=v7668[1] }
        df      = { defs={} expr=v7669[1] }
        of      = { defs={0x080485ba,0x080485bb} expr=0[1] }
        iopl0   = { defs={} expr=v7671[1] }
        iopl1   = { defs={} expr=v7672[1] }
        nt      = { defs={} expr=v7673[1] }
        ?15     = { defs={} expr=v7674[1] }
        rf      = { defs={} expr=v7675[1] }
        vm      = { defs={} expr=v7676[1] }
        ac      = { defs={} expr=v7677[1] }
        vif     = { defs={} expr=v7678[1] }
        vip     = { defs={} expr=v7679[1] }
        id      = { defs={} expr=v7680[1] }
        ?22     = { defs={} expr=v7681[1] }
        ?23     = { defs={} expr=v7682[1] }
        ?24     = { defs={} expr=v7683[1] }
        ?25     = { defs={} expr=v7684[1] }
        ?26     = { defs={} expr=v7685[1] }
        ?27     = { defs={} expr=v7686[1] }
        ?28     = { defs={} expr=v7687[1] }
        ?29     = { defs={} expr=v7688[1] }
        ?30     = { defs={} expr=v7689[1] }
        ?31     = { defs={} expr=v7690[1] }
        ip      = { defs={0x080485c1} expr=0x08048390[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v7649[32] 4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7649[32] 4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7649[32] 4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x080485ba,0x080485c1} expr=(add[32] (add[32] v7649[32] 4[32]) -4[32]) }
          value = { defs={} expr=-58[8] }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v7649[32] 3[32]) }
          value = { defs={} expr=v7703[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7649[32] 2[32]) }
          value = { defs={} expr=v7702[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7649[32] 1[32]) }
          value = { defs={} expr=v7701[8] }
          flags = { rdonly }
        address = { defs={0x080485ba} expr=v7649[32] }
          value = { defs={} expr=v7700[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80485c6:pop    eax
    registers:
        ax      = { defs={0x080485c6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7868[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7869[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7870[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7871[8]))) }
        cx      = { defs={} expr=v7814[32] }
        dx      = { defs={} expr=v7815[32] }
        bx      = { defs={} expr=v7816[32] }
        sp      = { defs={0x080485c6} expr=(add[32] v7817[32] 4[32]) }
        bp      = { defs={} expr=v7818[32] }
        si      = { defs={} expr=v7819[32] }
        di      = { defs={} expr=v7820[32] }
        es      = { defs={} expr=v7821[16] }
        cs      = { defs={} expr=v7822[16] }
        ss      = { defs={} expr=v7823[16] }
        ds      = { defs={} expr=v7824[16] }
        fs      = { defs={} expr=v7825[16] }
        gs      = { defs={} expr=v7826[16] }
        cf      = { defs={} expr=v7827[1] }
        ?1      = { defs={} expr=v7828[1] }
        pf      = { defs={} expr=v7829[1] }
        ?3      = { defs={} expr=v7830[1] }
        af      = { defs={} expr=v7831[1] }
        ?5      = { defs={} expr=v7832[1] }
        zf      = { defs={} expr=v7833[1] }
        sf      = { defs={} expr=v7834[1] }
        tf      = { defs={} expr=v7835[1] }
        if      = { defs={} expr=v7836[1] }
        df      = { defs={} expr=v7837[1] }
        of      = { defs={} expr=v7838[1] }
        iopl0   = { defs={} expr=v7839[1] }
        iopl1   = { defs={} expr=v7840[1] }
        nt      = { defs={} expr=v7841[1] }
        ?15     = { defs={} expr=v7842[1] }
        rf      = { defs={} expr=v7843[1] }
        vm      = { defs={} expr=v7844[1] }
        ac      = { defs={} expr=v7845[1] }
        vif     = { defs={} expr=v7846[1] }
        vip     = { defs={} expr=v7847[1] }
        id      = { defs={} expr=v7848[1] }
        ?22     = { defs={} expr=v7849[1] }
        ?23     = { defs={} expr=v7850[1] }
        ?24     = { defs={} expr=v7851[1] }
        ?25     = { defs={} expr=v7852[1] }
        ?26     = { defs={} expr=v7853[1] }
        ?27     = { defs={} expr=v7854[1] }
        ?28     = { defs={} expr=v7855[1] }
        ?29     = { defs={} expr=v7856[1] }
        ?30     = { defs={} expr=v7857[1] }
        ?31     = { defs={} expr=v7858[1] }
        ip      = { defs={0x080485c6} expr=0x080485c7[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v7817[32] 3[32]) }
          value = { defs={} expr=v7871[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7817[32] 2[32]) }
          value = { defs={} expr=v7870[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7817[32] 1[32]) }
          value = { defs={} expr=v7869[8] }
          flags = { rdonly }
        address = { defs={0x080485c6} expr=v7817[32] }
          value = { defs={} expr=v7868[8] }
          flags = { rdonly }
0x80485c7:pop    ebx
    registers:
        ax      = { defs={0x080485c6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7868[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7869[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7870[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7871[8]))) }
        cx      = { defs={} expr=v7814[32] }
        dx      = { defs={} expr=v7815[32] }
        bx      = { defs={0x080485c7} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7885[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7886[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7887[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7888[8]))) }
        sp      = { defs={0x080485c6,0x080485c7} expr=(add[32] (add[32] v7817[32] 4[32]) 4[32]) }
        bp      = { defs={} expr=v7818[32] }
        si      = { defs={} expr=v7819[32] }
        di      = { defs={} expr=v7820[32] }
        es      = { defs={} expr=v7821[16] }
        cs      = { defs={} expr=v7822[16] }
        ss      = { defs={} expr=v7823[16] }
        ds      = { defs={} expr=v7824[16] }
        fs      = { defs={} expr=v7825[16] }
        gs      = { defs={} expr=v7826[16] }
        cf      = { defs={} expr=v7827[1] }
        ?1      = { defs={} expr=v7828[1] }
        pf      = { defs={} expr=v7829[1] }
        ?3      = { defs={} expr=v7830[1] }
        af      = { defs={} expr=v7831[1] }
        ?5      = { defs={} expr=v7832[1] }
        zf      = { defs={} expr=v7833[1] }
        sf      = { defs={} expr=v7834[1] }
        tf      = { defs={} expr=v7835[1] }
        if      = { defs={} expr=v7836[1] }
        df      = { defs={} expr=v7837[1] }
        of      = { defs={} expr=v7838[1] }
        iopl0   = { defs={} expr=v7839[1] }
        iopl1   = { defs={} expr=v7840[1] }
        nt      = { defs={} expr=v7841[1] }
        ?15     = { defs={} expr=v7842[1] }
        rf      = { defs={} expr=v7843[1] }
        vm      = { defs={} expr=v7844[1] }
        ac      = { defs={} expr=v7845[1] }
        vif     = { defs={} expr=v7846[1] }
        vip     = { defs={} expr=v7847[1] }
        id      = { defs={} expr=v7848[1] }
        ?22     = { defs={} expr=v7849[1] }
        ?23     = { defs={} expr=v7850[1] }
        ?24     = { defs={} expr=v7851[1] }
        ?25     = { defs={} expr=v7852[1] }
        ?26     = { defs={} expr=v7853[1] }
        ?27     = { defs={} expr=v7854[1] }
        ?28     = { defs={} expr=v7855[1] }
        ?29     = { defs={} expr=v7856[1] }
        ?30     = { defs={} expr=v7857[1] }
        ?31     = { defs={} expr=v7858[1] }
        ip      = { defs={0x080485c6,0x080485c7} expr=0x080485c8[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v7817[32] 4[32]) 3[32]) }
          value = { defs={} expr=v7888[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v7817[32] 4[32]) 2[32]) }
          value = { defs={} expr=v7887[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v7817[32] 4[32]) 1[32]) }
          value = { defs={} expr=v7886[8] }
          flags = { rdonly }
        address = { defs={0x080485c6,0x080485c7} expr=(add[32] v7817[32] 4[32]) }
          value = { defs={} expr=v7885[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7817[32] 3[32]) }
          value = { defs={} expr=v7871[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7817[32] 2[32]) }
          value = { defs={} expr=v7870[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7817[32] 1[32]) }
          value = { defs={} expr=v7869[8] }
          flags = { rdonly }
        address = { defs={0x080485c6} expr=v7817[32] }
          value = { defs={} expr=v7868[8] }
          flags = { rdonly }
0x80485c8:leave  
    registers:
        ax      = { defs={0x080485c6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7868[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7869[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7870[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7871[8]))) }
        cx      = { defs={} expr=v7814[32] }
        dx      = { defs={} expr=v7815[32] }
        bx      = { defs={0x080485c7} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7885[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7886[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7887[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7888[8]))) }
        sp      = { defs={0x080485c8} expr=(add[32] v7818[32] 4[32]) }
        bp      = { defs={0x080485c8} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7904[8] (add[32] (add[32] v7817[32] 4[32]) 3[32]) v7888[8]) (add[32] (add[32] v7817[32] 4[32]) 2[32]) v7887[8]) (add[32] (add[32] v7817[32] 4[32]) 1[32]) v7886[8]) (add[32] v7817[32] 4[32]) v7885[8]) (add[32] v7817[32] 3[32]) v7871[8]) (add[32] v7817[32] 2[32]) v7870[8]) (add[32] v7817[32] 1[32]) v7869[8]) v7817[32] v7868[8]) v7818[32] v7903[8]) v7818[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7906[8] (add[32] (add[32] v7817[32] 4[32]) 3[32]) v7888[8]) (add[32] (add[32] v7817[32] 4[32]) 2[32]) v7887[8]) (add[32] (add[32] v7817[32] 4[32]) 1[32]) v7886[8]) (add[32] v7817[32] 4[32]) v7885[8]) (add[32] v7817[32] 3[32]) v7871[8]) (add[32] v7817[32] 2[32]) v7870[8]) (add[32] v7817[32] 1[32]) v7869[8]) v7817[32] v7868[8]) (add[32] v7818[32] 1[32]) v7905[8]) (add[32] v7818[32] 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7908[8] (add[32] (add[32] v7817[32] 4[32]) 3[32]) v7888[8]) (add[32] (add[32] v7817[32] 4[32]) 2[32]) v7887[8]) (add[32] (add[32] v7817[32] 4[32]) 1[32]) v7886[8]) (add[32] v7817[32] 4[32]) v7885[8]) (add[32] v7817[32] 3[32]) v7871[8]) (add[32] v7817[32] 2[32]) v7870[8]) (add[32] v7817[32] 1[32]) v7869[8]) v7817[32] v7868[8]) (add[32] v7818[32] 2[32]) v7907[8]) (add[32] v7818[32] 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7910[8] (add[32] (add[32] v7817[32] 4[32]) 3[32]) v7888[8]) (add[32] (add[32] v7817[32] 4[32]) 2[32]) v7887[8]) (add[32] (add[32] v7817[32] 4[32]) 1[32]) v7886[8]) (add[32] v7817[32] 4[32]) v7885[8]) (add[32] v7817[32] 3[32]) v7871[8]) (add[32] v7817[32] 2[32]) v7870[8]) (add[32] v7817[32] 1[32]) v7869[8]) v7817[32] v7868[8]) (add[32] v7818[32] 3[32]) v7909[8]) (add[32] v7818[32] 3[32]))))) }
        si      = { defs={} expr=v7819[32] }
        di      = { defs={} expr=v7820[32] }
        es      = { defs={} expr=v7821[16] }
        cs      = { defs={} expr=v7822[16] }
        ss      = { defs={} expr=v7823[16] }
        ds      = { defs={} expr=v7824[16] }
        fs      = { defs={} expr=v7825[16] }
        gs      = { defs={} expr=v7826[16] }
        cf      = { defs={} expr=v7827[1] }
        ?1      = { defs={} expr=v7828[1] }
        pf      = { defs={} expr=v7829[1] }
        ?3      = { defs={} expr=v7830[1] }
        af      = { defs={} expr=v7831[1] }
        ?5      = { defs={} expr=v7832[1] }
        zf      = { defs={} expr=v7833[1] }
        sf      = { defs={} expr=v7834[1] }
        tf      = { defs={} expr=v7835[1] }
        if      = { defs={} expr=v7836[1] }
        df      = { defs={} expr=v7837[1] }
        of      = { defs={} expr=v7838[1] }
        iopl0   = { defs={} expr=v7839[1] }
        iopl1   = { defs={} expr=v7840[1] }
        nt      = { defs={} expr=v7841[1] }
        ?15     = { defs={} expr=v7842[1] }
        rf      = { defs={} expr=v7843[1] }
        vm      = { defs={} expr=v7844[1] }
        ac      = { defs={} expr=v7845[1] }
        vif     = { defs={} expr=v7846[1] }
        vip     = { defs={} expr=v7847[1] }
        id      = { defs={} expr=v7848[1] }
        ?22     = { defs={} expr=v7849[1] }
        ?23     = { defs={} expr=v7850[1] }
        ?24     = { defs={} expr=v7851[1] }
        ?25     = { defs={} expr=v7852[1] }
        ?26     = { defs={} expr=v7853[1] }
        ?27     = { defs={} expr=v7854[1] }
        ?28     = { defs={} expr=v7855[1] }
        ?29     = { defs={} expr=v7856[1] }
        ?30     = { defs={} expr=v7857[1] }
        ?31     = { defs={} expr=v7858[1] }
        ip      = { defs={0x080485c6,0x080485c7,0x080485c8} expr=0x080485c9[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v7818[32] 3[32]) }
          value = { defs={} expr=v7909[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7818[32] 2[32]) }
          value = { defs={} expr=v7907[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7818[32] 1[32]) }
          value = { defs={} expr=v7905[8] }
          flags = { rdonly }
        address = { defs={0x080485c8} expr=v7818[32] }
          value = { defs={} expr=v7903[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v7817[32] 4[32]) 3[32]) }
          value = { defs={} expr=v7888[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v7817[32] 4[32]) 2[32]) }
          value = { defs={} expr=v7887[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v7817[32] 4[32]) 1[32]) }
          value = { defs={} expr=v7886[8] }
          flags = { rdonly }
        address = { defs={0x080485c6,0x080485c7} expr=(add[32] v7817[32] 4[32]) }
          value = { defs={} expr=v7885[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7817[32] 3[32]) }
          value = { defs={} expr=v7871[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7817[32] 2[32]) }
          value = { defs={} expr=v7870[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7817[32] 1[32]) }
          value = { defs={} expr=v7869[8] }
          flags = { rdonly }
        address = { defs={0x080485c6} expr=v7817[32] }
          value = { defs={} expr=v7868[8] }
          flags = { rdonly }
0x80485c9:ret    
    registers:
        ax      = { defs={0x080485c6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7868[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7869[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7870[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7871[8]))) }
        cx      = { defs={} expr=v7814[32] }
        dx      = { defs={} expr=v7815[32] }
        bx      = { defs={0x080485c7} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7885[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7886[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7887[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7888[8]))) }
        sp      = { defs={0x080485c8,0x080485c9} expr=(add[32] (add[32] v7818[32] 4[32]) 4[32]) }
        bp      = { defs={0x080485c8} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7904[8] (add[32] (add[32] v7817[32] 4[32]) 3[32]) v7888[8]) (add[32] (add[32] v7817[32] 4[32]) 2[32]) v7887[8]) (add[32] (add[32] v7817[32] 4[32]) 1[32]) v7886[8]) (add[32] v7817[32] 4[32]) v7885[8]) (add[32] v7817[32] 3[32]) v7871[8]) (add[32] v7817[32] 2[32]) v7870[8]) (add[32] v7817[32] 1[32]) v7869[8]) v7817[32] v7868[8]) v7818[32] v7903[8]) v7818[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7906[8] (add[32] (add[32] v7817[32] 4[32]) 3[32]) v7888[8]) (add[32] (add[32] v7817[32] 4[32]) 2[32]) v7887[8]) (add[32] (add[32] v7817[32] 4[32]) 1[32]) v7886[8]) (add[32] v7817[32] 4[32]) v7885[8]) (add[32] v7817[32] 3[32]) v7871[8]) (add[32] v7817[32] 2[32]) v7870[8]) (add[32] v7817[32] 1[32]) v7869[8]) v7817[32] v7868[8]) (add[32] v7818[32] 1[32]) v7905[8]) (add[32] v7818[32] 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7908[8] (add[32] (add[32] v7817[32] 4[32]) 3[32]) v7888[8]) (add[32] (add[32] v7817[32] 4[32]) 2[32]) v7887[8]) (add[32] (add[32] v7817[32] 4[32]) 1[32]) v7886[8]) (add[32] v7817[32] 4[32]) v7885[8]) (add[32] v7817[32] 3[32]) v7871[8]) (add[32] v7817[32] 2[32]) v7870[8]) (add[32] v7817[32] 1[32]) v7869[8]) v7817[32] v7868[8]) (add[32] v7818[32] 2[32]) v7907[8]) (add[32] v7818[32] 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7910[8] (add[32] (add[32] v7817[32] 4[32]) 3[32]) v7888[8]) (add[32] (add[32] v7817[32] 4[32]) 2[32]) v7887[8]) (add[32] (add[32] v7817[32] 4[32]) 1[32]) v7886[8]) (add[32] v7817[32] 4[32]) v7885[8]) (add[32] v7817[32] 3[32]) v7871[8]) (add[32] v7817[32] 2[32]) v7870[8]) (add[32] v7817[32] 1[32]) v7869[8]) v7817[32] v7868[8]) (add[32] v7818[32] 3[32]) v7909[8]) (add[32] v7818[32] 3[32]))))) }
        si      = { defs={} expr=v7819[32] }
        di      = { defs={} expr=v7820[32] }
        es      = { defs={} expr=v7821[16] }
        cs      = { defs={} expr=v7822[16] }
        ss      = { defs={} expr=v7823[16] }
        ds      = { defs={} expr=v7824[16] }
        fs      = { defs={} expr=v7825[16] }
        gs      = { defs={} expr=v7826[16] }
        cf      = { defs={} expr=v7827[1] }
        ?1      = { defs={} expr=v7828[1] }
        pf      = { defs={} expr=v7829[1] }
        ?3      = { defs={} expr=v7830[1] }
        af      = { defs={} expr=v7831[1] }
        ?5      = { defs={} expr=v7832[1] }
        zf      = { defs={} expr=v7833[1] }
        sf      = { defs={} expr=v7834[1] }
        tf      = { defs={} expr=v7835[1] }
        if      = { defs={} expr=v7836[1] }
        df      = { defs={} expr=v7837[1] }
        of      = { defs={} expr=v7838[1] }
        iopl0   = { defs={} expr=v7839[1] }
        iopl1   = { defs={} expr=v7840[1] }
        nt      = { defs={} expr=v7841[1] }
        ?15     = { defs={} expr=v7842[1] }
        rf      = { defs={} expr=v7843[1] }
        vm      = { defs={} expr=v7844[1] }
        ac      = { defs={} expr=v7845[1] }
        vif     = { defs={} expr=v7846[1] }
        vip     = { defs={} expr=v7847[1] }
        id      = { defs={} expr=v7848[1] }
        ?22     = { defs={} expr=v7849[1] }
        ?23     = { defs={} expr=v7850[1] }
        ?24     = { defs={} expr=v7851[1] }
        ?25     = { defs={} expr=v7852[1] }
        ?26     = { defs={} expr=v7853[1] }
        ?27     = { defs={} expr=v7854[1] }
        ?28     = { defs={} expr=v7855[1] }
        ?29     = { defs={} expr=v7856[1] }
        ?30     = { defs={} expr=v7857[1] }
        ?31     = { defs={} expr=v7858[1] }
        ip      = { defs={0x080485c9} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7926[8] (add[32] (add[32] v7817[32] 4[32]) 3[32]) v7888[8]) (add[32] (add[32] v7817[32] 4[32]) 2[32]) v7887[8]) (add[32] (add[32] v7817[32] 4[32]) 1[32]) v7886[8]) (add[32] v7817[32] 4[32]) v7885[8]) (add[32] v7817[32] 3[32]) v7871[8]) (add[32] v7817[32] 2[32]) v7870[8]) (add[32] v7817[32] 1[32]) v7869[8]) v7817[32] v7868[8]) (add[32] v7818[32] 4[32]) v7925[8]) (add[32] v7818[32] 4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7928[8] (add[32] (add[32] v7817[32] 4[32]) 3[32]) v7888[8]) (add[32] (add[32] v7817[32] 4[32]) 2[32]) v7887[8]) (add[32] (add[32] v7817[32] 4[32]) 1[32]) v7886[8]) (add[32] v7817[32] 4[32]) v7885[8]) (add[32] v7817[32] 3[32]) v7871[8]) (add[32] v7817[32] 2[32]) v7870[8]) (add[32] v7817[32] 1[32]) v7869[8]) v7817[32] v7868[8]) (add[32] (add[32] v7818[32] 4[32]) 1[32]) v7927[8]) (add[32] (add[32] v7818[32] 4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7930[8] (add[32] (add[32] v7817[32] 4[32]) 3[32]) v7888[8]) (add[32] (add[32] v7817[32] 4[32]) 2[32]) v7887[8]) (add[32] (add[32] v7817[32] 4[32]) 1[32]) v7886[8]) (add[32] v7817[32] 4[32]) v7885[8]) (add[32] v7817[32] 3[32]) v7871[8]) (add[32] v7817[32] 2[32]) v7870[8]) (add[32] v7817[32] 1[32]) v7869[8]) v7817[32] v7868[8]) (add[32] (add[32] v7818[32] 4[32]) 2[32]) v7929[8]) (add[32] (add[32] v7818[32] 4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m7932[8] (add[32] (add[32] v7817[32] 4[32]) 3[32]) v7888[8]) (add[32] (add[32] v7817[32] 4[32]) 2[32]) v7887[8]) (add[32] (add[32] v7817[32] 4[32]) 1[32]) v7886[8]) (add[32] v7817[32] 4[32]) v7885[8]) (add[32] v7817[32] 3[32]) v7871[8]) (add[32] v7817[32] 2[32]) v7870[8]) (add[32] v7817[32] 1[32]) v7869[8]) v7817[32] v7868[8]) (add[32] (add[32] v7818[32] 4[32]) 3[32]) v7931[8]) (add[32] (add[32] v7818[32] 4[32]) 3[32]))))) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v7818[32] 4[32]) 3[32]) }
          value = { defs={} expr=v7931[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v7818[32] 4[32]) 2[32]) }
          value = { defs={} expr=v7929[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v7818[32] 4[32]) 1[32]) }
          value = { defs={} expr=v7927[8] }
          flags = { rdonly }
        address = { defs={0x080485c8,0x080485c9} expr=(add[32] v7818[32] 4[32]) }
          value = { defs={} expr=v7925[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7818[32] 3[32]) }
          value = { defs={} expr=v7909[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7818[32] 2[32]) }
          value = { defs={} expr=v7907[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7818[32] 1[32]) }
          value = { defs={} expr=v7905[8] }
          flags = { rdonly }
        address = { defs={0x080485c8} expr=v7818[32] }
          value = { defs={} expr=v7903[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v7817[32] 4[32]) 3[32]) }
          value = { defs={} expr=v7888[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v7817[32] 4[32]) 2[32]) }
          value = { defs={} expr=v7887[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v7817[32] 4[32]) 1[32]) }
          value = { defs={} expr=v7886[8] }
          flags = { rdonly }
        address = { defs={0x080485c6,0x080485c7} expr=(add[32] v7817[32] 4[32]) }
          value = { defs={} expr=v7885[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7817[32] 3[32]) }
          value = { defs={} expr=v7871[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7817[32] 2[32]) }
          value = { defs={} expr=v7870[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7817[32] 1[32]) }
          value = { defs={} expr=v7869[8] }
          flags = { rdonly }
        address = { defs={0x080485c6} expr=v7817[32] }
          value = { defs={} expr=v7868[8] }
          flags = { rdonly }
analyzed headers: 1
