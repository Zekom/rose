=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80482c8:push   ebp
    registers:
        ax      = { defs={} expr=v48[32] }
        cx      = { defs={} expr=v49[32] }
        dx      = { defs={} expr=v50[32] }
        bx      = { defs={} expr=v51[32] }
        sp      = { defs={0x080482c8} expr=(add[32] v52[32] -4[32]) }
        bp      = { defs={} expr=v53[32] }
        si      = { defs={} expr=v54[32] }
        di      = { defs={} expr=v55[32] }
        es      = { defs={} expr=v56[16] }
        cs      = { defs={} expr=v57[16] }
        ss      = { defs={} expr=v58[16] }
        ds      = { defs={} expr=v59[16] }
        fs      = { defs={} expr=v60[16] }
        gs      = { defs={} expr=v61[16] }
        cf      = { defs={} expr=v62[1] }
        ?1      = { defs={} expr=v63[1] }
        pf      = { defs={} expr=v64[1] }
        ?3      = { defs={} expr=v65[1] }
        af      = { defs={} expr=v66[1] }
        ?5      = { defs={} expr=v67[1] }
        zf      = { defs={} expr=v68[1] }
        sf      = { defs={} expr=v69[1] }
        tf      = { defs={} expr=v70[1] }
        if      = { defs={} expr=v71[1] }
        df      = { defs={} expr=v72[1] }
        of      = { defs={} expr=v73[1] }
        iopl0   = { defs={} expr=v74[1] }
        iopl1   = { defs={} expr=v75[1] }
        nt      = { defs={} expr=v76[1] }
        ?15     = { defs={} expr=v77[1] }
        rf      = { defs={} expr=v78[1] }
        vm      = { defs={} expr=v79[1] }
        ac      = { defs={} expr=v80[1] }
        vif     = { defs={} expr=v81[1] }
        vip     = { defs={} expr=v82[1] }
        id      = { defs={} expr=v83[1] }
        ?22     = { defs={} expr=v84[1] }
        ?23     = { defs={} expr=v85[1] }
        ?24     = { defs={} expr=v86[1] }
        ?25     = { defs={} expr=v87[1] }
        ?26     = { defs={} expr=v88[1] }
        ?27     = { defs={} expr=v89[1] }
        ?28     = { defs={} expr=v90[1] }
        ?29     = { defs={} expr=v91[1] }
        ?30     = { defs={} expr=v92[1] }
        ?31     = { defs={} expr=v93[1] }
        ip      = { defs={0x080482c8} expr=0x080482c9[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v53[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v53[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v53[32]) }
          flags = { }
        address = { defs={0x080482c8} expr=(add[32] v52[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v53[32]) }
          flags = { }
    init mem:
0x80482c9:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v48[32] }
        cx      = { defs={} expr=v49[32] }
        dx      = { defs={} expr=v50[32] }
        bx      = { defs={} expr=v51[32] }
        sp      = { defs={0x080482c8} expr=(add[32] v52[32] -4[32]) }
        bp      = { defs={0x080482c8,0x080482c9} expr=(add[32] v52[32] -4[32]) }
        si      = { defs={} expr=v54[32] }
        di      = { defs={} expr=v55[32] }
        es      = { defs={} expr=v56[16] }
        cs      = { defs={} expr=v57[16] }
        ss      = { defs={} expr=v58[16] }
        ds      = { defs={} expr=v59[16] }
        fs      = { defs={} expr=v60[16] }
        gs      = { defs={} expr=v61[16] }
        cf      = { defs={} expr=v62[1] }
        ?1      = { defs={} expr=v63[1] }
        pf      = { defs={} expr=v64[1] }
        ?3      = { defs={} expr=v65[1] }
        af      = { defs={} expr=v66[1] }
        ?5      = { defs={} expr=v67[1] }
        zf      = { defs={} expr=v68[1] }
        sf      = { defs={} expr=v69[1] }
        tf      = { defs={} expr=v70[1] }
        if      = { defs={} expr=v71[1] }
        df      = { defs={} expr=v72[1] }
        of      = { defs={} expr=v73[1] }
        iopl0   = { defs={} expr=v74[1] }
        iopl1   = { defs={} expr=v75[1] }
        nt      = { defs={} expr=v76[1] }
        ?15     = { defs={} expr=v77[1] }
        rf      = { defs={} expr=v78[1] }
        vm      = { defs={} expr=v79[1] }
        ac      = { defs={} expr=v80[1] }
        vif     = { defs={} expr=v81[1] }
        vip     = { defs={} expr=v82[1] }
        id      = { defs={} expr=v83[1] }
        ?22     = { defs={} expr=v84[1] }
        ?23     = { defs={} expr=v85[1] }
        ?24     = { defs={} expr=v86[1] }
        ?25     = { defs={} expr=v87[1] }
        ?26     = { defs={} expr=v88[1] }
        ?27     = { defs={} expr=v89[1] }
        ?28     = { defs={} expr=v90[1] }
        ?29     = { defs={} expr=v91[1] }
        ?30     = { defs={} expr=v92[1] }
        ?31     = { defs={} expr=v93[1] }
        ip      = { defs={0x080482c8,0x080482c9} expr=0x080482cb[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v53[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v53[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v53[32]) }
          flags = { }
        address = { defs={0x080482c8} expr=(add[32] v52[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v53[32]) }
          flags = { }
    init mem:
0x80482cb:sub    esp, 0x08
    registers:
        ax      = { defs={} expr=v48[32] }
        cx      = { defs={} expr=v49[32] }
        dx      = { defs={} expr=v50[32] }
        bx      = { defs={} expr=v51[32] }
        sp      = { defs={0x080482c8,0x080482cb} expr=(add[32] (add[32] v52[32] -4[32]) -8[32]) }
        bp      = { defs={0x080482c8,0x080482c9} expr=(add[32] v52[32] -4[32]) }
        si      = { defs={} expr=v54[32] }
        di      = { defs={} expr=v55[32] }
        es      = { defs={} expr=v56[16] }
        cs      = { defs={} expr=v57[16] }
        ss      = { defs={} expr=v58[16] }
        ds      = { defs={} expr=v59[16] }
        fs      = { defs={} expr=v60[16] }
        gs      = { defs={} expr=v61[16] }
        cf      = { defs={0x080482c8,0x080482cb} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v63[1] }
        pf      = { defs={0x080482c8,0x080482cb} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v65[1] }
        af      = { defs={0x080482c8,0x080482cb} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v67[1] }
        zf      = { defs={0x080482c8,0x080482cb} expr=(zerop[1] (add[32] (add[32] v52[32] -4[32]) -8[32])) }
        sf      = { defs={0x080482c8,0x080482cb} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v52[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v70[1] }
        if      = { defs={} expr=v71[1] }
        df      = { defs={} expr=v72[1] }
        of      = { defs={0x080482c8,0x080482cb} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v74[1] }
        iopl1   = { defs={} expr=v75[1] }
        nt      = { defs={} expr=v76[1] }
        ?15     = { defs={} expr=v77[1] }
        rf      = { defs={} expr=v78[1] }
        vm      = { defs={} expr=v79[1] }
        ac      = { defs={} expr=v80[1] }
        vif     = { defs={} expr=v81[1] }
        vip     = { defs={} expr=v82[1] }
        id      = { defs={} expr=v83[1] }
        ?22     = { defs={} expr=v84[1] }
        ?23     = { defs={} expr=v85[1] }
        ?24     = { defs={} expr=v86[1] }
        ?25     = { defs={} expr=v87[1] }
        ?26     = { defs={} expr=v88[1] }
        ?27     = { defs={} expr=v89[1] }
        ?28     = { defs={} expr=v90[1] }
        ?29     = { defs={} expr=v91[1] }
        ?30     = { defs={} expr=v92[1] }
        ?31     = { defs={} expr=v93[1] }
        ip      = { defs={0x080482c8,0x080482c9,0x080482cb} expr=0x080482ce[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v53[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v53[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v53[32]) }
          flags = { }
        address = { defs={0x080482c8} expr=(add[32] v52[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v53[32]) }
          flags = { }
    init mem:
0x80482ce:call   0x08048364<call_gmon_start>
    registers:
        ax      = { defs={} expr=v48[32] }
        cx      = { defs={} expr=v49[32] }
        dx      = { defs={} expr=v50[32] }
        bx      = { defs={} expr=v51[32] }
        sp      = { defs={0x080482c8,0x080482cb,0x080482ce} expr=(add[32] (add[32] (add[32] v52[32] -4[32]) -8[32]) -4[32]) }
        bp      = { defs={0x080482c8,0x080482c9} expr=(add[32] v52[32] -4[32]) }
        si      = { defs={} expr=v54[32] }
        di      = { defs={} expr=v55[32] }
        es      = { defs={} expr=v56[16] }
        cs      = { defs={} expr=v57[16] }
        ss      = { defs={} expr=v58[16] }
        ds      = { defs={} expr=v59[16] }
        fs      = { defs={} expr=v60[16] }
        gs      = { defs={} expr=v61[16] }
        cf      = { defs={0x080482c8,0x080482cb} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v63[1] }
        pf      = { defs={0x080482c8,0x080482cb} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v65[1] }
        af      = { defs={0x080482c8,0x080482cb} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v67[1] }
        zf      = { defs={0x080482c8,0x080482cb} expr=(zerop[1] (add[32] (add[32] v52[32] -4[32]) -8[32])) }
        sf      = { defs={0x080482c8,0x080482cb} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v52[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v70[1] }
        if      = { defs={} expr=v71[1] }
        df      = { defs={} expr=v72[1] }
        of      = { defs={0x080482c8,0x080482cb} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v74[1] }
        iopl1   = { defs={} expr=v75[1] }
        nt      = { defs={} expr=v76[1] }
        ?15     = { defs={} expr=v77[1] }
        rf      = { defs={} expr=v78[1] }
        vm      = { defs={} expr=v79[1] }
        ac      = { defs={} expr=v80[1] }
        vif     = { defs={} expr=v81[1] }
        vip     = { defs={} expr=v82[1] }
        id      = { defs={} expr=v83[1] }
        ?22     = { defs={} expr=v84[1] }
        ?23     = { defs={} expr=v85[1] }
        ?24     = { defs={} expr=v86[1] }
        ?25     = { defs={} expr=v87[1] }
        ?26     = { defs={} expr=v88[1] }
        ?27     = { defs={} expr=v89[1] }
        ?28     = { defs={} expr=v90[1] }
        ?29     = { defs={} expr=v91[1] }
        ?30     = { defs={} expr=v92[1] }
        ?31     = { defs={} expr=v93[1] }
        ip      = { defs={0x080482ce} expr=0x08048364[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v52[32] -4[32]) -8[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v52[32] -4[32]) -8[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v52[32] -4[32]) -8[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-126[8] }
          flags = { }
        address = { defs={0x080482c8,0x080482cb,0x080482ce} expr=(add[32] (add[32] (add[32] v52[32] -4[32]) -8[32]) -4[32]) }
          value = { defs={} expr=-45[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v53[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v53[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v53[32]) }
          flags = { }
        address = { defs={0x080482c8} expr=(add[32] v52[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v53[32]) }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80482d3:call   0x080483d0<frame_dummy>
    registers:
        ax      = { defs={} expr=v215[32] }
        cx      = { defs={} expr=v216[32] }
        dx      = { defs={} expr=v217[32] }
        bx      = { defs={} expr=v218[32] }
        sp      = { defs={0x080482d3} expr=(add[32] v219[32] -4[32]) }
        bp      = { defs={} expr=v220[32] }
        si      = { defs={} expr=v221[32] }
        di      = { defs={} expr=v222[32] }
        es      = { defs={} expr=v223[16] }
        cs      = { defs={} expr=v224[16] }
        ss      = { defs={} expr=v225[16] }
        ds      = { defs={} expr=v226[16] }
        fs      = { defs={} expr=v227[16] }
        gs      = { defs={} expr=v228[16] }
        cf      = { defs={} expr=v229[1] }
        ?1      = { defs={} expr=v230[1] }
        pf      = { defs={} expr=v231[1] }
        ?3      = { defs={} expr=v232[1] }
        af      = { defs={} expr=v233[1] }
        ?5      = { defs={} expr=v234[1] }
        zf      = { defs={} expr=v235[1] }
        sf      = { defs={} expr=v236[1] }
        tf      = { defs={} expr=v237[1] }
        if      = { defs={} expr=v238[1] }
        df      = { defs={} expr=v239[1] }
        of      = { defs={} expr=v240[1] }
        iopl0   = { defs={} expr=v241[1] }
        iopl1   = { defs={} expr=v242[1] }
        nt      = { defs={} expr=v243[1] }
        ?15     = { defs={} expr=v244[1] }
        rf      = { defs={} expr=v245[1] }
        vm      = { defs={} expr=v246[1] }
        ac      = { defs={} expr=v247[1] }
        vif     = { defs={} expr=v248[1] }
        vip     = { defs={} expr=v249[1] }
        id      = { defs={} expr=v250[1] }
        ?22     = { defs={} expr=v251[1] }
        ?23     = { defs={} expr=v252[1] }
        ?24     = { defs={} expr=v253[1] }
        ?25     = { defs={} expr=v254[1] }
        ?26     = { defs={} expr=v255[1] }
        ?27     = { defs={} expr=v256[1] }
        ?28     = { defs={} expr=v257[1] }
        ?29     = { defs={} expr=v258[1] }
        ?30     = { defs={} expr=v259[1] }
        ?31     = { defs={} expr=v260[1] }
        ip      = { defs={0x080482d3} expr=0x080483d0[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v219[32] -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v219[32] -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v219[32] -4[32]) 1[32]) }
          value = { defs={} expr=-126[8] }
          flags = { }
        address = { defs={0x080482d3} expr=(add[32] v219[32] -4[32]) }
          value = { defs={} expr=-40[8] }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80482d8:call   0x08048580<__do_global_ctors_aux>
    registers:
        ax      = { defs={} expr=v318[32] }
        cx      = { defs={} expr=v319[32] }
        dx      = { defs={} expr=v320[32] }
        bx      = { defs={} expr=v321[32] }
        sp      = { defs={0x080482d8} expr=(add[32] v322[32] -4[32]) }
        bp      = { defs={} expr=v323[32] }
        si      = { defs={} expr=v324[32] }
        di      = { defs={} expr=v325[32] }
        es      = { defs={} expr=v326[16] }
        cs      = { defs={} expr=v327[16] }
        ss      = { defs={} expr=v328[16] }
        ds      = { defs={} expr=v329[16] }
        fs      = { defs={} expr=v330[16] }
        gs      = { defs={} expr=v331[16] }
        cf      = { defs={} expr=v332[1] }
        ?1      = { defs={} expr=v333[1] }
        pf      = { defs={} expr=v334[1] }
        ?3      = { defs={} expr=v335[1] }
        af      = { defs={} expr=v336[1] }
        ?5      = { defs={} expr=v337[1] }
        zf      = { defs={} expr=v338[1] }
        sf      = { defs={} expr=v339[1] }
        tf      = { defs={} expr=v340[1] }
        if      = { defs={} expr=v341[1] }
        df      = { defs={} expr=v342[1] }
        of      = { defs={} expr=v343[1] }
        iopl0   = { defs={} expr=v344[1] }
        iopl1   = { defs={} expr=v345[1] }
        nt      = { defs={} expr=v346[1] }
        ?15     = { defs={} expr=v347[1] }
        rf      = { defs={} expr=v348[1] }
        vm      = { defs={} expr=v349[1] }
        ac      = { defs={} expr=v350[1] }
        vif     = { defs={} expr=v351[1] }
        vip     = { defs={} expr=v352[1] }
        id      = { defs={} expr=v353[1] }
        ?22     = { defs={} expr=v354[1] }
        ?23     = { defs={} expr=v355[1] }
        ?24     = { defs={} expr=v356[1] }
        ?25     = { defs={} expr=v357[1] }
        ?26     = { defs={} expr=v358[1] }
        ?27     = { defs={} expr=v359[1] }
        ?28     = { defs={} expr=v360[1] }
        ?29     = { defs={} expr=v361[1] }
        ?30     = { defs={} expr=v362[1] }
        ?31     = { defs={} expr=v363[1] }
        ip      = { defs={0x080482d8} expr=0x08048580[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v322[32] -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v322[32] -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v322[32] -4[32]) 1[32]) }
          value = { defs={} expr=-126[8] }
          flags = { }
        address = { defs={0x080482d8} expr=(add[32] v322[32] -4[32]) }
          value = { defs={} expr=-35[8] }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80482dd:leave  
    registers:
        ax      = { defs={} expr=v421[32] }
        cx      = { defs={} expr=v422[32] }
        dx      = { defs={} expr=v423[32] }
        bx      = { defs={} expr=v424[32] }
        sp      = { defs={0x080482dd} expr=(add[32] v426[32] 4[32]) }
        bp      = { defs={0x080482dd} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v477[8]) (shr0[32] 8[32] (uextend[32] 32[32] v478[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v479[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v480[8]))) }
        si      = { defs={} expr=v427[32] }
        di      = { defs={} expr=v428[32] }
        es      = { defs={} expr=v429[16] }
        cs      = { defs={} expr=v430[16] }
        ss      = { defs={} expr=v431[16] }
        ds      = { defs={} expr=v432[16] }
        fs      = { defs={} expr=v433[16] }
        gs      = { defs={} expr=v434[16] }
        cf      = { defs={} expr=v435[1] }
        ?1      = { defs={} expr=v436[1] }
        pf      = { defs={} expr=v437[1] }
        ?3      = { defs={} expr=v438[1] }
        af      = { defs={} expr=v439[1] }
        ?5      = { defs={} expr=v440[1] }
        zf      = { defs={} expr=v441[1] }
        sf      = { defs={} expr=v442[1] }
        tf      = { defs={} expr=v443[1] }
        if      = { defs={} expr=v444[1] }
        df      = { defs={} expr=v445[1] }
        of      = { defs={} expr=v446[1] }
        iopl0   = { defs={} expr=v447[1] }
        iopl1   = { defs={} expr=v448[1] }
        nt      = { defs={} expr=v449[1] }
        ?15     = { defs={} expr=v450[1] }
        rf      = { defs={} expr=v451[1] }
        vm      = { defs={} expr=v452[1] }
        ac      = { defs={} expr=v453[1] }
        vif     = { defs={} expr=v454[1] }
        vip     = { defs={} expr=v455[1] }
        id      = { defs={} expr=v456[1] }
        ?22     = { defs={} expr=v457[1] }
        ?23     = { defs={} expr=v458[1] }
        ?24     = { defs={} expr=v459[1] }
        ?25     = { defs={} expr=v460[1] }
        ?26     = { defs={} expr=v461[1] }
        ?27     = { defs={} expr=v462[1] }
        ?28     = { defs={} expr=v463[1] }
        ?29     = { defs={} expr=v464[1] }
        ?30     = { defs={} expr=v465[1] }
        ?31     = { defs={} expr=v466[1] }
        ip      = { defs={0x080482dd} expr=0x080482de[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v426[32] 3[32]) }
          value = { defs={} expr=v480[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v426[32] 2[32]) }
          value = { defs={} expr=v479[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v426[32] 1[32]) }
          value = { defs={} expr=v478[8] }
          flags = { rdonly }
        address = { defs={0x080482dd} expr=v426[32] }
          value = { defs={} expr=v477[8] }
          flags = { rdonly }
0x80482de:ret    
    registers:
        ax      = { defs={} expr=v421[32] }
        cx      = { defs={} expr=v422[32] }
        dx      = { defs={} expr=v423[32] }
        bx      = { defs={} expr=v424[32] }
        sp      = { defs={0x080482dd,0x080482de} expr=(add[32] (add[32] v426[32] 4[32]) 4[32]) }
        bp      = { defs={0x080482dd} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v477[8]) (shr0[32] 8[32] (uextend[32] 32[32] v478[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v479[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v480[8]))) }
        si      = { defs={} expr=v427[32] }
        di      = { defs={} expr=v428[32] }
        es      = { defs={} expr=v429[16] }
        cs      = { defs={} expr=v430[16] }
        ss      = { defs={} expr=v431[16] }
        ds      = { defs={} expr=v432[16] }
        fs      = { defs={} expr=v433[16] }
        gs      = { defs={} expr=v434[16] }
        cf      = { defs={} expr=v435[1] }
        ?1      = { defs={} expr=v436[1] }
        pf      = { defs={} expr=v437[1] }
        ?3      = { defs={} expr=v438[1] }
        af      = { defs={} expr=v439[1] }
        ?5      = { defs={} expr=v440[1] }
        zf      = { defs={} expr=v441[1] }
        sf      = { defs={} expr=v442[1] }
        tf      = { defs={} expr=v443[1] }
        if      = { defs={} expr=v444[1] }
        df      = { defs={} expr=v445[1] }
        of      = { defs={} expr=v446[1] }
        iopl0   = { defs={} expr=v447[1] }
        iopl1   = { defs={} expr=v448[1] }
        nt      = { defs={} expr=v449[1] }
        ?15     = { defs={} expr=v450[1] }
        rf      = { defs={} expr=v451[1] }
        vm      = { defs={} expr=v452[1] }
        ac      = { defs={} expr=v453[1] }
        vif     = { defs={} expr=v454[1] }
        vip     = { defs={} expr=v455[1] }
        id      = { defs={} expr=v456[1] }
        ?22     = { defs={} expr=v457[1] }
        ?23     = { defs={} expr=v458[1] }
        ?24     = { defs={} expr=v459[1] }
        ?25     = { defs={} expr=v460[1] }
        ?26     = { defs={} expr=v461[1] }
        ?27     = { defs={} expr=v462[1] }
        ?28     = { defs={} expr=v463[1] }
        ?29     = { defs={} expr=v464[1] }
        ?30     = { defs={} expr=v465[1] }
        ?31     = { defs={} expr=v466[1] }
        ip      = { defs={0x080482de} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v495[8]) (shr0[32] 8[32] (uextend[32] 32[32] v496[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v497[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v498[8]))) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v426[32] 4[32]) 3[32]) }
          value = { defs={} expr=v498[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v426[32] 4[32]) 2[32]) }
          value = { defs={} expr=v497[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v426[32] 4[32]) 1[32]) }
          value = { defs={} expr=v496[8] }
          flags = { rdonly }
        address = { defs={0x080482dd,0x080482de} expr=(add[32] v426[32] 4[32]) }
          value = { defs={} expr=v495[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v426[32] 3[32]) }
          value = { defs={} expr=v480[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v426[32] 2[32]) }
          value = { defs={} expr=v479[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v426[32] 1[32]) }
          value = { defs={} expr=v478[8] }
          flags = { rdonly }
        address = { defs={0x080482dd} expr=v426[32] }
          value = { defs={} expr=v477[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80482f0:jmp    DWORD PTR ds:[0x080496d4<.got.plt+0x0c>]
    registers:
        ax      = { defs={} expr=v553[32] }
        cx      = { defs={} expr=v554[32] }
        dx      = { defs={} expr=v555[32] }
        bx      = { defs={} expr=v556[32] }
        sp      = { defs={} expr=v557[32] }
        bp      = { defs={} expr=v558[32] }
        si      = { defs={} expr=v559[32] }
        di      = { defs={} expr=v560[32] }
        es      = { defs={} expr=v561[16] }
        cs      = { defs={} expr=v562[16] }
        ss      = { defs={} expr=v563[16] }
        ds      = { defs={} expr=v564[16] }
        fs      = { defs={} expr=v565[16] }
        gs      = { defs={} expr=v566[16] }
        cf      = { defs={} expr=v567[1] }
        ?1      = { defs={} expr=v568[1] }
        pf      = { defs={} expr=v569[1] }
        ?3      = { defs={} expr=v570[1] }
        af      = { defs={} expr=v571[1] }
        ?5      = { defs={} expr=v572[1] }
        zf      = { defs={} expr=v573[1] }
        sf      = { defs={} expr=v574[1] }
        tf      = { defs={} expr=v575[1] }
        if      = { defs={} expr=v576[1] }
        df      = { defs={} expr=v577[1] }
        of      = { defs={} expr=v578[1] }
        iopl0   = { defs={} expr=v579[1] }
        iopl1   = { defs={} expr=v580[1] }
        nt      = { defs={} expr=v581[1] }
        ?15     = { defs={} expr=v582[1] }
        rf      = { defs={} expr=v583[1] }
        vm      = { defs={} expr=v584[1] }
        ac      = { defs={} expr=v585[1] }
        vif     = { defs={} expr=v586[1] }
        vip     = { defs={} expr=v587[1] }
        id      = { defs={} expr=v588[1] }
        ?22     = { defs={} expr=v589[1] }
        ?23     = { defs={} expr=v590[1] }
        ?24     = { defs={} expr=v591[1] }
        ?25     = { defs={} expr=v592[1] }
        ?26     = { defs={} expr=v593[1] }
        ?27     = { defs={} expr=v594[1] }
        ?28     = { defs={} expr=v595[1] }
        ?29     = { defs={} expr=v596[1] }
        ?30     = { defs={} expr=v597[1] }
        ?31     = { defs={} expr=v598[1] }
        ip      = { defs={0x080482f0} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v605[8]) (shr0[32] 8[32] (uextend[32] 32[32] v606[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v607[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v608[8]))) }
    memory:
    init mem:
        address = { defs={} expr=0x080496d7[32] }
          value = { defs={} expr=v608[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496d6[32] }
          value = { defs={} expr=v607[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496d5[32] }
          value = { defs={} expr=v606[8] }
          flags = { rdonly }
        address = { defs={0x080482f0} expr=0x080496d4[32] }
          value = { defs={} expr=v605[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048300:jmp    DWORD PTR ds:[0x080496d8<.got.plt+0x10>]
    registers:
        ax      = { defs={} expr=v662[32] }
        cx      = { defs={} expr=v663[32] }
        dx      = { defs={} expr=v664[32] }
        bx      = { defs={} expr=v665[32] }
        sp      = { defs={} expr=v666[32] }
        bp      = { defs={} expr=v667[32] }
        si      = { defs={} expr=v668[32] }
        di      = { defs={} expr=v669[32] }
        es      = { defs={} expr=v670[16] }
        cs      = { defs={} expr=v671[16] }
        ss      = { defs={} expr=v672[16] }
        ds      = { defs={} expr=v673[16] }
        fs      = { defs={} expr=v674[16] }
        gs      = { defs={} expr=v675[16] }
        cf      = { defs={} expr=v676[1] }
        ?1      = { defs={} expr=v677[1] }
        pf      = { defs={} expr=v678[1] }
        ?3      = { defs={} expr=v679[1] }
        af      = { defs={} expr=v680[1] }
        ?5      = { defs={} expr=v681[1] }
        zf      = { defs={} expr=v682[1] }
        sf      = { defs={} expr=v683[1] }
        tf      = { defs={} expr=v684[1] }
        if      = { defs={} expr=v685[1] }
        df      = { defs={} expr=v686[1] }
        of      = { defs={} expr=v687[1] }
        iopl0   = { defs={} expr=v688[1] }
        iopl1   = { defs={} expr=v689[1] }
        nt      = { defs={} expr=v690[1] }
        ?15     = { defs={} expr=v691[1] }
        rf      = { defs={} expr=v692[1] }
        vm      = { defs={} expr=v693[1] }
        ac      = { defs={} expr=v694[1] }
        vif     = { defs={} expr=v695[1] }
        vip     = { defs={} expr=v696[1] }
        id      = { defs={} expr=v697[1] }
        ?22     = { defs={} expr=v698[1] }
        ?23     = { defs={} expr=v699[1] }
        ?24     = { defs={} expr=v700[1] }
        ?25     = { defs={} expr=v701[1] }
        ?26     = { defs={} expr=v702[1] }
        ?27     = { defs={} expr=v703[1] }
        ?28     = { defs={} expr=v704[1] }
        ?29     = { defs={} expr=v705[1] }
        ?30     = { defs={} expr=v706[1] }
        ?31     = { defs={} expr=v707[1] }
        ip      = { defs={0x08048300} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v714[8]) (shr0[32] 8[32] (uextend[32] 32[32] v715[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v716[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v717[8]))) }
    memory:
    init mem:
        address = { defs={} expr=0x080496db[32] }
          value = { defs={} expr=v717[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496da[32] }
          value = { defs={} expr=v716[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496d9[32] }
          value = { defs={} expr=v715[8] }
          flags = { rdonly }
        address = { defs={0x08048300} expr=0x080496d8[32] }
          value = { defs={} expr=v714[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048310:jmp    DWORD PTR ds:[0x080496dc<.got.plt+0x14>]
    registers:
        ax      = { defs={} expr=v771[32] }
        cx      = { defs={} expr=v772[32] }
        dx      = { defs={} expr=v773[32] }
        bx      = { defs={} expr=v774[32] }
        sp      = { defs={} expr=v775[32] }
        bp      = { defs={} expr=v776[32] }
        si      = { defs={} expr=v777[32] }
        di      = { defs={} expr=v778[32] }
        es      = { defs={} expr=v779[16] }
        cs      = { defs={} expr=v780[16] }
        ss      = { defs={} expr=v781[16] }
        ds      = { defs={} expr=v782[16] }
        fs      = { defs={} expr=v783[16] }
        gs      = { defs={} expr=v784[16] }
        cf      = { defs={} expr=v785[1] }
        ?1      = { defs={} expr=v786[1] }
        pf      = { defs={} expr=v787[1] }
        ?3      = { defs={} expr=v788[1] }
        af      = { defs={} expr=v789[1] }
        ?5      = { defs={} expr=v790[1] }
        zf      = { defs={} expr=v791[1] }
        sf      = { defs={} expr=v792[1] }
        tf      = { defs={} expr=v793[1] }
        if      = { defs={} expr=v794[1] }
        df      = { defs={} expr=v795[1] }
        of      = { defs={} expr=v796[1] }
        iopl0   = { defs={} expr=v797[1] }
        iopl1   = { defs={} expr=v798[1] }
        nt      = { defs={} expr=v799[1] }
        ?15     = { defs={} expr=v800[1] }
        rf      = { defs={} expr=v801[1] }
        vm      = { defs={} expr=v802[1] }
        ac      = { defs={} expr=v803[1] }
        vif     = { defs={} expr=v804[1] }
        vip     = { defs={} expr=v805[1] }
        id      = { defs={} expr=v806[1] }
        ?22     = { defs={} expr=v807[1] }
        ?23     = { defs={} expr=v808[1] }
        ?24     = { defs={} expr=v809[1] }
        ?25     = { defs={} expr=v810[1] }
        ?26     = { defs={} expr=v811[1] }
        ?27     = { defs={} expr=v812[1] }
        ?28     = { defs={} expr=v813[1] }
        ?29     = { defs={} expr=v814[1] }
        ?30     = { defs={} expr=v815[1] }
        ?31     = { defs={} expr=v816[1] }
        ip      = { defs={0x08048310} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v823[8]) (shr0[32] 8[32] (uextend[32] 32[32] v824[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v825[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v826[8]))) }
    memory:
    init mem:
        address = { defs={} expr=0x080496df[32] }
          value = { defs={} expr=v826[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496de[32] }
          value = { defs={} expr=v825[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496dd[32] }
          value = { defs={} expr=v824[8] }
          flags = { rdonly }
        address = { defs={0x08048310} expr=0x080496dc[32] }
          value = { defs={} expr=v823[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048320:jmp    DWORD PTR ds:[0x080496e0<.got.plt+0x18>]
    registers:
        ax      = { defs={} expr=v880[32] }
        cx      = { defs={} expr=v881[32] }
        dx      = { defs={} expr=v882[32] }
        bx      = { defs={} expr=v883[32] }
        sp      = { defs={} expr=v884[32] }
        bp      = { defs={} expr=v885[32] }
        si      = { defs={} expr=v886[32] }
        di      = { defs={} expr=v887[32] }
        es      = { defs={} expr=v888[16] }
        cs      = { defs={} expr=v889[16] }
        ss      = { defs={} expr=v890[16] }
        ds      = { defs={} expr=v891[16] }
        fs      = { defs={} expr=v892[16] }
        gs      = { defs={} expr=v893[16] }
        cf      = { defs={} expr=v894[1] }
        ?1      = { defs={} expr=v895[1] }
        pf      = { defs={} expr=v896[1] }
        ?3      = { defs={} expr=v897[1] }
        af      = { defs={} expr=v898[1] }
        ?5      = { defs={} expr=v899[1] }
        zf      = { defs={} expr=v900[1] }
        sf      = { defs={} expr=v901[1] }
        tf      = { defs={} expr=v902[1] }
        if      = { defs={} expr=v903[1] }
        df      = { defs={} expr=v904[1] }
        of      = { defs={} expr=v905[1] }
        iopl0   = { defs={} expr=v906[1] }
        iopl1   = { defs={} expr=v907[1] }
        nt      = { defs={} expr=v908[1] }
        ?15     = { defs={} expr=v909[1] }
        rf      = { defs={} expr=v910[1] }
        vm      = { defs={} expr=v911[1] }
        ac      = { defs={} expr=v912[1] }
        vif     = { defs={} expr=v913[1] }
        vip     = { defs={} expr=v914[1] }
        id      = { defs={} expr=v915[1] }
        ?22     = { defs={} expr=v916[1] }
        ?23     = { defs={} expr=v917[1] }
        ?24     = { defs={} expr=v918[1] }
        ?25     = { defs={} expr=v919[1] }
        ?26     = { defs={} expr=v920[1] }
        ?27     = { defs={} expr=v921[1] }
        ?28     = { defs={} expr=v922[1] }
        ?29     = { defs={} expr=v923[1] }
        ?30     = { defs={} expr=v924[1] }
        ?31     = { defs={} expr=v925[1] }
        ip      = { defs={0x08048320} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v935[8]))) }
    memory:
    init mem:
        address = { defs={} expr=0x080496e3[32] }
          value = { defs={} expr=v935[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496e2[32] }
          value = { defs={} expr=v934[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496e1[32] }
          value = { defs={} expr=v933[8] }
          flags = { rdonly }
        address = { defs={0x08048320} expr=0x080496e0[32] }
          value = { defs={} expr=v932[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048330:jmp    DWORD PTR ds:[0x080496e4<.got.plt+0x1c>]
    registers:
        ax      = { defs={} expr=v989[32] }
        cx      = { defs={} expr=v990[32] }
        dx      = { defs={} expr=v991[32] }
        bx      = { defs={} expr=v992[32] }
        sp      = { defs={} expr=v993[32] }
        bp      = { defs={} expr=v994[32] }
        si      = { defs={} expr=v995[32] }
        di      = { defs={} expr=v996[32] }
        es      = { defs={} expr=v997[16] }
        cs      = { defs={} expr=v998[16] }
        ss      = { defs={} expr=v999[16] }
        ds      = { defs={} expr=v1000[16] }
        fs      = { defs={} expr=v1001[16] }
        gs      = { defs={} expr=v1002[16] }
        cf      = { defs={} expr=v1003[1] }
        ?1      = { defs={} expr=v1004[1] }
        pf      = { defs={} expr=v1005[1] }
        ?3      = { defs={} expr=v1006[1] }
        af      = { defs={} expr=v1007[1] }
        ?5      = { defs={} expr=v1008[1] }
        zf      = { defs={} expr=v1009[1] }
        sf      = { defs={} expr=v1010[1] }
        tf      = { defs={} expr=v1011[1] }
        if      = { defs={} expr=v1012[1] }
        df      = { defs={} expr=v1013[1] }
        of      = { defs={} expr=v1014[1] }
        iopl0   = { defs={} expr=v1015[1] }
        iopl1   = { defs={} expr=v1016[1] }
        nt      = { defs={} expr=v1017[1] }
        ?15     = { defs={} expr=v1018[1] }
        rf      = { defs={} expr=v1019[1] }
        vm      = { defs={} expr=v1020[1] }
        ac      = { defs={} expr=v1021[1] }
        vif     = { defs={} expr=v1022[1] }
        vip     = { defs={} expr=v1023[1] }
        id      = { defs={} expr=v1024[1] }
        ?22     = { defs={} expr=v1025[1] }
        ?23     = { defs={} expr=v1026[1] }
        ?24     = { defs={} expr=v1027[1] }
        ?25     = { defs={} expr=v1028[1] }
        ?26     = { defs={} expr=v1029[1] }
        ?27     = { defs={} expr=v1030[1] }
        ?28     = { defs={} expr=v1031[1] }
        ?29     = { defs={} expr=v1032[1] }
        ?30     = { defs={} expr=v1033[1] }
        ?31     = { defs={} expr=v1034[1] }
        ip      = { defs={0x08048330} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1041[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1042[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1043[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1044[8]))) }
    memory:
    init mem:
        address = { defs={} expr=0x080496e7[32] }
          value = { defs={} expr=v1044[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496e6[32] }
          value = { defs={} expr=v1043[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496e5[32] }
          value = { defs={} expr=v1042[8] }
          flags = { rdonly }
        address = { defs={0x08048330} expr=0x080496e4[32] }
          value = { defs={} expr=v1041[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048340:xor    ebp, ebp
    registers:
        ax      = { defs={} expr=v1098[32] }
        cx      = { defs={} expr=v1099[32] }
        dx      = { defs={} expr=v1100[32] }
        bx      = { defs={} expr=v1101[32] }
        sp      = { defs={} expr=v1102[32] }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={} expr=v1104[32] }
        di      = { defs={} expr=v1105[32] }
        es      = { defs={} expr=v1106[16] }
        cs      = { defs={} expr=v1107[16] }
        ss      = { defs={} expr=v1108[16] }
        ds      = { defs={} expr=v1109[16] }
        fs      = { defs={} expr=v1110[16] }
        gs      = { defs={} expr=v1111[16] }
        cf      = { defs={0x08048340} expr=0[1] }
        ?1      = { defs={} expr=v1113[1] }
        pf      = { defs={0x08048340} expr=1[1] }
        ?3      = { defs={} expr=v1115[1] }
        af      = { defs={0x08048340} expr=v1177[1] }
        ?5      = { defs={} expr=v1117[1] }
        zf      = { defs={0x08048340} expr=1[1] }
        sf      = { defs={0x08048340} expr=0[1] }
        tf      = { defs={} expr=v1120[1] }
        if      = { defs={} expr=v1121[1] }
        df      = { defs={} expr=v1122[1] }
        of      = { defs={0x08048340} expr=0[1] }
        iopl0   = { defs={} expr=v1124[1] }
        iopl1   = { defs={} expr=v1125[1] }
        nt      = { defs={} expr=v1126[1] }
        ?15     = { defs={} expr=v1127[1] }
        rf      = { defs={} expr=v1128[1] }
        vm      = { defs={} expr=v1129[1] }
        ac      = { defs={} expr=v1130[1] }
        vif     = { defs={} expr=v1131[1] }
        vip     = { defs={} expr=v1132[1] }
        id      = { defs={} expr=v1133[1] }
        ?22     = { defs={} expr=v1134[1] }
        ?23     = { defs={} expr=v1135[1] }
        ?24     = { defs={} expr=v1136[1] }
        ?25     = { defs={} expr=v1137[1] }
        ?26     = { defs={} expr=v1138[1] }
        ?27     = { defs={} expr=v1139[1] }
        ?28     = { defs={} expr=v1140[1] }
        ?29     = { defs={} expr=v1141[1] }
        ?30     = { defs={} expr=v1142[1] }
        ?31     = { defs={} expr=v1143[1] }
        ip      = { defs={0x08048340} expr=0x08048342[32] }
    memory:
    init mem:
0x8048342:pop    esi
    registers:
        ax      = { defs={} expr=v1098[32] }
        cx      = { defs={} expr=v1099[32] }
        dx      = { defs={} expr=v1100[32] }
        bx      = { defs={} expr=v1101[32] }
        sp      = { defs={0x08048342} expr=(add[32] v1102[32] 4[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1188[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1189[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1190[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1191[8]))) }
        di      = { defs={} expr=v1105[32] }
        es      = { defs={} expr=v1106[16] }
        cs      = { defs={} expr=v1107[16] }
        ss      = { defs={} expr=v1108[16] }
        ds      = { defs={} expr=v1109[16] }
        fs      = { defs={} expr=v1110[16] }
        gs      = { defs={} expr=v1111[16] }
        cf      = { defs={0x08048340} expr=0[1] }
        ?1      = { defs={} expr=v1113[1] }
        pf      = { defs={0x08048340} expr=1[1] }
        ?3      = { defs={} expr=v1115[1] }
        af      = { defs={0x08048340} expr=v1177[1] }
        ?5      = { defs={} expr=v1117[1] }
        zf      = { defs={0x08048340} expr=1[1] }
        sf      = { defs={0x08048340} expr=0[1] }
        tf      = { defs={} expr=v1120[1] }
        if      = { defs={} expr=v1121[1] }
        df      = { defs={} expr=v1122[1] }
        of      = { defs={0x08048340} expr=0[1] }
        iopl0   = { defs={} expr=v1124[1] }
        iopl1   = { defs={} expr=v1125[1] }
        nt      = { defs={} expr=v1126[1] }
        ?15     = { defs={} expr=v1127[1] }
        rf      = { defs={} expr=v1128[1] }
        vm      = { defs={} expr=v1129[1] }
        ac      = { defs={} expr=v1130[1] }
        vif     = { defs={} expr=v1131[1] }
        vip     = { defs={} expr=v1132[1] }
        id      = { defs={} expr=v1133[1] }
        ?22     = { defs={} expr=v1134[1] }
        ?23     = { defs={} expr=v1135[1] }
        ?24     = { defs={} expr=v1136[1] }
        ?25     = { defs={} expr=v1137[1] }
        ?26     = { defs={} expr=v1138[1] }
        ?27     = { defs={} expr=v1139[1] }
        ?28     = { defs={} expr=v1140[1] }
        ?29     = { defs={} expr=v1141[1] }
        ?30     = { defs={} expr=v1142[1] }
        ?31     = { defs={} expr=v1143[1] }
        ip      = { defs={0x08048340,0x08048342} expr=0x08048343[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v1102[32] 3[32]) }
          value = { defs={} expr=v1191[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1102[32] 2[32]) }
          value = { defs={} expr=v1190[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1102[32] 1[32]) }
          value = { defs={} expr=v1189[8] }
          flags = { rdonly }
        address = { defs={0x08048342} expr=v1102[32] }
          value = { defs={} expr=v1188[8] }
          flags = { rdonly }
0x8048343:mov    ecx, esp
    registers:
        ax      = { defs={} expr=v1098[32] }
        cx      = { defs={0x08048342,0x08048343} expr=(add[32] v1102[32] 4[32]) }
        dx      = { defs={} expr=v1100[32] }
        bx      = { defs={} expr=v1101[32] }
        sp      = { defs={0x08048342} expr=(add[32] v1102[32] 4[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1188[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1189[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1190[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1191[8]))) }
        di      = { defs={} expr=v1105[32] }
        es      = { defs={} expr=v1106[16] }
        cs      = { defs={} expr=v1107[16] }
        ss      = { defs={} expr=v1108[16] }
        ds      = { defs={} expr=v1109[16] }
        fs      = { defs={} expr=v1110[16] }
        gs      = { defs={} expr=v1111[16] }
        cf      = { defs={0x08048340} expr=0[1] }
        ?1      = { defs={} expr=v1113[1] }
        pf      = { defs={0x08048340} expr=1[1] }
        ?3      = { defs={} expr=v1115[1] }
        af      = { defs={0x08048340} expr=v1177[1] }
        ?5      = { defs={} expr=v1117[1] }
        zf      = { defs={0x08048340} expr=1[1] }
        sf      = { defs={0x08048340} expr=0[1] }
        tf      = { defs={} expr=v1120[1] }
        if      = { defs={} expr=v1121[1] }
        df      = { defs={} expr=v1122[1] }
        of      = { defs={0x08048340} expr=0[1] }
        iopl0   = { defs={} expr=v1124[1] }
        iopl1   = { defs={} expr=v1125[1] }
        nt      = { defs={} expr=v1126[1] }
        ?15     = { defs={} expr=v1127[1] }
        rf      = { defs={} expr=v1128[1] }
        vm      = { defs={} expr=v1129[1] }
        ac      = { defs={} expr=v1130[1] }
        vif     = { defs={} expr=v1131[1] }
        vip     = { defs={} expr=v1132[1] }
        id      = { defs={} expr=v1133[1] }
        ?22     = { defs={} expr=v1134[1] }
        ?23     = { defs={} expr=v1135[1] }
        ?24     = { defs={} expr=v1136[1] }
        ?25     = { defs={} expr=v1137[1] }
        ?26     = { defs={} expr=v1138[1] }
        ?27     = { defs={} expr=v1139[1] }
        ?28     = { defs={} expr=v1140[1] }
        ?29     = { defs={} expr=v1141[1] }
        ?30     = { defs={} expr=v1142[1] }
        ?31     = { defs={} expr=v1143[1] }
        ip      = { defs={0x08048340,0x08048342,0x08048343} expr=0x08048345[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v1102[32] 3[32]) }
          value = { defs={} expr=v1191[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1102[32] 2[32]) }
          value = { defs={} expr=v1190[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1102[32] 1[32]) }
          value = { defs={} expr=v1189[8] }
          flags = { rdonly }
        address = { defs={0x08048342} expr=v1102[32] }
          value = { defs={} expr=v1188[8] }
          flags = { rdonly }
0x8048345:and    esp, 0xf0<-0x10>
    registers:
        ax      = { defs={} expr=v1098[32] }
        cx      = { defs={0x08048342,0x08048343} expr=(add[32] v1102[32] 4[32]) }
        dx      = { defs={} expr=v1100[32] }
        bx      = { defs={} expr=v1101[32] }
        sp      = { defs={0x08048342,0x08048345} expr=(bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1188[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1189[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1190[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1191[8]))) }
        di      = { defs={} expr=v1105[32] }
        es      = { defs={} expr=v1106[16] }
        cs      = { defs={} expr=v1107[16] }
        ss      = { defs={} expr=v1108[16] }
        ds      = { defs={} expr=v1109[16] }
        fs      = { defs={} expr=v1110[16] }
        gs      = { defs={} expr=v1111[16] }
        cf      = { defs={0x08048345} expr=0[1] }
        ?1      = { defs={} expr=v1113[1] }
        pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v1115[1] }
        af      = { defs={0x08048345} expr=v1233[1] }
        ?5      = { defs={} expr=v1117[1] }
        zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])) }
        sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])) }
        tf      = { defs={} expr=v1120[1] }
        if      = { defs={} expr=v1121[1] }
        df      = { defs={} expr=v1122[1] }
        of      = { defs={0x08048345} expr=0[1] }
        iopl0   = { defs={} expr=v1124[1] }
        iopl1   = { defs={} expr=v1125[1] }
        nt      = { defs={} expr=v1126[1] }
        ?15     = { defs={} expr=v1127[1] }
        rf      = { defs={} expr=v1128[1] }
        vm      = { defs={} expr=v1129[1] }
        ac      = { defs={} expr=v1130[1] }
        vif     = { defs={} expr=v1131[1] }
        vip     = { defs={} expr=v1132[1] }
        id      = { defs={} expr=v1133[1] }
        ?22     = { defs={} expr=v1134[1] }
        ?23     = { defs={} expr=v1135[1] }
        ?24     = { defs={} expr=v1136[1] }
        ?25     = { defs={} expr=v1137[1] }
        ?26     = { defs={} expr=v1138[1] }
        ?27     = { defs={} expr=v1139[1] }
        ?28     = { defs={} expr=v1140[1] }
        ?29     = { defs={} expr=v1141[1] }
        ?30     = { defs={} expr=v1142[1] }
        ?31     = { defs={} expr=v1143[1] }
        ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345} expr=0x08048348[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v1102[32] 3[32]) }
          value = { defs={} expr=v1191[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1102[32] 2[32]) }
          value = { defs={} expr=v1190[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1102[32] 1[32]) }
          value = { defs={} expr=v1189[8] }
          flags = { rdonly }
        address = { defs={0x08048342} expr=v1102[32] }
          value = { defs={} expr=v1188[8] }
          flags = { rdonly }
0x8048348:push   eax
    registers:
        ax      = { defs={} expr=v1098[32] }
        cx      = { defs={0x08048342,0x08048343} expr=(add[32] v1102[32] 4[32]) }
        dx      = { defs={} expr=v1100[32] }
        bx      = { defs={} expr=v1101[32] }
        sp      = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1188[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1189[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1190[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1191[8]))) }
        di      = { defs={} expr=v1105[32] }
        es      = { defs={} expr=v1106[16] }
        cs      = { defs={} expr=v1107[16] }
        ss      = { defs={} expr=v1108[16] }
        ds      = { defs={} expr=v1109[16] }
        fs      = { defs={} expr=v1110[16] }
        gs      = { defs={} expr=v1111[16] }
        cf      = { defs={0x08048345} expr=0[1] }
        ?1      = { defs={} expr=v1113[1] }
        pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v1115[1] }
        af      = { defs={0x08048345} expr=v1233[1] }
        ?5      = { defs={} expr=v1117[1] }
        zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])) }
        sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])) }
        tf      = { defs={} expr=v1120[1] }
        if      = { defs={} expr=v1121[1] }
        df      = { defs={} expr=v1122[1] }
        of      = { defs={0x08048345} expr=0[1] }
        iopl0   = { defs={} expr=v1124[1] }
        iopl1   = { defs={} expr=v1125[1] }
        nt      = { defs={} expr=v1126[1] }
        ?15     = { defs={} expr=v1127[1] }
        rf      = { defs={} expr=v1128[1] }
        vm      = { defs={} expr=v1129[1] }
        ac      = { defs={} expr=v1130[1] }
        vif     = { defs={} expr=v1131[1] }
        vip     = { defs={} expr=v1132[1] }
        id      = { defs={} expr=v1133[1] }
        ?22     = { defs={} expr=v1134[1] }
        ?23     = { defs={} expr=v1135[1] }
        ?24     = { defs={} expr=v1136[1] }
        ?25     = { defs={} expr=v1137[1] }
        ?26     = { defs={} expr=v1138[1] }
        ?27     = { defs={} expr=v1139[1] }
        ?28     = { defs={} expr=v1140[1] }
        ?29     = { defs={} expr=v1141[1] }
        ?30     = { defs={} expr=v1142[1] }
        ?31     = { defs={} expr=v1143[1] }
        ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348} expr=0x08048349[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1098[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1098[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1098[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1098[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v1102[32] 3[32]) }
          value = { defs={} expr=v1191[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1102[32] 2[32]) }
          value = { defs={} expr=v1190[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1102[32] 1[32]) }
          value = { defs={} expr=v1189[8] }
          flags = { rdonly }
        address = { defs={0x08048342} expr=v1102[32] }
          value = { defs={} expr=v1188[8] }
          flags = { rdonly }
0x8048349:push   esp
    registers:
        ax      = { defs={} expr=v1098[32] }
        cx      = { defs={0x08048342,0x08048343} expr=(add[32] v1102[32] 4[32]) }
        dx      = { defs={} expr=v1100[32] }
        bx      = { defs={} expr=v1101[32] }
        sp      = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1188[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1189[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1190[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1191[8]))) }
        di      = { defs={} expr=v1105[32] }
        es      = { defs={} expr=v1106[16] }
        cs      = { defs={} expr=v1107[16] }
        ss      = { defs={} expr=v1108[16] }
        ds      = { defs={} expr=v1109[16] }
        fs      = { defs={} expr=v1110[16] }
        gs      = { defs={} expr=v1111[16] }
        cf      = { defs={0x08048345} expr=0[1] }
        ?1      = { defs={} expr=v1113[1] }
        pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v1115[1] }
        af      = { defs={0x08048345} expr=v1233[1] }
        ?5      = { defs={} expr=v1117[1] }
        zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])) }
        sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])) }
        tf      = { defs={} expr=v1120[1] }
        if      = { defs={} expr=v1121[1] }
        df      = { defs={} expr=v1122[1] }
        of      = { defs={0x08048345} expr=0[1] }
        iopl0   = { defs={} expr=v1124[1] }
        iopl1   = { defs={} expr=v1125[1] }
        nt      = { defs={} expr=v1126[1] }
        ?15     = { defs={} expr=v1127[1] }
        rf      = { defs={} expr=v1128[1] }
        vm      = { defs={} expr=v1129[1] }
        ac      = { defs={} expr=v1130[1] }
        vif     = { defs={} expr=v1131[1] }
        vip     = { defs={} expr=v1132[1] }
        id      = { defs={} expr=v1133[1] }
        ?22     = { defs={} expr=v1134[1] }
        ?23     = { defs={} expr=v1135[1] }
        ?24     = { defs={} expr=v1136[1] }
        ?25     = { defs={} expr=v1137[1] }
        ?26     = { defs={} expr=v1138[1] }
        ?27     = { defs={} expr=v1139[1] }
        ?28     = { defs={} expr=v1140[1] }
        ?29     = { defs={} expr=v1141[1] }
        ?30     = { defs={} expr=v1142[1] }
        ?31     = { defs={} expr=v1143[1] }
        ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348,0x08048349} expr=0x0804834a[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1098[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1098[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1098[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1098[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v1102[32] 3[32]) }
          value = { defs={} expr=v1191[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1102[32] 2[32]) }
          value = { defs={} expr=v1190[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1102[32] 1[32]) }
          value = { defs={} expr=v1189[8] }
          flags = { rdonly }
        address = { defs={0x08048342} expr=v1102[32] }
          value = { defs={} expr=v1188[8] }
          flags = { rdonly }
0x804834a:push   edx
    registers:
        ax      = { defs={} expr=v1098[32] }
        cx      = { defs={0x08048342,0x08048343} expr=(add[32] v1102[32] 4[32]) }
        dx      = { defs={} expr=v1100[32] }
        bx      = { defs={} expr=v1101[32] }
        sp      = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1188[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1189[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1190[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1191[8]))) }
        di      = { defs={} expr=v1105[32] }
        es      = { defs={} expr=v1106[16] }
        cs      = { defs={} expr=v1107[16] }
        ss      = { defs={} expr=v1108[16] }
        ds      = { defs={} expr=v1109[16] }
        fs      = { defs={} expr=v1110[16] }
        gs      = { defs={} expr=v1111[16] }
        cf      = { defs={0x08048345} expr=0[1] }
        ?1      = { defs={} expr=v1113[1] }
        pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v1115[1] }
        af      = { defs={0x08048345} expr=v1233[1] }
        ?5      = { defs={} expr=v1117[1] }
        zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])) }
        sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])) }
        tf      = { defs={} expr=v1120[1] }
        if      = { defs={} expr=v1121[1] }
        df      = { defs={} expr=v1122[1] }
        of      = { defs={0x08048345} expr=0[1] }
        iopl0   = { defs={} expr=v1124[1] }
        iopl1   = { defs={} expr=v1125[1] }
        nt      = { defs={} expr=v1126[1] }
        ?15     = { defs={} expr=v1127[1] }
        rf      = { defs={} expr=v1128[1] }
        vm      = { defs={} expr=v1129[1] }
        ac      = { defs={} expr=v1130[1] }
        vif     = { defs={} expr=v1131[1] }
        vip     = { defs={} expr=v1132[1] }
        id      = { defs={} expr=v1133[1] }
        ?22     = { defs={} expr=v1134[1] }
        ?23     = { defs={} expr=v1135[1] }
        ?24     = { defs={} expr=v1136[1] }
        ?25     = { defs={} expr=v1137[1] }
        ?26     = { defs={} expr=v1138[1] }
        ?27     = { defs={} expr=v1139[1] }
        ?28     = { defs={} expr=v1140[1] }
        ?29     = { defs={} expr=v1141[1] }
        ?30     = { defs={} expr=v1142[1] }
        ?31     = { defs={} expr=v1143[1] }
        ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348,0x08048349,0x0804834a} expr=0x0804834b[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1100[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1100[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1100[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1100[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1098[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1098[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1098[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1098[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v1102[32] 3[32]) }
          value = { defs={} expr=v1191[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1102[32] 2[32]) }
          value = { defs={} expr=v1190[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1102[32] 1[32]) }
          value = { defs={} expr=v1189[8] }
          flags = { rdonly }
        address = { defs={0x08048342} expr=v1102[32] }
          value = { defs={} expr=v1188[8] }
          flags = { rdonly }
0x804834b:push   0x08048520<__libc_csu_fini>
    registers:
        ax      = { defs={} expr=v1098[32] }
        cx      = { defs={0x08048342,0x08048343} expr=(add[32] v1102[32] 4[32]) }
        dx      = { defs={} expr=v1100[32] }
        bx      = { defs={} expr=v1101[32] }
        sp      = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1188[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1189[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1190[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1191[8]))) }
        di      = { defs={} expr=v1105[32] }
        es      = { defs={} expr=v1106[16] }
        cs      = { defs={} expr=v1107[16] }
        ss      = { defs={} expr=v1108[16] }
        ds      = { defs={} expr=v1109[16] }
        fs      = { defs={} expr=v1110[16] }
        gs      = { defs={} expr=v1111[16] }
        cf      = { defs={0x08048345} expr=0[1] }
        ?1      = { defs={} expr=v1113[1] }
        pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v1115[1] }
        af      = { defs={0x08048345} expr=v1233[1] }
        ?5      = { defs={} expr=v1117[1] }
        zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])) }
        sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])) }
        tf      = { defs={} expr=v1120[1] }
        if      = { defs={} expr=v1121[1] }
        df      = { defs={} expr=v1122[1] }
        of      = { defs={0x08048345} expr=0[1] }
        iopl0   = { defs={} expr=v1124[1] }
        iopl1   = { defs={} expr=v1125[1] }
        nt      = { defs={} expr=v1126[1] }
        ?15     = { defs={} expr=v1127[1] }
        rf      = { defs={} expr=v1128[1] }
        vm      = { defs={} expr=v1129[1] }
        ac      = { defs={} expr=v1130[1] }
        vif     = { defs={} expr=v1131[1] }
        vip     = { defs={} expr=v1132[1] }
        id      = { defs={} expr=v1133[1] }
        ?22     = { defs={} expr=v1134[1] }
        ?23     = { defs={} expr=v1135[1] }
        ?24     = { defs={} expr=v1136[1] }
        ?25     = { defs={} expr=v1137[1] }
        ?26     = { defs={} expr=v1138[1] }
        ?27     = { defs={} expr=v1139[1] }
        ?28     = { defs={} expr=v1140[1] }
        ?29     = { defs={} expr=v1141[1] }
        ?30     = { defs={} expr=v1142[1] }
        ?31     = { defs={} expr=v1143[1] }
        ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b} expr=0x08048350[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=32[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1100[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1100[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1100[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1100[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1098[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1098[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1098[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1098[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v1102[32] 3[32]) }
          value = { defs={} expr=v1191[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1102[32] 2[32]) }
          value = { defs={} expr=v1190[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1102[32] 1[32]) }
          value = { defs={} expr=v1189[8] }
          flags = { rdonly }
        address = { defs={0x08048342} expr=v1102[32] }
          value = { defs={} expr=v1188[8] }
          flags = { rdonly }
0x8048350:push   0x080484b0<__libc_csu_init>
    registers:
        ax      = { defs={} expr=v1098[32] }
        cx      = { defs={0x08048342,0x08048343} expr=(add[32] v1102[32] 4[32]) }
        dx      = { defs={} expr=v1100[32] }
        bx      = { defs={} expr=v1101[32] }
        sp      = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1188[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1189[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1190[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1191[8]))) }
        di      = { defs={} expr=v1105[32] }
        es      = { defs={} expr=v1106[16] }
        cs      = { defs={} expr=v1107[16] }
        ss      = { defs={} expr=v1108[16] }
        ds      = { defs={} expr=v1109[16] }
        fs      = { defs={} expr=v1110[16] }
        gs      = { defs={} expr=v1111[16] }
        cf      = { defs={0x08048345} expr=0[1] }
        ?1      = { defs={} expr=v1113[1] }
        pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v1115[1] }
        af      = { defs={0x08048345} expr=v1233[1] }
        ?5      = { defs={} expr=v1117[1] }
        zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])) }
        sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])) }
        tf      = { defs={} expr=v1120[1] }
        if      = { defs={} expr=v1121[1] }
        df      = { defs={} expr=v1122[1] }
        of      = { defs={0x08048345} expr=0[1] }
        iopl0   = { defs={} expr=v1124[1] }
        iopl1   = { defs={} expr=v1125[1] }
        nt      = { defs={} expr=v1126[1] }
        ?15     = { defs={} expr=v1127[1] }
        rf      = { defs={} expr=v1128[1] }
        vm      = { defs={} expr=v1129[1] }
        ac      = { defs={} expr=v1130[1] }
        vif     = { defs={} expr=v1131[1] }
        vip     = { defs={} expr=v1132[1] }
        id      = { defs={} expr=v1133[1] }
        ?22     = { defs={} expr=v1134[1] }
        ?23     = { defs={} expr=v1135[1] }
        ?24     = { defs={} expr=v1136[1] }
        ?25     = { defs={} expr=v1137[1] }
        ?26     = { defs={} expr=v1138[1] }
        ?27     = { defs={} expr=v1139[1] }
        ?28     = { defs={} expr=v1140[1] }
        ?29     = { defs={} expr=v1141[1] }
        ?30     = { defs={} expr=v1142[1] }
        ?31     = { defs={} expr=v1143[1] }
        ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350} expr=0x08048355[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=-80[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=32[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1100[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1100[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1100[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1100[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1098[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1098[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1098[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1098[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v1102[32] 3[32]) }
          value = { defs={} expr=v1191[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1102[32] 2[32]) }
          value = { defs={} expr=v1190[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1102[32] 1[32]) }
          value = { defs={} expr=v1189[8] }
          flags = { rdonly }
        address = { defs={0x08048342} expr=v1102[32] }
          value = { defs={} expr=v1188[8] }
          flags = { rdonly }
0x8048355:push   ecx
    registers:
        ax      = { defs={} expr=v1098[32] }
        cx      = { defs={0x08048342,0x08048343} expr=(add[32] v1102[32] 4[32]) }
        dx      = { defs={} expr=v1100[32] }
        bx      = { defs={} expr=v1101[32] }
        sp      = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1188[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1189[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1190[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1191[8]))) }
        di      = { defs={} expr=v1105[32] }
        es      = { defs={} expr=v1106[16] }
        cs      = { defs={} expr=v1107[16] }
        ss      = { defs={} expr=v1108[16] }
        ds      = { defs={} expr=v1109[16] }
        fs      = { defs={} expr=v1110[16] }
        gs      = { defs={} expr=v1111[16] }
        cf      = { defs={0x08048345} expr=0[1] }
        ?1      = { defs={} expr=v1113[1] }
        pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v1115[1] }
        af      = { defs={0x08048345} expr=v1233[1] }
        ?5      = { defs={} expr=v1117[1] }
        zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])) }
        sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])) }
        tf      = { defs={} expr=v1120[1] }
        if      = { defs={} expr=v1121[1] }
        df      = { defs={} expr=v1122[1] }
        of      = { defs={0x08048345} expr=0[1] }
        iopl0   = { defs={} expr=v1124[1] }
        iopl1   = { defs={} expr=v1125[1] }
        nt      = { defs={} expr=v1126[1] }
        ?15     = { defs={} expr=v1127[1] }
        rf      = { defs={} expr=v1128[1] }
        vm      = { defs={} expr=v1129[1] }
        ac      = { defs={} expr=v1130[1] }
        vif     = { defs={} expr=v1131[1] }
        vip     = { defs={} expr=v1132[1] }
        id      = { defs={} expr=v1133[1] }
        ?22     = { defs={} expr=v1134[1] }
        ?23     = { defs={} expr=v1135[1] }
        ?24     = { defs={} expr=v1136[1] }
        ?25     = { defs={} expr=v1137[1] }
        ?26     = { defs={} expr=v1138[1] }
        ?27     = { defs={} expr=v1139[1] }
        ?28     = { defs={} expr=v1140[1] }
        ?29     = { defs={} expr=v1141[1] }
        ?30     = { defs={} expr=v1142[1] }
        ?31     = { defs={} expr=v1143[1] }
        ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355} expr=0x08048356[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] v1102[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] v1102[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] v1102[32] 4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] v1102[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=-80[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=32[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1100[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1100[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1100[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1100[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1098[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1098[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1098[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1098[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v1102[32] 3[32]) }
          value = { defs={} expr=v1191[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1102[32] 2[32]) }
          value = { defs={} expr=v1190[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1102[32] 1[32]) }
          value = { defs={} expr=v1189[8] }
          flags = { rdonly }
        address = { defs={0x08048342} expr=v1102[32] }
          value = { defs={} expr=v1188[8] }
          flags = { rdonly }
0x8048356:push   esi
    registers:
        ax      = { defs={} expr=v1098[32] }
        cx      = { defs={0x08048342,0x08048343} expr=(add[32] v1102[32] 4[32]) }
        dx      = { defs={} expr=v1100[32] }
        bx      = { defs={} expr=v1101[32] }
        sp      = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1188[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1189[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1190[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1191[8]))) }
        di      = { defs={} expr=v1105[32] }
        es      = { defs={} expr=v1106[16] }
        cs      = { defs={} expr=v1107[16] }
        ss      = { defs={} expr=v1108[16] }
        ds      = { defs={} expr=v1109[16] }
        fs      = { defs={} expr=v1110[16] }
        gs      = { defs={} expr=v1111[16] }
        cf      = { defs={0x08048345} expr=0[1] }
        ?1      = { defs={} expr=v1113[1] }
        pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v1115[1] }
        af      = { defs={0x08048345} expr=v1233[1] }
        ?5      = { defs={} expr=v1117[1] }
        zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])) }
        sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])) }
        tf      = { defs={} expr=v1120[1] }
        if      = { defs={} expr=v1121[1] }
        df      = { defs={} expr=v1122[1] }
        of      = { defs={0x08048345} expr=0[1] }
        iopl0   = { defs={} expr=v1124[1] }
        iopl1   = { defs={} expr=v1125[1] }
        nt      = { defs={} expr=v1126[1] }
        ?15     = { defs={} expr=v1127[1] }
        rf      = { defs={} expr=v1128[1] }
        vm      = { defs={} expr=v1129[1] }
        ac      = { defs={} expr=v1130[1] }
        vif     = { defs={} expr=v1131[1] }
        vip     = { defs={} expr=v1132[1] }
        id      = { defs={} expr=v1133[1] }
        ?22     = { defs={} expr=v1134[1] }
        ?23     = { defs={} expr=v1135[1] }
        ?24     = { defs={} expr=v1136[1] }
        ?25     = { defs={} expr=v1137[1] }
        ?26     = { defs={} expr=v1138[1] }
        ?27     = { defs={} expr=v1139[1] }
        ?28     = { defs={} expr=v1140[1] }
        ?29     = { defs={} expr=v1141[1] }
        ?30     = { defs={} expr=v1142[1] }
        ?31     = { defs={} expr=v1143[1] }
        ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356} expr=0x08048357[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1188[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1189[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1190[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1191[8])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1188[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1189[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1190[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1191[8])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1188[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1189[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1190[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1191[8])))) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1188[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1189[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1190[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1191[8])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] v1102[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] v1102[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] v1102[32] 4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] v1102[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=-80[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=32[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1100[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1100[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1100[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1100[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1098[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1098[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1098[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1098[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v1102[32] 3[32]) }
          value = { defs={} expr=v1191[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1102[32] 2[32]) }
          value = { defs={} expr=v1190[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1102[32] 1[32]) }
          value = { defs={} expr=v1189[8] }
          flags = { rdonly }
        address = { defs={0x08048342} expr=v1102[32] }
          value = { defs={} expr=v1188[8] }
          flags = { rdonly }
0x8048357:push   0x08048410<main>
    registers:
        ax      = { defs={} expr=v1098[32] }
        cx      = { defs={0x08048342,0x08048343} expr=(add[32] v1102[32] 4[32]) }
        dx      = { defs={} expr=v1100[32] }
        bx      = { defs={} expr=v1101[32] }
        sp      = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1188[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1189[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1190[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1191[8]))) }
        di      = { defs={} expr=v1105[32] }
        es      = { defs={} expr=v1106[16] }
        cs      = { defs={} expr=v1107[16] }
        ss      = { defs={} expr=v1108[16] }
        ds      = { defs={} expr=v1109[16] }
        fs      = { defs={} expr=v1110[16] }
        gs      = { defs={} expr=v1111[16] }
        cf      = { defs={0x08048345} expr=0[1] }
        ?1      = { defs={} expr=v1113[1] }
        pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v1115[1] }
        af      = { defs={0x08048345} expr=v1233[1] }
        ?5      = { defs={} expr=v1117[1] }
        zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])) }
        sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])) }
        tf      = { defs={} expr=v1120[1] }
        if      = { defs={} expr=v1121[1] }
        df      = { defs={} expr=v1122[1] }
        of      = { defs={0x08048345} expr=0[1] }
        iopl0   = { defs={} expr=v1124[1] }
        iopl1   = { defs={} expr=v1125[1] }
        nt      = { defs={} expr=v1126[1] }
        ?15     = { defs={} expr=v1127[1] }
        rf      = { defs={} expr=v1128[1] }
        vm      = { defs={} expr=v1129[1] }
        ac      = { defs={} expr=v1130[1] }
        vif     = { defs={} expr=v1131[1] }
        vip     = { defs={} expr=v1132[1] }
        id      = { defs={} expr=v1133[1] }
        ?22     = { defs={} expr=v1134[1] }
        ?23     = { defs={} expr=v1135[1] }
        ?24     = { defs={} expr=v1136[1] }
        ?25     = { defs={} expr=v1137[1] }
        ?26     = { defs={} expr=v1138[1] }
        ?27     = { defs={} expr=v1139[1] }
        ?28     = { defs={} expr=v1140[1] }
        ?29     = { defs={} expr=v1141[1] }
        ?30     = { defs={} expr=v1142[1] }
        ?31     = { defs={} expr=v1143[1] }
        ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357} expr=0x0804835c[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=16[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1188[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1189[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1190[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1191[8])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1188[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1189[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1190[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1191[8])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1188[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1189[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1190[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1191[8])))) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1188[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1189[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1190[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1191[8])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] v1102[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] v1102[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] v1102[32] 4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] v1102[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=-80[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=32[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1100[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1100[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1100[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1100[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1098[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1098[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1098[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1098[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v1102[32] 3[32]) }
          value = { defs={} expr=v1191[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1102[32] 2[32]) }
          value = { defs={} expr=v1190[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1102[32] 1[32]) }
          value = { defs={} expr=v1189[8] }
          flags = { rdonly }
        address = { defs={0x08048342} expr=v1102[32] }
          value = { defs={} expr=v1188[8] }
          flags = { rdonly }
0x804835c:call   0x08048310<__libc_start_main@plt>
    registers:
        ax      = { defs={} expr=v1098[32] }
        cx      = { defs={0x08048342,0x08048343} expr=(add[32] v1102[32] 4[32]) }
        dx      = { defs={} expr=v1100[32] }
        bx      = { defs={} expr=v1101[32] }
        sp      = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357,0x0804835c} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1188[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1189[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1190[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1191[8]))) }
        di      = { defs={} expr=v1105[32] }
        es      = { defs={} expr=v1106[16] }
        cs      = { defs={} expr=v1107[16] }
        ss      = { defs={} expr=v1108[16] }
        ds      = { defs={} expr=v1109[16] }
        fs      = { defs={} expr=v1110[16] }
        gs      = { defs={} expr=v1111[16] }
        cf      = { defs={0x08048345} expr=0[1] }
        ?1      = { defs={} expr=v1113[1] }
        pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v1115[1] }
        af      = { defs={0x08048345} expr=v1233[1] }
        ?5      = { defs={} expr=v1117[1] }
        zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])) }
        sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32])) }
        tf      = { defs={} expr=v1120[1] }
        if      = { defs={} expr=v1121[1] }
        df      = { defs={} expr=v1122[1] }
        of      = { defs={0x08048345} expr=0[1] }
        iopl0   = { defs={} expr=v1124[1] }
        iopl1   = { defs={} expr=v1125[1] }
        nt      = { defs={} expr=v1126[1] }
        ?15     = { defs={} expr=v1127[1] }
        rf      = { defs={} expr=v1128[1] }
        vm      = { defs={} expr=v1129[1] }
        ac      = { defs={} expr=v1130[1] }
        vif     = { defs={} expr=v1131[1] }
        vip     = { defs={} expr=v1132[1] }
        id      = { defs={} expr=v1133[1] }
        ?22     = { defs={} expr=v1134[1] }
        ?23     = { defs={} expr=v1135[1] }
        ?24     = { defs={} expr=v1136[1] }
        ?25     = { defs={} expr=v1137[1] }
        ?26     = { defs={} expr=v1138[1] }
        ?27     = { defs={} expr=v1139[1] }
        ?28     = { defs={} expr=v1140[1] }
        ?29     = { defs={} expr=v1141[1] }
        ?30     = { defs={} expr=v1142[1] }
        ?31     = { defs={} expr=v1143[1] }
        ip      = { defs={0x0804835c} expr=0x08048310[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-125[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357,0x0804835c} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=97[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=16[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1188[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1189[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1190[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1191[8])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1188[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1189[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1190[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1191[8])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1188[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1189[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1190[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1191[8])))) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1188[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1189[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1190[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1191[8])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] v1102[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] v1102[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] v1102[32] 4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] v1102[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=-80[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=32[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1100[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1100[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1100[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1100[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1098[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1098[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1098[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v1102[32] 4[32]) -16[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1098[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v1102[32] 3[32]) }
          value = { defs={} expr=v1191[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1102[32] 2[32]) }
          value = { defs={} expr=v1190[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1102[32] 1[32]) }
          value = { defs={} expr=v1189[8] }
          flags = { rdonly }
        address = { defs={0x08048342} expr=v1102[32] }
          value = { defs={} expr=v1188[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048361:hlt    
    registers:
        ax      = { defs={} expr=v1345[32] }
        cx      = { defs={} expr=v1346[32] }
        dx      = { defs={} expr=v1347[32] }
        bx      = { defs={} expr=v1348[32] }
        sp      = { defs={} expr=v1349[32] }
        bp      = { defs={} expr=v1350[32] }
        si      = { defs={} expr=v1351[32] }
        di      = { defs={} expr=v1352[32] }
        es      = { defs={} expr=v1353[16] }
        cs      = { defs={} expr=v1354[16] }
        ss      = { defs={} expr=v1355[16] }
        ds      = { defs={} expr=v1356[16] }
        fs      = { defs={} expr=v1357[16] }
        gs      = { defs={} expr=v1358[16] }
        cf      = { defs={} expr=v1359[1] }
        ?1      = { defs={} expr=v1360[1] }
        pf      = { defs={} expr=v1361[1] }
        ?3      = { defs={} expr=v1362[1] }
        af      = { defs={} expr=v1363[1] }
        ?5      = { defs={} expr=v1364[1] }
        zf      = { defs={} expr=v1365[1] }
        sf      = { defs={} expr=v1366[1] }
        tf      = { defs={} expr=v1367[1] }
        if      = { defs={} expr=v1368[1] }
        df      = { defs={} expr=v1369[1] }
        of      = { defs={} expr=v1370[1] }
        iopl0   = { defs={} expr=v1371[1] }
        iopl1   = { defs={} expr=v1372[1] }
        nt      = { defs={} expr=v1373[1] }
        ?15     = { defs={} expr=v1374[1] }
        rf      = { defs={} expr=v1375[1] }
        vm      = { defs={} expr=v1376[1] }
        ac      = { defs={} expr=v1377[1] }
        vif     = { defs={} expr=v1378[1] }
        vip     = { defs={} expr=v1379[1] }
        id      = { defs={} expr=v1380[1] }
        ?22     = { defs={} expr=v1381[1] }
        ?23     = { defs={} expr=v1382[1] }
        ?24     = { defs={} expr=v1383[1] }
        ?25     = { defs={} expr=v1384[1] }
        ?26     = { defs={} expr=v1385[1] }
        ?27     = { defs={} expr=v1386[1] }
        ?28     = { defs={} expr=v1387[1] }
        ?29     = { defs={} expr=v1388[1] }
        ?30     = { defs={} expr=v1389[1] }
        ?31     = { defs={} expr=v1390[1] }
        ip      = { defs={0x08048361} expr=0x08048361[32] }
    memory:
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048364:push   ebp
    registers:
        ax      = { defs={} expr=v1444[32] }
        cx      = { defs={} expr=v1445[32] }
        dx      = { defs={} expr=v1446[32] }
        bx      = { defs={} expr=v1447[32] }
        sp      = { defs={0x08048364} expr=(add[32] v1448[32] -4[32]) }
        bp      = { defs={} expr=v1449[32] }
        si      = { defs={} expr=v1450[32] }
        di      = { defs={} expr=v1451[32] }
        es      = { defs={} expr=v1452[16] }
        cs      = { defs={} expr=v1453[16] }
        ss      = { defs={} expr=v1454[16] }
        ds      = { defs={} expr=v1455[16] }
        fs      = { defs={} expr=v1456[16] }
        gs      = { defs={} expr=v1457[16] }
        cf      = { defs={} expr=v1458[1] }
        ?1      = { defs={} expr=v1459[1] }
        pf      = { defs={} expr=v1460[1] }
        ?3      = { defs={} expr=v1461[1] }
        af      = { defs={} expr=v1462[1] }
        ?5      = { defs={} expr=v1463[1] }
        zf      = { defs={} expr=v1464[1] }
        sf      = { defs={} expr=v1465[1] }
        tf      = { defs={} expr=v1466[1] }
        if      = { defs={} expr=v1467[1] }
        df      = { defs={} expr=v1468[1] }
        of      = { defs={} expr=v1469[1] }
        iopl0   = { defs={} expr=v1470[1] }
        iopl1   = { defs={} expr=v1471[1] }
        nt      = { defs={} expr=v1472[1] }
        ?15     = { defs={} expr=v1473[1] }
        rf      = { defs={} expr=v1474[1] }
        vm      = { defs={} expr=v1475[1] }
        ac      = { defs={} expr=v1476[1] }
        vif     = { defs={} expr=v1477[1] }
        vip     = { defs={} expr=v1478[1] }
        id      = { defs={} expr=v1479[1] }
        ?22     = { defs={} expr=v1480[1] }
        ?23     = { defs={} expr=v1481[1] }
        ?24     = { defs={} expr=v1482[1] }
        ?25     = { defs={} expr=v1483[1] }
        ?26     = { defs={} expr=v1484[1] }
        ?27     = { defs={} expr=v1485[1] }
        ?28     = { defs={} expr=v1486[1] }
        ?29     = { defs={} expr=v1487[1] }
        ?30     = { defs={} expr=v1488[1] }
        ?31     = { defs={} expr=v1489[1] }
        ip      = { defs={0x08048364} expr=0x08048365[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v1448[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1449[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1448[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1449[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1448[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1449[32]) }
          flags = { }
        address = { defs={0x08048364} expr=(add[32] v1448[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1449[32]) }
          flags = { }
    init mem:
0x8048365:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v1444[32] }
        cx      = { defs={} expr=v1445[32] }
        dx      = { defs={} expr=v1446[32] }
        bx      = { defs={} expr=v1447[32] }
        sp      = { defs={0x08048364} expr=(add[32] v1448[32] -4[32]) }
        bp      = { defs={0x08048364,0x08048365} expr=(add[32] v1448[32] -4[32]) }
        si      = { defs={} expr=v1450[32] }
        di      = { defs={} expr=v1451[32] }
        es      = { defs={} expr=v1452[16] }
        cs      = { defs={} expr=v1453[16] }
        ss      = { defs={} expr=v1454[16] }
        ds      = { defs={} expr=v1455[16] }
        fs      = { defs={} expr=v1456[16] }
        gs      = { defs={} expr=v1457[16] }
        cf      = { defs={} expr=v1458[1] }
        ?1      = { defs={} expr=v1459[1] }
        pf      = { defs={} expr=v1460[1] }
        ?3      = { defs={} expr=v1461[1] }
        af      = { defs={} expr=v1462[1] }
        ?5      = { defs={} expr=v1463[1] }
        zf      = { defs={} expr=v1464[1] }
        sf      = { defs={} expr=v1465[1] }
        tf      = { defs={} expr=v1466[1] }
        if      = { defs={} expr=v1467[1] }
        df      = { defs={} expr=v1468[1] }
        of      = { defs={} expr=v1469[1] }
        iopl0   = { defs={} expr=v1470[1] }
        iopl1   = { defs={} expr=v1471[1] }
        nt      = { defs={} expr=v1472[1] }
        ?15     = { defs={} expr=v1473[1] }
        rf      = { defs={} expr=v1474[1] }
        vm      = { defs={} expr=v1475[1] }
        ac      = { defs={} expr=v1476[1] }
        vif     = { defs={} expr=v1477[1] }
        vip     = { defs={} expr=v1478[1] }
        id      = { defs={} expr=v1479[1] }
        ?22     = { defs={} expr=v1480[1] }
        ?23     = { defs={} expr=v1481[1] }
        ?24     = { defs={} expr=v1482[1] }
        ?25     = { defs={} expr=v1483[1] }
        ?26     = { defs={} expr=v1484[1] }
        ?27     = { defs={} expr=v1485[1] }
        ?28     = { defs={} expr=v1486[1] }
        ?29     = { defs={} expr=v1487[1] }
        ?30     = { defs={} expr=v1488[1] }
        ?31     = { defs={} expr=v1489[1] }
        ip      = { defs={0x08048364,0x08048365} expr=0x08048367[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v1448[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1449[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1448[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1449[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1448[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1449[32]) }
          flags = { }
        address = { defs={0x08048364} expr=(add[32] v1448[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1449[32]) }
          flags = { }
    init mem:
0x8048367:push   ebx
    registers:
        ax      = { defs={} expr=v1444[32] }
        cx      = { defs={} expr=v1445[32] }
        dx      = { defs={} expr=v1446[32] }
        bx      = { defs={} expr=v1447[32] }
        sp      = { defs={0x08048364,0x08048367} expr=(add[32] (add[32] v1448[32] -4[32]) -4[32]) }
        bp      = { defs={0x08048364,0x08048365} expr=(add[32] v1448[32] -4[32]) }
        si      = { defs={} expr=v1450[32] }
        di      = { defs={} expr=v1451[32] }
        es      = { defs={} expr=v1452[16] }
        cs      = { defs={} expr=v1453[16] }
        ss      = { defs={} expr=v1454[16] }
        ds      = { defs={} expr=v1455[16] }
        fs      = { defs={} expr=v1456[16] }
        gs      = { defs={} expr=v1457[16] }
        cf      = { defs={} expr=v1458[1] }
        ?1      = { defs={} expr=v1459[1] }
        pf      = { defs={} expr=v1460[1] }
        ?3      = { defs={} expr=v1461[1] }
        af      = { defs={} expr=v1462[1] }
        ?5      = { defs={} expr=v1463[1] }
        zf      = { defs={} expr=v1464[1] }
        sf      = { defs={} expr=v1465[1] }
        tf      = { defs={} expr=v1466[1] }
        if      = { defs={} expr=v1467[1] }
        df      = { defs={} expr=v1468[1] }
        of      = { defs={} expr=v1469[1] }
        iopl0   = { defs={} expr=v1470[1] }
        iopl1   = { defs={} expr=v1471[1] }
        nt      = { defs={} expr=v1472[1] }
        ?15     = { defs={} expr=v1473[1] }
        rf      = { defs={} expr=v1474[1] }
        vm      = { defs={} expr=v1475[1] }
        ac      = { defs={} expr=v1476[1] }
        vif     = { defs={} expr=v1477[1] }
        vip     = { defs={} expr=v1478[1] }
        id      = { defs={} expr=v1479[1] }
        ?22     = { defs={} expr=v1480[1] }
        ?23     = { defs={} expr=v1481[1] }
        ?24     = { defs={} expr=v1482[1] }
        ?25     = { defs={} expr=v1483[1] }
        ?26     = { defs={} expr=v1484[1] }
        ?27     = { defs={} expr=v1485[1] }
        ?28     = { defs={} expr=v1486[1] }
        ?29     = { defs={} expr=v1487[1] }
        ?30     = { defs={} expr=v1488[1] }
        ?31     = { defs={} expr=v1489[1] }
        ip      = { defs={0x08048364,0x08048365,0x08048367} expr=0x08048368[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v1448[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1447[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v1448[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1447[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v1448[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1447[32]) }
          flags = { }
        address = { defs={0x08048364,0x08048367} expr=(add[32] (add[32] v1448[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1447[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1448[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1449[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1448[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1449[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1448[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1449[32]) }
          flags = { }
        address = { defs={0x08048364} expr=(add[32] v1448[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1449[32]) }
          flags = { }
    init mem:
0x8048368:push   ecx
    registers:
        ax      = { defs={} expr=v1444[32] }
        cx      = { defs={} expr=v1445[32] }
        dx      = { defs={} expr=v1446[32] }
        bx      = { defs={} expr=v1447[32] }
        sp      = { defs={0x08048364,0x08048367,0x08048368} expr=(add[32] (add[32] (add[32] v1448[32] -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048364,0x08048365} expr=(add[32] v1448[32] -4[32]) }
        si      = { defs={} expr=v1450[32] }
        di      = { defs={} expr=v1451[32] }
        es      = { defs={} expr=v1452[16] }
        cs      = { defs={} expr=v1453[16] }
        ss      = { defs={} expr=v1454[16] }
        ds      = { defs={} expr=v1455[16] }
        fs      = { defs={} expr=v1456[16] }
        gs      = { defs={} expr=v1457[16] }
        cf      = { defs={} expr=v1458[1] }
        ?1      = { defs={} expr=v1459[1] }
        pf      = { defs={} expr=v1460[1] }
        ?3      = { defs={} expr=v1461[1] }
        af      = { defs={} expr=v1462[1] }
        ?5      = { defs={} expr=v1463[1] }
        zf      = { defs={} expr=v1464[1] }
        sf      = { defs={} expr=v1465[1] }
        tf      = { defs={} expr=v1466[1] }
        if      = { defs={} expr=v1467[1] }
        df      = { defs={} expr=v1468[1] }
        of      = { defs={} expr=v1469[1] }
        iopl0   = { defs={} expr=v1470[1] }
        iopl1   = { defs={} expr=v1471[1] }
        nt      = { defs={} expr=v1472[1] }
        ?15     = { defs={} expr=v1473[1] }
        rf      = { defs={} expr=v1474[1] }
        vm      = { defs={} expr=v1475[1] }
        ac      = { defs={} expr=v1476[1] }
        vif     = { defs={} expr=v1477[1] }
        vip     = { defs={} expr=v1478[1] }
        id      = { defs={} expr=v1479[1] }
        ?22     = { defs={} expr=v1480[1] }
        ?23     = { defs={} expr=v1481[1] }
        ?24     = { defs={} expr=v1482[1] }
        ?25     = { defs={} expr=v1483[1] }
        ?26     = { defs={} expr=v1484[1] }
        ?27     = { defs={} expr=v1485[1] }
        ?28     = { defs={} expr=v1486[1] }
        ?29     = { defs={} expr=v1487[1] }
        ?30     = { defs={} expr=v1488[1] }
        ?31     = { defs={} expr=v1489[1] }
        ip      = { defs={0x08048364,0x08048365,0x08048367,0x08048368} expr=0x08048369[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v1448[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1445[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v1448[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1445[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v1448[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1445[32]) }
          flags = { }
        address = { defs={0x08048364,0x08048367,0x08048368} expr=(add[32] (add[32] (add[32] v1448[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1445[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v1448[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1447[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v1448[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1447[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v1448[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1447[32]) }
          flags = { }
        address = { defs={0x08048364,0x08048367} expr=(add[32] (add[32] v1448[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1447[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1448[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1449[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1448[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1449[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1448[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1449[32]) }
          flags = { }
        address = { defs={0x08048364} expr=(add[32] v1448[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1449[32]) }
          flags = { }
    init mem:
0x8048369:call   0x0804836e<<Insn>>
    registers:
        ax      = { defs={} expr=v1444[32] }
        cx      = { defs={} expr=v1445[32] }
        dx      = { defs={} expr=v1446[32] }
        bx      = { defs={} expr=v1447[32] }
        sp      = { defs={0x08048364,0x08048367,0x08048368,0x08048369} expr=(add[32] (add[32] (add[32] (add[32] v1448[32] -4[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048364,0x08048365} expr=(add[32] v1448[32] -4[32]) }
        si      = { defs={} expr=v1450[32] }
        di      = { defs={} expr=v1451[32] }
        es      = { defs={} expr=v1452[16] }
        cs      = { defs={} expr=v1453[16] }
        ss      = { defs={} expr=v1454[16] }
        ds      = { defs={} expr=v1455[16] }
        fs      = { defs={} expr=v1456[16] }
        gs      = { defs={} expr=v1457[16] }
        cf      = { defs={} expr=v1458[1] }
        ?1      = { defs={} expr=v1459[1] }
        pf      = { defs={} expr=v1460[1] }
        ?3      = { defs={} expr=v1461[1] }
        af      = { defs={} expr=v1462[1] }
        ?5      = { defs={} expr=v1463[1] }
        zf      = { defs={} expr=v1464[1] }
        sf      = { defs={} expr=v1465[1] }
        tf      = { defs={} expr=v1466[1] }
        if      = { defs={} expr=v1467[1] }
        df      = { defs={} expr=v1468[1] }
        of      = { defs={} expr=v1469[1] }
        iopl0   = { defs={} expr=v1470[1] }
        iopl1   = { defs={} expr=v1471[1] }
        nt      = { defs={} expr=v1472[1] }
        ?15     = { defs={} expr=v1473[1] }
        rf      = { defs={} expr=v1474[1] }
        vm      = { defs={} expr=v1475[1] }
        ac      = { defs={} expr=v1476[1] }
        vif     = { defs={} expr=v1477[1] }
        vip     = { defs={} expr=v1478[1] }
        id      = { defs={} expr=v1479[1] }
        ?22     = { defs={} expr=v1480[1] }
        ?23     = { defs={} expr=v1481[1] }
        ?24     = { defs={} expr=v1482[1] }
        ?25     = { defs={} expr=v1483[1] }
        ?26     = { defs={} expr=v1484[1] }
        ?27     = { defs={} expr=v1485[1] }
        ?28     = { defs={} expr=v1486[1] }
        ?29     = { defs={} expr=v1487[1] }
        ?30     = { defs={} expr=v1488[1] }
        ?31     = { defs={} expr=v1489[1] }
        ip      = { defs={0x08048369} expr=0x0804836e[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v1448[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v1448[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v1448[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-125[8] }
          flags = { }
        address = { defs={0x08048364,0x08048367,0x08048368,0x08048369} expr=(add[32] (add[32] (add[32] (add[32] v1448[32] -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=110[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v1448[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1445[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v1448[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1445[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v1448[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1445[32]) }
          flags = { }
        address = { defs={0x08048364,0x08048367,0x08048368} expr=(add[32] (add[32] (add[32] v1448[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1445[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v1448[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1447[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v1448[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1447[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v1448[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1447[32]) }
          flags = { }
        address = { defs={0x08048364,0x08048367} expr=(add[32] (add[32] v1448[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1447[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1448[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1449[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1448[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1449[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1448[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1449[32]) }
          flags = { }
        address = { defs={0x08048364} expr=(add[32] v1448[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1449[32]) }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804836e:pop    ebx
    registers:
        ax      = { defs={} expr=v1573[32] }
        cx      = { defs={} expr=v1574[32] }
        dx      = { defs={} expr=v1575[32] }
        bx      = { defs={0x0804836e} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) }
        sp      = { defs={0x0804836e} expr=(add[32] v1577[32] 4[32]) }
        bp      = { defs={} expr=v1578[32] }
        si      = { defs={} expr=v1579[32] }
        di      = { defs={} expr=v1580[32] }
        es      = { defs={} expr=v1581[16] }
        cs      = { defs={} expr=v1582[16] }
        ss      = { defs={} expr=v1583[16] }
        ds      = { defs={} expr=v1584[16] }
        fs      = { defs={} expr=v1585[16] }
        gs      = { defs={} expr=v1586[16] }
        cf      = { defs={} expr=v1587[1] }
        ?1      = { defs={} expr=v1588[1] }
        pf      = { defs={} expr=v1589[1] }
        ?3      = { defs={} expr=v1590[1] }
        af      = { defs={} expr=v1591[1] }
        ?5      = { defs={} expr=v1592[1] }
        zf      = { defs={} expr=v1593[1] }
        sf      = { defs={} expr=v1594[1] }
        tf      = { defs={} expr=v1595[1] }
        if      = { defs={} expr=v1596[1] }
        df      = { defs={} expr=v1597[1] }
        of      = { defs={} expr=v1598[1] }
        iopl0   = { defs={} expr=v1599[1] }
        iopl1   = { defs={} expr=v1600[1] }
        nt      = { defs={} expr=v1601[1] }
        ?15     = { defs={} expr=v1602[1] }
        rf      = { defs={} expr=v1603[1] }
        vm      = { defs={} expr=v1604[1] }
        ac      = { defs={} expr=v1605[1] }
        vif     = { defs={} expr=v1606[1] }
        vip     = { defs={} expr=v1607[1] }
        id      = { defs={} expr=v1608[1] }
        ?22     = { defs={} expr=v1609[1] }
        ?23     = { defs={} expr=v1610[1] }
        ?24     = { defs={} expr=v1611[1] }
        ?25     = { defs={} expr=v1612[1] }
        ?26     = { defs={} expr=v1613[1] }
        ?27     = { defs={} expr=v1614[1] }
        ?28     = { defs={} expr=v1615[1] }
        ?29     = { defs={} expr=v1616[1] }
        ?30     = { defs={} expr=v1617[1] }
        ?31     = { defs={} expr=v1618[1] }
        ip      = { defs={0x0804836e} expr=0x0804836f[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v1577[32] 3[32]) }
          value = { defs={} expr=v1631[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1577[32] 2[32]) }
          value = { defs={} expr=v1630[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1577[32] 1[32]) }
          value = { defs={} expr=v1629[8] }
          flags = { rdonly }
        address = { defs={0x0804836e} expr=v1577[32] }
          value = { defs={} expr=v1628[8] }
          flags = { rdonly }
0x804836f:add    ebx, 0x0000135a
    registers:
        ax      = { defs={} expr=v1573[32] }
        cx      = { defs={} expr=v1574[32] }
        dx      = { defs={} expr=v1575[32] }
        bx      = { defs={0x0804836e,0x0804836f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) }
        sp      = { defs={0x0804836e} expr=(add[32] v1577[32] 4[32]) }
        bp      = { defs={} expr=v1578[32] }
        si      = { defs={} expr=v1579[32] }
        di      = { defs={} expr=v1580[32] }
        es      = { defs={} expr=v1581[16] }
        cs      = { defs={} expr=v1582[16] }
        ss      = { defs={} expr=v1583[16] }
        ds      = { defs={} expr=v1584[16] }
        fs      = { defs={} expr=v1585[16] }
        gs      = { defs={} expr=v1586[16] }
        cf      = { defs={0x0804836e,0x0804836f} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8])))) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8])))) 4954[33]))))) }
        ?1      = { defs={} expr=v1588[1] }
        pf      = { defs={0x0804836e,0x0804836f} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]))))))) }
        ?3      = { defs={} expr=v1590[1] }
        af      = { defs={0x0804836e,0x0804836f} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8])))) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8])))) 4954[33]))))) }
        ?5      = { defs={} expr=v1592[1] }
        zf      = { defs={0x0804836e,0x0804836f} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32])) }
        sf      = { defs={0x0804836e,0x0804836f} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32])) }
        tf      = { defs={} expr=v1595[1] }
        if      = { defs={} expr=v1596[1] }
        df      = { defs={} expr=v1597[1] }
        of      = { defs={0x0804836e,0x0804836f} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8])))) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8])))) 4954[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8])))) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8])))) 4954[33])))))) }
        iopl0   = { defs={} expr=v1599[1] }
        iopl1   = { defs={} expr=v1600[1] }
        nt      = { defs={} expr=v1601[1] }
        ?15     = { defs={} expr=v1602[1] }
        rf      = { defs={} expr=v1603[1] }
        vm      = { defs={} expr=v1604[1] }
        ac      = { defs={} expr=v1605[1] }
        vif     = { defs={} expr=v1606[1] }
        vip     = { defs={} expr=v1607[1] }
        id      = { defs={} expr=v1608[1] }
        ?22     = { defs={} expr=v1609[1] }
        ?23     = { defs={} expr=v1610[1] }
        ?24     = { defs={} expr=v1611[1] }
        ?25     = { defs={} expr=v1612[1] }
        ?26     = { defs={} expr=v1613[1] }
        ?27     = { defs={} expr=v1614[1] }
        ?28     = { defs={} expr=v1615[1] }
        ?29     = { defs={} expr=v1616[1] }
        ?30     = { defs={} expr=v1617[1] }
        ?31     = { defs={} expr=v1618[1] }
        ip      = { defs={0x0804836e,0x0804836f} expr=0x08048375[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v1577[32] 3[32]) }
          value = { defs={} expr=v1631[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1577[32] 2[32]) }
          value = { defs={} expr=v1630[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1577[32] 1[32]) }
          value = { defs={} expr=v1629[8] }
          flags = { rdonly }
        address = { defs={0x0804836e} expr=v1577[32] }
          value = { defs={} expr=v1628[8] }
          flags = { rdonly }
0x8048375:mov    edx, DWORD PTR ds:[ebx + 0xfffffffc<-0x00000004>]
    registers:
        ax      = { defs={} expr=v1573[32] }
        cx      = { defs={} expr=v1574[32] }
        dx      = { defs={0x08048375} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1692[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1693[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1694[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1695[8]))) }
        bx      = { defs={0x0804836e,0x0804836f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) }
        sp      = { defs={0x0804836e} expr=(add[32] v1577[32] 4[32]) }
        bp      = { defs={} expr=v1578[32] }
        si      = { defs={} expr=v1579[32] }
        di      = { defs={} expr=v1580[32] }
        es      = { defs={} expr=v1581[16] }
        cs      = { defs={} expr=v1582[16] }
        ss      = { defs={} expr=v1583[16] }
        ds      = { defs={} expr=v1584[16] }
        fs      = { defs={} expr=v1585[16] }
        gs      = { defs={} expr=v1586[16] }
        cf      = { defs={0x0804836e,0x0804836f} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8])))) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8])))) 4954[33]))))) }
        ?1      = { defs={} expr=v1588[1] }
        pf      = { defs={0x0804836e,0x0804836f} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]))))))) }
        ?3      = { defs={} expr=v1590[1] }
        af      = { defs={0x0804836e,0x0804836f} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8])))) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8])))) 4954[33]))))) }
        ?5      = { defs={} expr=v1592[1] }
        zf      = { defs={0x0804836e,0x0804836f} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32])) }
        sf      = { defs={0x0804836e,0x0804836f} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32])) }
        tf      = { defs={} expr=v1595[1] }
        if      = { defs={} expr=v1596[1] }
        df      = { defs={} expr=v1597[1] }
        of      = { defs={0x0804836e,0x0804836f} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8])))) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8])))) 4954[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8])))) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8])))) 4954[33])))))) }
        iopl0   = { defs={} expr=v1599[1] }
        iopl1   = { defs={} expr=v1600[1] }
        nt      = { defs={} expr=v1601[1] }
        ?15     = { defs={} expr=v1602[1] }
        rf      = { defs={} expr=v1603[1] }
        vm      = { defs={} expr=v1604[1] }
        ac      = { defs={} expr=v1605[1] }
        vif     = { defs={} expr=v1606[1] }
        vip     = { defs={} expr=v1607[1] }
        id      = { defs={} expr=v1608[1] }
        ?22     = { defs={} expr=v1609[1] }
        ?23     = { defs={} expr=v1610[1] }
        ?24     = { defs={} expr=v1611[1] }
        ?25     = { defs={} expr=v1612[1] }
        ?26     = { defs={} expr=v1613[1] }
        ?27     = { defs={} expr=v1614[1] }
        ?28     = { defs={} expr=v1615[1] }
        ?29     = { defs={} expr=v1616[1] }
        ?30     = { defs={} expr=v1617[1] }
        ?31     = { defs={} expr=v1618[1] }
        ip      = { defs={0x0804836e,0x0804836f,0x08048375} expr=0x0804837b[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]) }
          value = { defs={} expr=v1695[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]) }
          value = { defs={} expr=v1694[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]) }
          value = { defs={} expr=v1693[8] }
          flags = { rdonly }
        address = { defs={0x0804836e,0x0804836f,0x08048375} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) }
          value = { defs={} expr=v1692[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1577[32] 3[32]) }
          value = { defs={} expr=v1631[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1577[32] 2[32]) }
          value = { defs={} expr=v1630[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1577[32] 1[32]) }
          value = { defs={} expr=v1629[8] }
          flags = { rdonly }
        address = { defs={0x0804836e} expr=v1577[32] }
          value = { defs={} expr=v1628[8] }
          flags = { rdonly }
0x804837b:test   edx, edx
    registers:
        ax      = { defs={} expr=v1573[32] }
        cx      = { defs={} expr=v1574[32] }
        dx      = { defs={0x08048375} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1692[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1693[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1694[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1695[8]))) }
        bx      = { defs={0x0804836e,0x0804836f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) }
        sp      = { defs={0x0804836e} expr=(add[32] v1577[32] 4[32]) }
        bp      = { defs={} expr=v1578[32] }
        si      = { defs={} expr=v1579[32] }
        di      = { defs={} expr=v1580[32] }
        es      = { defs={} expr=v1581[16] }
        cs      = { defs={} expr=v1582[16] }
        ss      = { defs={} expr=v1583[16] }
        ds      = { defs={} expr=v1584[16] }
        fs      = { defs={} expr=v1585[16] }
        gs      = { defs={} expr=v1586[16] }
        cf      = { defs={0x0804837b} expr=0[1] }
        ?1      = { defs={} expr=v1588[1] }
        pf      = { defs={0x08048375,0x0804837b} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1692[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1693[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1694[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1695[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1692[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1693[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1694[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1695[8])))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1692[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1693[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1694[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1695[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1692[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1693[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1694[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1695[8]))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1692[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1693[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1694[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1695[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1692[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1693[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1694[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1695[8])))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1692[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1693[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1694[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1695[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1692[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1693[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1694[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1695[8])))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1692[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1693[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1694[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1695[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1692[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1693[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1694[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1695[8])))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1692[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1693[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1694[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1695[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1692[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1693[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1694[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1695[8]))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1692[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1693[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1694[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1695[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1692[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1693[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1694[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1695[8])))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1692[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1693[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1694[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1695[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1692[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1693[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1694[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1695[8])))))))))) }
        ?3      = { defs={} expr=v1590[1] }
        af      = { defs={0x0804837b} expr=v1732[1] }
        ?5      = { defs={} expr=v1592[1] }
        zf      = { defs={0x08048375,0x0804837b} expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1692[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1693[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1694[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1695[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1692[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1693[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1694[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1695[8]))))) }
        sf      = { defs={0x08048375,0x0804837b} expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1692[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1693[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1694[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1695[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1692[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1693[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1694[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1695[8]))))) }
        tf      = { defs={} expr=v1595[1] }
        if      = { defs={} expr=v1596[1] }
        df      = { defs={} expr=v1597[1] }
        of      = { defs={0x0804837b} expr=0[1] }
        iopl0   = { defs={} expr=v1599[1] }
        iopl1   = { defs={} expr=v1600[1] }
        nt      = { defs={} expr=v1601[1] }
        ?15     = { defs={} expr=v1602[1] }
        rf      = { defs={} expr=v1603[1] }
        vm      = { defs={} expr=v1604[1] }
        ac      = { defs={} expr=v1605[1] }
        vif     = { defs={} expr=v1606[1] }
        vip     = { defs={} expr=v1607[1] }
        id      = { defs={} expr=v1608[1] }
        ?22     = { defs={} expr=v1609[1] }
        ?23     = { defs={} expr=v1610[1] }
        ?24     = { defs={} expr=v1611[1] }
        ?25     = { defs={} expr=v1612[1] }
        ?26     = { defs={} expr=v1613[1] }
        ?27     = { defs={} expr=v1614[1] }
        ?28     = { defs={} expr=v1615[1] }
        ?29     = { defs={} expr=v1616[1] }
        ?30     = { defs={} expr=v1617[1] }
        ?31     = { defs={} expr=v1618[1] }
        ip      = { defs={0x0804836e,0x0804836f,0x08048375,0x0804837b} expr=0x0804837d[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]) }
          value = { defs={} expr=v1695[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]) }
          value = { defs={} expr=v1694[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]) }
          value = { defs={} expr=v1693[8] }
          flags = { rdonly }
        address = { defs={0x0804836e,0x0804836f,0x08048375} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) }
          value = { defs={} expr=v1692[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1577[32] 3[32]) }
          value = { defs={} expr=v1631[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1577[32] 2[32]) }
          value = { defs={} expr=v1630[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1577[32] 1[32]) }
          value = { defs={} expr=v1629[8] }
          flags = { rdonly }
        address = { defs={0x0804836e} expr=v1577[32] }
          value = { defs={} expr=v1628[8] }
          flags = { rdonly }
0x804837d:je     0x08048384<<Insn>>
    registers:
        ax      = { defs={} expr=v1573[32] }
        cx      = { defs={} expr=v1574[32] }
        dx      = { defs={0x08048375} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1692[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1693[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1694[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1695[8]))) }
        bx      = { defs={0x0804836e,0x0804836f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) }
        sp      = { defs={0x0804836e} expr=(add[32] v1577[32] 4[32]) }
        bp      = { defs={} expr=v1578[32] }
        si      = { defs={} expr=v1579[32] }
        di      = { defs={} expr=v1580[32] }
        es      = { defs={} expr=v1581[16] }
        cs      = { defs={} expr=v1582[16] }
        ss      = { defs={} expr=v1583[16] }
        ds      = { defs={} expr=v1584[16] }
        fs      = { defs={} expr=v1585[16] }
        gs      = { defs={} expr=v1586[16] }
        cf      = { defs={0x0804837b} expr=0[1] }
        ?1      = { defs={} expr=v1588[1] }
        pf      = { defs={0x08048375,0x0804837b} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1692[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1693[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1694[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1695[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1692[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1693[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1694[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1695[8])))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1692[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1693[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1694[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1695[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1692[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1693[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1694[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1695[8]))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1692[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1693[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1694[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1695[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1692[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1693[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1694[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1695[8])))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1692[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1693[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1694[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1695[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1692[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1693[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1694[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1695[8])))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1692[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1693[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1694[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1695[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1692[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1693[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1694[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1695[8])))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1692[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1693[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1694[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1695[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1692[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1693[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1694[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1695[8]))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1692[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1693[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1694[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1695[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1692[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1693[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1694[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1695[8])))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1692[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1693[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1694[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1695[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1692[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1693[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1694[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1695[8])))))))))) }
        ?3      = { defs={} expr=v1590[1] }
        af      = { defs={0x0804837b} expr=v1732[1] }
        ?5      = { defs={} expr=v1592[1] }
        zf      = { defs={0x08048375,0x0804837b} expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1692[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1693[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1694[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1695[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1692[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1693[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1694[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1695[8]))))) }
        sf      = { defs={0x08048375,0x0804837b} expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1692[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1693[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1694[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1695[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1692[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1693[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1694[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1695[8]))))) }
        tf      = { defs={} expr=v1595[1] }
        if      = { defs={} expr=v1596[1] }
        df      = { defs={} expr=v1597[1] }
        of      = { defs={0x0804837b} expr=0[1] }
        iopl0   = { defs={} expr=v1599[1] }
        iopl1   = { defs={} expr=v1600[1] }
        nt      = { defs={} expr=v1601[1] }
        ?15     = { defs={} expr=v1602[1] }
        rf      = { defs={} expr=v1603[1] }
        vm      = { defs={} expr=v1604[1] }
        ac      = { defs={} expr=v1605[1] }
        vif     = { defs={} expr=v1606[1] }
        vip     = { defs={} expr=v1607[1] }
        id      = { defs={} expr=v1608[1] }
        ?22     = { defs={} expr=v1609[1] }
        ?23     = { defs={} expr=v1610[1] }
        ?24     = { defs={} expr=v1611[1] }
        ?25     = { defs={} expr=v1612[1] }
        ?26     = { defs={} expr=v1613[1] }
        ?27     = { defs={} expr=v1614[1] }
        ?28     = { defs={} expr=v1615[1] }
        ?29     = { defs={} expr=v1616[1] }
        ?30     = { defs={} expr=v1617[1] }
        ?31     = { defs={} expr=v1618[1] }
        ip      = { defs={0x0804836e,0x0804836f,0x08048375,0x0804837b,0x0804837d} expr=(ite[32] (zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1692[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1693[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1694[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1695[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1692[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1693[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1694[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1695[8]))))) 0x08048384[32] 0x0804837f[32]) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 3[32]) }
          value = { defs={} expr=v1695[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 2[32]) }
          value = { defs={} expr=v1694[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) 1[32]) }
          value = { defs={} expr=v1693[8] }
          flags = { rdonly }
        address = { defs={0x0804836e,0x0804836f,0x08048375} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1628[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1629[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1630[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1631[8]))) 4954[32]) -4[32]) }
          value = { defs={} expr=v1692[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1577[32] 3[32]) }
          value = { defs={} expr=v1631[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1577[32] 2[32]) }
          value = { defs={} expr=v1630[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1577[32] 1[32]) }
          value = { defs={} expr=v1629[8] }
          flags = { rdonly }
        address = { defs={0x0804836e} expr=v1577[32] }
          value = { defs={} expr=v1628[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804837f:call   0x08048330<__gmon_start__@plt>
    registers:
        ax      = { defs={} expr=v1790[32] }
        cx      = { defs={} expr=v1791[32] }
        dx      = { defs={} expr=v1792[32] }
        bx      = { defs={} expr=v1793[32] }
        sp      = { defs={0x0804837f} expr=(add[32] v1794[32] -4[32]) }
        bp      = { defs={} expr=v1795[32] }
        si      = { defs={} expr=v1796[32] }
        di      = { defs={} expr=v1797[32] }
        es      = { defs={} expr=v1798[16] }
        cs      = { defs={} expr=v1799[16] }
        ss      = { defs={} expr=v1800[16] }
        ds      = { defs={} expr=v1801[16] }
        fs      = { defs={} expr=v1802[16] }
        gs      = { defs={} expr=v1803[16] }
        cf      = { defs={} expr=v1804[1] }
        ?1      = { defs={} expr=v1805[1] }
        pf      = { defs={} expr=v1806[1] }
        ?3      = { defs={} expr=v1807[1] }
        af      = { defs={} expr=v1808[1] }
        ?5      = { defs={} expr=v1809[1] }
        zf      = { defs={} expr=v1810[1] }
        sf      = { defs={} expr=v1811[1] }
        tf      = { defs={} expr=v1812[1] }
        if      = { defs={} expr=v1813[1] }
        df      = { defs={} expr=v1814[1] }
        of      = { defs={} expr=v1815[1] }
        iopl0   = { defs={} expr=v1816[1] }
        iopl1   = { defs={} expr=v1817[1] }
        nt      = { defs={} expr=v1818[1] }
        ?15     = { defs={} expr=v1819[1] }
        rf      = { defs={} expr=v1820[1] }
        vm      = { defs={} expr=v1821[1] }
        ac      = { defs={} expr=v1822[1] }
        vif     = { defs={} expr=v1823[1] }
        vip     = { defs={} expr=v1824[1] }
        id      = { defs={} expr=v1825[1] }
        ?22     = { defs={} expr=v1826[1] }
        ?23     = { defs={} expr=v1827[1] }
        ?24     = { defs={} expr=v1828[1] }
        ?25     = { defs={} expr=v1829[1] }
        ?26     = { defs={} expr=v1830[1] }
        ?27     = { defs={} expr=v1831[1] }
        ?28     = { defs={} expr=v1832[1] }
        ?29     = { defs={} expr=v1833[1] }
        ?30     = { defs={} expr=v1834[1] }
        ?31     = { defs={} expr=v1835[1] }
        ip      = { defs={0x0804837f} expr=0x08048330[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v1794[32] -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1794[32] -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1794[32] -4[32]) 1[32]) }
          value = { defs={} expr=-125[8] }
          flags = { }
        address = { defs={0x0804837f} expr=(add[32] v1794[32] -4[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048384:pop    eax
    registers:
        ax      = { defs={0x08048384} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1948[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1949[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1950[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1951[8]))) }
        cx      = { defs={} expr=v1894[32] }
        dx      = { defs={} expr=v1895[32] }
        bx      = { defs={} expr=v1896[32] }
        sp      = { defs={0x08048384} expr=(add[32] v1897[32] 4[32]) }
        bp      = { defs={} expr=v1898[32] }
        si      = { defs={} expr=v1899[32] }
        di      = { defs={} expr=v1900[32] }
        es      = { defs={} expr=v1901[16] }
        cs      = { defs={} expr=v1902[16] }
        ss      = { defs={} expr=v1903[16] }
        ds      = { defs={} expr=v1904[16] }
        fs      = { defs={} expr=v1905[16] }
        gs      = { defs={} expr=v1906[16] }
        cf      = { defs={} expr=v1907[1] }
        ?1      = { defs={} expr=v1908[1] }
        pf      = { defs={} expr=v1909[1] }
        ?3      = { defs={} expr=v1910[1] }
        af      = { defs={} expr=v1911[1] }
        ?5      = { defs={} expr=v1912[1] }
        zf      = { defs={} expr=v1913[1] }
        sf      = { defs={} expr=v1914[1] }
        tf      = { defs={} expr=v1915[1] }
        if      = { defs={} expr=v1916[1] }
        df      = { defs={} expr=v1917[1] }
        of      = { defs={} expr=v1918[1] }
        iopl0   = { defs={} expr=v1919[1] }
        iopl1   = { defs={} expr=v1920[1] }
        nt      = { defs={} expr=v1921[1] }
        ?15     = { defs={} expr=v1922[1] }
        rf      = { defs={} expr=v1923[1] }
        vm      = { defs={} expr=v1924[1] }
        ac      = { defs={} expr=v1925[1] }
        vif     = { defs={} expr=v1926[1] }
        vip     = { defs={} expr=v1927[1] }
        id      = { defs={} expr=v1928[1] }
        ?22     = { defs={} expr=v1929[1] }
        ?23     = { defs={} expr=v1930[1] }
        ?24     = { defs={} expr=v1931[1] }
        ?25     = { defs={} expr=v1932[1] }
        ?26     = { defs={} expr=v1933[1] }
        ?27     = { defs={} expr=v1934[1] }
        ?28     = { defs={} expr=v1935[1] }
        ?29     = { defs={} expr=v1936[1] }
        ?30     = { defs={} expr=v1937[1] }
        ?31     = { defs={} expr=v1938[1] }
        ip      = { defs={0x08048384} expr=0x08048385[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v1897[32] 3[32]) }
          value = { defs={} expr=v1951[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1897[32] 2[32]) }
          value = { defs={} expr=v1950[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1897[32] 1[32]) }
          value = { defs={} expr=v1949[8] }
          flags = { rdonly }
        address = { defs={0x08048384} expr=v1897[32] }
          value = { defs={} expr=v1948[8] }
          flags = { rdonly }
0x8048385:pop    ebx
    registers:
        ax      = { defs={0x08048384} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1948[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1949[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1950[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1951[8]))) }
        cx      = { defs={} expr=v1894[32] }
        dx      = { defs={} expr=v1895[32] }
        bx      = { defs={0x08048385} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1965[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1966[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1967[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1968[8]))) }
        sp      = { defs={0x08048384,0x08048385} expr=(add[32] (add[32] v1897[32] 4[32]) 4[32]) }
        bp      = { defs={} expr=v1898[32] }
        si      = { defs={} expr=v1899[32] }
        di      = { defs={} expr=v1900[32] }
        es      = { defs={} expr=v1901[16] }
        cs      = { defs={} expr=v1902[16] }
        ss      = { defs={} expr=v1903[16] }
        ds      = { defs={} expr=v1904[16] }
        fs      = { defs={} expr=v1905[16] }
        gs      = { defs={} expr=v1906[16] }
        cf      = { defs={} expr=v1907[1] }
        ?1      = { defs={} expr=v1908[1] }
        pf      = { defs={} expr=v1909[1] }
        ?3      = { defs={} expr=v1910[1] }
        af      = { defs={} expr=v1911[1] }
        ?5      = { defs={} expr=v1912[1] }
        zf      = { defs={} expr=v1913[1] }
        sf      = { defs={} expr=v1914[1] }
        tf      = { defs={} expr=v1915[1] }
        if      = { defs={} expr=v1916[1] }
        df      = { defs={} expr=v1917[1] }
        of      = { defs={} expr=v1918[1] }
        iopl0   = { defs={} expr=v1919[1] }
        iopl1   = { defs={} expr=v1920[1] }
        nt      = { defs={} expr=v1921[1] }
        ?15     = { defs={} expr=v1922[1] }
        rf      = { defs={} expr=v1923[1] }
        vm      = { defs={} expr=v1924[1] }
        ac      = { defs={} expr=v1925[1] }
        vif     = { defs={} expr=v1926[1] }
        vip     = { defs={} expr=v1927[1] }
        id      = { defs={} expr=v1928[1] }
        ?22     = { defs={} expr=v1929[1] }
        ?23     = { defs={} expr=v1930[1] }
        ?24     = { defs={} expr=v1931[1] }
        ?25     = { defs={} expr=v1932[1] }
        ?26     = { defs={} expr=v1933[1] }
        ?27     = { defs={} expr=v1934[1] }
        ?28     = { defs={} expr=v1935[1] }
        ?29     = { defs={} expr=v1936[1] }
        ?30     = { defs={} expr=v1937[1] }
        ?31     = { defs={} expr=v1938[1] }
        ip      = { defs={0x08048384,0x08048385} expr=0x08048386[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v1897[32] 4[32]) 3[32]) }
          value = { defs={} expr=v1968[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v1897[32] 4[32]) 2[32]) }
          value = { defs={} expr=v1967[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v1897[32] 4[32]) 1[32]) }
          value = { defs={} expr=v1966[8] }
          flags = { rdonly }
        address = { defs={0x08048384,0x08048385} expr=(add[32] v1897[32] 4[32]) }
          value = { defs={} expr=v1965[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1897[32] 3[32]) }
          value = { defs={} expr=v1951[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1897[32] 2[32]) }
          value = { defs={} expr=v1950[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1897[32] 1[32]) }
          value = { defs={} expr=v1949[8] }
          flags = { rdonly }
        address = { defs={0x08048384} expr=v1897[32] }
          value = { defs={} expr=v1948[8] }
          flags = { rdonly }
0x8048386:leave  
    registers:
        ax      = { defs={0x08048384} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1948[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1949[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1950[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1951[8]))) }
        cx      = { defs={} expr=v1894[32] }
        dx      = { defs={} expr=v1895[32] }
        bx      = { defs={0x08048385} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1965[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1966[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1967[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1968[8]))) }
        sp      = { defs={0x08048386} expr=(add[32] v1898[32] 4[32]) }
        bp      = { defs={0x08048386} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1983[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1984[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1985[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1986[8]))) }
        si      = { defs={} expr=v1899[32] }
        di      = { defs={} expr=v1900[32] }
        es      = { defs={} expr=v1901[16] }
        cs      = { defs={} expr=v1902[16] }
        ss      = { defs={} expr=v1903[16] }
        ds      = { defs={} expr=v1904[16] }
        fs      = { defs={} expr=v1905[16] }
        gs      = { defs={} expr=v1906[16] }
        cf      = { defs={} expr=v1907[1] }
        ?1      = { defs={} expr=v1908[1] }
        pf      = { defs={} expr=v1909[1] }
        ?3      = { defs={} expr=v1910[1] }
        af      = { defs={} expr=v1911[1] }
        ?5      = { defs={} expr=v1912[1] }
        zf      = { defs={} expr=v1913[1] }
        sf      = { defs={} expr=v1914[1] }
        tf      = { defs={} expr=v1915[1] }
        if      = { defs={} expr=v1916[1] }
        df      = { defs={} expr=v1917[1] }
        of      = { defs={} expr=v1918[1] }
        iopl0   = { defs={} expr=v1919[1] }
        iopl1   = { defs={} expr=v1920[1] }
        nt      = { defs={} expr=v1921[1] }
        ?15     = { defs={} expr=v1922[1] }
        rf      = { defs={} expr=v1923[1] }
        vm      = { defs={} expr=v1924[1] }
        ac      = { defs={} expr=v1925[1] }
        vif     = { defs={} expr=v1926[1] }
        vip     = { defs={} expr=v1927[1] }
        id      = { defs={} expr=v1928[1] }
        ?22     = { defs={} expr=v1929[1] }
        ?23     = { defs={} expr=v1930[1] }
        ?24     = { defs={} expr=v1931[1] }
        ?25     = { defs={} expr=v1932[1] }
        ?26     = { defs={} expr=v1933[1] }
        ?27     = { defs={} expr=v1934[1] }
        ?28     = { defs={} expr=v1935[1] }
        ?29     = { defs={} expr=v1936[1] }
        ?30     = { defs={} expr=v1937[1] }
        ?31     = { defs={} expr=v1938[1] }
        ip      = { defs={0x08048384,0x08048385,0x08048386} expr=0x08048387[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v1898[32] 3[32]) }
          value = { defs={} expr=v1986[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1898[32] 2[32]) }
          value = { defs={} expr=v1985[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1898[32] 1[32]) }
          value = { defs={} expr=v1984[8] }
          flags = { rdonly }
        address = { defs={0x08048386} expr=v1898[32] }
          value = { defs={} expr=v1983[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v1897[32] 4[32]) 3[32]) }
          value = { defs={} expr=v1968[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v1897[32] 4[32]) 2[32]) }
          value = { defs={} expr=v1967[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v1897[32] 4[32]) 1[32]) }
          value = { defs={} expr=v1966[8] }
          flags = { rdonly }
        address = { defs={0x08048384,0x08048385} expr=(add[32] v1897[32] 4[32]) }
          value = { defs={} expr=v1965[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1897[32] 3[32]) }
          value = { defs={} expr=v1951[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1897[32] 2[32]) }
          value = { defs={} expr=v1950[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1897[32] 1[32]) }
          value = { defs={} expr=v1949[8] }
          flags = { rdonly }
        address = { defs={0x08048384} expr=v1897[32] }
          value = { defs={} expr=v1948[8] }
          flags = { rdonly }
0x8048387:ret    
    registers:
        ax      = { defs={0x08048384} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1948[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1949[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1950[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1951[8]))) }
        cx      = { defs={} expr=v1894[32] }
        dx      = { defs={} expr=v1895[32] }
        bx      = { defs={0x08048385} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1965[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1966[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1967[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1968[8]))) }
        sp      = { defs={0x08048386,0x08048387} expr=(add[32] (add[32] v1898[32] 4[32]) 4[32]) }
        bp      = { defs={0x08048386} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1983[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1984[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1985[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1986[8]))) }
        si      = { defs={} expr=v1899[32] }
        di      = { defs={} expr=v1900[32] }
        es      = { defs={} expr=v1901[16] }
        cs      = { defs={} expr=v1902[16] }
        ss      = { defs={} expr=v1903[16] }
        ds      = { defs={} expr=v1904[16] }
        fs      = { defs={} expr=v1905[16] }
        gs      = { defs={} expr=v1906[16] }
        cf      = { defs={} expr=v1907[1] }
        ?1      = { defs={} expr=v1908[1] }
        pf      = { defs={} expr=v1909[1] }
        ?3      = { defs={} expr=v1910[1] }
        af      = { defs={} expr=v1911[1] }
        ?5      = { defs={} expr=v1912[1] }
        zf      = { defs={} expr=v1913[1] }
        sf      = { defs={} expr=v1914[1] }
        tf      = { defs={} expr=v1915[1] }
        if      = { defs={} expr=v1916[1] }
        df      = { defs={} expr=v1917[1] }
        of      = { defs={} expr=v1918[1] }
        iopl0   = { defs={} expr=v1919[1] }
        iopl1   = { defs={} expr=v1920[1] }
        nt      = { defs={} expr=v1921[1] }
        ?15     = { defs={} expr=v1922[1] }
        rf      = { defs={} expr=v1923[1] }
        vm      = { defs={} expr=v1924[1] }
        ac      = { defs={} expr=v1925[1] }
        vif     = { defs={} expr=v1926[1] }
        vip     = { defs={} expr=v1927[1] }
        id      = { defs={} expr=v1928[1] }
        ?22     = { defs={} expr=v1929[1] }
        ?23     = { defs={} expr=v1930[1] }
        ?24     = { defs={} expr=v1931[1] }
        ?25     = { defs={} expr=v1932[1] }
        ?26     = { defs={} expr=v1933[1] }
        ?27     = { defs={} expr=v1934[1] }
        ?28     = { defs={} expr=v1935[1] }
        ?29     = { defs={} expr=v1936[1] }
        ?30     = { defs={} expr=v1937[1] }
        ?31     = { defs={} expr=v1938[1] }
        ip      = { defs={0x08048387} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2001[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2002[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2003[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2004[8]))) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v1898[32] 4[32]) 3[32]) }
          value = { defs={} expr=v2004[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v1898[32] 4[32]) 2[32]) }
          value = { defs={} expr=v2003[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v1898[32] 4[32]) 1[32]) }
          value = { defs={} expr=v2002[8] }
          flags = { rdonly }
        address = { defs={0x08048386,0x08048387} expr=(add[32] v1898[32] 4[32]) }
          value = { defs={} expr=v2001[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1898[32] 3[32]) }
          value = { defs={} expr=v1986[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1898[32] 2[32]) }
          value = { defs={} expr=v1985[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1898[32] 1[32]) }
          value = { defs={} expr=v1984[8] }
          flags = { rdonly }
        address = { defs={0x08048386} expr=v1898[32] }
          value = { defs={} expr=v1983[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v1897[32] 4[32]) 3[32]) }
          value = { defs={} expr=v1968[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v1897[32] 4[32]) 2[32]) }
          value = { defs={} expr=v1967[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v1897[32] 4[32]) 1[32]) }
          value = { defs={} expr=v1966[8] }
          flags = { rdonly }
        address = { defs={0x08048384,0x08048385} expr=(add[32] v1897[32] 4[32]) }
          value = { defs={} expr=v1965[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1897[32] 3[32]) }
          value = { defs={} expr=v1951[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1897[32] 2[32]) }
          value = { defs={} expr=v1950[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1897[32] 1[32]) }
          value = { defs={} expr=v1949[8] }
          flags = { rdonly }
        address = { defs={0x08048384} expr=v1897[32] }
          value = { defs={} expr=v1948[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048390:push   ebp
    registers:
        ax      = { defs={} expr=v2059[32] }
        cx      = { defs={} expr=v2060[32] }
        dx      = { defs={} expr=v2061[32] }
        bx      = { defs={} expr=v2062[32] }
        sp      = { defs={0x08048390} expr=(add[32] v2063[32] -4[32]) }
        bp      = { defs={} expr=v2064[32] }
        si      = { defs={} expr=v2065[32] }
        di      = { defs={} expr=v2066[32] }
        es      = { defs={} expr=v2067[16] }
        cs      = { defs={} expr=v2068[16] }
        ss      = { defs={} expr=v2069[16] }
        ds      = { defs={} expr=v2070[16] }
        fs      = { defs={} expr=v2071[16] }
        gs      = { defs={} expr=v2072[16] }
        cf      = { defs={} expr=v2073[1] }
        ?1      = { defs={} expr=v2074[1] }
        pf      = { defs={} expr=v2075[1] }
        ?3      = { defs={} expr=v2076[1] }
        af      = { defs={} expr=v2077[1] }
        ?5      = { defs={} expr=v2078[1] }
        zf      = { defs={} expr=v2079[1] }
        sf      = { defs={} expr=v2080[1] }
        tf      = { defs={} expr=v2081[1] }
        if      = { defs={} expr=v2082[1] }
        df      = { defs={} expr=v2083[1] }
        of      = { defs={} expr=v2084[1] }
        iopl0   = { defs={} expr=v2085[1] }
        iopl1   = { defs={} expr=v2086[1] }
        nt      = { defs={} expr=v2087[1] }
        ?15     = { defs={} expr=v2088[1] }
        rf      = { defs={} expr=v2089[1] }
        vm      = { defs={} expr=v2090[1] }
        ac      = { defs={} expr=v2091[1] }
        vif     = { defs={} expr=v2092[1] }
        vip     = { defs={} expr=v2093[1] }
        id      = { defs={} expr=v2094[1] }
        ?22     = { defs={} expr=v2095[1] }
        ?23     = { defs={} expr=v2096[1] }
        ?24     = { defs={} expr=v2097[1] }
        ?25     = { defs={} expr=v2098[1] }
        ?26     = { defs={} expr=v2099[1] }
        ?27     = { defs={} expr=v2100[1] }
        ?28     = { defs={} expr=v2101[1] }
        ?29     = { defs={} expr=v2102[1] }
        ?30     = { defs={} expr=v2103[1] }
        ?31     = { defs={} expr=v2104[1] }
        ip      = { defs={0x08048390} expr=0x08048391[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2063[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2064[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2063[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2064[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2063[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2064[32]) }
          flags = { }
        address = { defs={0x08048390} expr=(add[32] v2063[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2064[32]) }
          flags = { }
    init mem:
0x8048391:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v2059[32] }
        cx      = { defs={} expr=v2060[32] }
        dx      = { defs={} expr=v2061[32] }
        bx      = { defs={} expr=v2062[32] }
        sp      = { defs={0x08048390} expr=(add[32] v2063[32] -4[32]) }
        bp      = { defs={0x08048390,0x08048391} expr=(add[32] v2063[32] -4[32]) }
        si      = { defs={} expr=v2065[32] }
        di      = { defs={} expr=v2066[32] }
        es      = { defs={} expr=v2067[16] }
        cs      = { defs={} expr=v2068[16] }
        ss      = { defs={} expr=v2069[16] }
        ds      = { defs={} expr=v2070[16] }
        fs      = { defs={} expr=v2071[16] }
        gs      = { defs={} expr=v2072[16] }
        cf      = { defs={} expr=v2073[1] }
        ?1      = { defs={} expr=v2074[1] }
        pf      = { defs={} expr=v2075[1] }
        ?3      = { defs={} expr=v2076[1] }
        af      = { defs={} expr=v2077[1] }
        ?5      = { defs={} expr=v2078[1] }
        zf      = { defs={} expr=v2079[1] }
        sf      = { defs={} expr=v2080[1] }
        tf      = { defs={} expr=v2081[1] }
        if      = { defs={} expr=v2082[1] }
        df      = { defs={} expr=v2083[1] }
        of      = { defs={} expr=v2084[1] }
        iopl0   = { defs={} expr=v2085[1] }
        iopl1   = { defs={} expr=v2086[1] }
        nt      = { defs={} expr=v2087[1] }
        ?15     = { defs={} expr=v2088[1] }
        rf      = { defs={} expr=v2089[1] }
        vm      = { defs={} expr=v2090[1] }
        ac      = { defs={} expr=v2091[1] }
        vif     = { defs={} expr=v2092[1] }
        vip     = { defs={} expr=v2093[1] }
        id      = { defs={} expr=v2094[1] }
        ?22     = { defs={} expr=v2095[1] }
        ?23     = { defs={} expr=v2096[1] }
        ?24     = { defs={} expr=v2097[1] }
        ?25     = { defs={} expr=v2098[1] }
        ?26     = { defs={} expr=v2099[1] }
        ?27     = { defs={} expr=v2100[1] }
        ?28     = { defs={} expr=v2101[1] }
        ?29     = { defs={} expr=v2102[1] }
        ?30     = { defs={} expr=v2103[1] }
        ?31     = { defs={} expr=v2104[1] }
        ip      = { defs={0x08048390,0x08048391} expr=0x08048393[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2063[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2064[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2063[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2064[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2063[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2064[32]) }
          flags = { }
        address = { defs={0x08048390} expr=(add[32] v2063[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2064[32]) }
          flags = { }
    init mem:
0x8048393:sub    esp, 0x08
    registers:
        ax      = { defs={} expr=v2059[32] }
        cx      = { defs={} expr=v2060[32] }
        dx      = { defs={} expr=v2061[32] }
        bx      = { defs={} expr=v2062[32] }
        sp      = { defs={0x08048390,0x08048393} expr=(add[32] (add[32] v2063[32] -4[32]) -8[32]) }
        bp      = { defs={0x08048390,0x08048391} expr=(add[32] v2063[32] -4[32]) }
        si      = { defs={} expr=v2065[32] }
        di      = { defs={} expr=v2066[32] }
        es      = { defs={} expr=v2067[16] }
        cs      = { defs={} expr=v2068[16] }
        ss      = { defs={} expr=v2069[16] }
        ds      = { defs={} expr=v2070[16] }
        fs      = { defs={} expr=v2071[16] }
        gs      = { defs={} expr=v2072[16] }
        cf      = { defs={0x08048390,0x08048393} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2063[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2063[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v2074[1] }
        pf      = { defs={0x08048390,0x08048393} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2063[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2063[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2063[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2063[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2063[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2063[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2063[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2063[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v2076[1] }
        af      = { defs={0x08048390,0x08048393} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2063[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2063[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v2078[1] }
        zf      = { defs={0x08048390,0x08048393} expr=(zerop[1] (add[32] (add[32] v2063[32] -4[32]) -8[32])) }
        sf      = { defs={0x08048390,0x08048393} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v2063[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v2081[1] }
        if      = { defs={} expr=v2082[1] }
        df      = { defs={} expr=v2083[1] }
        of      = { defs={0x08048390,0x08048393} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2063[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2063[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2063[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2063[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v2085[1] }
        iopl1   = { defs={} expr=v2086[1] }
        nt      = { defs={} expr=v2087[1] }
        ?15     = { defs={} expr=v2088[1] }
        rf      = { defs={} expr=v2089[1] }
        vm      = { defs={} expr=v2090[1] }
        ac      = { defs={} expr=v2091[1] }
        vif     = { defs={} expr=v2092[1] }
        vip     = { defs={} expr=v2093[1] }
        id      = { defs={} expr=v2094[1] }
        ?22     = { defs={} expr=v2095[1] }
        ?23     = { defs={} expr=v2096[1] }
        ?24     = { defs={} expr=v2097[1] }
        ?25     = { defs={} expr=v2098[1] }
        ?26     = { defs={} expr=v2099[1] }
        ?27     = { defs={} expr=v2100[1] }
        ?28     = { defs={} expr=v2101[1] }
        ?29     = { defs={} expr=v2102[1] }
        ?30     = { defs={} expr=v2103[1] }
        ?31     = { defs={} expr=v2104[1] }
        ip      = { defs={0x08048390,0x08048391,0x08048393} expr=0x08048396[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2063[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2064[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2063[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2064[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2063[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2064[32]) }
          flags = { }
        address = { defs={0x08048390} expr=(add[32] v2063[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2064[32]) }
          flags = { }
    init mem:
0x8048396:cmp    BYTE PTR ds:[0x080496f4<.bss>], 0x00
    registers:
        ax      = { defs={} expr=v2059[32] }
        cx      = { defs={} expr=v2060[32] }
        dx      = { defs={} expr=v2061[32] }
        bx      = { defs={} expr=v2062[32] }
        sp      = { defs={0x08048390,0x08048393} expr=(add[32] (add[32] v2063[32] -4[32]) -8[32]) }
        bp      = { defs={0x08048390,0x08048391} expr=(add[32] v2063[32] -4[32]) }
        si      = { defs={} expr=v2065[32] }
        di      = { defs={} expr=v2066[32] }
        es      = { defs={} expr=v2067[16] }
        cs      = { defs={} expr=v2068[16] }
        ss      = { defs={} expr=v2069[16] }
        ds      = { defs={} expr=v2070[16] }
        fs      = { defs={} expr=v2071[16] }
        gs      = { defs={} expr=v2072[16] }
        cf      = { defs={0x08048396} expr=(invert[1] (extract[1] 7[32] 8[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] v2176[8]) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] v2176[8]) -256[9])))))) }
        ?1      = { defs={} expr=v2074[1] }
        pf      = { defs={0x08048396} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] v2176[8]) (extract[1] 1[32] 2[32] v2176[8])) (bv-xor[1] (extract[1] 2[32] 3[32] v2176[8]) (extract[1] 3[32] 4[32] v2176[8]))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] v2176[8]) (extract[1] 5[32] 6[32] v2176[8])) (bv-xor[1] (extract[1] 6[32] 7[32] v2176[8]) (extract[1] 7[32] 8[32] v2176[8]))))) }
        ?3      = { defs={} expr=v2076[1] }
        af      = { defs={0x08048396} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] v2176[8]) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] v2176[8]) -256[9])))))) }
        ?5      = { defs={} expr=v2078[1] }
        zf      = { defs={0x08048396} expr=(zerop[1] v2176[8]) }
        sf      = { defs={0x08048396} expr=(extract[1] 7[32] 8[32] v2176[8]) }
        tf      = { defs={} expr=v2081[1] }
        if      = { defs={} expr=v2082[1] }
        df      = { defs={} expr=v2083[1] }
        of      = { defs={0x08048396} expr=(bv-xor[1] (extract[1] 7[32] 8[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] v2176[8]) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] v2176[8]) -256[9]))))) (extract[1] 6[32] 7[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] v2176[8]) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] v2176[8]) -256[9])))))) }
        iopl0   = { defs={} expr=v2085[1] }
        iopl1   = { defs={} expr=v2086[1] }
        nt      = { defs={} expr=v2087[1] }
        ?15     = { defs={} expr=v2088[1] }
        rf      = { defs={} expr=v2089[1] }
        vm      = { defs={} expr=v2090[1] }
        ac      = { defs={} expr=v2091[1] }
        vif     = { defs={} expr=v2092[1] }
        vip     = { defs={} expr=v2093[1] }
        id      = { defs={} expr=v2094[1] }
        ?22     = { defs={} expr=v2095[1] }
        ?23     = { defs={} expr=v2096[1] }
        ?24     = { defs={} expr=v2097[1] }
        ?25     = { defs={} expr=v2098[1] }
        ?26     = { defs={} expr=v2099[1] }
        ?27     = { defs={} expr=v2100[1] }
        ?28     = { defs={} expr=v2101[1] }
        ?29     = { defs={} expr=v2102[1] }
        ?30     = { defs={} expr=v2103[1] }
        ?31     = { defs={} expr=v2104[1] }
        ip      = { defs={0x08048390,0x08048391,0x08048393,0x08048396} expr=0x0804839d[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2063[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2064[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2063[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2064[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2063[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2064[32]) }
          flags = { }
        address = { defs={0x08048390} expr=(add[32] v2063[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2064[32]) }
          flags = { }
    init mem:
        address = { defs={0x08048396} expr=0x080496f4[32] }
          value = { defs={} expr=v2176[8] }
          flags = { rdonly }
0x804839d:jne    0x080483cc<<Insn>>
    registers:
        ax      = { defs={} expr=v2059[32] }
        cx      = { defs={} expr=v2060[32] }
        dx      = { defs={} expr=v2061[32] }
        bx      = { defs={} expr=v2062[32] }
        sp      = { defs={0x08048390,0x08048393} expr=(add[32] (add[32] v2063[32] -4[32]) -8[32]) }
        bp      = { defs={0x08048390,0x08048391} expr=(add[32] v2063[32] -4[32]) }
        si      = { defs={} expr=v2065[32] }
        di      = { defs={} expr=v2066[32] }
        es      = { defs={} expr=v2067[16] }
        cs      = { defs={} expr=v2068[16] }
        ss      = { defs={} expr=v2069[16] }
        ds      = { defs={} expr=v2070[16] }
        fs      = { defs={} expr=v2071[16] }
        gs      = { defs={} expr=v2072[16] }
        cf      = { defs={0x08048396} expr=(invert[1] (extract[1] 7[32] 8[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] v2176[8]) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] v2176[8]) -256[9])))))) }
        ?1      = { defs={} expr=v2074[1] }
        pf      = { defs={0x08048396} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] v2176[8]) (extract[1] 1[32] 2[32] v2176[8])) (bv-xor[1] (extract[1] 2[32] 3[32] v2176[8]) (extract[1] 3[32] 4[32] v2176[8]))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] v2176[8]) (extract[1] 5[32] 6[32] v2176[8])) (bv-xor[1] (extract[1] 6[32] 7[32] v2176[8]) (extract[1] 7[32] 8[32] v2176[8]))))) }
        ?3      = { defs={} expr=v2076[1] }
        af      = { defs={0x08048396} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] v2176[8]) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] v2176[8]) -256[9])))))) }
        ?5      = { defs={} expr=v2078[1] }
        zf      = { defs={0x08048396} expr=(zerop[1] v2176[8]) }
        sf      = { defs={0x08048396} expr=(extract[1] 7[32] 8[32] v2176[8]) }
        tf      = { defs={} expr=v2081[1] }
        if      = { defs={} expr=v2082[1] }
        df      = { defs={} expr=v2083[1] }
        of      = { defs={0x08048396} expr=(bv-xor[1] (extract[1] 7[32] 8[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] v2176[8]) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] v2176[8]) -256[9]))))) (extract[1] 6[32] 7[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] v2176[8]) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] v2176[8]) -256[9])))))) }
        iopl0   = { defs={} expr=v2085[1] }
        iopl1   = { defs={} expr=v2086[1] }
        nt      = { defs={} expr=v2087[1] }
        ?15     = { defs={} expr=v2088[1] }
        rf      = { defs={} expr=v2089[1] }
        vm      = { defs={} expr=v2090[1] }
        ac      = { defs={} expr=v2091[1] }
        vif     = { defs={} expr=v2092[1] }
        vip     = { defs={} expr=v2093[1] }
        id      = { defs={} expr=v2094[1] }
        ?22     = { defs={} expr=v2095[1] }
        ?23     = { defs={} expr=v2096[1] }
        ?24     = { defs={} expr=v2097[1] }
        ?25     = { defs={} expr=v2098[1] }
        ?26     = { defs={} expr=v2099[1] }
        ?27     = { defs={} expr=v2100[1] }
        ?28     = { defs={} expr=v2101[1] }
        ?29     = { defs={} expr=v2102[1] }
        ?30     = { defs={} expr=v2103[1] }
        ?31     = { defs={} expr=v2104[1] }
        ip      = { defs={0x08048390,0x08048391,0x08048393,0x08048396,0x0804839d} expr=(ite[32] (invert[1] (zerop[1] v2176[8])) 0x080483cc[32] 0x0804839f[32]) }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2063[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2064[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2063[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2064[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2063[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2064[32]) }
          flags = { }
        address = { defs={0x08048390} expr=(add[32] v2063[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2064[32]) }
          flags = { }
    init mem:
        address = { defs={0x08048396} expr=0x080496f4[32] }
          value = { defs={} expr=v2176[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804839f:mov    eax, DWORD PTR ds:[0x080496f0<.data+8>]
    registers:
        ax      = { defs={0x0804839f} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2332[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2333[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2334[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2335[8]))) }
        cx      = { defs={} expr=v2281[32] }
        dx      = { defs={} expr=v2282[32] }
        bx      = { defs={} expr=v2283[32] }
        sp      = { defs={} expr=v2284[32] }
        bp      = { defs={} expr=v2285[32] }
        si      = { defs={} expr=v2286[32] }
        di      = { defs={} expr=v2287[32] }
        es      = { defs={} expr=v2288[16] }
        cs      = { defs={} expr=v2289[16] }
        ss      = { defs={} expr=v2290[16] }
        ds      = { defs={} expr=v2291[16] }
        fs      = { defs={} expr=v2292[16] }
        gs      = { defs={} expr=v2293[16] }
        cf      = { defs={} expr=v2294[1] }
        ?1      = { defs={} expr=v2295[1] }
        pf      = { defs={} expr=v2296[1] }
        ?3      = { defs={} expr=v2297[1] }
        af      = { defs={} expr=v2298[1] }
        ?5      = { defs={} expr=v2299[1] }
        zf      = { defs={} expr=v2300[1] }
        sf      = { defs={} expr=v2301[1] }
        tf      = { defs={} expr=v2302[1] }
        if      = { defs={} expr=v2303[1] }
        df      = { defs={} expr=v2304[1] }
        of      = { defs={} expr=v2305[1] }
        iopl0   = { defs={} expr=v2306[1] }
        iopl1   = { defs={} expr=v2307[1] }
        nt      = { defs={} expr=v2308[1] }
        ?15     = { defs={} expr=v2309[1] }
        rf      = { defs={} expr=v2310[1] }
        vm      = { defs={} expr=v2311[1] }
        ac      = { defs={} expr=v2312[1] }
        vif     = { defs={} expr=v2313[1] }
        vip     = { defs={} expr=v2314[1] }
        id      = { defs={} expr=v2315[1] }
        ?22     = { defs={} expr=v2316[1] }
        ?23     = { defs={} expr=v2317[1] }
        ?24     = { defs={} expr=v2318[1] }
        ?25     = { defs={} expr=v2319[1] }
        ?26     = { defs={} expr=v2320[1] }
        ?27     = { defs={} expr=v2321[1] }
        ?28     = { defs={} expr=v2322[1] }
        ?29     = { defs={} expr=v2323[1] }
        ?30     = { defs={} expr=v2324[1] }
        ?31     = { defs={} expr=v2325[1] }
        ip      = { defs={0x0804839f} expr=0x080483a4[32] }
    memory:
    init mem:
        address = { defs={} expr=0x080496f3[32] }
          value = { defs={} expr=v2335[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f2[32] }
          value = { defs={} expr=v2334[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f1[32] }
          value = { defs={} expr=v2333[8] }
          flags = { rdonly }
        address = { defs={0x0804839f} expr=0x080496f0[32] }
          value = { defs={} expr=v2332[8] }
          flags = { rdonly }
0x80483a4:mov    edx, DWORD PTR ds:[eax]
    registers:
        ax      = { defs={0x0804839f} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2332[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2333[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2334[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2335[8]))) }
        cx      = { defs={} expr=v2281[32] }
        dx      = { defs={0x080483a4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2347[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2348[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2349[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2350[8]))) }
        bx      = { defs={} expr=v2283[32] }
        sp      = { defs={} expr=v2284[32] }
        bp      = { defs={} expr=v2285[32] }
        si      = { defs={} expr=v2286[32] }
        di      = { defs={} expr=v2287[32] }
        es      = { defs={} expr=v2288[16] }
        cs      = { defs={} expr=v2289[16] }
        ss      = { defs={} expr=v2290[16] }
        ds      = { defs={} expr=v2291[16] }
        fs      = { defs={} expr=v2292[16] }
        gs      = { defs={} expr=v2293[16] }
        cf      = { defs={} expr=v2294[1] }
        ?1      = { defs={} expr=v2295[1] }
        pf      = { defs={} expr=v2296[1] }
        ?3      = { defs={} expr=v2297[1] }
        af      = { defs={} expr=v2298[1] }
        ?5      = { defs={} expr=v2299[1] }
        zf      = { defs={} expr=v2300[1] }
        sf      = { defs={} expr=v2301[1] }
        tf      = { defs={} expr=v2302[1] }
        if      = { defs={} expr=v2303[1] }
        df      = { defs={} expr=v2304[1] }
        of      = { defs={} expr=v2305[1] }
        iopl0   = { defs={} expr=v2306[1] }
        iopl1   = { defs={} expr=v2307[1] }
        nt      = { defs={} expr=v2308[1] }
        ?15     = { defs={} expr=v2309[1] }
        rf      = { defs={} expr=v2310[1] }
        vm      = { defs={} expr=v2311[1] }
        ac      = { defs={} expr=v2312[1] }
        vif     = { defs={} expr=v2313[1] }
        vip     = { defs={} expr=v2314[1] }
        id      = { defs={} expr=v2315[1] }
        ?22     = { defs={} expr=v2316[1] }
        ?23     = { defs={} expr=v2317[1] }
        ?24     = { defs={} expr=v2318[1] }
        ?25     = { defs={} expr=v2319[1] }
        ?26     = { defs={} expr=v2320[1] }
        ?27     = { defs={} expr=v2321[1] }
        ?28     = { defs={} expr=v2322[1] }
        ?29     = { defs={} expr=v2323[1] }
        ?30     = { defs={} expr=v2324[1] }
        ?31     = { defs={} expr=v2325[1] }
        ip      = { defs={0x0804839f,0x080483a4} expr=0x080483a6[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2332[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2333[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2334[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2335[8]))) 3[32]) }
          value = { defs={} expr=v2350[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2332[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2333[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2334[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2335[8]))) 2[32]) }
          value = { defs={} expr=v2349[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2332[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2333[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2334[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2335[8]))) 1[32]) }
          value = { defs={} expr=v2348[8] }
          flags = { rdonly }
        address = { defs={0x0804839f,0x080483a4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2332[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2333[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2334[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2335[8]))) }
          value = { defs={} expr=v2347[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f3[32] }
          value = { defs={} expr=v2335[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f2[32] }
          value = { defs={} expr=v2334[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f1[32] }
          value = { defs={} expr=v2333[8] }
          flags = { rdonly }
        address = { defs={0x0804839f} expr=0x080496f0[32] }
          value = { defs={} expr=v2332[8] }
          flags = { rdonly }
0x80483a6:test   edx, edx
    registers:
        ax      = { defs={0x0804839f} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2332[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2333[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2334[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2335[8]))) }
        cx      = { defs={} expr=v2281[32] }
        dx      = { defs={0x080483a4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2347[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2348[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2349[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2350[8]))) }
        bx      = { defs={} expr=v2283[32] }
        sp      = { defs={} expr=v2284[32] }
        bp      = { defs={} expr=v2285[32] }
        si      = { defs={} expr=v2286[32] }
        di      = { defs={} expr=v2287[32] }
        es      = { defs={} expr=v2288[16] }
        cs      = { defs={} expr=v2289[16] }
        ss      = { defs={} expr=v2290[16] }
        ds      = { defs={} expr=v2291[16] }
        fs      = { defs={} expr=v2292[16] }
        gs      = { defs={} expr=v2293[16] }
        cf      = { defs={0x080483a6} expr=0[1] }
        ?1      = { defs={} expr=v2295[1] }
        pf      = { defs={0x080483a4,0x080483a6} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2347[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2348[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2349[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2350[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2347[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2348[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2349[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2350[8])))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2347[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2348[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2349[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2350[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2347[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2348[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2349[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2350[8]))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2347[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2348[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2349[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2350[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2347[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2348[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2349[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2350[8])))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2347[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2348[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2349[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2350[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2347[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2348[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2349[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2350[8])))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2347[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2348[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2349[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2350[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2347[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2348[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2349[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2350[8])))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2347[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2348[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2349[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2350[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2347[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2348[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2349[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2350[8]))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2347[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2348[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2349[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2350[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2347[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2348[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2349[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2350[8])))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2347[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2348[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2349[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2350[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2347[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2348[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2349[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2350[8])))))))))) }
        ?3      = { defs={} expr=v2297[1] }
        af      = { defs={0x080483a6} expr=v2387[1] }
        ?5      = { defs={} expr=v2299[1] }
        zf      = { defs={0x080483a4,0x080483a6} expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2347[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2348[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2349[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2350[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2347[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2348[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2349[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2350[8]))))) }
        sf      = { defs={0x080483a4,0x080483a6} expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2347[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2348[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2349[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2350[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2347[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2348[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2349[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2350[8]))))) }
        tf      = { defs={} expr=v2302[1] }
        if      = { defs={} expr=v2303[1] }
        df      = { defs={} expr=v2304[1] }
        of      = { defs={0x080483a6} expr=0[1] }
        iopl0   = { defs={} expr=v2306[1] }
        iopl1   = { defs={} expr=v2307[1] }
        nt      = { defs={} expr=v2308[1] }
        ?15     = { defs={} expr=v2309[1] }
        rf      = { defs={} expr=v2310[1] }
        vm      = { defs={} expr=v2311[1] }
        ac      = { defs={} expr=v2312[1] }
        vif     = { defs={} expr=v2313[1] }
        vip     = { defs={} expr=v2314[1] }
        id      = { defs={} expr=v2315[1] }
        ?22     = { defs={} expr=v2316[1] }
        ?23     = { defs={} expr=v2317[1] }
        ?24     = { defs={} expr=v2318[1] }
        ?25     = { defs={} expr=v2319[1] }
        ?26     = { defs={} expr=v2320[1] }
        ?27     = { defs={} expr=v2321[1] }
        ?28     = { defs={} expr=v2322[1] }
        ?29     = { defs={} expr=v2323[1] }
        ?30     = { defs={} expr=v2324[1] }
        ?31     = { defs={} expr=v2325[1] }
        ip      = { defs={0x0804839f,0x080483a4,0x080483a6} expr=0x080483a8[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2332[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2333[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2334[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2335[8]))) 3[32]) }
          value = { defs={} expr=v2350[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2332[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2333[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2334[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2335[8]))) 2[32]) }
          value = { defs={} expr=v2349[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2332[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2333[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2334[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2335[8]))) 1[32]) }
          value = { defs={} expr=v2348[8] }
          flags = { rdonly }
        address = { defs={0x0804839f,0x080483a4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2332[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2333[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2334[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2335[8]))) }
          value = { defs={} expr=v2347[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f3[32] }
          value = { defs={} expr=v2335[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f2[32] }
          value = { defs={} expr=v2334[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f1[32] }
          value = { defs={} expr=v2333[8] }
          flags = { rdonly }
        address = { defs={0x0804839f} expr=0x080496f0[32] }
          value = { defs={} expr=v2332[8] }
          flags = { rdonly }
0x80483a8:je     0x080483c5<<Insn>>
    registers:
        ax      = { defs={0x0804839f} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2332[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2333[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2334[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2335[8]))) }
        cx      = { defs={} expr=v2281[32] }
        dx      = { defs={0x080483a4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2347[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2348[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2349[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2350[8]))) }
        bx      = { defs={} expr=v2283[32] }
        sp      = { defs={} expr=v2284[32] }
        bp      = { defs={} expr=v2285[32] }
        si      = { defs={} expr=v2286[32] }
        di      = { defs={} expr=v2287[32] }
        es      = { defs={} expr=v2288[16] }
        cs      = { defs={} expr=v2289[16] }
        ss      = { defs={} expr=v2290[16] }
        ds      = { defs={} expr=v2291[16] }
        fs      = { defs={} expr=v2292[16] }
        gs      = { defs={} expr=v2293[16] }
        cf      = { defs={0x080483a6} expr=0[1] }
        ?1      = { defs={} expr=v2295[1] }
        pf      = { defs={0x080483a4,0x080483a6} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2347[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2348[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2349[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2350[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2347[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2348[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2349[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2350[8])))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2347[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2348[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2349[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2350[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2347[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2348[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2349[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2350[8]))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2347[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2348[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2349[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2350[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2347[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2348[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2349[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2350[8])))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2347[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2348[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2349[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2350[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2347[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2348[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2349[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2350[8])))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2347[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2348[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2349[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2350[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2347[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2348[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2349[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2350[8])))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2347[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2348[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2349[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2350[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2347[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2348[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2349[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2350[8]))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2347[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2348[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2349[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2350[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2347[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2348[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2349[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2350[8])))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2347[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2348[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2349[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2350[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2347[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2348[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2349[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2350[8])))))))))) }
        ?3      = { defs={} expr=v2297[1] }
        af      = { defs={0x080483a6} expr=v2387[1] }
        ?5      = { defs={} expr=v2299[1] }
        zf      = { defs={0x080483a4,0x080483a6} expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2347[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2348[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2349[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2350[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2347[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2348[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2349[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2350[8]))))) }
        sf      = { defs={0x080483a4,0x080483a6} expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2347[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2348[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2349[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2350[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2347[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2348[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2349[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2350[8]))))) }
        tf      = { defs={} expr=v2302[1] }
        if      = { defs={} expr=v2303[1] }
        df      = { defs={} expr=v2304[1] }
        of      = { defs={0x080483a6} expr=0[1] }
        iopl0   = { defs={} expr=v2306[1] }
        iopl1   = { defs={} expr=v2307[1] }
        nt      = { defs={} expr=v2308[1] }
        ?15     = { defs={} expr=v2309[1] }
        rf      = { defs={} expr=v2310[1] }
        vm      = { defs={} expr=v2311[1] }
        ac      = { defs={} expr=v2312[1] }
        vif     = { defs={} expr=v2313[1] }
        vip     = { defs={} expr=v2314[1] }
        id      = { defs={} expr=v2315[1] }
        ?22     = { defs={} expr=v2316[1] }
        ?23     = { defs={} expr=v2317[1] }
        ?24     = { defs={} expr=v2318[1] }
        ?25     = { defs={} expr=v2319[1] }
        ?26     = { defs={} expr=v2320[1] }
        ?27     = { defs={} expr=v2321[1] }
        ?28     = { defs={} expr=v2322[1] }
        ?29     = { defs={} expr=v2323[1] }
        ?30     = { defs={} expr=v2324[1] }
        ?31     = { defs={} expr=v2325[1] }
        ip      = { defs={0x0804839f,0x080483a4,0x080483a6,0x080483a8} expr=(ite[32] (zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2347[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2348[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2349[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2350[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2347[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2348[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2349[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2350[8]))))) 0x080483c5[32] 0x080483aa[32]) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2332[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2333[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2334[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2335[8]))) 3[32]) }
          value = { defs={} expr=v2350[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2332[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2333[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2334[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2335[8]))) 2[32]) }
          value = { defs={} expr=v2349[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2332[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2333[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2334[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2335[8]))) 1[32]) }
          value = { defs={} expr=v2348[8] }
          flags = { rdonly }
        address = { defs={0x0804839f,0x080483a4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2332[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2333[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2334[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2335[8]))) }
          value = { defs={} expr=v2347[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f3[32] }
          value = { defs={} expr=v2335[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f2[32] }
          value = { defs={} expr=v2334[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f1[32] }
          value = { defs={} expr=v2333[8] }
          flags = { rdonly }
        address = { defs={0x0804839f} expr=0x080496f0[32] }
          value = { defs={} expr=v2332[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483aa:lea    esi, [esi + 0x00000000]
    registers:
        ax      = { defs={} expr=v2445[32] }
        cx      = { defs={} expr=v2446[32] }
        dx      = { defs={} expr=v2447[32] }
        bx      = { defs={} expr=v2448[32] }
        sp      = { defs={} expr=v2449[32] }
        bp      = { defs={} expr=v2450[32] }
        si      = { defs={0x080483aa} expr=v2451[32] }
        di      = { defs={} expr=v2452[32] }
        es      = { defs={} expr=v2453[16] }
        cs      = { defs={} expr=v2454[16] }
        ss      = { defs={} expr=v2455[16] }
        ds      = { defs={} expr=v2456[16] }
        fs      = { defs={} expr=v2457[16] }
        gs      = { defs={} expr=v2458[16] }
        cf      = { defs={} expr=v2459[1] }
        ?1      = { defs={} expr=v2460[1] }
        pf      = { defs={} expr=v2461[1] }
        ?3      = { defs={} expr=v2462[1] }
        af      = { defs={} expr=v2463[1] }
        ?5      = { defs={} expr=v2464[1] }
        zf      = { defs={} expr=v2465[1] }
        sf      = { defs={} expr=v2466[1] }
        tf      = { defs={} expr=v2467[1] }
        if      = { defs={} expr=v2468[1] }
        df      = { defs={} expr=v2469[1] }
        of      = { defs={} expr=v2470[1] }
        iopl0   = { defs={} expr=v2471[1] }
        iopl1   = { defs={} expr=v2472[1] }
        nt      = { defs={} expr=v2473[1] }
        ?15     = { defs={} expr=v2474[1] }
        rf      = { defs={} expr=v2475[1] }
        vm      = { defs={} expr=v2476[1] }
        ac      = { defs={} expr=v2477[1] }
        vif     = { defs={} expr=v2478[1] }
        vip     = { defs={} expr=v2479[1] }
        id      = { defs={} expr=v2480[1] }
        ?22     = { defs={} expr=v2481[1] }
        ?23     = { defs={} expr=v2482[1] }
        ?24     = { defs={} expr=v2483[1] }
        ?25     = { defs={} expr=v2484[1] }
        ?26     = { defs={} expr=v2485[1] }
        ?27     = { defs={} expr=v2486[1] }
        ?28     = { defs={} expr=v2487[1] }
        ?29     = { defs={} expr=v2488[1] }
        ?30     = { defs={} expr=v2489[1] }
        ?31     = { defs={} expr=v2490[1] }
        ip      = { defs={0x080483aa} expr=0x080483b0[32] }
    memory:
    init mem:
0x80483b0:add    eax, 0x04
    registers:
        ax      = { defs={0x080483b0} expr=(add[32] v2445[32] 4[32]) }
        cx      = { defs={} expr=v2446[32] }
        dx      = { defs={} expr=v2447[32] }
        bx      = { defs={} expr=v2448[32] }
        sp      = { defs={} expr=v2449[32] }
        bp      = { defs={} expr=v2450[32] }
        si      = { defs={0x080483aa} expr=v2451[32] }
        di      = { defs={} expr=v2452[32] }
        es      = { defs={} expr=v2453[16] }
        cs      = { defs={} expr=v2454[16] }
        ss      = { defs={} expr=v2455[16] }
        ds      = { defs={} expr=v2456[16] }
        fs      = { defs={} expr=v2457[16] }
        gs      = { defs={} expr=v2458[16] }
        cf      = { defs={0x080483b0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2445[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v2445[32]) 4[33]))))) }
        ?1      = { defs={} expr=v2460[1] }
        pf      = { defs={0x080483b0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v2445[32] 4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v2445[32] 4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v2445[32] 4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v2445[32] 4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v2445[32] 4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v2445[32] 4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v2445[32] 4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v2445[32] 4[32]))))))) }
        ?3      = { defs={} expr=v2462[1] }
        af      = { defs={0x080483b0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2445[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v2445[32]) 4[33]))))) }
        ?5      = { defs={} expr=v2464[1] }
        zf      = { defs={0x080483b0} expr=(zerop[1] (add[32] v2445[32] 4[32])) }
        sf      = { defs={0x080483b0} expr=(extract[1] 31[32] 32[32] (add[32] v2445[32] 4[32])) }
        tf      = { defs={} expr=v2467[1] }
        if      = { defs={} expr=v2468[1] }
        df      = { defs={} expr=v2469[1] }
        of      = { defs={0x080483b0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2445[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v2445[32]) 4[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2445[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v2445[32]) 4[33])))))) }
        iopl0   = { defs={} expr=v2471[1] }
        iopl1   = { defs={} expr=v2472[1] }
        nt      = { defs={} expr=v2473[1] }
        ?15     = { defs={} expr=v2474[1] }
        rf      = { defs={} expr=v2475[1] }
        vm      = { defs={} expr=v2476[1] }
        ac      = { defs={} expr=v2477[1] }
        vif     = { defs={} expr=v2478[1] }
        vip     = { defs={} expr=v2479[1] }
        id      = { defs={} expr=v2480[1] }
        ?22     = { defs={} expr=v2481[1] }
        ?23     = { defs={} expr=v2482[1] }
        ?24     = { defs={} expr=v2483[1] }
        ?25     = { defs={} expr=v2484[1] }
        ?26     = { defs={} expr=v2485[1] }
        ?27     = { defs={} expr=v2486[1] }
        ?28     = { defs={} expr=v2487[1] }
        ?29     = { defs={} expr=v2488[1] }
        ?30     = { defs={} expr=v2489[1] }
        ?31     = { defs={} expr=v2490[1] }
        ip      = { defs={0x080483aa,0x080483b0} expr=0x080483b3[32] }
    memory:
    init mem:
0x80483b3:mov    DWORD PTR ds:[0x080496f0<.data+8>], eax
    registers:
        ax      = { defs={0x080483b0} expr=(add[32] v2445[32] 4[32]) }
        cx      = { defs={} expr=v2446[32] }
        dx      = { defs={} expr=v2447[32] }
        bx      = { defs={} expr=v2448[32] }
        sp      = { defs={} expr=v2449[32] }
        bp      = { defs={} expr=v2450[32] }
        si      = { defs={0x080483aa} expr=v2451[32] }
        di      = { defs={} expr=v2452[32] }
        es      = { defs={} expr=v2453[16] }
        cs      = { defs={} expr=v2454[16] }
        ss      = { defs={} expr=v2455[16] }
        ds      = { defs={} expr=v2456[16] }
        fs      = { defs={} expr=v2457[16] }
        gs      = { defs={} expr=v2458[16] }
        cf      = { defs={0x080483b0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2445[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v2445[32]) 4[33]))))) }
        ?1      = { defs={} expr=v2460[1] }
        pf      = { defs={0x080483b0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v2445[32] 4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v2445[32] 4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v2445[32] 4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v2445[32] 4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v2445[32] 4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v2445[32] 4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v2445[32] 4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v2445[32] 4[32]))))))) }
        ?3      = { defs={} expr=v2462[1] }
        af      = { defs={0x080483b0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2445[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v2445[32]) 4[33]))))) }
        ?5      = { defs={} expr=v2464[1] }
        zf      = { defs={0x080483b0} expr=(zerop[1] (add[32] v2445[32] 4[32])) }
        sf      = { defs={0x080483b0} expr=(extract[1] 31[32] 32[32] (add[32] v2445[32] 4[32])) }
        tf      = { defs={} expr=v2467[1] }
        if      = { defs={} expr=v2468[1] }
        df      = { defs={} expr=v2469[1] }
        of      = { defs={0x080483b0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2445[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v2445[32]) 4[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2445[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v2445[32]) 4[33])))))) }
        iopl0   = { defs={} expr=v2471[1] }
        iopl1   = { defs={} expr=v2472[1] }
        nt      = { defs={} expr=v2473[1] }
        ?15     = { defs={} expr=v2474[1] }
        rf      = { defs={} expr=v2475[1] }
        vm      = { defs={} expr=v2476[1] }
        ac      = { defs={} expr=v2477[1] }
        vif     = { defs={} expr=v2478[1] }
        vip     = { defs={} expr=v2479[1] }
        id      = { defs={} expr=v2480[1] }
        ?22     = { defs={} expr=v2481[1] }
        ?23     = { defs={} expr=v2482[1] }
        ?24     = { defs={} expr=v2483[1] }
        ?25     = { defs={} expr=v2484[1] }
        ?26     = { defs={} expr=v2485[1] }
        ?27     = { defs={} expr=v2486[1] }
        ?28     = { defs={} expr=v2487[1] }
        ?29     = { defs={} expr=v2488[1] }
        ?30     = { defs={} expr=v2489[1] }
        ?31     = { defs={} expr=v2490[1] }
        ip      = { defs={0x080483aa,0x080483b0,0x080483b3} expr=0x080483b8[32] }
    memory:
        address = { defs={} expr=0x080496f3[32] }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] v2445[32] 4[32])) }
          flags = { }
        address = { defs={} expr=0x080496f2[32] }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] v2445[32] 4[32])) }
          flags = { }
        address = { defs={} expr=0x080496f1[32] }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] v2445[32] 4[32])) }
          flags = { }
        address = { defs={0x080483b3} expr=0x080496f0[32] }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] v2445[32] 4[32])) }
          flags = { }
    init mem:
0x80483b8:call   edx
    registers:
        ax      = { defs={0x080483b0} expr=(add[32] v2445[32] 4[32]) }
        cx      = { defs={} expr=v2446[32] }
        dx      = { defs={} expr=v2447[32] }
        bx      = { defs={} expr=v2448[32] }
        sp      = { defs={0x080483b8} expr=(add[32] v2449[32] -4[32]) }
        bp      = { defs={} expr=v2450[32] }
        si      = { defs={0x080483aa} expr=v2451[32] }
        di      = { defs={} expr=v2452[32] }
        es      = { defs={} expr=v2453[16] }
        cs      = { defs={} expr=v2454[16] }
        ss      = { defs={} expr=v2455[16] }
        ds      = { defs={} expr=v2456[16] }
        fs      = { defs={} expr=v2457[16] }
        gs      = { defs={} expr=v2458[16] }
        cf      = { defs={0x080483b0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2445[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v2445[32]) 4[33]))))) }
        ?1      = { defs={} expr=v2460[1] }
        pf      = { defs={0x080483b0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v2445[32] 4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v2445[32] 4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v2445[32] 4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v2445[32] 4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v2445[32] 4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v2445[32] 4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v2445[32] 4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v2445[32] 4[32]))))))) }
        ?3      = { defs={} expr=v2462[1] }
        af      = { defs={0x080483b0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2445[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v2445[32]) 4[33]))))) }
        ?5      = { defs={} expr=v2464[1] }
        zf      = { defs={0x080483b0} expr=(zerop[1] (add[32] v2445[32] 4[32])) }
        sf      = { defs={0x080483b0} expr=(extract[1] 31[32] 32[32] (add[32] v2445[32] 4[32])) }
        tf      = { defs={} expr=v2467[1] }
        if      = { defs={} expr=v2468[1] }
        df      = { defs={} expr=v2469[1] }
        of      = { defs={0x080483b0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2445[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v2445[32]) 4[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2445[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v2445[32]) 4[33])))))) }
        iopl0   = { defs={} expr=v2471[1] }
        iopl1   = { defs={} expr=v2472[1] }
        nt      = { defs={} expr=v2473[1] }
        ?15     = { defs={} expr=v2474[1] }
        rf      = { defs={} expr=v2475[1] }
        vm      = { defs={} expr=v2476[1] }
        ac      = { defs={} expr=v2477[1] }
        vif     = { defs={} expr=v2478[1] }
        vip     = { defs={} expr=v2479[1] }
        id      = { defs={} expr=v2480[1] }
        ?22     = { defs={} expr=v2481[1] }
        ?23     = { defs={} expr=v2482[1] }
        ?24     = { defs={} expr=v2483[1] }
        ?25     = { defs={} expr=v2484[1] }
        ?26     = { defs={} expr=v2485[1] }
        ?27     = { defs={} expr=v2486[1] }
        ?28     = { defs={} expr=v2487[1] }
        ?29     = { defs={} expr=v2488[1] }
        ?30     = { defs={} expr=v2489[1] }
        ?31     = { defs={} expr=v2490[1] }
        ip      = { defs={0x080483b8} expr=v2447[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2449[32] -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2449[32] -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2449[32] -4[32]) 1[32]) }
          value = { defs={} expr=-125[8] }
          flags = { }
        address = { defs={0x080483b8} expr=(add[32] v2449[32] -4[32]) }
          value = { defs={} expr=-70[8] }
          flags = { }
        address = { defs={} expr=0x080496f3[32] }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] v2445[32] 4[32])) }
          flags = { }
        address = { defs={} expr=0x080496f2[32] }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] v2445[32] 4[32])) }
          flags = { }
        address = { defs={} expr=0x080496f1[32] }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] v2445[32] 4[32])) }
          flags = { }
        address = { defs={0x080483b3} expr=0x080496f0[32] }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] v2445[32] 4[32])) }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483ba:mov    eax, DWORD PTR ds:[0x080496f0<.data+8>]
    registers:
        ax      = { defs={0x080483ba} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2659[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2660[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2661[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2662[8]))) }
        cx      = { defs={} expr=v2608[32] }
        dx      = { defs={} expr=v2609[32] }
        bx      = { defs={} expr=v2610[32] }
        sp      = { defs={} expr=v2611[32] }
        bp      = { defs={} expr=v2612[32] }
        si      = { defs={} expr=v2613[32] }
        di      = { defs={} expr=v2614[32] }
        es      = { defs={} expr=v2615[16] }
        cs      = { defs={} expr=v2616[16] }
        ss      = { defs={} expr=v2617[16] }
        ds      = { defs={} expr=v2618[16] }
        fs      = { defs={} expr=v2619[16] }
        gs      = { defs={} expr=v2620[16] }
        cf      = { defs={} expr=v2621[1] }
        ?1      = { defs={} expr=v2622[1] }
        pf      = { defs={} expr=v2623[1] }
        ?3      = { defs={} expr=v2624[1] }
        af      = { defs={} expr=v2625[1] }
        ?5      = { defs={} expr=v2626[1] }
        zf      = { defs={} expr=v2627[1] }
        sf      = { defs={} expr=v2628[1] }
        tf      = { defs={} expr=v2629[1] }
        if      = { defs={} expr=v2630[1] }
        df      = { defs={} expr=v2631[1] }
        of      = { defs={} expr=v2632[1] }
        iopl0   = { defs={} expr=v2633[1] }
        iopl1   = { defs={} expr=v2634[1] }
        nt      = { defs={} expr=v2635[1] }
        ?15     = { defs={} expr=v2636[1] }
        rf      = { defs={} expr=v2637[1] }
        vm      = { defs={} expr=v2638[1] }
        ac      = { defs={} expr=v2639[1] }
        vif     = { defs={} expr=v2640[1] }
        vip     = { defs={} expr=v2641[1] }
        id      = { defs={} expr=v2642[1] }
        ?22     = { defs={} expr=v2643[1] }
        ?23     = { defs={} expr=v2644[1] }
        ?24     = { defs={} expr=v2645[1] }
        ?25     = { defs={} expr=v2646[1] }
        ?26     = { defs={} expr=v2647[1] }
        ?27     = { defs={} expr=v2648[1] }
        ?28     = { defs={} expr=v2649[1] }
        ?29     = { defs={} expr=v2650[1] }
        ?30     = { defs={} expr=v2651[1] }
        ?31     = { defs={} expr=v2652[1] }
        ip      = { defs={0x080483ba} expr=0x080483bf[32] }
    memory:
    init mem:
        address = { defs={} expr=0x080496f3[32] }
          value = { defs={} expr=v2662[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f2[32] }
          value = { defs={} expr=v2661[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f1[32] }
          value = { defs={} expr=v2660[8] }
          flags = { rdonly }
        address = { defs={0x080483ba} expr=0x080496f0[32] }
          value = { defs={} expr=v2659[8] }
          flags = { rdonly }
0x80483bf:mov    edx, DWORD PTR ds:[eax]
    registers:
        ax      = { defs={0x080483ba} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2659[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2660[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2661[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2662[8]))) }
        cx      = { defs={} expr=v2608[32] }
        dx      = { defs={0x080483bf} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2674[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2675[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2676[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2677[8]))) }
        bx      = { defs={} expr=v2610[32] }
        sp      = { defs={} expr=v2611[32] }
        bp      = { defs={} expr=v2612[32] }
        si      = { defs={} expr=v2613[32] }
        di      = { defs={} expr=v2614[32] }
        es      = { defs={} expr=v2615[16] }
        cs      = { defs={} expr=v2616[16] }
        ss      = { defs={} expr=v2617[16] }
        ds      = { defs={} expr=v2618[16] }
        fs      = { defs={} expr=v2619[16] }
        gs      = { defs={} expr=v2620[16] }
        cf      = { defs={} expr=v2621[1] }
        ?1      = { defs={} expr=v2622[1] }
        pf      = { defs={} expr=v2623[1] }
        ?3      = { defs={} expr=v2624[1] }
        af      = { defs={} expr=v2625[1] }
        ?5      = { defs={} expr=v2626[1] }
        zf      = { defs={} expr=v2627[1] }
        sf      = { defs={} expr=v2628[1] }
        tf      = { defs={} expr=v2629[1] }
        if      = { defs={} expr=v2630[1] }
        df      = { defs={} expr=v2631[1] }
        of      = { defs={} expr=v2632[1] }
        iopl0   = { defs={} expr=v2633[1] }
        iopl1   = { defs={} expr=v2634[1] }
        nt      = { defs={} expr=v2635[1] }
        ?15     = { defs={} expr=v2636[1] }
        rf      = { defs={} expr=v2637[1] }
        vm      = { defs={} expr=v2638[1] }
        ac      = { defs={} expr=v2639[1] }
        vif     = { defs={} expr=v2640[1] }
        vip     = { defs={} expr=v2641[1] }
        id      = { defs={} expr=v2642[1] }
        ?22     = { defs={} expr=v2643[1] }
        ?23     = { defs={} expr=v2644[1] }
        ?24     = { defs={} expr=v2645[1] }
        ?25     = { defs={} expr=v2646[1] }
        ?26     = { defs={} expr=v2647[1] }
        ?27     = { defs={} expr=v2648[1] }
        ?28     = { defs={} expr=v2649[1] }
        ?29     = { defs={} expr=v2650[1] }
        ?30     = { defs={} expr=v2651[1] }
        ?31     = { defs={} expr=v2652[1] }
        ip      = { defs={0x080483ba,0x080483bf} expr=0x080483c1[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2659[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2660[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2661[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2662[8]))) 3[32]) }
          value = { defs={} expr=v2677[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2659[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2660[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2661[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2662[8]))) 2[32]) }
          value = { defs={} expr=v2676[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2659[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2660[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2661[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2662[8]))) 1[32]) }
          value = { defs={} expr=v2675[8] }
          flags = { rdonly }
        address = { defs={0x080483ba,0x080483bf} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2659[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2660[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2661[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2662[8]))) }
          value = { defs={} expr=v2674[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f3[32] }
          value = { defs={} expr=v2662[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f2[32] }
          value = { defs={} expr=v2661[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f1[32] }
          value = { defs={} expr=v2660[8] }
          flags = { rdonly }
        address = { defs={0x080483ba} expr=0x080496f0[32] }
          value = { defs={} expr=v2659[8] }
          flags = { rdonly }
0x80483c1:test   edx, edx
    registers:
        ax      = { defs={0x080483ba} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2659[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2660[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2661[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2662[8]))) }
        cx      = { defs={} expr=v2608[32] }
        dx      = { defs={0x080483bf} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2674[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2675[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2676[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2677[8]))) }
        bx      = { defs={} expr=v2610[32] }
        sp      = { defs={} expr=v2611[32] }
        bp      = { defs={} expr=v2612[32] }
        si      = { defs={} expr=v2613[32] }
        di      = { defs={} expr=v2614[32] }
        es      = { defs={} expr=v2615[16] }
        cs      = { defs={} expr=v2616[16] }
        ss      = { defs={} expr=v2617[16] }
        ds      = { defs={} expr=v2618[16] }
        fs      = { defs={} expr=v2619[16] }
        gs      = { defs={} expr=v2620[16] }
        cf      = { defs={0x080483c1} expr=0[1] }
        ?1      = { defs={} expr=v2622[1] }
        pf      = { defs={0x080483bf,0x080483c1} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2674[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2675[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2676[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2677[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2674[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2675[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2676[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2677[8])))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2674[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2675[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2676[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2677[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2674[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2675[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2676[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2677[8]))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2674[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2675[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2676[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2677[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2674[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2675[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2676[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2677[8])))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2674[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2675[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2676[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2677[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2674[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2675[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2676[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2677[8])))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2674[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2675[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2676[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2677[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2674[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2675[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2676[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2677[8])))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2674[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2675[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2676[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2677[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2674[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2675[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2676[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2677[8]))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2674[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2675[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2676[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2677[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2674[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2675[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2676[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2677[8])))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2674[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2675[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2676[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2677[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2674[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2675[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2676[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2677[8])))))))))) }
        ?3      = { defs={} expr=v2624[1] }
        af      = { defs={0x080483c1} expr=v2714[1] }
        ?5      = { defs={} expr=v2626[1] }
        zf      = { defs={0x080483bf,0x080483c1} expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2674[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2675[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2676[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2677[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2674[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2675[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2676[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2677[8]))))) }
        sf      = { defs={0x080483bf,0x080483c1} expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2674[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2675[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2676[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2677[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2674[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2675[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2676[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2677[8]))))) }
        tf      = { defs={} expr=v2629[1] }
        if      = { defs={} expr=v2630[1] }
        df      = { defs={} expr=v2631[1] }
        of      = { defs={0x080483c1} expr=0[1] }
        iopl0   = { defs={} expr=v2633[1] }
        iopl1   = { defs={} expr=v2634[1] }
        nt      = { defs={} expr=v2635[1] }
        ?15     = { defs={} expr=v2636[1] }
        rf      = { defs={} expr=v2637[1] }
        vm      = { defs={} expr=v2638[1] }
        ac      = { defs={} expr=v2639[1] }
        vif     = { defs={} expr=v2640[1] }
        vip     = { defs={} expr=v2641[1] }
        id      = { defs={} expr=v2642[1] }
        ?22     = { defs={} expr=v2643[1] }
        ?23     = { defs={} expr=v2644[1] }
        ?24     = { defs={} expr=v2645[1] }
        ?25     = { defs={} expr=v2646[1] }
        ?26     = { defs={} expr=v2647[1] }
        ?27     = { defs={} expr=v2648[1] }
        ?28     = { defs={} expr=v2649[1] }
        ?29     = { defs={} expr=v2650[1] }
        ?30     = { defs={} expr=v2651[1] }
        ?31     = { defs={} expr=v2652[1] }
        ip      = { defs={0x080483ba,0x080483bf,0x080483c1} expr=0x080483c3[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2659[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2660[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2661[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2662[8]))) 3[32]) }
          value = { defs={} expr=v2677[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2659[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2660[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2661[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2662[8]))) 2[32]) }
          value = { defs={} expr=v2676[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2659[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2660[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2661[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2662[8]))) 1[32]) }
          value = { defs={} expr=v2675[8] }
          flags = { rdonly }
        address = { defs={0x080483ba,0x080483bf} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2659[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2660[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2661[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2662[8]))) }
          value = { defs={} expr=v2674[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f3[32] }
          value = { defs={} expr=v2662[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f2[32] }
          value = { defs={} expr=v2661[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f1[32] }
          value = { defs={} expr=v2660[8] }
          flags = { rdonly }
        address = { defs={0x080483ba} expr=0x080496f0[32] }
          value = { defs={} expr=v2659[8] }
          flags = { rdonly }
0x80483c3:jne    0x080483b0<<Insn>>
    registers:
        ax      = { defs={0x080483ba} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2659[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2660[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2661[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2662[8]))) }
        cx      = { defs={} expr=v2608[32] }
        dx      = { defs={0x080483bf} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2674[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2675[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2676[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2677[8]))) }
        bx      = { defs={} expr=v2610[32] }
        sp      = { defs={} expr=v2611[32] }
        bp      = { defs={} expr=v2612[32] }
        si      = { defs={} expr=v2613[32] }
        di      = { defs={} expr=v2614[32] }
        es      = { defs={} expr=v2615[16] }
        cs      = { defs={} expr=v2616[16] }
        ss      = { defs={} expr=v2617[16] }
        ds      = { defs={} expr=v2618[16] }
        fs      = { defs={} expr=v2619[16] }
        gs      = { defs={} expr=v2620[16] }
        cf      = { defs={0x080483c1} expr=0[1] }
        ?1      = { defs={} expr=v2622[1] }
        pf      = { defs={0x080483bf,0x080483c1} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2674[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2675[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2676[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2677[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2674[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2675[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2676[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2677[8])))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2674[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2675[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2676[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2677[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2674[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2675[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2676[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2677[8]))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2674[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2675[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2676[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2677[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2674[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2675[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2676[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2677[8])))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2674[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2675[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2676[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2677[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2674[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2675[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2676[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2677[8])))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2674[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2675[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2676[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2677[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2674[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2675[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2676[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2677[8])))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2674[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2675[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2676[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2677[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2674[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2675[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2676[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2677[8]))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2674[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2675[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2676[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2677[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2674[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2675[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2676[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2677[8])))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2674[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2675[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2676[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2677[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2674[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2675[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2676[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2677[8])))))))))) }
        ?3      = { defs={} expr=v2624[1] }
        af      = { defs={0x080483c1} expr=v2714[1] }
        ?5      = { defs={} expr=v2626[1] }
        zf      = { defs={0x080483bf,0x080483c1} expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2674[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2675[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2676[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2677[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2674[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2675[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2676[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2677[8]))))) }
        sf      = { defs={0x080483bf,0x080483c1} expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2674[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2675[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2676[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2677[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2674[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2675[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2676[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2677[8]))))) }
        tf      = { defs={} expr=v2629[1] }
        if      = { defs={} expr=v2630[1] }
        df      = { defs={} expr=v2631[1] }
        of      = { defs={0x080483c1} expr=0[1] }
        iopl0   = { defs={} expr=v2633[1] }
        iopl1   = { defs={} expr=v2634[1] }
        nt      = { defs={} expr=v2635[1] }
        ?15     = { defs={} expr=v2636[1] }
        rf      = { defs={} expr=v2637[1] }
        vm      = { defs={} expr=v2638[1] }
        ac      = { defs={} expr=v2639[1] }
        vif     = { defs={} expr=v2640[1] }
        vip     = { defs={} expr=v2641[1] }
        id      = { defs={} expr=v2642[1] }
        ?22     = { defs={} expr=v2643[1] }
        ?23     = { defs={} expr=v2644[1] }
        ?24     = { defs={} expr=v2645[1] }
        ?25     = { defs={} expr=v2646[1] }
        ?26     = { defs={} expr=v2647[1] }
        ?27     = { defs={} expr=v2648[1] }
        ?28     = { defs={} expr=v2649[1] }
        ?29     = { defs={} expr=v2650[1] }
        ?30     = { defs={} expr=v2651[1] }
        ?31     = { defs={} expr=v2652[1] }
        ip      = { defs={0x080483ba,0x080483bf,0x080483c1,0x080483c3} expr=(ite[32] (invert[1] (zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2674[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2675[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2676[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2677[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2674[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2675[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2676[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2677[8])))))) 0x080483b0[32] 0x080483c5[32]) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2659[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2660[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2661[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2662[8]))) 3[32]) }
          value = { defs={} expr=v2677[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2659[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2660[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2661[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2662[8]))) 2[32]) }
          value = { defs={} expr=v2676[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2659[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2660[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2661[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2662[8]))) 1[32]) }
          value = { defs={} expr=v2675[8] }
          flags = { rdonly }
        address = { defs={0x080483ba,0x080483bf} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2659[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2660[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2661[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2662[8]))) }
          value = { defs={} expr=v2674[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f3[32] }
          value = { defs={} expr=v2662[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f2[32] }
          value = { defs={} expr=v2661[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f1[32] }
          value = { defs={} expr=v2660[8] }
          flags = { rdonly }
        address = { defs={0x080483ba} expr=0x080496f0[32] }
          value = { defs={} expr=v2659[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483c5:mov    BYTE PTR ds:[0x080496f4<.bss>], 0x01
    registers:
        ax      = { defs={} expr=v2773[32] }
        cx      = { defs={} expr=v2774[32] }
        dx      = { defs={} expr=v2775[32] }
        bx      = { defs={} expr=v2776[32] }
        sp      = { defs={} expr=v2777[32] }
        bp      = { defs={} expr=v2778[32] }
        si      = { defs={} expr=v2779[32] }
        di      = { defs={} expr=v2780[32] }
        es      = { defs={} expr=v2781[16] }
        cs      = { defs={} expr=v2782[16] }
        ss      = { defs={} expr=v2783[16] }
        ds      = { defs={} expr=v2784[16] }
        fs      = { defs={} expr=v2785[16] }
        gs      = { defs={} expr=v2786[16] }
        cf      = { defs={} expr=v2787[1] }
        ?1      = { defs={} expr=v2788[1] }
        pf      = { defs={} expr=v2789[1] }
        ?3      = { defs={} expr=v2790[1] }
        af      = { defs={} expr=v2791[1] }
        ?5      = { defs={} expr=v2792[1] }
        zf      = { defs={} expr=v2793[1] }
        sf      = { defs={} expr=v2794[1] }
        tf      = { defs={} expr=v2795[1] }
        if      = { defs={} expr=v2796[1] }
        df      = { defs={} expr=v2797[1] }
        of      = { defs={} expr=v2798[1] }
        iopl0   = { defs={} expr=v2799[1] }
        iopl1   = { defs={} expr=v2800[1] }
        nt      = { defs={} expr=v2801[1] }
        ?15     = { defs={} expr=v2802[1] }
        rf      = { defs={} expr=v2803[1] }
        vm      = { defs={} expr=v2804[1] }
        ac      = { defs={} expr=v2805[1] }
        vif     = { defs={} expr=v2806[1] }
        vip     = { defs={} expr=v2807[1] }
        id      = { defs={} expr=v2808[1] }
        ?22     = { defs={} expr=v2809[1] }
        ?23     = { defs={} expr=v2810[1] }
        ?24     = { defs={} expr=v2811[1] }
        ?25     = { defs={} expr=v2812[1] }
        ?26     = { defs={} expr=v2813[1] }
        ?27     = { defs={} expr=v2814[1] }
        ?28     = { defs={} expr=v2815[1] }
        ?29     = { defs={} expr=v2816[1] }
        ?30     = { defs={} expr=v2817[1] }
        ?31     = { defs={} expr=v2818[1] }
        ip      = { defs={0x080483c5} expr=0x080483cc[32] }
    memory:
        address = { defs={0x080483c5} expr=0x080496f4[32] }
          value = { defs={} expr=1[8] }
          flags = { }
    init mem:
0x80483cc:leave  
    registers:
        ax      = { defs={} expr=v2773[32] }
        cx      = { defs={} expr=v2774[32] }
        dx      = { defs={} expr=v2775[32] }
        bx      = { defs={} expr=v2776[32] }
        sp      = { defs={0x080483cc} expr=(add[32] v2778[32] 4[32]) }
        bp      = { defs={0x080483cc} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2832[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2833[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2834[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2835[8]))) }
        si      = { defs={} expr=v2779[32] }
        di      = { defs={} expr=v2780[32] }
        es      = { defs={} expr=v2781[16] }
        cs      = { defs={} expr=v2782[16] }
        ss      = { defs={} expr=v2783[16] }
        ds      = { defs={} expr=v2784[16] }
        fs      = { defs={} expr=v2785[16] }
        gs      = { defs={} expr=v2786[16] }
        cf      = { defs={} expr=v2787[1] }
        ?1      = { defs={} expr=v2788[1] }
        pf      = { defs={} expr=v2789[1] }
        ?3      = { defs={} expr=v2790[1] }
        af      = { defs={} expr=v2791[1] }
        ?5      = { defs={} expr=v2792[1] }
        zf      = { defs={} expr=v2793[1] }
        sf      = { defs={} expr=v2794[1] }
        tf      = { defs={} expr=v2795[1] }
        if      = { defs={} expr=v2796[1] }
        df      = { defs={} expr=v2797[1] }
        of      = { defs={} expr=v2798[1] }
        iopl0   = { defs={} expr=v2799[1] }
        iopl1   = { defs={} expr=v2800[1] }
        nt      = { defs={} expr=v2801[1] }
        ?15     = { defs={} expr=v2802[1] }
        rf      = { defs={} expr=v2803[1] }
        vm      = { defs={} expr=v2804[1] }
        ac      = { defs={} expr=v2805[1] }
        vif     = { defs={} expr=v2806[1] }
        vip     = { defs={} expr=v2807[1] }
        id      = { defs={} expr=v2808[1] }
        ?22     = { defs={} expr=v2809[1] }
        ?23     = { defs={} expr=v2810[1] }
        ?24     = { defs={} expr=v2811[1] }
        ?25     = { defs={} expr=v2812[1] }
        ?26     = { defs={} expr=v2813[1] }
        ?27     = { defs={} expr=v2814[1] }
        ?28     = { defs={} expr=v2815[1] }
        ?29     = { defs={} expr=v2816[1] }
        ?30     = { defs={} expr=v2817[1] }
        ?31     = { defs={} expr=v2818[1] }
        ip      = { defs={0x080483c5,0x080483cc} expr=0x080483cd[32] }
    memory:
        address = { defs={0x080483c5} expr=0x080496f4[32] }
          value = { defs={} expr=1[8] }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v2778[32] 3[32]) }
          value = { defs={} expr=v2835[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v2778[32] 2[32]) }
          value = { defs={} expr=v2834[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v2778[32] 1[32]) }
          value = { defs={} expr=v2833[8] }
          flags = { rdonly }
        address = { defs={0x080483cc} expr=v2778[32] }
          value = { defs={} expr=v2832[8] }
          flags = { rdonly }
0x80483cd:ret    
    registers:
        ax      = { defs={} expr=v2773[32] }
        cx      = { defs={} expr=v2774[32] }
        dx      = { defs={} expr=v2775[32] }
        bx      = { defs={} expr=v2776[32] }
        sp      = { defs={0x080483cc,0x080483cd} expr=(add[32] (add[32] v2778[32] 4[32]) 4[32]) }
        bp      = { defs={0x080483cc} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2832[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2833[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2834[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2835[8]))) }
        si      = { defs={} expr=v2779[32] }
        di      = { defs={} expr=v2780[32] }
        es      = { defs={} expr=v2781[16] }
        cs      = { defs={} expr=v2782[16] }
        ss      = { defs={} expr=v2783[16] }
        ds      = { defs={} expr=v2784[16] }
        fs      = { defs={} expr=v2785[16] }
        gs      = { defs={} expr=v2786[16] }
        cf      = { defs={} expr=v2787[1] }
        ?1      = { defs={} expr=v2788[1] }
        pf      = { defs={} expr=v2789[1] }
        ?3      = { defs={} expr=v2790[1] }
        af      = { defs={} expr=v2791[1] }
        ?5      = { defs={} expr=v2792[1] }
        zf      = { defs={} expr=v2793[1] }
        sf      = { defs={} expr=v2794[1] }
        tf      = { defs={} expr=v2795[1] }
        if      = { defs={} expr=v2796[1] }
        df      = { defs={} expr=v2797[1] }
        of      = { defs={} expr=v2798[1] }
        iopl0   = { defs={} expr=v2799[1] }
        iopl1   = { defs={} expr=v2800[1] }
        nt      = { defs={} expr=v2801[1] }
        ?15     = { defs={} expr=v2802[1] }
        rf      = { defs={} expr=v2803[1] }
        vm      = { defs={} expr=v2804[1] }
        ac      = { defs={} expr=v2805[1] }
        vif     = { defs={} expr=v2806[1] }
        vip     = { defs={} expr=v2807[1] }
        id      = { defs={} expr=v2808[1] }
        ?22     = { defs={} expr=v2809[1] }
        ?23     = { defs={} expr=v2810[1] }
        ?24     = { defs={} expr=v2811[1] }
        ?25     = { defs={} expr=v2812[1] }
        ?26     = { defs={} expr=v2813[1] }
        ?27     = { defs={} expr=v2814[1] }
        ?28     = { defs={} expr=v2815[1] }
        ?29     = { defs={} expr=v2816[1] }
        ?30     = { defs={} expr=v2817[1] }
        ?31     = { defs={} expr=v2818[1] }
        ip      = { defs={0x080483cd} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2850[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2851[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2852[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2853[8]))) }
    memory:
        address = { defs={0x080483c5} expr=0x080496f4[32] }
          value = { defs={} expr=1[8] }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] (add[32] v2778[32] 4[32]) 3[32]) }
          value = { defs={} expr=v2853[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v2778[32] 4[32]) 2[32]) }
          value = { defs={} expr=v2852[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v2778[32] 4[32]) 1[32]) }
          value = { defs={} expr=v2851[8] }
          flags = { rdonly }
        address = { defs={0x080483cc,0x080483cd} expr=(add[32] v2778[32] 4[32]) }
          value = { defs={} expr=v2850[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v2778[32] 3[32]) }
          value = { defs={} expr=v2835[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v2778[32] 2[32]) }
          value = { defs={} expr=v2834[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v2778[32] 1[32]) }
          value = { defs={} expr=v2833[8] }
          flags = { rdonly }
        address = { defs={0x080483cc} expr=v2778[32] }
          value = { defs={} expr=v2832[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483d0:push   ebp
    registers:
        ax      = { defs={} expr=v2908[32] }
        cx      = { defs={} expr=v2909[32] }
        dx      = { defs={} expr=v2910[32] }
        bx      = { defs={} expr=v2911[32] }
        sp      = { defs={0x080483d0} expr=(add[32] v2912[32] -4[32]) }
        bp      = { defs={} expr=v2913[32] }
        si      = { defs={} expr=v2914[32] }
        di      = { defs={} expr=v2915[32] }
        es      = { defs={} expr=v2916[16] }
        cs      = { defs={} expr=v2917[16] }
        ss      = { defs={} expr=v2918[16] }
        ds      = { defs={} expr=v2919[16] }
        fs      = { defs={} expr=v2920[16] }
        gs      = { defs={} expr=v2921[16] }
        cf      = { defs={} expr=v2922[1] }
        ?1      = { defs={} expr=v2923[1] }
        pf      = { defs={} expr=v2924[1] }
        ?3      = { defs={} expr=v2925[1] }
        af      = { defs={} expr=v2926[1] }
        ?5      = { defs={} expr=v2927[1] }
        zf      = { defs={} expr=v2928[1] }
        sf      = { defs={} expr=v2929[1] }
        tf      = { defs={} expr=v2930[1] }
        if      = { defs={} expr=v2931[1] }
        df      = { defs={} expr=v2932[1] }
        of      = { defs={} expr=v2933[1] }
        iopl0   = { defs={} expr=v2934[1] }
        iopl1   = { defs={} expr=v2935[1] }
        nt      = { defs={} expr=v2936[1] }
        ?15     = { defs={} expr=v2937[1] }
        rf      = { defs={} expr=v2938[1] }
        vm      = { defs={} expr=v2939[1] }
        ac      = { defs={} expr=v2940[1] }
        vif     = { defs={} expr=v2941[1] }
        vip     = { defs={} expr=v2942[1] }
        id      = { defs={} expr=v2943[1] }
        ?22     = { defs={} expr=v2944[1] }
        ?23     = { defs={} expr=v2945[1] }
        ?24     = { defs={} expr=v2946[1] }
        ?25     = { defs={} expr=v2947[1] }
        ?26     = { defs={} expr=v2948[1] }
        ?27     = { defs={} expr=v2949[1] }
        ?28     = { defs={} expr=v2950[1] }
        ?29     = { defs={} expr=v2951[1] }
        ?30     = { defs={} expr=v2952[1] }
        ?31     = { defs={} expr=v2953[1] }
        ip      = { defs={0x080483d0} expr=0x080483d1[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2912[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2913[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2912[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2913[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2912[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2913[32]) }
          flags = { }
        address = { defs={0x080483d0} expr=(add[32] v2912[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2913[32]) }
          flags = { }
    init mem:
0x80483d1:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v2908[32] }
        cx      = { defs={} expr=v2909[32] }
        dx      = { defs={} expr=v2910[32] }
        bx      = { defs={} expr=v2911[32] }
        sp      = { defs={0x080483d0} expr=(add[32] v2912[32] -4[32]) }
        bp      = { defs={0x080483d0,0x080483d1} expr=(add[32] v2912[32] -4[32]) }
        si      = { defs={} expr=v2914[32] }
        di      = { defs={} expr=v2915[32] }
        es      = { defs={} expr=v2916[16] }
        cs      = { defs={} expr=v2917[16] }
        ss      = { defs={} expr=v2918[16] }
        ds      = { defs={} expr=v2919[16] }
        fs      = { defs={} expr=v2920[16] }
        gs      = { defs={} expr=v2921[16] }
        cf      = { defs={} expr=v2922[1] }
        ?1      = { defs={} expr=v2923[1] }
        pf      = { defs={} expr=v2924[1] }
        ?3      = { defs={} expr=v2925[1] }
        af      = { defs={} expr=v2926[1] }
        ?5      = { defs={} expr=v2927[1] }
        zf      = { defs={} expr=v2928[1] }
        sf      = { defs={} expr=v2929[1] }
        tf      = { defs={} expr=v2930[1] }
        if      = { defs={} expr=v2931[1] }
        df      = { defs={} expr=v2932[1] }
        of      = { defs={} expr=v2933[1] }
        iopl0   = { defs={} expr=v2934[1] }
        iopl1   = { defs={} expr=v2935[1] }
        nt      = { defs={} expr=v2936[1] }
        ?15     = { defs={} expr=v2937[1] }
        rf      = { defs={} expr=v2938[1] }
        vm      = { defs={} expr=v2939[1] }
        ac      = { defs={} expr=v2940[1] }
        vif     = { defs={} expr=v2941[1] }
        vip     = { defs={} expr=v2942[1] }
        id      = { defs={} expr=v2943[1] }
        ?22     = { defs={} expr=v2944[1] }
        ?23     = { defs={} expr=v2945[1] }
        ?24     = { defs={} expr=v2946[1] }
        ?25     = { defs={} expr=v2947[1] }
        ?26     = { defs={} expr=v2948[1] }
        ?27     = { defs={} expr=v2949[1] }
        ?28     = { defs={} expr=v2950[1] }
        ?29     = { defs={} expr=v2951[1] }
        ?30     = { defs={} expr=v2952[1] }
        ?31     = { defs={} expr=v2953[1] }
        ip      = { defs={0x080483d0,0x080483d1} expr=0x080483d3[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2912[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2913[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2912[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2913[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2912[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2913[32]) }
          flags = { }
        address = { defs={0x080483d0} expr=(add[32] v2912[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2913[32]) }
          flags = { }
    init mem:
0x80483d3:sub    esp, 0x08
    registers:
        ax      = { defs={} expr=v2908[32] }
        cx      = { defs={} expr=v2909[32] }
        dx      = { defs={} expr=v2910[32] }
        bx      = { defs={} expr=v2911[32] }
        sp      = { defs={0x080483d0,0x080483d3} expr=(add[32] (add[32] v2912[32] -4[32]) -8[32]) }
        bp      = { defs={0x080483d0,0x080483d1} expr=(add[32] v2912[32] -4[32]) }
        si      = { defs={} expr=v2914[32] }
        di      = { defs={} expr=v2915[32] }
        es      = { defs={} expr=v2916[16] }
        cs      = { defs={} expr=v2917[16] }
        ss      = { defs={} expr=v2918[16] }
        ds      = { defs={} expr=v2919[16] }
        fs      = { defs={} expr=v2920[16] }
        gs      = { defs={} expr=v2921[16] }
        cf      = { defs={0x080483d0,0x080483d3} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2912[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2912[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v2923[1] }
        pf      = { defs={0x080483d0,0x080483d3} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2912[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2912[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2912[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2912[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2912[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2912[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2912[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2912[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v2925[1] }
        af      = { defs={0x080483d0,0x080483d3} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2912[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2912[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v2927[1] }
        zf      = { defs={0x080483d0,0x080483d3} expr=(zerop[1] (add[32] (add[32] v2912[32] -4[32]) -8[32])) }
        sf      = { defs={0x080483d0,0x080483d3} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v2912[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v2930[1] }
        if      = { defs={} expr=v2931[1] }
        df      = { defs={} expr=v2932[1] }
        of      = { defs={0x080483d0,0x080483d3} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2912[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2912[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2912[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2912[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v2934[1] }
        iopl1   = { defs={} expr=v2935[1] }
        nt      = { defs={} expr=v2936[1] }
        ?15     = { defs={} expr=v2937[1] }
        rf      = { defs={} expr=v2938[1] }
        vm      = { defs={} expr=v2939[1] }
        ac      = { defs={} expr=v2940[1] }
        vif     = { defs={} expr=v2941[1] }
        vip     = { defs={} expr=v2942[1] }
        id      = { defs={} expr=v2943[1] }
        ?22     = { defs={} expr=v2944[1] }
        ?23     = { defs={} expr=v2945[1] }
        ?24     = { defs={} expr=v2946[1] }
        ?25     = { defs={} expr=v2947[1] }
        ?26     = { defs={} expr=v2948[1] }
        ?27     = { defs={} expr=v2949[1] }
        ?28     = { defs={} expr=v2950[1] }
        ?29     = { defs={} expr=v2951[1] }
        ?30     = { defs={} expr=v2952[1] }
        ?31     = { defs={} expr=v2953[1] }
        ip      = { defs={0x080483d0,0x080483d1,0x080483d3} expr=0x080483d6[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2912[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2913[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2912[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2913[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2912[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2913[32]) }
          flags = { }
        address = { defs={0x080483d0} expr=(add[32] v2912[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2913[32]) }
          flags = { }
    init mem:
0x80483d6:mov    eax, DWORD PTR ds:[0x080495f8<.jcr>]
    registers:
        ax      = { defs={0x080483d6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3024[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3025[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3026[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3027[8]))) }
        cx      = { defs={} expr=v2909[32] }
        dx      = { defs={} expr=v2910[32] }
        bx      = { defs={} expr=v2911[32] }
        sp      = { defs={0x080483d0,0x080483d3} expr=(add[32] (add[32] v2912[32] -4[32]) -8[32]) }
        bp      = { defs={0x080483d0,0x080483d1} expr=(add[32] v2912[32] -4[32]) }
        si      = { defs={} expr=v2914[32] }
        di      = { defs={} expr=v2915[32] }
        es      = { defs={} expr=v2916[16] }
        cs      = { defs={} expr=v2917[16] }
        ss      = { defs={} expr=v2918[16] }
        ds      = { defs={} expr=v2919[16] }
        fs      = { defs={} expr=v2920[16] }
        gs      = { defs={} expr=v2921[16] }
        cf      = { defs={0x080483d0,0x080483d3} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2912[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2912[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v2923[1] }
        pf      = { defs={0x080483d0,0x080483d3} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2912[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2912[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2912[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2912[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2912[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2912[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2912[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2912[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v2925[1] }
        af      = { defs={0x080483d0,0x080483d3} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2912[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2912[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v2927[1] }
        zf      = { defs={0x080483d0,0x080483d3} expr=(zerop[1] (add[32] (add[32] v2912[32] -4[32]) -8[32])) }
        sf      = { defs={0x080483d0,0x080483d3} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v2912[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v2930[1] }
        if      = { defs={} expr=v2931[1] }
        df      = { defs={} expr=v2932[1] }
        of      = { defs={0x080483d0,0x080483d3} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2912[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2912[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2912[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2912[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v2934[1] }
        iopl1   = { defs={} expr=v2935[1] }
        nt      = { defs={} expr=v2936[1] }
        ?15     = { defs={} expr=v2937[1] }
        rf      = { defs={} expr=v2938[1] }
        vm      = { defs={} expr=v2939[1] }
        ac      = { defs={} expr=v2940[1] }
        vif     = { defs={} expr=v2941[1] }
        vip     = { defs={} expr=v2942[1] }
        id      = { defs={} expr=v2943[1] }
        ?22     = { defs={} expr=v2944[1] }
        ?23     = { defs={} expr=v2945[1] }
        ?24     = { defs={} expr=v2946[1] }
        ?25     = { defs={} expr=v2947[1] }
        ?26     = { defs={} expr=v2948[1] }
        ?27     = { defs={} expr=v2949[1] }
        ?28     = { defs={} expr=v2950[1] }
        ?29     = { defs={} expr=v2951[1] }
        ?30     = { defs={} expr=v2952[1] }
        ?31     = { defs={} expr=v2953[1] }
        ip      = { defs={0x080483d0,0x080483d1,0x080483d3,0x080483d6} expr=0x080483db[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2912[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2913[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2912[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2913[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2912[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2913[32]) }
          flags = { }
        address = { defs={0x080483d0} expr=(add[32] v2912[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2913[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=0x080495fb[32] }
          value = { defs={} expr=v3027[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495fa[32] }
          value = { defs={} expr=v3026[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495f9[32] }
          value = { defs={} expr=v3025[8] }
          flags = { rdonly }
        address = { defs={0x080483d6} expr=0x080495f8[32] }
          value = { defs={} expr=v3024[8] }
          flags = { rdonly }
0x80483db:test   eax, eax
    registers:
        ax      = { defs={0x080483d6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3024[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3025[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3026[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3027[8]))) }
        cx      = { defs={} expr=v2909[32] }
        dx      = { defs={} expr=v2910[32] }
        bx      = { defs={} expr=v2911[32] }
        sp      = { defs={0x080483d0,0x080483d3} expr=(add[32] (add[32] v2912[32] -4[32]) -8[32]) }
        bp      = { defs={0x080483d0,0x080483d1} expr=(add[32] v2912[32] -4[32]) }
        si      = { defs={} expr=v2914[32] }
        di      = { defs={} expr=v2915[32] }
        es      = { defs={} expr=v2916[16] }
        cs      = { defs={} expr=v2917[16] }
        ss      = { defs={} expr=v2918[16] }
        ds      = { defs={} expr=v2919[16] }
        fs      = { defs={} expr=v2920[16] }
        gs      = { defs={} expr=v2921[16] }
        cf      = { defs={0x080483db} expr=0[1] }
        ?1      = { defs={} expr=v2923[1] }
        pf      = { defs={0x080483d6,0x080483db} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3024[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3025[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3026[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3027[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3024[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3025[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3026[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3027[8])))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3024[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3025[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3026[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3027[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3024[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3025[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3026[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3027[8]))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3024[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3025[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3026[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3027[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3024[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3025[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3026[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3027[8])))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3024[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3025[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3026[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3027[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3024[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3025[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3026[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3027[8])))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3024[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3025[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3026[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3027[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3024[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3025[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3026[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3027[8])))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3024[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3025[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3026[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3027[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3024[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3025[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3026[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3027[8]))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3024[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3025[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3026[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3027[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3024[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3025[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3026[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3027[8])))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3024[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3025[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3026[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3027[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3024[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3025[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3026[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3027[8])))))))))) }
        ?3      = { defs={} expr=v2925[1] }
        af      = { defs={0x080483db} expr=v3064[1] }
        ?5      = { defs={} expr=v2927[1] }
        zf      = { defs={0x080483d6,0x080483db} expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3024[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3025[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3026[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3027[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3024[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3025[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3026[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3027[8]))))) }
        sf      = { defs={0x080483d6,0x080483db} expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3024[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3025[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3026[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3027[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3024[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3025[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3026[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3027[8]))))) }
        tf      = { defs={} expr=v2930[1] }
        if      = { defs={} expr=v2931[1] }
        df      = { defs={} expr=v2932[1] }
        of      = { defs={0x080483db} expr=0[1] }
        iopl0   = { defs={} expr=v2934[1] }
        iopl1   = { defs={} expr=v2935[1] }
        nt      = { defs={} expr=v2936[1] }
        ?15     = { defs={} expr=v2937[1] }
        rf      = { defs={} expr=v2938[1] }
        vm      = { defs={} expr=v2939[1] }
        ac      = { defs={} expr=v2940[1] }
        vif     = { defs={} expr=v2941[1] }
        vip     = { defs={} expr=v2942[1] }
        id      = { defs={} expr=v2943[1] }
        ?22     = { defs={} expr=v2944[1] }
        ?23     = { defs={} expr=v2945[1] }
        ?24     = { defs={} expr=v2946[1] }
        ?25     = { defs={} expr=v2947[1] }
        ?26     = { defs={} expr=v2948[1] }
        ?27     = { defs={} expr=v2949[1] }
        ?28     = { defs={} expr=v2950[1] }
        ?29     = { defs={} expr=v2951[1] }
        ?30     = { defs={} expr=v2952[1] }
        ?31     = { defs={} expr=v2953[1] }
        ip      = { defs={0x080483d0,0x080483d1,0x080483d3,0x080483d6,0x080483db} expr=0x080483dd[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2912[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2913[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2912[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2913[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2912[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2913[32]) }
          flags = { }
        address = { defs={0x080483d0} expr=(add[32] v2912[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2913[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=0x080495fb[32] }
          value = { defs={} expr=v3027[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495fa[32] }
          value = { defs={} expr=v3026[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495f9[32] }
          value = { defs={} expr=v3025[8] }
          flags = { rdonly }
        address = { defs={0x080483d6} expr=0x080495f8[32] }
          value = { defs={} expr=v3024[8] }
          flags = { rdonly }
0x80483dd:je     0x08048400<<Insn>>
    registers:
        ax      = { defs={0x080483d6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3024[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3025[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3026[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3027[8]))) }
        cx      = { defs={} expr=v2909[32] }
        dx      = { defs={} expr=v2910[32] }
        bx      = { defs={} expr=v2911[32] }
        sp      = { defs={0x080483d0,0x080483d3} expr=(add[32] (add[32] v2912[32] -4[32]) -8[32]) }
        bp      = { defs={0x080483d0,0x080483d1} expr=(add[32] v2912[32] -4[32]) }
        si      = { defs={} expr=v2914[32] }
        di      = { defs={} expr=v2915[32] }
        es      = { defs={} expr=v2916[16] }
        cs      = { defs={} expr=v2917[16] }
        ss      = { defs={} expr=v2918[16] }
        ds      = { defs={} expr=v2919[16] }
        fs      = { defs={} expr=v2920[16] }
        gs      = { defs={} expr=v2921[16] }
        cf      = { defs={0x080483db} expr=0[1] }
        ?1      = { defs={} expr=v2923[1] }
        pf      = { defs={0x080483d6,0x080483db} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3024[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3025[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3026[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3027[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3024[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3025[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3026[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3027[8])))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3024[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3025[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3026[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3027[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3024[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3025[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3026[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3027[8]))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3024[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3025[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3026[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3027[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3024[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3025[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3026[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3027[8])))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3024[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3025[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3026[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3027[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3024[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3025[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3026[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3027[8])))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3024[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3025[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3026[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3027[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3024[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3025[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3026[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3027[8])))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3024[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3025[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3026[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3027[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3024[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3025[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3026[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3027[8]))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3024[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3025[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3026[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3027[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3024[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3025[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3026[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3027[8])))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3024[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3025[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3026[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3027[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3024[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3025[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3026[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3027[8])))))))))) }
        ?3      = { defs={} expr=v2925[1] }
        af      = { defs={0x080483db} expr=v3064[1] }
        ?5      = { defs={} expr=v2927[1] }
        zf      = { defs={0x080483d6,0x080483db} expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3024[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3025[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3026[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3027[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3024[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3025[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3026[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3027[8]))))) }
        sf      = { defs={0x080483d6,0x080483db} expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3024[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3025[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3026[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3027[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3024[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3025[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3026[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3027[8]))))) }
        tf      = { defs={} expr=v2930[1] }
        if      = { defs={} expr=v2931[1] }
        df      = { defs={} expr=v2932[1] }
        of      = { defs={0x080483db} expr=0[1] }
        iopl0   = { defs={} expr=v2934[1] }
        iopl1   = { defs={} expr=v2935[1] }
        nt      = { defs={} expr=v2936[1] }
        ?15     = { defs={} expr=v2937[1] }
        rf      = { defs={} expr=v2938[1] }
        vm      = { defs={} expr=v2939[1] }
        ac      = { defs={} expr=v2940[1] }
        vif     = { defs={} expr=v2941[1] }
        vip     = { defs={} expr=v2942[1] }
        id      = { defs={} expr=v2943[1] }
        ?22     = { defs={} expr=v2944[1] }
        ?23     = { defs={} expr=v2945[1] }
        ?24     = { defs={} expr=v2946[1] }
        ?25     = { defs={} expr=v2947[1] }
        ?26     = { defs={} expr=v2948[1] }
        ?27     = { defs={} expr=v2949[1] }
        ?28     = { defs={} expr=v2950[1] }
        ?29     = { defs={} expr=v2951[1] }
        ?30     = { defs={} expr=v2952[1] }
        ?31     = { defs={} expr=v2953[1] }
        ip      = { defs={0x080483d0,0x080483d1,0x080483d3,0x080483d6,0x080483db,0x080483dd} expr=(ite[32] (zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3024[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3025[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3026[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3027[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3024[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3025[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3026[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3027[8]))))) 0x08048400[32] 0x080483df[32]) }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2912[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2913[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2912[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2913[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2912[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2913[32]) }
          flags = { }
        address = { defs={0x080483d0} expr=(add[32] v2912[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2913[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=0x080495fb[32] }
          value = { defs={} expr=v3027[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495fa[32] }
          value = { defs={} expr=v3026[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495f9[32] }
          value = { defs={} expr=v3025[8] }
          flags = { rdonly }
        address = { defs={0x080483d6} expr=0x080495f8[32] }
          value = { defs={} expr=v3024[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483df:mov    eax, 0x00000000
    registers:
        ax      = { defs={0x080483df} expr=0[32] }
        cx      = { defs={} expr=v3123[32] }
        dx      = { defs={} expr=v3124[32] }
        bx      = { defs={} expr=v3125[32] }
        sp      = { defs={} expr=v3126[32] }
        bp      = { defs={} expr=v3127[32] }
        si      = { defs={} expr=v3128[32] }
        di      = { defs={} expr=v3129[32] }
        es      = { defs={} expr=v3130[16] }
        cs      = { defs={} expr=v3131[16] }
        ss      = { defs={} expr=v3132[16] }
        ds      = { defs={} expr=v3133[16] }
        fs      = { defs={} expr=v3134[16] }
        gs      = { defs={} expr=v3135[16] }
        cf      = { defs={} expr=v3136[1] }
        ?1      = { defs={} expr=v3137[1] }
        pf      = { defs={} expr=v3138[1] }
        ?3      = { defs={} expr=v3139[1] }
        af      = { defs={} expr=v3140[1] }
        ?5      = { defs={} expr=v3141[1] }
        zf      = { defs={} expr=v3142[1] }
        sf      = { defs={} expr=v3143[1] }
        tf      = { defs={} expr=v3144[1] }
        if      = { defs={} expr=v3145[1] }
        df      = { defs={} expr=v3146[1] }
        of      = { defs={} expr=v3147[1] }
        iopl0   = { defs={} expr=v3148[1] }
        iopl1   = { defs={} expr=v3149[1] }
        nt      = { defs={} expr=v3150[1] }
        ?15     = { defs={} expr=v3151[1] }
        rf      = { defs={} expr=v3152[1] }
        vm      = { defs={} expr=v3153[1] }
        ac      = { defs={} expr=v3154[1] }
        vif     = { defs={} expr=v3155[1] }
        vip     = { defs={} expr=v3156[1] }
        id      = { defs={} expr=v3157[1] }
        ?22     = { defs={} expr=v3158[1] }
        ?23     = { defs={} expr=v3159[1] }
        ?24     = { defs={} expr=v3160[1] }
        ?25     = { defs={} expr=v3161[1] }
        ?26     = { defs={} expr=v3162[1] }
        ?27     = { defs={} expr=v3163[1] }
        ?28     = { defs={} expr=v3164[1] }
        ?29     = { defs={} expr=v3165[1] }
        ?30     = { defs={} expr=v3166[1] }
        ?31     = { defs={} expr=v3167[1] }
        ip      = { defs={0x080483df} expr=0x080483e4[32] }
    memory:
    init mem:
0x80483e4:test   eax, eax
    registers:
        ax      = { defs={0x080483df} expr=0[32] }
        cx      = { defs={} expr=v3123[32] }
        dx      = { defs={} expr=v3124[32] }
        bx      = { defs={} expr=v3125[32] }
        sp      = { defs={} expr=v3126[32] }
        bp      = { defs={} expr=v3127[32] }
        si      = { defs={} expr=v3128[32] }
        di      = { defs={} expr=v3129[32] }
        es      = { defs={} expr=v3130[16] }
        cs      = { defs={} expr=v3131[16] }
        ss      = { defs={} expr=v3132[16] }
        ds      = { defs={} expr=v3133[16] }
        fs      = { defs={} expr=v3134[16] }
        gs      = { defs={} expr=v3135[16] }
        cf      = { defs={0x080483e4} expr=0[1] }
        ?1      = { defs={} expr=v3137[1] }
        pf      = { defs={0x080483df,0x080483e4} expr=1[1] }
        ?3      = { defs={} expr=v3139[1] }
        af      = { defs={0x080483e4} expr=v3204[1] }
        ?5      = { defs={} expr=v3141[1] }
        zf      = { defs={0x080483df,0x080483e4} expr=1[1] }
        sf      = { defs={0x080483df,0x080483e4} expr=0[1] }
        tf      = { defs={} expr=v3144[1] }
        if      = { defs={} expr=v3145[1] }
        df      = { defs={} expr=v3146[1] }
        of      = { defs={0x080483e4} expr=0[1] }
        iopl0   = { defs={} expr=v3148[1] }
        iopl1   = { defs={} expr=v3149[1] }
        nt      = { defs={} expr=v3150[1] }
        ?15     = { defs={} expr=v3151[1] }
        rf      = { defs={} expr=v3152[1] }
        vm      = { defs={} expr=v3153[1] }
        ac      = { defs={} expr=v3154[1] }
        vif     = { defs={} expr=v3155[1] }
        vip     = { defs={} expr=v3156[1] }
        id      = { defs={} expr=v3157[1] }
        ?22     = { defs={} expr=v3158[1] }
        ?23     = { defs={} expr=v3159[1] }
        ?24     = { defs={} expr=v3160[1] }
        ?25     = { defs={} expr=v3161[1] }
        ?26     = { defs={} expr=v3162[1] }
        ?27     = { defs={} expr=v3163[1] }
        ?28     = { defs={} expr=v3164[1] }
        ?29     = { defs={} expr=v3165[1] }
        ?30     = { defs={} expr=v3166[1] }
        ?31     = { defs={} expr=v3167[1] }
        ip      = { defs={0x080483df,0x080483e4} expr=0x080483e6[32] }
    memory:
    init mem:
0x80483e6:je     0x08048400<<Insn>>
    registers:
        ax      = { defs={0x080483df} expr=0[32] }
        cx      = { defs={} expr=v3123[32] }
        dx      = { defs={} expr=v3124[32] }
        bx      = { defs={} expr=v3125[32] }
        sp      = { defs={} expr=v3126[32] }
        bp      = { defs={} expr=v3127[32] }
        si      = { defs={} expr=v3128[32] }
        di      = { defs={} expr=v3129[32] }
        es      = { defs={} expr=v3130[16] }
        cs      = { defs={} expr=v3131[16] }
        ss      = { defs={} expr=v3132[16] }
        ds      = { defs={} expr=v3133[16] }
        fs      = { defs={} expr=v3134[16] }
        gs      = { defs={} expr=v3135[16] }
        cf      = { defs={0x080483e4} expr=0[1] }
        ?1      = { defs={} expr=v3137[1] }
        pf      = { defs={0x080483df,0x080483e4} expr=1[1] }
        ?3      = { defs={} expr=v3139[1] }
        af      = { defs={0x080483e4} expr=v3204[1] }
        ?5      = { defs={} expr=v3141[1] }
        zf      = { defs={0x080483df,0x080483e4} expr=1[1] }
        sf      = { defs={0x080483df,0x080483e4} expr=0[1] }
        tf      = { defs={} expr=v3144[1] }
        if      = { defs={} expr=v3145[1] }
        df      = { defs={} expr=v3146[1] }
        of      = { defs={0x080483e4} expr=0[1] }
        iopl0   = { defs={} expr=v3148[1] }
        iopl1   = { defs={} expr=v3149[1] }
        nt      = { defs={} expr=v3150[1] }
        ?15     = { defs={} expr=v3151[1] }
        rf      = { defs={} expr=v3152[1] }
        vm      = { defs={} expr=v3153[1] }
        ac      = { defs={} expr=v3154[1] }
        vif     = { defs={} expr=v3155[1] }
        vip     = { defs={} expr=v3156[1] }
        id      = { defs={} expr=v3157[1] }
        ?22     = { defs={} expr=v3158[1] }
        ?23     = { defs={} expr=v3159[1] }
        ?24     = { defs={} expr=v3160[1] }
        ?25     = { defs={} expr=v3161[1] }
        ?26     = { defs={} expr=v3162[1] }
        ?27     = { defs={} expr=v3163[1] }
        ?28     = { defs={} expr=v3164[1] }
        ?29     = { defs={} expr=v3165[1] }
        ?30     = { defs={} expr=v3166[1] }
        ?31     = { defs={} expr=v3167[1] }
        ip      = { defs={0x080483df,0x080483e4,0x080483e6} expr=0x08048400[32] }
    memory:
    init mem:
0x8048400:mov    esp, ebp
    registers:
        ax      = { defs={0x080483df} expr=0[32] }
        cx      = { defs={} expr=v3123[32] }
        dx      = { defs={} expr=v3124[32] }
        bx      = { defs={} expr=v3125[32] }
        sp      = { defs={0x08048400} expr=v3127[32] }
        bp      = { defs={} expr=v3127[32] }
        si      = { defs={} expr=v3128[32] }
        di      = { defs={} expr=v3129[32] }
        es      = { defs={} expr=v3130[16] }
        cs      = { defs={} expr=v3131[16] }
        ss      = { defs={} expr=v3132[16] }
        ds      = { defs={} expr=v3133[16] }
        fs      = { defs={} expr=v3134[16] }
        gs      = { defs={} expr=v3135[16] }
        cf      = { defs={0x080483e4} expr=0[1] }
        ?1      = { defs={} expr=v3137[1] }
        pf      = { defs={0x080483df,0x080483e4} expr=1[1] }
        ?3      = { defs={} expr=v3139[1] }
        af      = { defs={0x080483e4} expr=v3204[1] }
        ?5      = { defs={} expr=v3141[1] }
        zf      = { defs={0x080483df,0x080483e4} expr=1[1] }
        sf      = { defs={0x080483df,0x080483e4} expr=0[1] }
        tf      = { defs={} expr=v3144[1] }
        if      = { defs={} expr=v3145[1] }
        df      = { defs={} expr=v3146[1] }
        of      = { defs={0x080483e4} expr=0[1] }
        iopl0   = { defs={} expr=v3148[1] }
        iopl1   = { defs={} expr=v3149[1] }
        nt      = { defs={} expr=v3150[1] }
        ?15     = { defs={} expr=v3151[1] }
        rf      = { defs={} expr=v3152[1] }
        vm      = { defs={} expr=v3153[1] }
        ac      = { defs={} expr=v3154[1] }
        vif     = { defs={} expr=v3155[1] }
        vip     = { defs={} expr=v3156[1] }
        id      = { defs={} expr=v3157[1] }
        ?22     = { defs={} expr=v3158[1] }
        ?23     = { defs={} expr=v3159[1] }
        ?24     = { defs={} expr=v3160[1] }
        ?25     = { defs={} expr=v3161[1] }
        ?26     = { defs={} expr=v3162[1] }
        ?27     = { defs={} expr=v3163[1] }
        ?28     = { defs={} expr=v3164[1] }
        ?29     = { defs={} expr=v3165[1] }
        ?30     = { defs={} expr=v3166[1] }
        ?31     = { defs={} expr=v3167[1] }
        ip      = { defs={0x080483df,0x080483e4,0x080483e6,0x08048400} expr=0x08048402[32] }
    memory:
    init mem:
0x8048402:pop    ebp
    registers:
        ax      = { defs={0x080483df} expr=0[32] }
        cx      = { defs={} expr=v3123[32] }
        dx      = { defs={} expr=v3124[32] }
        bx      = { defs={} expr=v3125[32] }
        sp      = { defs={0x08048400,0x08048402} expr=(add[32] v3127[32] 4[32]) }
        bp      = { defs={0x08048402} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3227[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3228[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3229[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3230[8]))) }
        si      = { defs={} expr=v3128[32] }
        di      = { defs={} expr=v3129[32] }
        es      = { defs={} expr=v3130[16] }
        cs      = { defs={} expr=v3131[16] }
        ss      = { defs={} expr=v3132[16] }
        ds      = { defs={} expr=v3133[16] }
        fs      = { defs={} expr=v3134[16] }
        gs      = { defs={} expr=v3135[16] }
        cf      = { defs={0x080483e4} expr=0[1] }
        ?1      = { defs={} expr=v3137[1] }
        pf      = { defs={0x080483df,0x080483e4} expr=1[1] }
        ?3      = { defs={} expr=v3139[1] }
        af      = { defs={0x080483e4} expr=v3204[1] }
        ?5      = { defs={} expr=v3141[1] }
        zf      = { defs={0x080483df,0x080483e4} expr=1[1] }
        sf      = { defs={0x080483df,0x080483e4} expr=0[1] }
        tf      = { defs={} expr=v3144[1] }
        if      = { defs={} expr=v3145[1] }
        df      = { defs={} expr=v3146[1] }
        of      = { defs={0x080483e4} expr=0[1] }
        iopl0   = { defs={} expr=v3148[1] }
        iopl1   = { defs={} expr=v3149[1] }
        nt      = { defs={} expr=v3150[1] }
        ?15     = { defs={} expr=v3151[1] }
        rf      = { defs={} expr=v3152[1] }
        vm      = { defs={} expr=v3153[1] }
        ac      = { defs={} expr=v3154[1] }
        vif     = { defs={} expr=v3155[1] }
        vip     = { defs={} expr=v3156[1] }
        id      = { defs={} expr=v3157[1] }
        ?22     = { defs={} expr=v3158[1] }
        ?23     = { defs={} expr=v3159[1] }
        ?24     = { defs={} expr=v3160[1] }
        ?25     = { defs={} expr=v3161[1] }
        ?26     = { defs={} expr=v3162[1] }
        ?27     = { defs={} expr=v3163[1] }
        ?28     = { defs={} expr=v3164[1] }
        ?29     = { defs={} expr=v3165[1] }
        ?30     = { defs={} expr=v3166[1] }
        ?31     = { defs={} expr=v3167[1] }
        ip      = { defs={0x080483df,0x080483e4,0x080483e6,0x08048400,0x08048402} expr=0x08048403[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v3127[32] 3[32]) }
          value = { defs={} expr=v3230[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3127[32] 2[32]) }
          value = { defs={} expr=v3229[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3127[32] 1[32]) }
          value = { defs={} expr=v3228[8] }
          flags = { rdonly }
        address = { defs={0x08048400,0x08048402} expr=v3127[32] }
          value = { defs={} expr=v3227[8] }
          flags = { rdonly }
0x8048403:ret    
    registers:
        ax      = { defs={0x080483df} expr=0[32] }
        cx      = { defs={} expr=v3123[32] }
        dx      = { defs={} expr=v3124[32] }
        bx      = { defs={} expr=v3125[32] }
        sp      = { defs={0x08048400,0x08048402,0x08048403} expr=(add[32] (add[32] v3127[32] 4[32]) 4[32]) }
        bp      = { defs={0x08048402} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3227[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3228[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3229[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3230[8]))) }
        si      = { defs={} expr=v3128[32] }
        di      = { defs={} expr=v3129[32] }
        es      = { defs={} expr=v3130[16] }
        cs      = { defs={} expr=v3131[16] }
        ss      = { defs={} expr=v3132[16] }
        ds      = { defs={} expr=v3133[16] }
        fs      = { defs={} expr=v3134[16] }
        gs      = { defs={} expr=v3135[16] }
        cf      = { defs={0x080483e4} expr=0[1] }
        ?1      = { defs={} expr=v3137[1] }
        pf      = { defs={0x080483df,0x080483e4} expr=1[1] }
        ?3      = { defs={} expr=v3139[1] }
        af      = { defs={0x080483e4} expr=v3204[1] }
        ?5      = { defs={} expr=v3141[1] }
        zf      = { defs={0x080483df,0x080483e4} expr=1[1] }
        sf      = { defs={0x080483df,0x080483e4} expr=0[1] }
        tf      = { defs={} expr=v3144[1] }
        if      = { defs={} expr=v3145[1] }
        df      = { defs={} expr=v3146[1] }
        of      = { defs={0x080483e4} expr=0[1] }
        iopl0   = { defs={} expr=v3148[1] }
        iopl1   = { defs={} expr=v3149[1] }
        nt      = { defs={} expr=v3150[1] }
        ?15     = { defs={} expr=v3151[1] }
        rf      = { defs={} expr=v3152[1] }
        vm      = { defs={} expr=v3153[1] }
        ac      = { defs={} expr=v3154[1] }
        vif     = { defs={} expr=v3155[1] }
        vip     = { defs={} expr=v3156[1] }
        id      = { defs={} expr=v3157[1] }
        ?22     = { defs={} expr=v3158[1] }
        ?23     = { defs={} expr=v3159[1] }
        ?24     = { defs={} expr=v3160[1] }
        ?25     = { defs={} expr=v3161[1] }
        ?26     = { defs={} expr=v3162[1] }
        ?27     = { defs={} expr=v3163[1] }
        ?28     = { defs={} expr=v3164[1] }
        ?29     = { defs={} expr=v3165[1] }
        ?30     = { defs={} expr=v3166[1] }
        ?31     = { defs={} expr=v3167[1] }
        ip      = { defs={0x08048403} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3244[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3245[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3246[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3247[8]))) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v3127[32] 4[32]) 3[32]) }
          value = { defs={} expr=v3247[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v3127[32] 4[32]) 2[32]) }
          value = { defs={} expr=v3246[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v3127[32] 4[32]) 1[32]) }
          value = { defs={} expr=v3245[8] }
          flags = { rdonly }
        address = { defs={0x08048400,0x08048402,0x08048403} expr=(add[32] v3127[32] 4[32]) }
          value = { defs={} expr=v3244[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3127[32] 3[32]) }
          value = { defs={} expr=v3230[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3127[32] 2[32]) }
          value = { defs={} expr=v3229[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3127[32] 1[32]) }
          value = { defs={} expr=v3228[8] }
          flags = { rdonly }
        address = { defs={0x08048400,0x08048402} expr=v3127[32] }
          value = { defs={} expr=v3227[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483e8:mov    DWORD PTR ss:[esp], 0x080495f8<.jcr>
    registers:
        ax      = { defs={} expr=v3302[32] }
        cx      = { defs={} expr=v3303[32] }
        dx      = { defs={} expr=v3304[32] }
        bx      = { defs={} expr=v3305[32] }
        sp      = { defs={} expr=v3306[32] }
        bp      = { defs={} expr=v3307[32] }
        si      = { defs={} expr=v3308[32] }
        di      = { defs={} expr=v3309[32] }
        es      = { defs={} expr=v3310[16] }
        cs      = { defs={} expr=v3311[16] }
        ss      = { defs={} expr=v3312[16] }
        ds      = { defs={} expr=v3313[16] }
        fs      = { defs={} expr=v3314[16] }
        gs      = { defs={} expr=v3315[16] }
        cf      = { defs={} expr=v3316[1] }
        ?1      = { defs={} expr=v3317[1] }
        pf      = { defs={} expr=v3318[1] }
        ?3      = { defs={} expr=v3319[1] }
        af      = { defs={} expr=v3320[1] }
        ?5      = { defs={} expr=v3321[1] }
        zf      = { defs={} expr=v3322[1] }
        sf      = { defs={} expr=v3323[1] }
        tf      = { defs={} expr=v3324[1] }
        if      = { defs={} expr=v3325[1] }
        df      = { defs={} expr=v3326[1] }
        of      = { defs={} expr=v3327[1] }
        iopl0   = { defs={} expr=v3328[1] }
        iopl1   = { defs={} expr=v3329[1] }
        nt      = { defs={} expr=v3330[1] }
        ?15     = { defs={} expr=v3331[1] }
        rf      = { defs={} expr=v3332[1] }
        vm      = { defs={} expr=v3333[1] }
        ac      = { defs={} expr=v3334[1] }
        vif     = { defs={} expr=v3335[1] }
        vip     = { defs={} expr=v3336[1] }
        id      = { defs={} expr=v3337[1] }
        ?22     = { defs={} expr=v3338[1] }
        ?23     = { defs={} expr=v3339[1] }
        ?24     = { defs={} expr=v3340[1] }
        ?25     = { defs={} expr=v3341[1] }
        ?26     = { defs={} expr=v3342[1] }
        ?27     = { defs={} expr=v3343[1] }
        ?28     = { defs={} expr=v3344[1] }
        ?29     = { defs={} expr=v3345[1] }
        ?30     = { defs={} expr=v3346[1] }
        ?31     = { defs={} expr=v3347[1] }
        ip      = { defs={0x080483e8} expr=0x080483ef[32] }
    memory:
        address = { defs={} expr=(add[32] v3306[32] 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] v3306[32] 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] v3306[32] 1[32]) }
          value = { defs={} expr=-107[8] }
          flags = { }
        address = { defs={0x080483e8} expr=v3306[32] }
          value = { defs={} expr=-8[8] }
          flags = { }
    init mem:
0x80483ef:call   0x00000000
    registers:
        ax      = { defs={} expr=v3302[32] }
        cx      = { defs={} expr=v3303[32] }
        dx      = { defs={} expr=v3304[32] }
        bx      = { defs={} expr=v3305[32] }
        sp      = { defs={0x080483ef} expr=(add[32] v3306[32] -4[32]) }
        bp      = { defs={} expr=v3307[32] }
        si      = { defs={} expr=v3308[32] }
        di      = { defs={} expr=v3309[32] }
        es      = { defs={} expr=v3310[16] }
        cs      = { defs={} expr=v3311[16] }
        ss      = { defs={} expr=v3312[16] }
        ds      = { defs={} expr=v3313[16] }
        fs      = { defs={} expr=v3314[16] }
        gs      = { defs={} expr=v3315[16] }
        cf      = { defs={} expr=v3316[1] }
        ?1      = { defs={} expr=v3317[1] }
        pf      = { defs={} expr=v3318[1] }
        ?3      = { defs={} expr=v3319[1] }
        af      = { defs={} expr=v3320[1] }
        ?5      = { defs={} expr=v3321[1] }
        zf      = { defs={} expr=v3322[1] }
        sf      = { defs={} expr=v3323[1] }
        tf      = { defs={} expr=v3324[1] }
        if      = { defs={} expr=v3325[1] }
        df      = { defs={} expr=v3326[1] }
        of      = { defs={} expr=v3327[1] }
        iopl0   = { defs={} expr=v3328[1] }
        iopl1   = { defs={} expr=v3329[1] }
        nt      = { defs={} expr=v3330[1] }
        ?15     = { defs={} expr=v3331[1] }
        rf      = { defs={} expr=v3332[1] }
        vm      = { defs={} expr=v3333[1] }
        ac      = { defs={} expr=v3334[1] }
        vif     = { defs={} expr=v3335[1] }
        vip     = { defs={} expr=v3336[1] }
        id      = { defs={} expr=v3337[1] }
        ?22     = { defs={} expr=v3338[1] }
        ?23     = { defs={} expr=v3339[1] }
        ?24     = { defs={} expr=v3340[1] }
        ?25     = { defs={} expr=v3341[1] }
        ?26     = { defs={} expr=v3342[1] }
        ?27     = { defs={} expr=v3343[1] }
        ?28     = { defs={} expr=v3344[1] }
        ?29     = { defs={} expr=v3345[1] }
        ?30     = { defs={} expr=v3346[1] }
        ?31     = { defs={} expr=v3347[1] }
        ip      = { defs={0x080483ef} expr=0[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3306[32] -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3306[32] -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3306[32] -4[32]) 1[32]) }
          value = { defs={} expr=-125[8] }
          flags = { }
        address = { defs={0x080483ef} expr=(add[32] v3306[32] -4[32]) }
          value = { defs={} expr=-12[8] }
          flags = { }
        address = { defs={} expr=(add[32] v3306[32] 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] v3306[32] 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] v3306[32] 1[32]) }
          value = { defs={} expr=-107[8] }
          flags = { }
        address = { defs={0x080483e8} expr=v3306[32] }
          value = { defs={} expr=-8[8] }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483f4:lea    esi, [esi + 0x00000000]
    registers:
        ax      = { defs={} expr=v3409[32] }
        cx      = { defs={} expr=v3410[32] }
        dx      = { defs={} expr=v3411[32] }
        bx      = { defs={} expr=v3412[32] }
        sp      = { defs={} expr=v3413[32] }
        bp      = { defs={} expr=v3414[32] }
        si      = { defs={0x080483f4} expr=v3415[32] }
        di      = { defs={} expr=v3416[32] }
        es      = { defs={} expr=v3417[16] }
        cs      = { defs={} expr=v3418[16] }
        ss      = { defs={} expr=v3419[16] }
        ds      = { defs={} expr=v3420[16] }
        fs      = { defs={} expr=v3421[16] }
        gs      = { defs={} expr=v3422[16] }
        cf      = { defs={} expr=v3423[1] }
        ?1      = { defs={} expr=v3424[1] }
        pf      = { defs={} expr=v3425[1] }
        ?3      = { defs={} expr=v3426[1] }
        af      = { defs={} expr=v3427[1] }
        ?5      = { defs={} expr=v3428[1] }
        zf      = { defs={} expr=v3429[1] }
        sf      = { defs={} expr=v3430[1] }
        tf      = { defs={} expr=v3431[1] }
        if      = { defs={} expr=v3432[1] }
        df      = { defs={} expr=v3433[1] }
        of      = { defs={} expr=v3434[1] }
        iopl0   = { defs={} expr=v3435[1] }
        iopl1   = { defs={} expr=v3436[1] }
        nt      = { defs={} expr=v3437[1] }
        ?15     = { defs={} expr=v3438[1] }
        rf      = { defs={} expr=v3439[1] }
        vm      = { defs={} expr=v3440[1] }
        ac      = { defs={} expr=v3441[1] }
        vif     = { defs={} expr=v3442[1] }
        vip     = { defs={} expr=v3443[1] }
        id      = { defs={} expr=v3444[1] }
        ?22     = { defs={} expr=v3445[1] }
        ?23     = { defs={} expr=v3446[1] }
        ?24     = { defs={} expr=v3447[1] }
        ?25     = { defs={} expr=v3448[1] }
        ?26     = { defs={} expr=v3449[1] }
        ?27     = { defs={} expr=v3450[1] }
        ?28     = { defs={} expr=v3451[1] }
        ?29     = { defs={} expr=v3452[1] }
        ?30     = { defs={} expr=v3453[1] }
        ?31     = { defs={} expr=v3454[1] }
        ip      = { defs={0x080483f4} expr=0x080483fa[32] }
    memory:
    init mem:
0x80483fa:lea    edi, [edi + 0x00000000]
    registers:
        ax      = { defs={} expr=v3409[32] }
        cx      = { defs={} expr=v3410[32] }
        dx      = { defs={} expr=v3411[32] }
        bx      = { defs={} expr=v3412[32] }
        sp      = { defs={} expr=v3413[32] }
        bp      = { defs={} expr=v3414[32] }
        si      = { defs={0x080483f4} expr=v3415[32] }
        di      = { defs={0x080483fa} expr=v3416[32] }
        es      = { defs={} expr=v3417[16] }
        cs      = { defs={} expr=v3418[16] }
        ss      = { defs={} expr=v3419[16] }
        ds      = { defs={} expr=v3420[16] }
        fs      = { defs={} expr=v3421[16] }
        gs      = { defs={} expr=v3422[16] }
        cf      = { defs={} expr=v3423[1] }
        ?1      = { defs={} expr=v3424[1] }
        pf      = { defs={} expr=v3425[1] }
        ?3      = { defs={} expr=v3426[1] }
        af      = { defs={} expr=v3427[1] }
        ?5      = { defs={} expr=v3428[1] }
        zf      = { defs={} expr=v3429[1] }
        sf      = { defs={} expr=v3430[1] }
        tf      = { defs={} expr=v3431[1] }
        if      = { defs={} expr=v3432[1] }
        df      = { defs={} expr=v3433[1] }
        of      = { defs={} expr=v3434[1] }
        iopl0   = { defs={} expr=v3435[1] }
        iopl1   = { defs={} expr=v3436[1] }
        nt      = { defs={} expr=v3437[1] }
        ?15     = { defs={} expr=v3438[1] }
        rf      = { defs={} expr=v3439[1] }
        vm      = { defs={} expr=v3440[1] }
        ac      = { defs={} expr=v3441[1] }
        vif     = { defs={} expr=v3442[1] }
        vip     = { defs={} expr=v3443[1] }
        id      = { defs={} expr=v3444[1] }
        ?22     = { defs={} expr=v3445[1] }
        ?23     = { defs={} expr=v3446[1] }
        ?24     = { defs={} expr=v3447[1] }
        ?25     = { defs={} expr=v3448[1] }
        ?26     = { defs={} expr=v3449[1] }
        ?27     = { defs={} expr=v3450[1] }
        ?28     = { defs={} expr=v3451[1] }
        ?29     = { defs={} expr=v3452[1] }
        ?30     = { defs={} expr=v3453[1] }
        ?31     = { defs={} expr=v3454[1] }
        ip      = { defs={0x080483f4,0x080483fa} expr=0x08048400[32] }
    memory:
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048410:push   ebp
    registers:
        ax      = { defs={} expr=v3516[32] }
        cx      = { defs={} expr=v3517[32] }
        dx      = { defs={} expr=v3518[32] }
        bx      = { defs={} expr=v3519[32] }
        sp      = { defs={0x08048410} expr=(add[32] v3520[32] -4[32]) }
        bp      = { defs={} expr=v3521[32] }
        si      = { defs={} expr=v3522[32] }
        di      = { defs={} expr=v3523[32] }
        es      = { defs={} expr=v3524[16] }
        cs      = { defs={} expr=v3525[16] }
        ss      = { defs={} expr=v3526[16] }
        ds      = { defs={} expr=v3527[16] }
        fs      = { defs={} expr=v3528[16] }
        gs      = { defs={} expr=v3529[16] }
        cf      = { defs={} expr=v3530[1] }
        ?1      = { defs={} expr=v3531[1] }
        pf      = { defs={} expr=v3532[1] }
        ?3      = { defs={} expr=v3533[1] }
        af      = { defs={} expr=v3534[1] }
        ?5      = { defs={} expr=v3535[1] }
        zf      = { defs={} expr=v3536[1] }
        sf      = { defs={} expr=v3537[1] }
        tf      = { defs={} expr=v3538[1] }
        if      = { defs={} expr=v3539[1] }
        df      = { defs={} expr=v3540[1] }
        of      = { defs={} expr=v3541[1] }
        iopl0   = { defs={} expr=v3542[1] }
        iopl1   = { defs={} expr=v3543[1] }
        nt      = { defs={} expr=v3544[1] }
        ?15     = { defs={} expr=v3545[1] }
        rf      = { defs={} expr=v3546[1] }
        vm      = { defs={} expr=v3547[1] }
        ac      = { defs={} expr=v3548[1] }
        vif     = { defs={} expr=v3549[1] }
        vip     = { defs={} expr=v3550[1] }
        id      = { defs={} expr=v3551[1] }
        ?22     = { defs={} expr=v3552[1] }
        ?23     = { defs={} expr=v3553[1] }
        ?24     = { defs={} expr=v3554[1] }
        ?25     = { defs={} expr=v3555[1] }
        ?26     = { defs={} expr=v3556[1] }
        ?27     = { defs={} expr=v3557[1] }
        ?28     = { defs={} expr=v3558[1] }
        ?29     = { defs={} expr=v3559[1] }
        ?30     = { defs={} expr=v3560[1] }
        ?31     = { defs={} expr=v3561[1] }
        ip      = { defs={0x08048410} expr=0x08048411[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3520[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3521[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3520[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3521[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3520[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3521[32]) }
          flags = { }
        address = { defs={0x08048410} expr=(add[32] v3520[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3521[32]) }
          flags = { }
    init mem:
0x8048411:mov    edx, 0x08048480<handler>
    registers:
        ax      = { defs={} expr=v3516[32] }
        cx      = { defs={} expr=v3517[32] }
        dx      = { defs={0x08048411} expr=0x08048480[32] }
        bx      = { defs={} expr=v3519[32] }
        sp      = { defs={0x08048410} expr=(add[32] v3520[32] -4[32]) }
        bp      = { defs={} expr=v3521[32] }
        si      = { defs={} expr=v3522[32] }
        di      = { defs={} expr=v3523[32] }
        es      = { defs={} expr=v3524[16] }
        cs      = { defs={} expr=v3525[16] }
        ss      = { defs={} expr=v3526[16] }
        ds      = { defs={} expr=v3527[16] }
        fs      = { defs={} expr=v3528[16] }
        gs      = { defs={} expr=v3529[16] }
        cf      = { defs={} expr=v3530[1] }
        ?1      = { defs={} expr=v3531[1] }
        pf      = { defs={} expr=v3532[1] }
        ?3      = { defs={} expr=v3533[1] }
        af      = { defs={} expr=v3534[1] }
        ?5      = { defs={} expr=v3535[1] }
        zf      = { defs={} expr=v3536[1] }
        sf      = { defs={} expr=v3537[1] }
        tf      = { defs={} expr=v3538[1] }
        if      = { defs={} expr=v3539[1] }
        df      = { defs={} expr=v3540[1] }
        of      = { defs={} expr=v3541[1] }
        iopl0   = { defs={} expr=v3542[1] }
        iopl1   = { defs={} expr=v3543[1] }
        nt      = { defs={} expr=v3544[1] }
        ?15     = { defs={} expr=v3545[1] }
        rf      = { defs={} expr=v3546[1] }
        vm      = { defs={} expr=v3547[1] }
        ac      = { defs={} expr=v3548[1] }
        vif     = { defs={} expr=v3549[1] }
        vip     = { defs={} expr=v3550[1] }
        id      = { defs={} expr=v3551[1] }
        ?22     = { defs={} expr=v3552[1] }
        ?23     = { defs={} expr=v3553[1] }
        ?24     = { defs={} expr=v3554[1] }
        ?25     = { defs={} expr=v3555[1] }
        ?26     = { defs={} expr=v3556[1] }
        ?27     = { defs={} expr=v3557[1] }
        ?28     = { defs={} expr=v3558[1] }
        ?29     = { defs={} expr=v3559[1] }
        ?30     = { defs={} expr=v3560[1] }
        ?31     = { defs={} expr=v3561[1] }
        ip      = { defs={0x08048410,0x08048411} expr=0x08048416[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3520[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3521[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3520[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3521[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3520[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3521[32]) }
          flags = { }
        address = { defs={0x08048410} expr=(add[32] v3520[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3521[32]) }
          flags = { }
    init mem:
0x8048416:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v3516[32] }
        cx      = { defs={} expr=v3517[32] }
        dx      = { defs={0x08048411} expr=0x08048480[32] }
        bx      = { defs={} expr=v3519[32] }
        sp      = { defs={0x08048410} expr=(add[32] v3520[32] -4[32]) }
        bp      = { defs={0x08048410,0x08048416} expr=(add[32] v3520[32] -4[32]) }
        si      = { defs={} expr=v3522[32] }
        di      = { defs={} expr=v3523[32] }
        es      = { defs={} expr=v3524[16] }
        cs      = { defs={} expr=v3525[16] }
        ss      = { defs={} expr=v3526[16] }
        ds      = { defs={} expr=v3527[16] }
        fs      = { defs={} expr=v3528[16] }
        gs      = { defs={} expr=v3529[16] }
        cf      = { defs={} expr=v3530[1] }
        ?1      = { defs={} expr=v3531[1] }
        pf      = { defs={} expr=v3532[1] }
        ?3      = { defs={} expr=v3533[1] }
        af      = { defs={} expr=v3534[1] }
        ?5      = { defs={} expr=v3535[1] }
        zf      = { defs={} expr=v3536[1] }
        sf      = { defs={} expr=v3537[1] }
        tf      = { defs={} expr=v3538[1] }
        if      = { defs={} expr=v3539[1] }
        df      = { defs={} expr=v3540[1] }
        of      = { defs={} expr=v3541[1] }
        iopl0   = { defs={} expr=v3542[1] }
        iopl1   = { defs={} expr=v3543[1] }
        nt      = { defs={} expr=v3544[1] }
        ?15     = { defs={} expr=v3545[1] }
        rf      = { defs={} expr=v3546[1] }
        vm      = { defs={} expr=v3547[1] }
        ac      = { defs={} expr=v3548[1] }
        vif     = { defs={} expr=v3549[1] }
        vip     = { defs={} expr=v3550[1] }
        id      = { defs={} expr=v3551[1] }
        ?22     = { defs={} expr=v3552[1] }
        ?23     = { defs={} expr=v3553[1] }
        ?24     = { defs={} expr=v3554[1] }
        ?25     = { defs={} expr=v3555[1] }
        ?26     = { defs={} expr=v3556[1] }
        ?27     = { defs={} expr=v3557[1] }
        ?28     = { defs={} expr=v3558[1] }
        ?29     = { defs={} expr=v3559[1] }
        ?30     = { defs={} expr=v3560[1] }
        ?31     = { defs={} expr=v3561[1] }
        ip      = { defs={0x08048410,0x08048411,0x08048416} expr=0x08048418[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3520[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3521[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3520[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3521[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3520[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3521[32]) }
          flags = { }
        address = { defs={0x08048410} expr=(add[32] v3520[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3521[32]) }
          flags = { }
    init mem:
0x8048418:sub    esp, 0x08
    registers:
        ax      = { defs={} expr=v3516[32] }
        cx      = { defs={} expr=v3517[32] }
        dx      = { defs={0x08048411} expr=0x08048480[32] }
        bx      = { defs={} expr=v3519[32] }
        sp      = { defs={0x08048410,0x08048418} expr=(add[32] (add[32] v3520[32] -4[32]) -8[32]) }
        bp      = { defs={0x08048410,0x08048416} expr=(add[32] v3520[32] -4[32]) }
        si      = { defs={} expr=v3522[32] }
        di      = { defs={} expr=v3523[32] }
        es      = { defs={} expr=v3524[16] }
        cs      = { defs={} expr=v3525[16] }
        ss      = { defs={} expr=v3526[16] }
        ds      = { defs={} expr=v3527[16] }
        fs      = { defs={} expr=v3528[16] }
        gs      = { defs={} expr=v3529[16] }
        cf      = { defs={0x08048410,0x08048418} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3520[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3520[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v3531[1] }
        pf      = { defs={0x08048410,0x08048418} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3520[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3520[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v3533[1] }
        af      = { defs={0x08048410,0x08048418} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3520[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3520[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v3535[1] }
        zf      = { defs={0x08048410,0x08048418} expr=(zerop[1] (add[32] (add[32] v3520[32] -4[32]) -8[32])) }
        sf      = { defs={0x08048410,0x08048418} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v3520[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v3538[1] }
        if      = { defs={} expr=v3539[1] }
        df      = { defs={} expr=v3540[1] }
        of      = { defs={0x08048410,0x08048418} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3520[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3520[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3520[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3520[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v3542[1] }
        iopl1   = { defs={} expr=v3543[1] }
        nt      = { defs={} expr=v3544[1] }
        ?15     = { defs={} expr=v3545[1] }
        rf      = { defs={} expr=v3546[1] }
        vm      = { defs={} expr=v3547[1] }
        ac      = { defs={} expr=v3548[1] }
        vif     = { defs={} expr=v3549[1] }
        vip     = { defs={} expr=v3550[1] }
        id      = { defs={} expr=v3551[1] }
        ?22     = { defs={} expr=v3552[1] }
        ?23     = { defs={} expr=v3553[1] }
        ?24     = { defs={} expr=v3554[1] }
        ?25     = { defs={} expr=v3555[1] }
        ?26     = { defs={} expr=v3556[1] }
        ?27     = { defs={} expr=v3557[1] }
        ?28     = { defs={} expr=v3558[1] }
        ?29     = { defs={} expr=v3559[1] }
        ?30     = { defs={} expr=v3560[1] }
        ?31     = { defs={} expr=v3561[1] }
        ip      = { defs={0x08048410,0x08048411,0x08048416,0x08048418} expr=0x0804841b[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3520[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3521[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3520[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3521[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3520[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3521[32]) }
          flags = { }
        address = { defs={0x08048410} expr=(add[32] v3520[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3521[32]) }
          flags = { }
    init mem:
0x804841b:and    esp, 0xf0<-0x10>
    registers:
        ax      = { defs={} expr=v3516[32] }
        cx      = { defs={} expr=v3517[32] }
        dx      = { defs={0x08048411} expr=0x08048480[32] }
        bx      = { defs={} expr=v3519[32] }
        sp      = { defs={0x08048410,0x08048418,0x0804841b} expr=(bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32]) }
        bp      = { defs={0x08048410,0x08048416} expr=(add[32] v3520[32] -4[32]) }
        si      = { defs={} expr=v3522[32] }
        di      = { defs={} expr=v3523[32] }
        es      = { defs={} expr=v3524[16] }
        cs      = { defs={} expr=v3525[16] }
        ss      = { defs={} expr=v3526[16] }
        ds      = { defs={} expr=v3527[16] }
        fs      = { defs={} expr=v3528[16] }
        gs      = { defs={} expr=v3529[16] }
        cf      = { defs={0x0804841b} expr=0[1] }
        ?1      = { defs={} expr=v3531[1] }
        pf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v3533[1] }
        af      = { defs={0x0804841b} expr=v3662[1] }
        ?5      = { defs={} expr=v3535[1] }
        zf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(zerop[1] (bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32])) }
        sf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32])) }
        tf      = { defs={} expr=v3538[1] }
        if      = { defs={} expr=v3539[1] }
        df      = { defs={} expr=v3540[1] }
        of      = { defs={0x0804841b} expr=0[1] }
        iopl0   = { defs={} expr=v3542[1] }
        iopl1   = { defs={} expr=v3543[1] }
        nt      = { defs={} expr=v3544[1] }
        ?15     = { defs={} expr=v3545[1] }
        rf      = { defs={} expr=v3546[1] }
        vm      = { defs={} expr=v3547[1] }
        ac      = { defs={} expr=v3548[1] }
        vif     = { defs={} expr=v3549[1] }
        vip     = { defs={} expr=v3550[1] }
        id      = { defs={} expr=v3551[1] }
        ?22     = { defs={} expr=v3552[1] }
        ?23     = { defs={} expr=v3553[1] }
        ?24     = { defs={} expr=v3554[1] }
        ?25     = { defs={} expr=v3555[1] }
        ?26     = { defs={} expr=v3556[1] }
        ?27     = { defs={} expr=v3557[1] }
        ?28     = { defs={} expr=v3558[1] }
        ?29     = { defs={} expr=v3559[1] }
        ?30     = { defs={} expr=v3560[1] }
        ?31     = { defs={} expr=v3561[1] }
        ip      = { defs={0x08048410,0x08048411,0x08048416,0x08048418,0x0804841b} expr=0x0804841e[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3520[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3521[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3520[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3521[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3520[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3521[32]) }
          flags = { }
        address = { defs={0x08048410} expr=(add[32] v3520[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3521[32]) }
          flags = { }
    init mem:
0x804841e:mov    DWORD PTR ss:[esp + 0x04], edx
    registers:
        ax      = { defs={} expr=v3516[32] }
        cx      = { defs={} expr=v3517[32] }
        dx      = { defs={0x08048411} expr=0x08048480[32] }
        bx      = { defs={} expr=v3519[32] }
        sp      = { defs={0x08048410,0x08048418,0x0804841b} expr=(bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32]) }
        bp      = { defs={0x08048410,0x08048416} expr=(add[32] v3520[32] -4[32]) }
        si      = { defs={} expr=v3522[32] }
        di      = { defs={} expr=v3523[32] }
        es      = { defs={} expr=v3524[16] }
        cs      = { defs={} expr=v3525[16] }
        ss      = { defs={} expr=v3526[16] }
        ds      = { defs={} expr=v3527[16] }
        fs      = { defs={} expr=v3528[16] }
        gs      = { defs={} expr=v3529[16] }
        cf      = { defs={0x0804841b} expr=0[1] }
        ?1      = { defs={} expr=v3531[1] }
        pf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v3533[1] }
        af      = { defs={0x0804841b} expr=v3662[1] }
        ?5      = { defs={} expr=v3535[1] }
        zf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(zerop[1] (bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32])) }
        sf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32])) }
        tf      = { defs={} expr=v3538[1] }
        if      = { defs={} expr=v3539[1] }
        df      = { defs={} expr=v3540[1] }
        of      = { defs={0x0804841b} expr=0[1] }
        iopl0   = { defs={} expr=v3542[1] }
        iopl1   = { defs={} expr=v3543[1] }
        nt      = { defs={} expr=v3544[1] }
        ?15     = { defs={} expr=v3545[1] }
        rf      = { defs={} expr=v3546[1] }
        vm      = { defs={} expr=v3547[1] }
        ac      = { defs={} expr=v3548[1] }
        vif     = { defs={} expr=v3549[1] }
        vip     = { defs={} expr=v3550[1] }
        id      = { defs={} expr=v3551[1] }
        ?22     = { defs={} expr=v3552[1] }
        ?23     = { defs={} expr=v3553[1] }
        ?24     = { defs={} expr=v3554[1] }
        ?25     = { defs={} expr=v3555[1] }
        ?26     = { defs={} expr=v3556[1] }
        ?27     = { defs={} expr=v3557[1] }
        ?28     = { defs={} expr=v3558[1] }
        ?29     = { defs={} expr=v3559[1] }
        ?30     = { defs={} expr=v3560[1] }
        ?31     = { defs={} expr=v3561[1] }
        ip      = { defs={0x08048410,0x08048411,0x08048416,0x08048418,0x0804841b,0x0804841e} expr=0x08048422[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32]) 4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32]) 4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32]) 4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x08048410,0x08048418,0x0804841b,0x0804841e} expr=(add[32] (bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32]) 4[32]) }
          value = { defs={} expr=-128[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3520[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3521[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3520[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3521[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3520[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3521[32]) }
          flags = { }
        address = { defs={0x08048410} expr=(add[32] v3520[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3521[32]) }
          flags = { }
    init mem:
0x8048422:mov    DWORD PTR ss:[esp], 0x0000000a
    registers:
        ax      = { defs={} expr=v3516[32] }
        cx      = { defs={} expr=v3517[32] }
        dx      = { defs={0x08048411} expr=0x08048480[32] }
        bx      = { defs={} expr=v3519[32] }
        sp      = { defs={0x08048410,0x08048418,0x0804841b} expr=(bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32]) }
        bp      = { defs={0x08048410,0x08048416} expr=(add[32] v3520[32] -4[32]) }
        si      = { defs={} expr=v3522[32] }
        di      = { defs={} expr=v3523[32] }
        es      = { defs={} expr=v3524[16] }
        cs      = { defs={} expr=v3525[16] }
        ss      = { defs={} expr=v3526[16] }
        ds      = { defs={} expr=v3527[16] }
        fs      = { defs={} expr=v3528[16] }
        gs      = { defs={} expr=v3529[16] }
        cf      = { defs={0x0804841b} expr=0[1] }
        ?1      = { defs={} expr=v3531[1] }
        pf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v3533[1] }
        af      = { defs={0x0804841b} expr=v3662[1] }
        ?5      = { defs={} expr=v3535[1] }
        zf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(zerop[1] (bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32])) }
        sf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32])) }
        tf      = { defs={} expr=v3538[1] }
        if      = { defs={} expr=v3539[1] }
        df      = { defs={} expr=v3540[1] }
        of      = { defs={0x0804841b} expr=0[1] }
        iopl0   = { defs={} expr=v3542[1] }
        iopl1   = { defs={} expr=v3543[1] }
        nt      = { defs={} expr=v3544[1] }
        ?15     = { defs={} expr=v3545[1] }
        rf      = { defs={} expr=v3546[1] }
        vm      = { defs={} expr=v3547[1] }
        ac      = { defs={} expr=v3548[1] }
        vif     = { defs={} expr=v3549[1] }
        vip     = { defs={} expr=v3550[1] }
        id      = { defs={} expr=v3551[1] }
        ?22     = { defs={} expr=v3552[1] }
        ?23     = { defs={} expr=v3553[1] }
        ?24     = { defs={} expr=v3554[1] }
        ?25     = { defs={} expr=v3555[1] }
        ?26     = { defs={} expr=v3556[1] }
        ?27     = { defs={} expr=v3557[1] }
        ?28     = { defs={} expr=v3558[1] }
        ?29     = { defs={} expr=v3559[1] }
        ?30     = { defs={} expr=v3560[1] }
        ?31     = { defs={} expr=v3561[1] }
        ip      = { defs={0x08048410,0x08048411,0x08048416,0x08048418,0x0804841b,0x0804841e,0x08048422} expr=0x08048429[32] }
    memory:
        address = { defs={} expr=(add[32] (bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32]) 3[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] (bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32]) 2[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] (bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32]) 1[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={0x08048410,0x08048418,0x0804841b,0x08048422} expr=(bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32]) }
          value = { defs={} expr=10[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32]) 4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32]) 4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32]) 4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x08048410,0x08048418,0x0804841b,0x0804841e} expr=(add[32] (bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32]) 4[32]) }
          value = { defs={} expr=-128[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3520[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3521[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3520[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3521[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3520[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3521[32]) }
          flags = { }
        address = { defs={0x08048410} expr=(add[32] v3520[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3521[32]) }
          flags = { }
    init mem:
0x8048429:call   0x080482f0<signal@plt>
    registers:
        ax      = { defs={} expr=v3516[32] }
        cx      = { defs={} expr=v3517[32] }
        dx      = { defs={0x08048411} expr=0x08048480[32] }
        bx      = { defs={} expr=v3519[32] }
        sp      = { defs={0x08048410,0x08048418,0x0804841b,0x08048429} expr=(add[32] (bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32]) -4[32]) }
        bp      = { defs={0x08048410,0x08048416} expr=(add[32] v3520[32] -4[32]) }
        si      = { defs={} expr=v3522[32] }
        di      = { defs={} expr=v3523[32] }
        es      = { defs={} expr=v3524[16] }
        cs      = { defs={} expr=v3525[16] }
        ss      = { defs={} expr=v3526[16] }
        ds      = { defs={} expr=v3527[16] }
        fs      = { defs={} expr=v3528[16] }
        gs      = { defs={} expr=v3529[16] }
        cf      = { defs={0x0804841b} expr=0[1] }
        ?1      = { defs={} expr=v3531[1] }
        pf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v3533[1] }
        af      = { defs={0x0804841b} expr=v3662[1] }
        ?5      = { defs={} expr=v3535[1] }
        zf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(zerop[1] (bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32])) }
        sf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32])) }
        tf      = { defs={} expr=v3538[1] }
        if      = { defs={} expr=v3539[1] }
        df      = { defs={} expr=v3540[1] }
        of      = { defs={0x0804841b} expr=0[1] }
        iopl0   = { defs={} expr=v3542[1] }
        iopl1   = { defs={} expr=v3543[1] }
        nt      = { defs={} expr=v3544[1] }
        ?15     = { defs={} expr=v3545[1] }
        rf      = { defs={} expr=v3546[1] }
        vm      = { defs={} expr=v3547[1] }
        ac      = { defs={} expr=v3548[1] }
        vif     = { defs={} expr=v3549[1] }
        vip     = { defs={} expr=v3550[1] }
        id      = { defs={} expr=v3551[1] }
        ?22     = { defs={} expr=v3552[1] }
        ?23     = { defs={} expr=v3553[1] }
        ?24     = { defs={} expr=v3554[1] }
        ?25     = { defs={} expr=v3555[1] }
        ?26     = { defs={} expr=v3556[1] }
        ?27     = { defs={} expr=v3557[1] }
        ?28     = { defs={} expr=v3558[1] }
        ?29     = { defs={} expr=v3559[1] }
        ?30     = { defs={} expr=v3560[1] }
        ?31     = { defs={} expr=v3561[1] }
        ip      = { defs={0x08048429} expr=0x080482f0[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x08048410,0x08048418,0x0804841b,0x08048429} expr=(add[32] (bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32]) -4[32]) }
          value = { defs={} expr=46[8] }
          flags = { }
        address = { defs={} expr=(add[32] (bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32]) 3[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] (bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32]) 2[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] (bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32]) 1[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={0x08048410,0x08048418,0x0804841b,0x08048422} expr=(bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32]) }
          value = { defs={} expr=10[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32]) 4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32]) 4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32]) 4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x08048410,0x08048418,0x0804841b,0x0804841e} expr=(add[32] (bv-and[32] (add[32] (add[32] v3520[32] -4[32]) -8[32]) -16[32]) 4[32]) }
          value = { defs={} expr=-128[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3520[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3521[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3520[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3521[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3520[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3521[32]) }
          flags = { }
        address = { defs={0x08048410} expr=(add[32] v3520[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3521[32]) }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804842e:mov    esp, ebp
    registers:
        ax      = { defs={} expr=v3731[32] }
        cx      = { defs={} expr=v3732[32] }
        dx      = { defs={} expr=v3733[32] }
        bx      = { defs={} expr=v3734[32] }
        sp      = { defs={0x0804842e} expr=v3736[32] }
        bp      = { defs={} expr=v3736[32] }
        si      = { defs={} expr=v3737[32] }
        di      = { defs={} expr=v3738[32] }
        es      = { defs={} expr=v3739[16] }
        cs      = { defs={} expr=v3740[16] }
        ss      = { defs={} expr=v3741[16] }
        ds      = { defs={} expr=v3742[16] }
        fs      = { defs={} expr=v3743[16] }
        gs      = { defs={} expr=v3744[16] }
        cf      = { defs={} expr=v3745[1] }
        ?1      = { defs={} expr=v3746[1] }
        pf      = { defs={} expr=v3747[1] }
        ?3      = { defs={} expr=v3748[1] }
        af      = { defs={} expr=v3749[1] }
        ?5      = { defs={} expr=v3750[1] }
        zf      = { defs={} expr=v3751[1] }
        sf      = { defs={} expr=v3752[1] }
        tf      = { defs={} expr=v3753[1] }
        if      = { defs={} expr=v3754[1] }
        df      = { defs={} expr=v3755[1] }
        of      = { defs={} expr=v3756[1] }
        iopl0   = { defs={} expr=v3757[1] }
        iopl1   = { defs={} expr=v3758[1] }
        nt      = { defs={} expr=v3759[1] }
        ?15     = { defs={} expr=v3760[1] }
        rf      = { defs={} expr=v3761[1] }
        vm      = { defs={} expr=v3762[1] }
        ac      = { defs={} expr=v3763[1] }
        vif     = { defs={} expr=v3764[1] }
        vip     = { defs={} expr=v3765[1] }
        id      = { defs={} expr=v3766[1] }
        ?22     = { defs={} expr=v3767[1] }
        ?23     = { defs={} expr=v3768[1] }
        ?24     = { defs={} expr=v3769[1] }
        ?25     = { defs={} expr=v3770[1] }
        ?26     = { defs={} expr=v3771[1] }
        ?27     = { defs={} expr=v3772[1] }
        ?28     = { defs={} expr=v3773[1] }
        ?29     = { defs={} expr=v3774[1] }
        ?30     = { defs={} expr=v3775[1] }
        ?31     = { defs={} expr=v3776[1] }
        ip      = { defs={0x0804842e} expr=0x08048430[32] }
    memory:
    init mem:
0x8048430:xor    eax, eax
    registers:
        ax      = { defs={0x08048430} expr=0[32] }
        cx      = { defs={} expr=v3732[32] }
        dx      = { defs={} expr=v3733[32] }
        bx      = { defs={} expr=v3734[32] }
        sp      = { defs={0x0804842e} expr=v3736[32] }
        bp      = { defs={} expr=v3736[32] }
        si      = { defs={} expr=v3737[32] }
        di      = { defs={} expr=v3738[32] }
        es      = { defs={} expr=v3739[16] }
        cs      = { defs={} expr=v3740[16] }
        ss      = { defs={} expr=v3741[16] }
        ds      = { defs={} expr=v3742[16] }
        fs      = { defs={} expr=v3743[16] }
        gs      = { defs={} expr=v3744[16] }
        cf      = { defs={0x08048430} expr=0[1] }
        ?1      = { defs={} expr=v3746[1] }
        pf      = { defs={0x08048430} expr=1[1] }
        ?3      = { defs={} expr=v3748[1] }
        af      = { defs={0x08048430} expr=v3815[1] }
        ?5      = { defs={} expr=v3750[1] }
        zf      = { defs={0x08048430} expr=1[1] }
        sf      = { defs={0x08048430} expr=0[1] }
        tf      = { defs={} expr=v3753[1] }
        if      = { defs={} expr=v3754[1] }
        df      = { defs={} expr=v3755[1] }
        of      = { defs={0x08048430} expr=0[1] }
        iopl0   = { defs={} expr=v3757[1] }
        iopl1   = { defs={} expr=v3758[1] }
        nt      = { defs={} expr=v3759[1] }
        ?15     = { defs={} expr=v3760[1] }
        rf      = { defs={} expr=v3761[1] }
        vm      = { defs={} expr=v3762[1] }
        ac      = { defs={} expr=v3763[1] }
        vif     = { defs={} expr=v3764[1] }
        vip     = { defs={} expr=v3765[1] }
        id      = { defs={} expr=v3766[1] }
        ?22     = { defs={} expr=v3767[1] }
        ?23     = { defs={} expr=v3768[1] }
        ?24     = { defs={} expr=v3769[1] }
        ?25     = { defs={} expr=v3770[1] }
        ?26     = { defs={} expr=v3771[1] }
        ?27     = { defs={} expr=v3772[1] }
        ?28     = { defs={} expr=v3773[1] }
        ?29     = { defs={} expr=v3774[1] }
        ?30     = { defs={} expr=v3775[1] }
        ?31     = { defs={} expr=v3776[1] }
        ip      = { defs={0x0804842e,0x08048430} expr=0x08048432[32] }
    memory:
    init mem:
0x8048432:pop    ebp
    registers:
        ax      = { defs={0x08048430} expr=0[32] }
        cx      = { defs={} expr=v3732[32] }
        dx      = { defs={} expr=v3733[32] }
        bx      = { defs={} expr=v3734[32] }
        sp      = { defs={0x0804842e,0x08048432} expr=(add[32] v3736[32] 4[32]) }
        bp      = { defs={0x08048432} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3826[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3827[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3828[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3829[8]))) }
        si      = { defs={} expr=v3737[32] }
        di      = { defs={} expr=v3738[32] }
        es      = { defs={} expr=v3739[16] }
        cs      = { defs={} expr=v3740[16] }
        ss      = { defs={} expr=v3741[16] }
        ds      = { defs={} expr=v3742[16] }
        fs      = { defs={} expr=v3743[16] }
        gs      = { defs={} expr=v3744[16] }
        cf      = { defs={0x08048430} expr=0[1] }
        ?1      = { defs={} expr=v3746[1] }
        pf      = { defs={0x08048430} expr=1[1] }
        ?3      = { defs={} expr=v3748[1] }
        af      = { defs={0x08048430} expr=v3815[1] }
        ?5      = { defs={} expr=v3750[1] }
        zf      = { defs={0x08048430} expr=1[1] }
        sf      = { defs={0x08048430} expr=0[1] }
        tf      = { defs={} expr=v3753[1] }
        if      = { defs={} expr=v3754[1] }
        df      = { defs={} expr=v3755[1] }
        of      = { defs={0x08048430} expr=0[1] }
        iopl0   = { defs={} expr=v3757[1] }
        iopl1   = { defs={} expr=v3758[1] }
        nt      = { defs={} expr=v3759[1] }
        ?15     = { defs={} expr=v3760[1] }
        rf      = { defs={} expr=v3761[1] }
        vm      = { defs={} expr=v3762[1] }
        ac      = { defs={} expr=v3763[1] }
        vif     = { defs={} expr=v3764[1] }
        vip     = { defs={} expr=v3765[1] }
        id      = { defs={} expr=v3766[1] }
        ?22     = { defs={} expr=v3767[1] }
        ?23     = { defs={} expr=v3768[1] }
        ?24     = { defs={} expr=v3769[1] }
        ?25     = { defs={} expr=v3770[1] }
        ?26     = { defs={} expr=v3771[1] }
        ?27     = { defs={} expr=v3772[1] }
        ?28     = { defs={} expr=v3773[1] }
        ?29     = { defs={} expr=v3774[1] }
        ?30     = { defs={} expr=v3775[1] }
        ?31     = { defs={} expr=v3776[1] }
        ip      = { defs={0x0804842e,0x08048430,0x08048432} expr=0x08048433[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v3736[32] 3[32]) }
          value = { defs={} expr=v3829[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3736[32] 2[32]) }
          value = { defs={} expr=v3828[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3736[32] 1[32]) }
          value = { defs={} expr=v3827[8] }
          flags = { rdonly }
        address = { defs={0x0804842e,0x08048432} expr=v3736[32] }
          value = { defs={} expr=v3826[8] }
          flags = { rdonly }
0x8048433:ret    
    registers:
        ax      = { defs={0x08048430} expr=0[32] }
        cx      = { defs={} expr=v3732[32] }
        dx      = { defs={} expr=v3733[32] }
        bx      = { defs={} expr=v3734[32] }
        sp      = { defs={0x0804842e,0x08048432,0x08048433} expr=(add[32] (add[32] v3736[32] 4[32]) 4[32]) }
        bp      = { defs={0x08048432} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3826[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3827[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3828[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3829[8]))) }
        si      = { defs={} expr=v3737[32] }
        di      = { defs={} expr=v3738[32] }
        es      = { defs={} expr=v3739[16] }
        cs      = { defs={} expr=v3740[16] }
        ss      = { defs={} expr=v3741[16] }
        ds      = { defs={} expr=v3742[16] }
        fs      = { defs={} expr=v3743[16] }
        gs      = { defs={} expr=v3744[16] }
        cf      = { defs={0x08048430} expr=0[1] }
        ?1      = { defs={} expr=v3746[1] }
        pf      = { defs={0x08048430} expr=1[1] }
        ?3      = { defs={} expr=v3748[1] }
        af      = { defs={0x08048430} expr=v3815[1] }
        ?5      = { defs={} expr=v3750[1] }
        zf      = { defs={0x08048430} expr=1[1] }
        sf      = { defs={0x08048430} expr=0[1] }
        tf      = { defs={} expr=v3753[1] }
        if      = { defs={} expr=v3754[1] }
        df      = { defs={} expr=v3755[1] }
        of      = { defs={0x08048430} expr=0[1] }
        iopl0   = { defs={} expr=v3757[1] }
        iopl1   = { defs={} expr=v3758[1] }
        nt      = { defs={} expr=v3759[1] }
        ?15     = { defs={} expr=v3760[1] }
        rf      = { defs={} expr=v3761[1] }
        vm      = { defs={} expr=v3762[1] }
        ac      = { defs={} expr=v3763[1] }
        vif     = { defs={} expr=v3764[1] }
        vip     = { defs={} expr=v3765[1] }
        id      = { defs={} expr=v3766[1] }
        ?22     = { defs={} expr=v3767[1] }
        ?23     = { defs={} expr=v3768[1] }
        ?24     = { defs={} expr=v3769[1] }
        ?25     = { defs={} expr=v3770[1] }
        ?26     = { defs={} expr=v3771[1] }
        ?27     = { defs={} expr=v3772[1] }
        ?28     = { defs={} expr=v3773[1] }
        ?29     = { defs={} expr=v3774[1] }
        ?30     = { defs={} expr=v3775[1] }
        ?31     = { defs={} expr=v3776[1] }
        ip      = { defs={0x08048433} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3843[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3844[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3845[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3846[8]))) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v3736[32] 4[32]) 3[32]) }
          value = { defs={} expr=v3846[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v3736[32] 4[32]) 2[32]) }
          value = { defs={} expr=v3845[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v3736[32] 4[32]) 1[32]) }
          value = { defs={} expr=v3844[8] }
          flags = { rdonly }
        address = { defs={0x0804842e,0x08048432,0x08048433} expr=(add[32] v3736[32] 4[32]) }
          value = { defs={} expr=v3843[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3736[32] 3[32]) }
          value = { defs={} expr=v3829[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3736[32] 2[32]) }
          value = { defs={} expr=v3828[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3736[32] 1[32]) }
          value = { defs={} expr=v3827[8] }
          flags = { rdonly }
        address = { defs={0x0804842e,0x08048432} expr=v3736[32] }
          value = { defs={} expr=v3826[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048440:push   ebp
    registers:
        ax      = { defs={} expr=v3901[32] }
        cx      = { defs={} expr=v3902[32] }
        dx      = { defs={} expr=v3903[32] }
        bx      = { defs={} expr=v3904[32] }
        sp      = { defs={0x08048440} expr=(add[32] v3905[32] -4[32]) }
        bp      = { defs={} expr=v3906[32] }
        si      = { defs={} expr=v3907[32] }
        di      = { defs={} expr=v3908[32] }
        es      = { defs={} expr=v3909[16] }
        cs      = { defs={} expr=v3910[16] }
        ss      = { defs={} expr=v3911[16] }
        ds      = { defs={} expr=v3912[16] }
        fs      = { defs={} expr=v3913[16] }
        gs      = { defs={} expr=v3914[16] }
        cf      = { defs={} expr=v3915[1] }
        ?1      = { defs={} expr=v3916[1] }
        pf      = { defs={} expr=v3917[1] }
        ?3      = { defs={} expr=v3918[1] }
        af      = { defs={} expr=v3919[1] }
        ?5      = { defs={} expr=v3920[1] }
        zf      = { defs={} expr=v3921[1] }
        sf      = { defs={} expr=v3922[1] }
        tf      = { defs={} expr=v3923[1] }
        if      = { defs={} expr=v3924[1] }
        df      = { defs={} expr=v3925[1] }
        of      = { defs={} expr=v3926[1] }
        iopl0   = { defs={} expr=v3927[1] }
        iopl1   = { defs={} expr=v3928[1] }
        nt      = { defs={} expr=v3929[1] }
        ?15     = { defs={} expr=v3930[1] }
        rf      = { defs={} expr=v3931[1] }
        vm      = { defs={} expr=v3932[1] }
        ac      = { defs={} expr=v3933[1] }
        vif     = { defs={} expr=v3934[1] }
        vip     = { defs={} expr=v3935[1] }
        id      = { defs={} expr=v3936[1] }
        ?22     = { defs={} expr=v3937[1] }
        ?23     = { defs={} expr=v3938[1] }
        ?24     = { defs={} expr=v3939[1] }
        ?25     = { defs={} expr=v3940[1] }
        ?26     = { defs={} expr=v3941[1] }
        ?27     = { defs={} expr=v3942[1] }
        ?28     = { defs={} expr=v3943[1] }
        ?29     = { defs={} expr=v3944[1] }
        ?30     = { defs={} expr=v3945[1] }
        ?31     = { defs={} expr=v3946[1] }
        ip      = { defs={0x08048440} expr=0x08048441[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3905[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3906[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3905[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3906[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3905[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3906[32]) }
          flags = { }
        address = { defs={0x08048440} expr=(add[32] v3905[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3906[32]) }
          flags = { }
    init mem:
0x8048441:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v3901[32] }
        cx      = { defs={} expr=v3902[32] }
        dx      = { defs={} expr=v3903[32] }
        bx      = { defs={} expr=v3904[32] }
        sp      = { defs={0x08048440} expr=(add[32] v3905[32] -4[32]) }
        bp      = { defs={0x08048440,0x08048441} expr=(add[32] v3905[32] -4[32]) }
        si      = { defs={} expr=v3907[32] }
        di      = { defs={} expr=v3908[32] }
        es      = { defs={} expr=v3909[16] }
        cs      = { defs={} expr=v3910[16] }
        ss      = { defs={} expr=v3911[16] }
        ds      = { defs={} expr=v3912[16] }
        fs      = { defs={} expr=v3913[16] }
        gs      = { defs={} expr=v3914[16] }
        cf      = { defs={} expr=v3915[1] }
        ?1      = { defs={} expr=v3916[1] }
        pf      = { defs={} expr=v3917[1] }
        ?3      = { defs={} expr=v3918[1] }
        af      = { defs={} expr=v3919[1] }
        ?5      = { defs={} expr=v3920[1] }
        zf      = { defs={} expr=v3921[1] }
        sf      = { defs={} expr=v3922[1] }
        tf      = { defs={} expr=v3923[1] }
        if      = { defs={} expr=v3924[1] }
        df      = { defs={} expr=v3925[1] }
        of      = { defs={} expr=v3926[1] }
        iopl0   = { defs={} expr=v3927[1] }
        iopl1   = { defs={} expr=v3928[1] }
        nt      = { defs={} expr=v3929[1] }
        ?15     = { defs={} expr=v3930[1] }
        rf      = { defs={} expr=v3931[1] }
        vm      = { defs={} expr=v3932[1] }
        ac      = { defs={} expr=v3933[1] }
        vif     = { defs={} expr=v3934[1] }
        vip     = { defs={} expr=v3935[1] }
        id      = { defs={} expr=v3936[1] }
        ?22     = { defs={} expr=v3937[1] }
        ?23     = { defs={} expr=v3938[1] }
        ?24     = { defs={} expr=v3939[1] }
        ?25     = { defs={} expr=v3940[1] }
        ?26     = { defs={} expr=v3941[1] }
        ?27     = { defs={} expr=v3942[1] }
        ?28     = { defs={} expr=v3943[1] }
        ?29     = { defs={} expr=v3944[1] }
        ?30     = { defs={} expr=v3945[1] }
        ?31     = { defs={} expr=v3946[1] }
        ip      = { defs={0x08048440,0x08048441} expr=0x08048443[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3905[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3906[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3905[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3906[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3905[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3906[32]) }
          flags = { }
        address = { defs={0x08048440} expr=(add[32] v3905[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3906[32]) }
          flags = { }
    init mem:
0x8048443:sub    esp, 0x08
    registers:
        ax      = { defs={} expr=v3901[32] }
        cx      = { defs={} expr=v3902[32] }
        dx      = { defs={} expr=v3903[32] }
        bx      = { defs={} expr=v3904[32] }
        sp      = { defs={0x08048440,0x08048443} expr=(add[32] (add[32] v3905[32] -4[32]) -8[32]) }
        bp      = { defs={0x08048440,0x08048441} expr=(add[32] v3905[32] -4[32]) }
        si      = { defs={} expr=v3907[32] }
        di      = { defs={} expr=v3908[32] }
        es      = { defs={} expr=v3909[16] }
        cs      = { defs={} expr=v3910[16] }
        ss      = { defs={} expr=v3911[16] }
        ds      = { defs={} expr=v3912[16] }
        fs      = { defs={} expr=v3913[16] }
        gs      = { defs={} expr=v3914[16] }
        cf      = { defs={0x08048440,0x08048443} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3905[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3905[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v3916[1] }
        pf      = { defs={0x08048440,0x08048443} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3905[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3905[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3905[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3905[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3905[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3905[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3905[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3905[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v3918[1] }
        af      = { defs={0x08048440,0x08048443} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3905[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3905[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v3920[1] }
        zf      = { defs={0x08048440,0x08048443} expr=(zerop[1] (add[32] (add[32] v3905[32] -4[32]) -8[32])) }
        sf      = { defs={0x08048440,0x08048443} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v3905[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v3923[1] }
        if      = { defs={} expr=v3924[1] }
        df      = { defs={} expr=v3925[1] }
        of      = { defs={0x08048440,0x08048443} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3905[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3905[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3905[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3905[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v3927[1] }
        iopl1   = { defs={} expr=v3928[1] }
        nt      = { defs={} expr=v3929[1] }
        ?15     = { defs={} expr=v3930[1] }
        rf      = { defs={} expr=v3931[1] }
        vm      = { defs={} expr=v3932[1] }
        ac      = { defs={} expr=v3933[1] }
        vif     = { defs={} expr=v3934[1] }
        vip     = { defs={} expr=v3935[1] }
        id      = { defs={} expr=v3936[1] }
        ?22     = { defs={} expr=v3937[1] }
        ?23     = { defs={} expr=v3938[1] }
        ?24     = { defs={} expr=v3939[1] }
        ?25     = { defs={} expr=v3940[1] }
        ?26     = { defs={} expr=v3941[1] }
        ?27     = { defs={} expr=v3942[1] }
        ?28     = { defs={} expr=v3943[1] }
        ?29     = { defs={} expr=v3944[1] }
        ?30     = { defs={} expr=v3945[1] }
        ?31     = { defs={} expr=v3946[1] }
        ip      = { defs={0x08048440,0x08048441,0x08048443} expr=0x08048446[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3905[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3906[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3905[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3906[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3905[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3906[32]) }
          flags = { }
        address = { defs={0x08048440} expr=(add[32] v3905[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3906[32]) }
          flags = { }
    init mem:
0x8048446:mov    DWORD PTR ss:[esp], 0x080485d4<<StaticData@0x080485ca>+0x0a>
    registers:
        ax      = { defs={} expr=v3901[32] }
        cx      = { defs={} expr=v3902[32] }
        dx      = { defs={} expr=v3903[32] }
        bx      = { defs={} expr=v3904[32] }
        sp      = { defs={0x08048440,0x08048443} expr=(add[32] (add[32] v3905[32] -4[32]) -8[32]) }
        bp      = { defs={0x08048440,0x08048441} expr=(add[32] v3905[32] -4[32]) }
        si      = { defs={} expr=v3907[32] }
        di      = { defs={} expr=v3908[32] }
        es      = { defs={} expr=v3909[16] }
        cs      = { defs={} expr=v3910[16] }
        ss      = { defs={} expr=v3911[16] }
        ds      = { defs={} expr=v3912[16] }
        fs      = { defs={} expr=v3913[16] }
        gs      = { defs={} expr=v3914[16] }
        cf      = { defs={0x08048440,0x08048443} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3905[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3905[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v3916[1] }
        pf      = { defs={0x08048440,0x08048443} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3905[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3905[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3905[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3905[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3905[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3905[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3905[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3905[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v3918[1] }
        af      = { defs={0x08048440,0x08048443} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3905[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3905[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v3920[1] }
        zf      = { defs={0x08048440,0x08048443} expr=(zerop[1] (add[32] (add[32] v3905[32] -4[32]) -8[32])) }
        sf      = { defs={0x08048440,0x08048443} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v3905[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v3923[1] }
        if      = { defs={} expr=v3924[1] }
        df      = { defs={} expr=v3925[1] }
        of      = { defs={0x08048440,0x08048443} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3905[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3905[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3905[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3905[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v3927[1] }
        iopl1   = { defs={} expr=v3928[1] }
        nt      = { defs={} expr=v3929[1] }
        ?15     = { defs={} expr=v3930[1] }
        rf      = { defs={} expr=v3931[1] }
        vm      = { defs={} expr=v3932[1] }
        ac      = { defs={} expr=v3933[1] }
        vif     = { defs={} expr=v3934[1] }
        vip     = { defs={} expr=v3935[1] }
        id      = { defs={} expr=v3936[1] }
        ?22     = { defs={} expr=v3937[1] }
        ?23     = { defs={} expr=v3938[1] }
        ?24     = { defs={} expr=v3939[1] }
        ?25     = { defs={} expr=v3940[1] }
        ?26     = { defs={} expr=v3941[1] }
        ?27     = { defs={} expr=v3942[1] }
        ?28     = { defs={} expr=v3943[1] }
        ?29     = { defs={} expr=v3944[1] }
        ?30     = { defs={} expr=v3945[1] }
        ?31     = { defs={} expr=v3946[1] }
        ip      = { defs={0x08048440,0x08048441,0x08048443,0x08048446} expr=0x0804844d[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v3905[32] -4[32]) -8[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3905[32] -4[32]) -8[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3905[32] -4[32]) -8[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x08048440,0x08048443,0x08048446} expr=(add[32] (add[32] v3905[32] -4[32]) -8[32]) }
          value = { defs={} expr=-44[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3905[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3906[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3905[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3906[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3905[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3906[32]) }
          flags = { }
        address = { defs={0x08048440} expr=(add[32] v3905[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3906[32]) }
          flags = { }
    init mem:
0x804844d:call   0x08048300<puts@plt>
    registers:
        ax      = { defs={} expr=v3901[32] }
        cx      = { defs={} expr=v3902[32] }
        dx      = { defs={} expr=v3903[32] }
        bx      = { defs={} expr=v3904[32] }
        sp      = { defs={0x08048440,0x08048443,0x0804844d} expr=(add[32] (add[32] (add[32] v3905[32] -4[32]) -8[32]) -4[32]) }
        bp      = { defs={0x08048440,0x08048441} expr=(add[32] v3905[32] -4[32]) }
        si      = { defs={} expr=v3907[32] }
        di      = { defs={} expr=v3908[32] }
        es      = { defs={} expr=v3909[16] }
        cs      = { defs={} expr=v3910[16] }
        ss      = { defs={} expr=v3911[16] }
        ds      = { defs={} expr=v3912[16] }
        fs      = { defs={} expr=v3913[16] }
        gs      = { defs={} expr=v3914[16] }
        cf      = { defs={0x08048440,0x08048443} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3905[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3905[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v3916[1] }
        pf      = { defs={0x08048440,0x08048443} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3905[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3905[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3905[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3905[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3905[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3905[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3905[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3905[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v3918[1] }
        af      = { defs={0x08048440,0x08048443} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3905[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3905[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v3920[1] }
        zf      = { defs={0x08048440,0x08048443} expr=(zerop[1] (add[32] (add[32] v3905[32] -4[32]) -8[32])) }
        sf      = { defs={0x08048440,0x08048443} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v3905[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v3923[1] }
        if      = { defs={} expr=v3924[1] }
        df      = { defs={} expr=v3925[1] }
        of      = { defs={0x08048440,0x08048443} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3905[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3905[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3905[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3905[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v3927[1] }
        iopl1   = { defs={} expr=v3928[1] }
        nt      = { defs={} expr=v3929[1] }
        ?15     = { defs={} expr=v3930[1] }
        rf      = { defs={} expr=v3931[1] }
        vm      = { defs={} expr=v3932[1] }
        ac      = { defs={} expr=v3933[1] }
        vif     = { defs={} expr=v3934[1] }
        vip     = { defs={} expr=v3935[1] }
        id      = { defs={} expr=v3936[1] }
        ?22     = { defs={} expr=v3937[1] }
        ?23     = { defs={} expr=v3938[1] }
        ?24     = { defs={} expr=v3939[1] }
        ?25     = { defs={} expr=v3940[1] }
        ?26     = { defs={} expr=v3941[1] }
        ?27     = { defs={} expr=v3942[1] }
        ?28     = { defs={} expr=v3943[1] }
        ?29     = { defs={} expr=v3944[1] }
        ?30     = { defs={} expr=v3945[1] }
        ?31     = { defs={} expr=v3946[1] }
        ip      = { defs={0x0804844d} expr=0x08048300[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3905[32] -4[32]) -8[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3905[32] -4[32]) -8[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3905[32] -4[32]) -8[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x08048440,0x08048443,0x0804844d} expr=(add[32] (add[32] (add[32] v3905[32] -4[32]) -8[32]) -4[32]) }
          value = { defs={} expr=82[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3905[32] -4[32]) -8[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3905[32] -4[32]) -8[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3905[32] -4[32]) -8[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x08048440,0x08048443,0x08048446} expr=(add[32] (add[32] v3905[32] -4[32]) -8[32]) }
          value = { defs={} expr=-44[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3905[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3906[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3905[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3906[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3905[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3906[32]) }
          flags = { }
        address = { defs={0x08048440} expr=(add[32] v3905[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3906[32]) }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048452:mov    esp, ebp
    registers:
        ax      = { defs={} expr=v4072[32] }
        cx      = { defs={} expr=v4073[32] }
        dx      = { defs={} expr=v4074[32] }
        bx      = { defs={} expr=v4075[32] }
        sp      = { defs={0x08048452} expr=v4077[32] }
        bp      = { defs={} expr=v4077[32] }
        si      = { defs={} expr=v4078[32] }
        di      = { defs={} expr=v4079[32] }
        es      = { defs={} expr=v4080[16] }
        cs      = { defs={} expr=v4081[16] }
        ss      = { defs={} expr=v4082[16] }
        ds      = { defs={} expr=v4083[16] }
        fs      = { defs={} expr=v4084[16] }
        gs      = { defs={} expr=v4085[16] }
        cf      = { defs={} expr=v4086[1] }
        ?1      = { defs={} expr=v4087[1] }
        pf      = { defs={} expr=v4088[1] }
        ?3      = { defs={} expr=v4089[1] }
        af      = { defs={} expr=v4090[1] }
        ?5      = { defs={} expr=v4091[1] }
        zf      = { defs={} expr=v4092[1] }
        sf      = { defs={} expr=v4093[1] }
        tf      = { defs={} expr=v4094[1] }
        if      = { defs={} expr=v4095[1] }
        df      = { defs={} expr=v4096[1] }
        of      = { defs={} expr=v4097[1] }
        iopl0   = { defs={} expr=v4098[1] }
        iopl1   = { defs={} expr=v4099[1] }
        nt      = { defs={} expr=v4100[1] }
        ?15     = { defs={} expr=v4101[1] }
        rf      = { defs={} expr=v4102[1] }
        vm      = { defs={} expr=v4103[1] }
        ac      = { defs={} expr=v4104[1] }
        vif     = { defs={} expr=v4105[1] }
        vip     = { defs={} expr=v4106[1] }
        id      = { defs={} expr=v4107[1] }
        ?22     = { defs={} expr=v4108[1] }
        ?23     = { defs={} expr=v4109[1] }
        ?24     = { defs={} expr=v4110[1] }
        ?25     = { defs={} expr=v4111[1] }
        ?26     = { defs={} expr=v4112[1] }
        ?27     = { defs={} expr=v4113[1] }
        ?28     = { defs={} expr=v4114[1] }
        ?29     = { defs={} expr=v4115[1] }
        ?30     = { defs={} expr=v4116[1] }
        ?31     = { defs={} expr=v4117[1] }
        ip      = { defs={0x08048452} expr=0x08048454[32] }
    memory:
    init mem:
0x8048454:pop    ebp
    registers:
        ax      = { defs={} expr=v4072[32] }
        cx      = { defs={} expr=v4073[32] }
        dx      = { defs={} expr=v4074[32] }
        bx      = { defs={} expr=v4075[32] }
        sp      = { defs={0x08048452,0x08048454} expr=(add[32] v4077[32] 4[32]) }
        bp      = { defs={0x08048454} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4132[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4133[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4134[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4135[8]))) }
        si      = { defs={} expr=v4078[32] }
        di      = { defs={} expr=v4079[32] }
        es      = { defs={} expr=v4080[16] }
        cs      = { defs={} expr=v4081[16] }
        ss      = { defs={} expr=v4082[16] }
        ds      = { defs={} expr=v4083[16] }
        fs      = { defs={} expr=v4084[16] }
        gs      = { defs={} expr=v4085[16] }
        cf      = { defs={} expr=v4086[1] }
        ?1      = { defs={} expr=v4087[1] }
        pf      = { defs={} expr=v4088[1] }
        ?3      = { defs={} expr=v4089[1] }
        af      = { defs={} expr=v4090[1] }
        ?5      = { defs={} expr=v4091[1] }
        zf      = { defs={} expr=v4092[1] }
        sf      = { defs={} expr=v4093[1] }
        tf      = { defs={} expr=v4094[1] }
        if      = { defs={} expr=v4095[1] }
        df      = { defs={} expr=v4096[1] }
        of      = { defs={} expr=v4097[1] }
        iopl0   = { defs={} expr=v4098[1] }
        iopl1   = { defs={} expr=v4099[1] }
        nt      = { defs={} expr=v4100[1] }
        ?15     = { defs={} expr=v4101[1] }
        rf      = { defs={} expr=v4102[1] }
        vm      = { defs={} expr=v4103[1] }
        ac      = { defs={} expr=v4104[1] }
        vif     = { defs={} expr=v4105[1] }
        vip     = { defs={} expr=v4106[1] }
        id      = { defs={} expr=v4107[1] }
        ?22     = { defs={} expr=v4108[1] }
        ?23     = { defs={} expr=v4109[1] }
        ?24     = { defs={} expr=v4110[1] }
        ?25     = { defs={} expr=v4111[1] }
        ?26     = { defs={} expr=v4112[1] }
        ?27     = { defs={} expr=v4113[1] }
        ?28     = { defs={} expr=v4114[1] }
        ?29     = { defs={} expr=v4115[1] }
        ?30     = { defs={} expr=v4116[1] }
        ?31     = { defs={} expr=v4117[1] }
        ip      = { defs={0x08048452,0x08048454} expr=0x08048455[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v4077[32] 3[32]) }
          value = { defs={} expr=v4135[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4077[32] 2[32]) }
          value = { defs={} expr=v4134[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4077[32] 1[32]) }
          value = { defs={} expr=v4133[8] }
          flags = { rdonly }
        address = { defs={0x08048452,0x08048454} expr=v4077[32] }
          value = { defs={} expr=v4132[8] }
          flags = { rdonly }
0x8048455:ret    
    registers:
        ax      = { defs={} expr=v4072[32] }
        cx      = { defs={} expr=v4073[32] }
        dx      = { defs={} expr=v4074[32] }
        bx      = { defs={} expr=v4075[32] }
        sp      = { defs={0x08048452,0x08048454,0x08048455} expr=(add[32] (add[32] v4077[32] 4[32]) 4[32]) }
        bp      = { defs={0x08048454} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4132[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4133[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4134[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4135[8]))) }
        si      = { defs={} expr=v4078[32] }
        di      = { defs={} expr=v4079[32] }
        es      = { defs={} expr=v4080[16] }
        cs      = { defs={} expr=v4081[16] }
        ss      = { defs={} expr=v4082[16] }
        ds      = { defs={} expr=v4083[16] }
        fs      = { defs={} expr=v4084[16] }
        gs      = { defs={} expr=v4085[16] }
        cf      = { defs={} expr=v4086[1] }
        ?1      = { defs={} expr=v4087[1] }
        pf      = { defs={} expr=v4088[1] }
        ?3      = { defs={} expr=v4089[1] }
        af      = { defs={} expr=v4090[1] }
        ?5      = { defs={} expr=v4091[1] }
        zf      = { defs={} expr=v4092[1] }
        sf      = { defs={} expr=v4093[1] }
        tf      = { defs={} expr=v4094[1] }
        if      = { defs={} expr=v4095[1] }
        df      = { defs={} expr=v4096[1] }
        of      = { defs={} expr=v4097[1] }
        iopl0   = { defs={} expr=v4098[1] }
        iopl1   = { defs={} expr=v4099[1] }
        nt      = { defs={} expr=v4100[1] }
        ?15     = { defs={} expr=v4101[1] }
        rf      = { defs={} expr=v4102[1] }
        vm      = { defs={} expr=v4103[1] }
        ac      = { defs={} expr=v4104[1] }
        vif     = { defs={} expr=v4105[1] }
        vip     = { defs={} expr=v4106[1] }
        id      = { defs={} expr=v4107[1] }
        ?22     = { defs={} expr=v4108[1] }
        ?23     = { defs={} expr=v4109[1] }
        ?24     = { defs={} expr=v4110[1] }
        ?25     = { defs={} expr=v4111[1] }
        ?26     = { defs={} expr=v4112[1] }
        ?27     = { defs={} expr=v4113[1] }
        ?28     = { defs={} expr=v4114[1] }
        ?29     = { defs={} expr=v4115[1] }
        ?30     = { defs={} expr=v4116[1] }
        ?31     = { defs={} expr=v4117[1] }
        ip      = { defs={0x08048455} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4149[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4150[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4151[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4152[8]))) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v4077[32] 4[32]) 3[32]) }
          value = { defs={} expr=v4152[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4077[32] 4[32]) 2[32]) }
          value = { defs={} expr=v4151[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4077[32] 4[32]) 1[32]) }
          value = { defs={} expr=v4150[8] }
          flags = { rdonly }
        address = { defs={0x08048452,0x08048454,0x08048455} expr=(add[32] v4077[32] 4[32]) }
          value = { defs={} expr=v4149[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4077[32] 3[32]) }
          value = { defs={} expr=v4135[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4077[32] 2[32]) }
          value = { defs={} expr=v4134[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4077[32] 1[32]) }
          value = { defs={} expr=v4133[8] }
          flags = { rdonly }
        address = { defs={0x08048452,0x08048454} expr=v4077[32] }
          value = { defs={} expr=v4132[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048460:push   ebp
    registers:
        ax      = { defs={} expr=v4207[32] }
        cx      = { defs={} expr=v4208[32] }
        dx      = { defs={} expr=v4209[32] }
        bx      = { defs={} expr=v4210[32] }
        sp      = { defs={0x08048460} expr=(add[32] v4211[32] -4[32]) }
        bp      = { defs={} expr=v4212[32] }
        si      = { defs={} expr=v4213[32] }
        di      = { defs={} expr=v4214[32] }
        es      = { defs={} expr=v4215[16] }
        cs      = { defs={} expr=v4216[16] }
        ss      = { defs={} expr=v4217[16] }
        ds      = { defs={} expr=v4218[16] }
        fs      = { defs={} expr=v4219[16] }
        gs      = { defs={} expr=v4220[16] }
        cf      = { defs={} expr=v4221[1] }
        ?1      = { defs={} expr=v4222[1] }
        pf      = { defs={} expr=v4223[1] }
        ?3      = { defs={} expr=v4224[1] }
        af      = { defs={} expr=v4225[1] }
        ?5      = { defs={} expr=v4226[1] }
        zf      = { defs={} expr=v4227[1] }
        sf      = { defs={} expr=v4228[1] }
        tf      = { defs={} expr=v4229[1] }
        if      = { defs={} expr=v4230[1] }
        df      = { defs={} expr=v4231[1] }
        of      = { defs={} expr=v4232[1] }
        iopl0   = { defs={} expr=v4233[1] }
        iopl1   = { defs={} expr=v4234[1] }
        nt      = { defs={} expr=v4235[1] }
        ?15     = { defs={} expr=v4236[1] }
        rf      = { defs={} expr=v4237[1] }
        vm      = { defs={} expr=v4238[1] }
        ac      = { defs={} expr=v4239[1] }
        vif     = { defs={} expr=v4240[1] }
        vip     = { defs={} expr=v4241[1] }
        id      = { defs={} expr=v4242[1] }
        ?22     = { defs={} expr=v4243[1] }
        ?23     = { defs={} expr=v4244[1] }
        ?24     = { defs={} expr=v4245[1] }
        ?25     = { defs={} expr=v4246[1] }
        ?26     = { defs={} expr=v4247[1] }
        ?27     = { defs={} expr=v4248[1] }
        ?28     = { defs={} expr=v4249[1] }
        ?29     = { defs={} expr=v4250[1] }
        ?30     = { defs={} expr=v4251[1] }
        ?31     = { defs={} expr=v4252[1] }
        ip      = { defs={0x08048460} expr=0x08048461[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v4211[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4212[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4211[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4212[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4211[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4212[32]) }
          flags = { }
        address = { defs={0x08048460} expr=(add[32] v4211[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4212[32]) }
          flags = { }
    init mem:
0x8048461:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v4207[32] }
        cx      = { defs={} expr=v4208[32] }
        dx      = { defs={} expr=v4209[32] }
        bx      = { defs={} expr=v4210[32] }
        sp      = { defs={0x08048460} expr=(add[32] v4211[32] -4[32]) }
        bp      = { defs={0x08048460,0x08048461} expr=(add[32] v4211[32] -4[32]) }
        si      = { defs={} expr=v4213[32] }
        di      = { defs={} expr=v4214[32] }
        es      = { defs={} expr=v4215[16] }
        cs      = { defs={} expr=v4216[16] }
        ss      = { defs={} expr=v4217[16] }
        ds      = { defs={} expr=v4218[16] }
        fs      = { defs={} expr=v4219[16] }
        gs      = { defs={} expr=v4220[16] }
        cf      = { defs={} expr=v4221[1] }
        ?1      = { defs={} expr=v4222[1] }
        pf      = { defs={} expr=v4223[1] }
        ?3      = { defs={} expr=v4224[1] }
        af      = { defs={} expr=v4225[1] }
        ?5      = { defs={} expr=v4226[1] }
        zf      = { defs={} expr=v4227[1] }
        sf      = { defs={} expr=v4228[1] }
        tf      = { defs={} expr=v4229[1] }
        if      = { defs={} expr=v4230[1] }
        df      = { defs={} expr=v4231[1] }
        of      = { defs={} expr=v4232[1] }
        iopl0   = { defs={} expr=v4233[1] }
        iopl1   = { defs={} expr=v4234[1] }
        nt      = { defs={} expr=v4235[1] }
        ?15     = { defs={} expr=v4236[1] }
        rf      = { defs={} expr=v4237[1] }
        vm      = { defs={} expr=v4238[1] }
        ac      = { defs={} expr=v4239[1] }
        vif     = { defs={} expr=v4240[1] }
        vip     = { defs={} expr=v4241[1] }
        id      = { defs={} expr=v4242[1] }
        ?22     = { defs={} expr=v4243[1] }
        ?23     = { defs={} expr=v4244[1] }
        ?24     = { defs={} expr=v4245[1] }
        ?25     = { defs={} expr=v4246[1] }
        ?26     = { defs={} expr=v4247[1] }
        ?27     = { defs={} expr=v4248[1] }
        ?28     = { defs={} expr=v4249[1] }
        ?29     = { defs={} expr=v4250[1] }
        ?30     = { defs={} expr=v4251[1] }
        ?31     = { defs={} expr=v4252[1] }
        ip      = { defs={0x08048460,0x08048461} expr=0x08048463[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v4211[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4212[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4211[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4212[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4211[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4212[32]) }
          flags = { }
        address = { defs={0x08048460} expr=(add[32] v4211[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4212[32]) }
          flags = { }
    init mem:
0x8048463:sub    esp, 0x08
    registers:
        ax      = { defs={} expr=v4207[32] }
        cx      = { defs={} expr=v4208[32] }
        dx      = { defs={} expr=v4209[32] }
        bx      = { defs={} expr=v4210[32] }
        sp      = { defs={0x08048460,0x08048463} expr=(add[32] (add[32] v4211[32] -4[32]) -8[32]) }
        bp      = { defs={0x08048460,0x08048461} expr=(add[32] v4211[32] -4[32]) }
        si      = { defs={} expr=v4213[32] }
        di      = { defs={} expr=v4214[32] }
        es      = { defs={} expr=v4215[16] }
        cs      = { defs={} expr=v4216[16] }
        ss      = { defs={} expr=v4217[16] }
        ds      = { defs={} expr=v4218[16] }
        fs      = { defs={} expr=v4219[16] }
        gs      = { defs={} expr=v4220[16] }
        cf      = { defs={0x08048460,0x08048463} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4211[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4211[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v4222[1] }
        pf      = { defs={0x08048460,0x08048463} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4211[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4211[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4211[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4211[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4211[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4211[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4211[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4211[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v4224[1] }
        af      = { defs={0x08048460,0x08048463} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4211[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4211[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v4226[1] }
        zf      = { defs={0x08048460,0x08048463} expr=(zerop[1] (add[32] (add[32] v4211[32] -4[32]) -8[32])) }
        sf      = { defs={0x08048460,0x08048463} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v4211[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v4229[1] }
        if      = { defs={} expr=v4230[1] }
        df      = { defs={} expr=v4231[1] }
        of      = { defs={0x08048460,0x08048463} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4211[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4211[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4211[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4211[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v4233[1] }
        iopl1   = { defs={} expr=v4234[1] }
        nt      = { defs={} expr=v4235[1] }
        ?15     = { defs={} expr=v4236[1] }
        rf      = { defs={} expr=v4237[1] }
        vm      = { defs={} expr=v4238[1] }
        ac      = { defs={} expr=v4239[1] }
        vif     = { defs={} expr=v4240[1] }
        vip     = { defs={} expr=v4241[1] }
        id      = { defs={} expr=v4242[1] }
        ?22     = { defs={} expr=v4243[1] }
        ?23     = { defs={} expr=v4244[1] }
        ?24     = { defs={} expr=v4245[1] }
        ?25     = { defs={} expr=v4246[1] }
        ?26     = { defs={} expr=v4247[1] }
        ?27     = { defs={} expr=v4248[1] }
        ?28     = { defs={} expr=v4249[1] }
        ?29     = { defs={} expr=v4250[1] }
        ?30     = { defs={} expr=v4251[1] }
        ?31     = { defs={} expr=v4252[1] }
        ip      = { defs={0x08048460,0x08048461,0x08048463} expr=0x08048466[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v4211[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4212[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4211[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4212[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4211[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4212[32]) }
          flags = { }
        address = { defs={0x08048460} expr=(add[32] v4211[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4212[32]) }
          flags = { }
    init mem:
0x8048466:mov    DWORD PTR ss:[esp], 0x080485d4<<StaticData@0x080485ca>+0x0a>
    registers:
        ax      = { defs={} expr=v4207[32] }
        cx      = { defs={} expr=v4208[32] }
        dx      = { defs={} expr=v4209[32] }
        bx      = { defs={} expr=v4210[32] }
        sp      = { defs={0x08048460,0x08048463} expr=(add[32] (add[32] v4211[32] -4[32]) -8[32]) }
        bp      = { defs={0x08048460,0x08048461} expr=(add[32] v4211[32] -4[32]) }
        si      = { defs={} expr=v4213[32] }
        di      = { defs={} expr=v4214[32] }
        es      = { defs={} expr=v4215[16] }
        cs      = { defs={} expr=v4216[16] }
        ss      = { defs={} expr=v4217[16] }
        ds      = { defs={} expr=v4218[16] }
        fs      = { defs={} expr=v4219[16] }
        gs      = { defs={} expr=v4220[16] }
        cf      = { defs={0x08048460,0x08048463} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4211[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4211[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v4222[1] }
        pf      = { defs={0x08048460,0x08048463} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4211[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4211[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4211[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4211[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4211[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4211[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4211[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4211[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v4224[1] }
        af      = { defs={0x08048460,0x08048463} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4211[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4211[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v4226[1] }
        zf      = { defs={0x08048460,0x08048463} expr=(zerop[1] (add[32] (add[32] v4211[32] -4[32]) -8[32])) }
        sf      = { defs={0x08048460,0x08048463} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v4211[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v4229[1] }
        if      = { defs={} expr=v4230[1] }
        df      = { defs={} expr=v4231[1] }
        of      = { defs={0x08048460,0x08048463} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4211[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4211[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4211[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4211[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v4233[1] }
        iopl1   = { defs={} expr=v4234[1] }
        nt      = { defs={} expr=v4235[1] }
        ?15     = { defs={} expr=v4236[1] }
        rf      = { defs={} expr=v4237[1] }
        vm      = { defs={} expr=v4238[1] }
        ac      = { defs={} expr=v4239[1] }
        vif     = { defs={} expr=v4240[1] }
        vip     = { defs={} expr=v4241[1] }
        id      = { defs={} expr=v4242[1] }
        ?22     = { defs={} expr=v4243[1] }
        ?23     = { defs={} expr=v4244[1] }
        ?24     = { defs={} expr=v4245[1] }
        ?25     = { defs={} expr=v4246[1] }
        ?26     = { defs={} expr=v4247[1] }
        ?27     = { defs={} expr=v4248[1] }
        ?28     = { defs={} expr=v4249[1] }
        ?29     = { defs={} expr=v4250[1] }
        ?30     = { defs={} expr=v4251[1] }
        ?31     = { defs={} expr=v4252[1] }
        ip      = { defs={0x08048460,0x08048461,0x08048463,0x08048466} expr=0x0804846d[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v4211[32] -4[32]) -8[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4211[32] -4[32]) -8[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4211[32] -4[32]) -8[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x08048460,0x08048463,0x08048466} expr=(add[32] (add[32] v4211[32] -4[32]) -8[32]) }
          value = { defs={} expr=-44[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4211[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4212[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4211[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4212[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4211[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4212[32]) }
          flags = { }
        address = { defs={0x08048460} expr=(add[32] v4211[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4212[32]) }
          flags = { }
    init mem:
0x804846d:call   0x08048300<puts@plt>
    registers:
        ax      = { defs={} expr=v4207[32] }
        cx      = { defs={} expr=v4208[32] }
        dx      = { defs={} expr=v4209[32] }
        bx      = { defs={} expr=v4210[32] }
        sp      = { defs={0x08048460,0x08048463,0x0804846d} expr=(add[32] (add[32] (add[32] v4211[32] -4[32]) -8[32]) -4[32]) }
        bp      = { defs={0x08048460,0x08048461} expr=(add[32] v4211[32] -4[32]) }
        si      = { defs={} expr=v4213[32] }
        di      = { defs={} expr=v4214[32] }
        es      = { defs={} expr=v4215[16] }
        cs      = { defs={} expr=v4216[16] }
        ss      = { defs={} expr=v4217[16] }
        ds      = { defs={} expr=v4218[16] }
        fs      = { defs={} expr=v4219[16] }
        gs      = { defs={} expr=v4220[16] }
        cf      = { defs={0x08048460,0x08048463} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4211[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4211[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v4222[1] }
        pf      = { defs={0x08048460,0x08048463} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4211[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4211[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4211[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4211[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4211[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4211[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4211[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4211[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v4224[1] }
        af      = { defs={0x08048460,0x08048463} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4211[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4211[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v4226[1] }
        zf      = { defs={0x08048460,0x08048463} expr=(zerop[1] (add[32] (add[32] v4211[32] -4[32]) -8[32])) }
        sf      = { defs={0x08048460,0x08048463} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v4211[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v4229[1] }
        if      = { defs={} expr=v4230[1] }
        df      = { defs={} expr=v4231[1] }
        of      = { defs={0x08048460,0x08048463} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4211[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4211[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4211[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4211[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v4233[1] }
        iopl1   = { defs={} expr=v4234[1] }
        nt      = { defs={} expr=v4235[1] }
        ?15     = { defs={} expr=v4236[1] }
        rf      = { defs={} expr=v4237[1] }
        vm      = { defs={} expr=v4238[1] }
        ac      = { defs={} expr=v4239[1] }
        vif     = { defs={} expr=v4240[1] }
        vip     = { defs={} expr=v4241[1] }
        id      = { defs={} expr=v4242[1] }
        ?22     = { defs={} expr=v4243[1] }
        ?23     = { defs={} expr=v4244[1] }
        ?24     = { defs={} expr=v4245[1] }
        ?25     = { defs={} expr=v4246[1] }
        ?26     = { defs={} expr=v4247[1] }
        ?27     = { defs={} expr=v4248[1] }
        ?28     = { defs={} expr=v4249[1] }
        ?29     = { defs={} expr=v4250[1] }
        ?30     = { defs={} expr=v4251[1] }
        ?31     = { defs={} expr=v4252[1] }
        ip      = { defs={0x0804846d} expr=0x08048300[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4211[32] -4[32]) -8[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4211[32] -4[32]) -8[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4211[32] -4[32]) -8[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x08048460,0x08048463,0x0804846d} expr=(add[32] (add[32] (add[32] v4211[32] -4[32]) -8[32]) -4[32]) }
          value = { defs={} expr=114[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4211[32] -4[32]) -8[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4211[32] -4[32]) -8[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4211[32] -4[32]) -8[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x08048460,0x08048463,0x08048466} expr=(add[32] (add[32] v4211[32] -4[32]) -8[32]) }
          value = { defs={} expr=-44[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4211[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4212[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4211[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4212[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4211[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4212[32]) }
          flags = { }
        address = { defs={0x08048460} expr=(add[32] v4211[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4212[32]) }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048472:mov    DWORD PTR ss:[esp], 0x00000000
    registers:
        ax      = { defs={} expr=v4378[32] }
        cx      = { defs={} expr=v4379[32] }
        dx      = { defs={} expr=v4380[32] }
        bx      = { defs={} expr=v4381[32] }
        sp      = { defs={} expr=v4382[32] }
        bp      = { defs={} expr=v4383[32] }
        si      = { defs={} expr=v4384[32] }
        di      = { defs={} expr=v4385[32] }
        es      = { defs={} expr=v4386[16] }
        cs      = { defs={} expr=v4387[16] }
        ss      = { defs={} expr=v4388[16] }
        ds      = { defs={} expr=v4389[16] }
        fs      = { defs={} expr=v4390[16] }
        gs      = { defs={} expr=v4391[16] }
        cf      = { defs={} expr=v4392[1] }
        ?1      = { defs={} expr=v4393[1] }
        pf      = { defs={} expr=v4394[1] }
        ?3      = { defs={} expr=v4395[1] }
        af      = { defs={} expr=v4396[1] }
        ?5      = { defs={} expr=v4397[1] }
        zf      = { defs={} expr=v4398[1] }
        sf      = { defs={} expr=v4399[1] }
        tf      = { defs={} expr=v4400[1] }
        if      = { defs={} expr=v4401[1] }
        df      = { defs={} expr=v4402[1] }
        of      = { defs={} expr=v4403[1] }
        iopl0   = { defs={} expr=v4404[1] }
        iopl1   = { defs={} expr=v4405[1] }
        nt      = { defs={} expr=v4406[1] }
        ?15     = { defs={} expr=v4407[1] }
        rf      = { defs={} expr=v4408[1] }
        vm      = { defs={} expr=v4409[1] }
        ac      = { defs={} expr=v4410[1] }
        vif     = { defs={} expr=v4411[1] }
        vip     = { defs={} expr=v4412[1] }
        id      = { defs={} expr=v4413[1] }
        ?22     = { defs={} expr=v4414[1] }
        ?23     = { defs={} expr=v4415[1] }
        ?24     = { defs={} expr=v4416[1] }
        ?25     = { defs={} expr=v4417[1] }
        ?26     = { defs={} expr=v4418[1] }
        ?27     = { defs={} expr=v4419[1] }
        ?28     = { defs={} expr=v4420[1] }
        ?29     = { defs={} expr=v4421[1] }
        ?30     = { defs={} expr=v4422[1] }
        ?31     = { defs={} expr=v4423[1] }
        ip      = { defs={0x08048472} expr=0x08048479[32] }
    memory:
        address = { defs={} expr=(add[32] v4382[32] 3[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] v4382[32] 2[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] v4382[32] 1[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={0x08048472} expr=v4382[32] }
          value = { defs={} expr=0[8] }
          flags = { }
    init mem:
0x8048479:call   0x08048320<_exit@plt>
    registers:
        ax      = { defs={} expr=v4378[32] }
        cx      = { defs={} expr=v4379[32] }
        dx      = { defs={} expr=v4380[32] }
        bx      = { defs={} expr=v4381[32] }
        sp      = { defs={0x08048479} expr=(add[32] v4382[32] -4[32]) }
        bp      = { defs={} expr=v4383[32] }
        si      = { defs={} expr=v4384[32] }
        di      = { defs={} expr=v4385[32] }
        es      = { defs={} expr=v4386[16] }
        cs      = { defs={} expr=v4387[16] }
        ss      = { defs={} expr=v4388[16] }
        ds      = { defs={} expr=v4389[16] }
        fs      = { defs={} expr=v4390[16] }
        gs      = { defs={} expr=v4391[16] }
        cf      = { defs={} expr=v4392[1] }
        ?1      = { defs={} expr=v4393[1] }
        pf      = { defs={} expr=v4394[1] }
        ?3      = { defs={} expr=v4395[1] }
        af      = { defs={} expr=v4396[1] }
        ?5      = { defs={} expr=v4397[1] }
        zf      = { defs={} expr=v4398[1] }
        sf      = { defs={} expr=v4399[1] }
        tf      = { defs={} expr=v4400[1] }
        if      = { defs={} expr=v4401[1] }
        df      = { defs={} expr=v4402[1] }
        of      = { defs={} expr=v4403[1] }
        iopl0   = { defs={} expr=v4404[1] }
        iopl1   = { defs={} expr=v4405[1] }
        nt      = { defs={} expr=v4406[1] }
        ?15     = { defs={} expr=v4407[1] }
        rf      = { defs={} expr=v4408[1] }
        vm      = { defs={} expr=v4409[1] }
        ac      = { defs={} expr=v4410[1] }
        vif     = { defs={} expr=v4411[1] }
        vip     = { defs={} expr=v4412[1] }
        id      = { defs={} expr=v4413[1] }
        ?22     = { defs={} expr=v4414[1] }
        ?23     = { defs={} expr=v4415[1] }
        ?24     = { defs={} expr=v4416[1] }
        ?25     = { defs={} expr=v4417[1] }
        ?26     = { defs={} expr=v4418[1] }
        ?27     = { defs={} expr=v4419[1] }
        ?28     = { defs={} expr=v4420[1] }
        ?29     = { defs={} expr=v4421[1] }
        ?30     = { defs={} expr=v4422[1] }
        ?31     = { defs={} expr=v4423[1] }
        ip      = { defs={0x08048479} expr=0x08048320[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v4382[32] -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4382[32] -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4382[32] -4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x08048479} expr=(add[32] v4382[32] -4[32]) }
          value = { defs={} expr=126[8] }
          flags = { }
        address = { defs={} expr=(add[32] v4382[32] 3[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] v4382[32] 2[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] v4382[32] 1[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={0x08048472} expr=v4382[32] }
          value = { defs={} expr=0[8] }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048480:push   ebp
    registers:
        ax      = { defs={} expr=v4485[32] }
        cx      = { defs={} expr=v4486[32] }
        dx      = { defs={} expr=v4487[32] }
        bx      = { defs={} expr=v4488[32] }
        sp      = { defs={0x08048480} expr=(add[32] v4489[32] -4[32]) }
        bp      = { defs={} expr=v4490[32] }
        si      = { defs={} expr=v4491[32] }
        di      = { defs={} expr=v4492[32] }
        es      = { defs={} expr=v4493[16] }
        cs      = { defs={} expr=v4494[16] }
        ss      = { defs={} expr=v4495[16] }
        ds      = { defs={} expr=v4496[16] }
        fs      = { defs={} expr=v4497[16] }
        gs      = { defs={} expr=v4498[16] }
        cf      = { defs={} expr=v4499[1] }
        ?1      = { defs={} expr=v4500[1] }
        pf      = { defs={} expr=v4501[1] }
        ?3      = { defs={} expr=v4502[1] }
        af      = { defs={} expr=v4503[1] }
        ?5      = { defs={} expr=v4504[1] }
        zf      = { defs={} expr=v4505[1] }
        sf      = { defs={} expr=v4506[1] }
        tf      = { defs={} expr=v4507[1] }
        if      = { defs={} expr=v4508[1] }
        df      = { defs={} expr=v4509[1] }
        of      = { defs={} expr=v4510[1] }
        iopl0   = { defs={} expr=v4511[1] }
        iopl1   = { defs={} expr=v4512[1] }
        nt      = { defs={} expr=v4513[1] }
        ?15     = { defs={} expr=v4514[1] }
        rf      = { defs={} expr=v4515[1] }
        vm      = { defs={} expr=v4516[1] }
        ac      = { defs={} expr=v4517[1] }
        vif     = { defs={} expr=v4518[1] }
        vip     = { defs={} expr=v4519[1] }
        id      = { defs={} expr=v4520[1] }
        ?22     = { defs={} expr=v4521[1] }
        ?23     = { defs={} expr=v4522[1] }
        ?24     = { defs={} expr=v4523[1] }
        ?25     = { defs={} expr=v4524[1] }
        ?26     = { defs={} expr=v4525[1] }
        ?27     = { defs={} expr=v4526[1] }
        ?28     = { defs={} expr=v4527[1] }
        ?29     = { defs={} expr=v4528[1] }
        ?30     = { defs={} expr=v4529[1] }
        ?31     = { defs={} expr=v4530[1] }
        ip      = { defs={0x08048480} expr=0x08048481[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v4489[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4490[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4489[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4490[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4489[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4490[32]) }
          flags = { }
        address = { defs={0x08048480} expr=(add[32] v4489[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4490[32]) }
          flags = { }
    init mem:
0x8048481:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v4485[32] }
        cx      = { defs={} expr=v4486[32] }
        dx      = { defs={} expr=v4487[32] }
        bx      = { defs={} expr=v4488[32] }
        sp      = { defs={0x08048480} expr=(add[32] v4489[32] -4[32]) }
        bp      = { defs={0x08048480,0x08048481} expr=(add[32] v4489[32] -4[32]) }
        si      = { defs={} expr=v4491[32] }
        di      = { defs={} expr=v4492[32] }
        es      = { defs={} expr=v4493[16] }
        cs      = { defs={} expr=v4494[16] }
        ss      = { defs={} expr=v4495[16] }
        ds      = { defs={} expr=v4496[16] }
        fs      = { defs={} expr=v4497[16] }
        gs      = { defs={} expr=v4498[16] }
        cf      = { defs={} expr=v4499[1] }
        ?1      = { defs={} expr=v4500[1] }
        pf      = { defs={} expr=v4501[1] }
        ?3      = { defs={} expr=v4502[1] }
        af      = { defs={} expr=v4503[1] }
        ?5      = { defs={} expr=v4504[1] }
        zf      = { defs={} expr=v4505[1] }
        sf      = { defs={} expr=v4506[1] }
        tf      = { defs={} expr=v4507[1] }
        if      = { defs={} expr=v4508[1] }
        df      = { defs={} expr=v4509[1] }
        of      = { defs={} expr=v4510[1] }
        iopl0   = { defs={} expr=v4511[1] }
        iopl1   = { defs={} expr=v4512[1] }
        nt      = { defs={} expr=v4513[1] }
        ?15     = { defs={} expr=v4514[1] }
        rf      = { defs={} expr=v4515[1] }
        vm      = { defs={} expr=v4516[1] }
        ac      = { defs={} expr=v4517[1] }
        vif     = { defs={} expr=v4518[1] }
        vip     = { defs={} expr=v4519[1] }
        id      = { defs={} expr=v4520[1] }
        ?22     = { defs={} expr=v4521[1] }
        ?23     = { defs={} expr=v4522[1] }
        ?24     = { defs={} expr=v4523[1] }
        ?25     = { defs={} expr=v4524[1] }
        ?26     = { defs={} expr=v4525[1] }
        ?27     = { defs={} expr=v4526[1] }
        ?28     = { defs={} expr=v4527[1] }
        ?29     = { defs={} expr=v4528[1] }
        ?30     = { defs={} expr=v4529[1] }
        ?31     = { defs={} expr=v4530[1] }
        ip      = { defs={0x08048480,0x08048481} expr=0x08048483[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v4489[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4490[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4489[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4490[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4489[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4490[32]) }
          flags = { }
        address = { defs={0x08048480} expr=(add[32] v4489[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4490[32]) }
          flags = { }
    init mem:
0x8048483:sub    esp, 0x08
    registers:
        ax      = { defs={} expr=v4485[32] }
        cx      = { defs={} expr=v4486[32] }
        dx      = { defs={} expr=v4487[32] }
        bx      = { defs={} expr=v4488[32] }
        sp      = { defs={0x08048480,0x08048483} expr=(add[32] (add[32] v4489[32] -4[32]) -8[32]) }
        bp      = { defs={0x08048480,0x08048481} expr=(add[32] v4489[32] -4[32]) }
        si      = { defs={} expr=v4491[32] }
        di      = { defs={} expr=v4492[32] }
        es      = { defs={} expr=v4493[16] }
        cs      = { defs={} expr=v4494[16] }
        ss      = { defs={} expr=v4495[16] }
        ds      = { defs={} expr=v4496[16] }
        fs      = { defs={} expr=v4497[16] }
        gs      = { defs={} expr=v4498[16] }
        cf      = { defs={0x08048480,0x08048483} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4489[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4489[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v4500[1] }
        pf      = { defs={0x08048480,0x08048483} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4489[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4489[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4489[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4489[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4489[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4489[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4489[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4489[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v4502[1] }
        af      = { defs={0x08048480,0x08048483} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4489[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4489[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v4504[1] }
        zf      = { defs={0x08048480,0x08048483} expr=(zerop[1] (add[32] (add[32] v4489[32] -4[32]) -8[32])) }
        sf      = { defs={0x08048480,0x08048483} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v4489[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v4507[1] }
        if      = { defs={} expr=v4508[1] }
        df      = { defs={} expr=v4509[1] }
        of      = { defs={0x08048480,0x08048483} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4489[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4489[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4489[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4489[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v4511[1] }
        iopl1   = { defs={} expr=v4512[1] }
        nt      = { defs={} expr=v4513[1] }
        ?15     = { defs={} expr=v4514[1] }
        rf      = { defs={} expr=v4515[1] }
        vm      = { defs={} expr=v4516[1] }
        ac      = { defs={} expr=v4517[1] }
        vif     = { defs={} expr=v4518[1] }
        vip     = { defs={} expr=v4519[1] }
        id      = { defs={} expr=v4520[1] }
        ?22     = { defs={} expr=v4521[1] }
        ?23     = { defs={} expr=v4522[1] }
        ?24     = { defs={} expr=v4523[1] }
        ?25     = { defs={} expr=v4524[1] }
        ?26     = { defs={} expr=v4525[1] }
        ?27     = { defs={} expr=v4526[1] }
        ?28     = { defs={} expr=v4527[1] }
        ?29     = { defs={} expr=v4528[1] }
        ?30     = { defs={} expr=v4529[1] }
        ?31     = { defs={} expr=v4530[1] }
        ip      = { defs={0x08048480,0x08048481,0x08048483} expr=0x08048486[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v4489[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4490[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4489[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4490[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4489[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4490[32]) }
          flags = { }
        address = { defs={0x08048480} expr=(add[32] v4489[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4490[32]) }
          flags = { }
    init mem:
0x8048486:inc    DWORD PTR ds:[0x080496f8<.bss+4>]
    registers:
        ax      = { defs={} expr=v4485[32] }
        cx      = { defs={} expr=v4486[32] }
        dx      = { defs={} expr=v4487[32] }
        bx      = { defs={} expr=v4488[32] }
        sp      = { defs={0x08048480,0x08048483} expr=(add[32] (add[32] v4489[32] -4[32]) -8[32]) }
        bp      = { defs={0x08048480,0x08048481} expr=(add[32] v4489[32] -4[32]) }
        si      = { defs={} expr=v4491[32] }
        di      = { defs={} expr=v4492[32] }
        es      = { defs={} expr=v4493[16] }
        cs      = { defs={} expr=v4494[16] }
        ss      = { defs={} expr=v4495[16] }
        ds      = { defs={} expr=v4496[16] }
        fs      = { defs={} expr=v4497[16] }
        gs      = { defs={} expr=v4498[16] }
        cf      = { defs={0x08048480,0x08048483} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4489[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4489[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v4500[1] }
        pf      = { defs={0x08048486} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4601[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4602[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4603[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4604[8]))) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4601[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4602[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4603[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4604[8]))) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4601[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4602[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4603[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4604[8]))) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4601[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4602[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4603[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4604[8]))) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4601[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4602[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4603[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4604[8]))) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4601[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4602[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4603[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4604[8]))) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4601[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4602[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4603[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4604[8]))) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4601[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4602[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4603[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4604[8]))) 1[32]))))))) }
        ?3      = { defs={} expr=v4502[1] }
        af      = { defs={0x08048486} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4601[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4602[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4603[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4604[8])))) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4601[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4602[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4603[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4604[8])))) 1[33]))))) }
        ?5      = { defs={} expr=v4504[1] }
        zf      = { defs={0x08048486} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4601[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4602[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4603[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4604[8]))) 1[32])) }
        sf      = { defs={0x08048486} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4601[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4602[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4603[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4604[8]))) 1[32])) }
        tf      = { defs={} expr=v4507[1] }
        if      = { defs={} expr=v4508[1] }
        df      = { defs={} expr=v4509[1] }
        of      = { defs={0x08048486} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4601[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4602[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4603[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4604[8])))) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4601[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4602[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4603[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4604[8])))) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4601[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4602[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4603[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4604[8])))) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4601[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4602[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4603[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4604[8])))) 1[33])))))) }
        iopl0   = { defs={} expr=v4511[1] }
        iopl1   = { defs={} expr=v4512[1] }
        nt      = { defs={} expr=v4513[1] }
        ?15     = { defs={} expr=v4514[1] }
        rf      = { defs={} expr=v4515[1] }
        vm      = { defs={} expr=v4516[1] }
        ac      = { defs={} expr=v4517[1] }
        vif     = { defs={} expr=v4518[1] }
        vip     = { defs={} expr=v4519[1] }
        id      = { defs={} expr=v4520[1] }
        ?22     = { defs={} expr=v4521[1] }
        ?23     = { defs={} expr=v4522[1] }
        ?24     = { defs={} expr=v4523[1] }
        ?25     = { defs={} expr=v4524[1] }
        ?26     = { defs={} expr=v4525[1] }
        ?27     = { defs={} expr=v4526[1] }
        ?28     = { defs={} expr=v4527[1] }
        ?29     = { defs={} expr=v4528[1] }
        ?30     = { defs={} expr=v4529[1] }
        ?31     = { defs={} expr=v4530[1] }
        ip      = { defs={0x08048480,0x08048481,0x08048483,0x08048486} expr=0x0804848c[32] }
    memory:
        address = { defs={} expr=0x080496fb[32] }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4601[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4602[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4603[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4604[8]))) 1[32])) }
          flags = { }
        address = { defs={} expr=0x080496fa[32] }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4601[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4602[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4603[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4604[8]))) 1[32])) }
          flags = { }
        address = { defs={} expr=0x080496f9[32] }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4601[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4602[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4603[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4604[8]))) 1[32])) }
          flags = { }
        address = { defs={0x08048486} expr=0x080496f8[32] }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4601[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4602[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4603[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4604[8]))) 1[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4489[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4490[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4489[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4490[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4489[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4490[32]) }
          flags = { }
        address = { defs={0x08048480} expr=(add[32] v4489[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4490[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=0x080496fb[32] }
          value = { defs={} expr=v4604[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496fa[32] }
          value = { defs={} expr=v4603[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f9[32] }
          value = { defs={} expr=v4602[8] }
          flags = { rdonly }
        address = { defs={0x08048486} expr=0x080496f8[32] }
          value = { defs={} expr=v4601[8] }
          flags = { rdonly }
0x804848c:mov    DWORD PTR ss:[esp], 0x080485d4<<StaticData@0x080485ca>+0x0a>
    registers:
        ax      = { defs={} expr=v4485[32] }
        cx      = { defs={} expr=v4486[32] }
        dx      = { defs={} expr=v4487[32] }
        bx      = { defs={} expr=v4488[32] }
        sp      = { defs={0x08048480,0x08048483} expr=(add[32] (add[32] v4489[32] -4[32]) -8[32]) }
        bp      = { defs={0x08048480,0x08048481} expr=(add[32] v4489[32] -4[32]) }
        si      = { defs={} expr=v4491[32] }
        di      = { defs={} expr=v4492[32] }
        es      = { defs={} expr=v4493[16] }
        cs      = { defs={} expr=v4494[16] }
        ss      = { defs={} expr=v4495[16] }
        ds      = { defs={} expr=v4496[16] }
        fs      = { defs={} expr=v4497[16] }
        gs      = { defs={} expr=v4498[16] }
        cf      = { defs={0x08048480,0x08048483} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4489[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4489[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v4500[1] }
        pf      = { defs={0x08048486} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4601[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4602[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4603[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4604[8]))) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4601[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4602[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4603[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4604[8]))) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4601[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4602[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4603[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4604[8]))) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4601[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4602[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4603[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4604[8]))) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4601[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4602[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4603[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4604[8]))) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4601[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4602[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4603[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4604[8]))) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4601[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4602[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4603[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4604[8]))) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4601[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4602[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4603[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4604[8]))) 1[32]))))))) }
        ?3      = { defs={} expr=v4502[1] }
        af      = { defs={0x08048486} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4601[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4602[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4603[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4604[8])))) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4601[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4602[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4603[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4604[8])))) 1[33]))))) }
        ?5      = { defs={} expr=v4504[1] }
        zf      = { defs={0x08048486} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4601[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4602[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4603[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4604[8]))) 1[32])) }
        sf      = { defs={0x08048486} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4601[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4602[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4603[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4604[8]))) 1[32])) }
        tf      = { defs={} expr=v4507[1] }
        if      = { defs={} expr=v4508[1] }
        df      = { defs={} expr=v4509[1] }
        of      = { defs={0x08048486} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4601[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4602[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4603[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4604[8])))) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4601[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4602[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4603[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4604[8])))) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4601[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4602[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4603[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4604[8])))) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4601[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4602[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4603[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4604[8])))) 1[33])))))) }
        iopl0   = { defs={} expr=v4511[1] }
        iopl1   = { defs={} expr=v4512[1] }
        nt      = { defs={} expr=v4513[1] }
        ?15     = { defs={} expr=v4514[1] }
        rf      = { defs={} expr=v4515[1] }
        vm      = { defs={} expr=v4516[1] }
        ac      = { defs={} expr=v4517[1] }
        vif     = { defs={} expr=v4518[1] }
        vip     = { defs={} expr=v4519[1] }
        id      = { defs={} expr=v4520[1] }
        ?22     = { defs={} expr=v4521[1] }
        ?23     = { defs={} expr=v4522[1] }
        ?24     = { defs={} expr=v4523[1] }
        ?25     = { defs={} expr=v4524[1] }
        ?26     = { defs={} expr=v4525[1] }
        ?27     = { defs={} expr=v4526[1] }
        ?28     = { defs={} expr=v4527[1] }
        ?29     = { defs={} expr=v4528[1] }
        ?30     = { defs={} expr=v4529[1] }
        ?31     = { defs={} expr=v4530[1] }
        ip      = { defs={0x08048480,0x08048481,0x08048483,0x08048486,0x0804848c} expr=0x08048493[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v4489[32] -4[32]) -8[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4489[32] -4[32]) -8[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4489[32] -4[32]) -8[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x08048480,0x08048483,0x0804848c} expr=(add[32] (add[32] v4489[32] -4[32]) -8[32]) }
          value = { defs={} expr=-44[8] }
          flags = { }
        address = { defs={} expr=0x080496fb[32] }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4601[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4602[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4603[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4604[8]))) 1[32])) }
          flags = { }
        address = { defs={} expr=0x080496fa[32] }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4601[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4602[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4603[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4604[8]))) 1[32])) }
          flags = { }
        address = { defs={} expr=0x080496f9[32] }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4601[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4602[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4603[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4604[8]))) 1[32])) }
          flags = { }
        address = { defs={0x08048486} expr=0x080496f8[32] }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4601[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4602[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4603[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4604[8]))) 1[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4489[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4490[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4489[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4490[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4489[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4490[32]) }
          flags = { }
        address = { defs={0x08048480} expr=(add[32] v4489[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4490[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=0x080496fb[32] }
          value = { defs={} expr=v4604[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496fa[32] }
          value = { defs={} expr=v4603[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f9[32] }
          value = { defs={} expr=v4602[8] }
          flags = { rdonly }
        address = { defs={0x08048486} expr=0x080496f8[32] }
          value = { defs={} expr=v4601[8] }
          flags = { rdonly }
0x8048493:call   0x08048300<puts@plt>
    registers:
        ax      = { defs={} expr=v4485[32] }
        cx      = { defs={} expr=v4486[32] }
        dx      = { defs={} expr=v4487[32] }
        bx      = { defs={} expr=v4488[32] }
        sp      = { defs={0x08048480,0x08048483,0x08048493} expr=(add[32] (add[32] (add[32] v4489[32] -4[32]) -8[32]) -4[32]) }
        bp      = { defs={0x08048480,0x08048481} expr=(add[32] v4489[32] -4[32]) }
        si      = { defs={} expr=v4491[32] }
        di      = { defs={} expr=v4492[32] }
        es      = { defs={} expr=v4493[16] }
        cs      = { defs={} expr=v4494[16] }
        ss      = { defs={} expr=v4495[16] }
        ds      = { defs={} expr=v4496[16] }
        fs      = { defs={} expr=v4497[16] }
        gs      = { defs={} expr=v4498[16] }
        cf      = { defs={0x08048480,0x08048483} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4489[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4489[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v4500[1] }
        pf      = { defs={0x08048486} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4601[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4602[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4603[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4604[8]))) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4601[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4602[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4603[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4604[8]))) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4601[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4602[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4603[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4604[8]))) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4601[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4602[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4603[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4604[8]))) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4601[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4602[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4603[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4604[8]))) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4601[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4602[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4603[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4604[8]))) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4601[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4602[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4603[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4604[8]))) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4601[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4602[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4603[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4604[8]))) 1[32]))))))) }
        ?3      = { defs={} expr=v4502[1] }
        af      = { defs={0x08048486} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4601[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4602[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4603[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4604[8])))) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4601[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4602[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4603[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4604[8])))) 1[33]))))) }
        ?5      = { defs={} expr=v4504[1] }
        zf      = { defs={0x08048486} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4601[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4602[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4603[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4604[8]))) 1[32])) }
        sf      = { defs={0x08048486} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4601[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4602[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4603[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4604[8]))) 1[32])) }
        tf      = { defs={} expr=v4507[1] }
        if      = { defs={} expr=v4508[1] }
        df      = { defs={} expr=v4509[1] }
        of      = { defs={0x08048486} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4601[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4602[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4603[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4604[8])))) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4601[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4602[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4603[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4604[8])))) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4601[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4602[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4603[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4604[8])))) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4601[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4602[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4603[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4604[8])))) 1[33])))))) }
        iopl0   = { defs={} expr=v4511[1] }
        iopl1   = { defs={} expr=v4512[1] }
        nt      = { defs={} expr=v4513[1] }
        ?15     = { defs={} expr=v4514[1] }
        rf      = { defs={} expr=v4515[1] }
        vm      = { defs={} expr=v4516[1] }
        ac      = { defs={} expr=v4517[1] }
        vif     = { defs={} expr=v4518[1] }
        vip     = { defs={} expr=v4519[1] }
        id      = { defs={} expr=v4520[1] }
        ?22     = { defs={} expr=v4521[1] }
        ?23     = { defs={} expr=v4522[1] }
        ?24     = { defs={} expr=v4523[1] }
        ?25     = { defs={} expr=v4524[1] }
        ?26     = { defs={} expr=v4525[1] }
        ?27     = { defs={} expr=v4526[1] }
        ?28     = { defs={} expr=v4527[1] }
        ?29     = { defs={} expr=v4528[1] }
        ?30     = { defs={} expr=v4529[1] }
        ?31     = { defs={} expr=v4530[1] }
        ip      = { defs={0x08048493} expr=0x08048300[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4489[32] -4[32]) -8[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4489[32] -4[32]) -8[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4489[32] -4[32]) -8[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x08048480,0x08048483,0x08048493} expr=(add[32] (add[32] (add[32] v4489[32] -4[32]) -8[32]) -4[32]) }
          value = { defs={} expr=-104[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4489[32] -4[32]) -8[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4489[32] -4[32]) -8[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4489[32] -4[32]) -8[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x08048480,0x08048483,0x0804848c} expr=(add[32] (add[32] v4489[32] -4[32]) -8[32]) }
          value = { defs={} expr=-44[8] }
          flags = { }
        address = { defs={} expr=0x080496fb[32] }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4601[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4602[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4603[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4604[8]))) 1[32])) }
          flags = { }
        address = { defs={} expr=0x080496fa[32] }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4601[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4602[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4603[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4604[8]))) 1[32])) }
          flags = { }
        address = { defs={} expr=0x080496f9[32] }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4601[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4602[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4603[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4604[8]))) 1[32])) }
          flags = { }
        address = { defs={0x08048486} expr=0x080496f8[32] }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4601[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4602[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4603[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4604[8]))) 1[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4489[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4490[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4489[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4490[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4489[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4490[32]) }
          flags = { }
        address = { defs={0x08048480} expr=(add[32] v4489[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4490[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=0x080496fb[32] }
          value = { defs={} expr=v4604[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496fa[32] }
          value = { defs={} expr=v4603[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f9[32] }
          value = { defs={} expr=v4602[8] }
          flags = { rdonly }
        address = { defs={0x08048486} expr=0x080496f8[32] }
          value = { defs={} expr=v4601[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048498:mov    DWORD PTR ss:[esp], 0x00000000
    registers:
        ax      = { defs={} expr=v4710[32] }
        cx      = { defs={} expr=v4711[32] }
        dx      = { defs={} expr=v4712[32] }
        bx      = { defs={} expr=v4713[32] }
        sp      = { defs={} expr=v4714[32] }
        bp      = { defs={} expr=v4715[32] }
        si      = { defs={} expr=v4716[32] }
        di      = { defs={} expr=v4717[32] }
        es      = { defs={} expr=v4718[16] }
        cs      = { defs={} expr=v4719[16] }
        ss      = { defs={} expr=v4720[16] }
        ds      = { defs={} expr=v4721[16] }
        fs      = { defs={} expr=v4722[16] }
        gs      = { defs={} expr=v4723[16] }
        cf      = { defs={} expr=v4724[1] }
        ?1      = { defs={} expr=v4725[1] }
        pf      = { defs={} expr=v4726[1] }
        ?3      = { defs={} expr=v4727[1] }
        af      = { defs={} expr=v4728[1] }
        ?5      = { defs={} expr=v4729[1] }
        zf      = { defs={} expr=v4730[1] }
        sf      = { defs={} expr=v4731[1] }
        tf      = { defs={} expr=v4732[1] }
        if      = { defs={} expr=v4733[1] }
        df      = { defs={} expr=v4734[1] }
        of      = { defs={} expr=v4735[1] }
        iopl0   = { defs={} expr=v4736[1] }
        iopl1   = { defs={} expr=v4737[1] }
        nt      = { defs={} expr=v4738[1] }
        ?15     = { defs={} expr=v4739[1] }
        rf      = { defs={} expr=v4740[1] }
        vm      = { defs={} expr=v4741[1] }
        ac      = { defs={} expr=v4742[1] }
        vif     = { defs={} expr=v4743[1] }
        vip     = { defs={} expr=v4744[1] }
        id      = { defs={} expr=v4745[1] }
        ?22     = { defs={} expr=v4746[1] }
        ?23     = { defs={} expr=v4747[1] }
        ?24     = { defs={} expr=v4748[1] }
        ?25     = { defs={} expr=v4749[1] }
        ?26     = { defs={} expr=v4750[1] }
        ?27     = { defs={} expr=v4751[1] }
        ?28     = { defs={} expr=v4752[1] }
        ?29     = { defs={} expr=v4753[1] }
        ?30     = { defs={} expr=v4754[1] }
        ?31     = { defs={} expr=v4755[1] }
        ip      = { defs={0x08048498} expr=0x0804849f[32] }
    memory:
        address = { defs={} expr=(add[32] v4714[32] 3[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] v4714[32] 2[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] v4714[32] 1[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={0x08048498} expr=v4714[32] }
          value = { defs={} expr=0[8] }
          flags = { }
    init mem:
0x804849f:call   0x08048320<_exit@plt>
    registers:
        ax      = { defs={} expr=v4710[32] }
        cx      = { defs={} expr=v4711[32] }
        dx      = { defs={} expr=v4712[32] }
        bx      = { defs={} expr=v4713[32] }
        sp      = { defs={0x0804849f} expr=(add[32] v4714[32] -4[32]) }
        bp      = { defs={} expr=v4715[32] }
        si      = { defs={} expr=v4716[32] }
        di      = { defs={} expr=v4717[32] }
        es      = { defs={} expr=v4718[16] }
        cs      = { defs={} expr=v4719[16] }
        ss      = { defs={} expr=v4720[16] }
        ds      = { defs={} expr=v4721[16] }
        fs      = { defs={} expr=v4722[16] }
        gs      = { defs={} expr=v4723[16] }
        cf      = { defs={} expr=v4724[1] }
        ?1      = { defs={} expr=v4725[1] }
        pf      = { defs={} expr=v4726[1] }
        ?3      = { defs={} expr=v4727[1] }
        af      = { defs={} expr=v4728[1] }
        ?5      = { defs={} expr=v4729[1] }
        zf      = { defs={} expr=v4730[1] }
        sf      = { defs={} expr=v4731[1] }
        tf      = { defs={} expr=v4732[1] }
        if      = { defs={} expr=v4733[1] }
        df      = { defs={} expr=v4734[1] }
        of      = { defs={} expr=v4735[1] }
        iopl0   = { defs={} expr=v4736[1] }
        iopl1   = { defs={} expr=v4737[1] }
        nt      = { defs={} expr=v4738[1] }
        ?15     = { defs={} expr=v4739[1] }
        rf      = { defs={} expr=v4740[1] }
        vm      = { defs={} expr=v4741[1] }
        ac      = { defs={} expr=v4742[1] }
        vif     = { defs={} expr=v4743[1] }
        vip     = { defs={} expr=v4744[1] }
        id      = { defs={} expr=v4745[1] }
        ?22     = { defs={} expr=v4746[1] }
        ?23     = { defs={} expr=v4747[1] }
        ?24     = { defs={} expr=v4748[1] }
        ?25     = { defs={} expr=v4749[1] }
        ?26     = { defs={} expr=v4750[1] }
        ?27     = { defs={} expr=v4751[1] }
        ?28     = { defs={} expr=v4752[1] }
        ?29     = { defs={} expr=v4753[1] }
        ?30     = { defs={} expr=v4754[1] }
        ?31     = { defs={} expr=v4755[1] }
        ip      = { defs={0x0804849f} expr=0x08048320[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v4714[32] -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4714[32] -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4714[32] -4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x0804849f} expr=(add[32] v4714[32] -4[32]) }
          value = { defs={} expr=-92[8] }
          flags = { }
        address = { defs={} expr=(add[32] v4714[32] 3[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] v4714[32] 2[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] v4714[32] 1[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={0x08048498} expr=v4714[32] }
          value = { defs={} expr=0[8] }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80484b0:push   ebp
    registers:
        ax      = { defs={} expr=v4817[32] }
        cx      = { defs={} expr=v4818[32] }
        dx      = { defs={} expr=v4819[32] }
        bx      = { defs={} expr=v4820[32] }
        sp      = { defs={0x080484b0} expr=(add[32] v4821[32] -4[32]) }
        bp      = { defs={} expr=v4822[32] }
        si      = { defs={} expr=v4823[32] }
        di      = { defs={} expr=v4824[32] }
        es      = { defs={} expr=v4825[16] }
        cs      = { defs={} expr=v4826[16] }
        ss      = { defs={} expr=v4827[16] }
        ds      = { defs={} expr=v4828[16] }
        fs      = { defs={} expr=v4829[16] }
        gs      = { defs={} expr=v4830[16] }
        cf      = { defs={} expr=v4831[1] }
        ?1      = { defs={} expr=v4832[1] }
        pf      = { defs={} expr=v4833[1] }
        ?3      = { defs={} expr=v4834[1] }
        af      = { defs={} expr=v4835[1] }
        ?5      = { defs={} expr=v4836[1] }
        zf      = { defs={} expr=v4837[1] }
        sf      = { defs={} expr=v4838[1] }
        tf      = { defs={} expr=v4839[1] }
        if      = { defs={} expr=v4840[1] }
        df      = { defs={} expr=v4841[1] }
        of      = { defs={} expr=v4842[1] }
        iopl0   = { defs={} expr=v4843[1] }
        iopl1   = { defs={} expr=v4844[1] }
        nt      = { defs={} expr=v4845[1] }
        ?15     = { defs={} expr=v4846[1] }
        rf      = { defs={} expr=v4847[1] }
        vm      = { defs={} expr=v4848[1] }
        ac      = { defs={} expr=v4849[1] }
        vif     = { defs={} expr=v4850[1] }
        vip     = { defs={} expr=v4851[1] }
        id      = { defs={} expr=v4852[1] }
        ?22     = { defs={} expr=v4853[1] }
        ?23     = { defs={} expr=v4854[1] }
        ?24     = { defs={} expr=v4855[1] }
        ?25     = { defs={} expr=v4856[1] }
        ?26     = { defs={} expr=v4857[1] }
        ?27     = { defs={} expr=v4858[1] }
        ?28     = { defs={} expr=v4859[1] }
        ?29     = { defs={} expr=v4860[1] }
        ?30     = { defs={} expr=v4861[1] }
        ?31     = { defs={} expr=v4862[1] }
        ip      = { defs={0x080484b0} expr=0x080484b1[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v4821[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4822[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4821[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4822[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4821[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4822[32]) }
          flags = { }
        address = { defs={0x080484b0} expr=(add[32] v4821[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4822[32]) }
          flags = { }
    init mem:
0x80484b1:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v4817[32] }
        cx      = { defs={} expr=v4818[32] }
        dx      = { defs={} expr=v4819[32] }
        bx      = { defs={} expr=v4820[32] }
        sp      = { defs={0x080484b0} expr=(add[32] v4821[32] -4[32]) }
        bp      = { defs={0x080484b0,0x080484b1} expr=(add[32] v4821[32] -4[32]) }
        si      = { defs={} expr=v4823[32] }
        di      = { defs={} expr=v4824[32] }
        es      = { defs={} expr=v4825[16] }
        cs      = { defs={} expr=v4826[16] }
        ss      = { defs={} expr=v4827[16] }
        ds      = { defs={} expr=v4828[16] }
        fs      = { defs={} expr=v4829[16] }
        gs      = { defs={} expr=v4830[16] }
        cf      = { defs={} expr=v4831[1] }
        ?1      = { defs={} expr=v4832[1] }
        pf      = { defs={} expr=v4833[1] }
        ?3      = { defs={} expr=v4834[1] }
        af      = { defs={} expr=v4835[1] }
        ?5      = { defs={} expr=v4836[1] }
        zf      = { defs={} expr=v4837[1] }
        sf      = { defs={} expr=v4838[1] }
        tf      = { defs={} expr=v4839[1] }
        if      = { defs={} expr=v4840[1] }
        df      = { defs={} expr=v4841[1] }
        of      = { defs={} expr=v4842[1] }
        iopl0   = { defs={} expr=v4843[1] }
        iopl1   = { defs={} expr=v4844[1] }
        nt      = { defs={} expr=v4845[1] }
        ?15     = { defs={} expr=v4846[1] }
        rf      = { defs={} expr=v4847[1] }
        vm      = { defs={} expr=v4848[1] }
        ac      = { defs={} expr=v4849[1] }
        vif     = { defs={} expr=v4850[1] }
        vip     = { defs={} expr=v4851[1] }
        id      = { defs={} expr=v4852[1] }
        ?22     = { defs={} expr=v4853[1] }
        ?23     = { defs={} expr=v4854[1] }
        ?24     = { defs={} expr=v4855[1] }
        ?25     = { defs={} expr=v4856[1] }
        ?26     = { defs={} expr=v4857[1] }
        ?27     = { defs={} expr=v4858[1] }
        ?28     = { defs={} expr=v4859[1] }
        ?29     = { defs={} expr=v4860[1] }
        ?30     = { defs={} expr=v4861[1] }
        ?31     = { defs={} expr=v4862[1] }
        ip      = { defs={0x080484b0,0x080484b1} expr=0x080484b3[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v4821[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4822[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4821[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4822[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4821[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4822[32]) }
          flags = { }
        address = { defs={0x080484b0} expr=(add[32] v4821[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4822[32]) }
          flags = { }
    init mem:
0x80484b3:push   edi
    registers:
        ax      = { defs={} expr=v4817[32] }
        cx      = { defs={} expr=v4818[32] }
        dx      = { defs={} expr=v4819[32] }
        bx      = { defs={} expr=v4820[32] }
        sp      = { defs={0x080484b0,0x080484b3} expr=(add[32] (add[32] v4821[32] -4[32]) -4[32]) }
        bp      = { defs={0x080484b0,0x080484b1} expr=(add[32] v4821[32] -4[32]) }
        si      = { defs={} expr=v4823[32] }
        di      = { defs={} expr=v4824[32] }
        es      = { defs={} expr=v4825[16] }
        cs      = { defs={} expr=v4826[16] }
        ss      = { defs={} expr=v4827[16] }
        ds      = { defs={} expr=v4828[16] }
        fs      = { defs={} expr=v4829[16] }
        gs      = { defs={} expr=v4830[16] }
        cf      = { defs={} expr=v4831[1] }
        ?1      = { defs={} expr=v4832[1] }
        pf      = { defs={} expr=v4833[1] }
        ?3      = { defs={} expr=v4834[1] }
        af      = { defs={} expr=v4835[1] }
        ?5      = { defs={} expr=v4836[1] }
        zf      = { defs={} expr=v4837[1] }
        sf      = { defs={} expr=v4838[1] }
        tf      = { defs={} expr=v4839[1] }
        if      = { defs={} expr=v4840[1] }
        df      = { defs={} expr=v4841[1] }
        of      = { defs={} expr=v4842[1] }
        iopl0   = { defs={} expr=v4843[1] }
        iopl1   = { defs={} expr=v4844[1] }
        nt      = { defs={} expr=v4845[1] }
        ?15     = { defs={} expr=v4846[1] }
        rf      = { defs={} expr=v4847[1] }
        vm      = { defs={} expr=v4848[1] }
        ac      = { defs={} expr=v4849[1] }
        vif     = { defs={} expr=v4850[1] }
        vip     = { defs={} expr=v4851[1] }
        id      = { defs={} expr=v4852[1] }
        ?22     = { defs={} expr=v4853[1] }
        ?23     = { defs={} expr=v4854[1] }
        ?24     = { defs={} expr=v4855[1] }
        ?25     = { defs={} expr=v4856[1] }
        ?26     = { defs={} expr=v4857[1] }
        ?27     = { defs={} expr=v4858[1] }
        ?28     = { defs={} expr=v4859[1] }
        ?29     = { defs={} expr=v4860[1] }
        ?30     = { defs={} expr=v4861[1] }
        ?31     = { defs={} expr=v4862[1] }
        ip      = { defs={0x080484b0,0x080484b1,0x080484b3} expr=0x080484b4[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4824[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4824[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4824[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3} expr=(add[32] (add[32] v4821[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4824[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4821[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4822[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4821[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4822[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4821[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4822[32]) }
          flags = { }
        address = { defs={0x080484b0} expr=(add[32] v4821[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4822[32]) }
          flags = { }
    init mem:
0x80484b4:push   esi
    registers:
        ax      = { defs={} expr=v4817[32] }
        cx      = { defs={} expr=v4818[32] }
        dx      = { defs={} expr=v4819[32] }
        bx      = { defs={} expr=v4820[32] }
        sp      = { defs={0x080484b0,0x080484b3,0x080484b4} expr=(add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x080484b0,0x080484b1} expr=(add[32] v4821[32] -4[32]) }
        si      = { defs={} expr=v4823[32] }
        di      = { defs={} expr=v4824[32] }
        es      = { defs={} expr=v4825[16] }
        cs      = { defs={} expr=v4826[16] }
        ss      = { defs={} expr=v4827[16] }
        ds      = { defs={} expr=v4828[16] }
        fs      = { defs={} expr=v4829[16] }
        gs      = { defs={} expr=v4830[16] }
        cf      = { defs={} expr=v4831[1] }
        ?1      = { defs={} expr=v4832[1] }
        pf      = { defs={} expr=v4833[1] }
        ?3      = { defs={} expr=v4834[1] }
        af      = { defs={} expr=v4835[1] }
        ?5      = { defs={} expr=v4836[1] }
        zf      = { defs={} expr=v4837[1] }
        sf      = { defs={} expr=v4838[1] }
        tf      = { defs={} expr=v4839[1] }
        if      = { defs={} expr=v4840[1] }
        df      = { defs={} expr=v4841[1] }
        of      = { defs={} expr=v4842[1] }
        iopl0   = { defs={} expr=v4843[1] }
        iopl1   = { defs={} expr=v4844[1] }
        nt      = { defs={} expr=v4845[1] }
        ?15     = { defs={} expr=v4846[1] }
        rf      = { defs={} expr=v4847[1] }
        vm      = { defs={} expr=v4848[1] }
        ac      = { defs={} expr=v4849[1] }
        vif     = { defs={} expr=v4850[1] }
        vip     = { defs={} expr=v4851[1] }
        id      = { defs={} expr=v4852[1] }
        ?22     = { defs={} expr=v4853[1] }
        ?23     = { defs={} expr=v4854[1] }
        ?24     = { defs={} expr=v4855[1] }
        ?25     = { defs={} expr=v4856[1] }
        ?26     = { defs={} expr=v4857[1] }
        ?27     = { defs={} expr=v4858[1] }
        ?28     = { defs={} expr=v4859[1] }
        ?29     = { defs={} expr=v4860[1] }
        ?30     = { defs={} expr=v4861[1] }
        ?31     = { defs={} expr=v4862[1] }
        ip      = { defs={0x080484b0,0x080484b1,0x080484b3,0x080484b4} expr=0x080484b5[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4823[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4823[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4823[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3,0x080484b4} expr=(add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4823[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4824[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4824[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4824[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3} expr=(add[32] (add[32] v4821[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4824[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4821[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4822[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4821[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4822[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4821[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4822[32]) }
          flags = { }
        address = { defs={0x080484b0} expr=(add[32] v4821[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4822[32]) }
          flags = { }
    init mem:
0x80484b5:push   ebx
    registers:
        ax      = { defs={} expr=v4817[32] }
        cx      = { defs={} expr=v4818[32] }
        dx      = { defs={} expr=v4819[32] }
        bx      = { defs={} expr=v4820[32] }
        sp      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5} expr=(add[32] (add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x080484b0,0x080484b1} expr=(add[32] v4821[32] -4[32]) }
        si      = { defs={} expr=v4823[32] }
        di      = { defs={} expr=v4824[32] }
        es      = { defs={} expr=v4825[16] }
        cs      = { defs={} expr=v4826[16] }
        ss      = { defs={} expr=v4827[16] }
        ds      = { defs={} expr=v4828[16] }
        fs      = { defs={} expr=v4829[16] }
        gs      = { defs={} expr=v4830[16] }
        cf      = { defs={} expr=v4831[1] }
        ?1      = { defs={} expr=v4832[1] }
        pf      = { defs={} expr=v4833[1] }
        ?3      = { defs={} expr=v4834[1] }
        af      = { defs={} expr=v4835[1] }
        ?5      = { defs={} expr=v4836[1] }
        zf      = { defs={} expr=v4837[1] }
        sf      = { defs={} expr=v4838[1] }
        tf      = { defs={} expr=v4839[1] }
        if      = { defs={} expr=v4840[1] }
        df      = { defs={} expr=v4841[1] }
        of      = { defs={} expr=v4842[1] }
        iopl0   = { defs={} expr=v4843[1] }
        iopl1   = { defs={} expr=v4844[1] }
        nt      = { defs={} expr=v4845[1] }
        ?15     = { defs={} expr=v4846[1] }
        rf      = { defs={} expr=v4847[1] }
        vm      = { defs={} expr=v4848[1] }
        ac      = { defs={} expr=v4849[1] }
        vif     = { defs={} expr=v4850[1] }
        vip     = { defs={} expr=v4851[1] }
        id      = { defs={} expr=v4852[1] }
        ?22     = { defs={} expr=v4853[1] }
        ?23     = { defs={} expr=v4854[1] }
        ?24     = { defs={} expr=v4855[1] }
        ?25     = { defs={} expr=v4856[1] }
        ?26     = { defs={} expr=v4857[1] }
        ?27     = { defs={} expr=v4858[1] }
        ?28     = { defs={} expr=v4859[1] }
        ?29     = { defs={} expr=v4860[1] }
        ?30     = { defs={} expr=v4861[1] }
        ?31     = { defs={} expr=v4862[1] }
        ip      = { defs={0x080484b0,0x080484b1,0x080484b3,0x080484b4,0x080484b5} expr=0x080484b6[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4820[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4820[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4820[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5} expr=(add[32] (add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4820[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4823[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4823[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4823[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3,0x080484b4} expr=(add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4823[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4824[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4824[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4824[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3} expr=(add[32] (add[32] v4821[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4824[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4821[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4822[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4821[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4822[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4821[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4822[32]) }
          flags = { }
        address = { defs={0x080484b0} expr=(add[32] v4821[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4822[32]) }
          flags = { }
    init mem:
0x80484b6:sub    esp, 0x0c
    registers:
        ax      = { defs={} expr=v4817[32] }
        cx      = { defs={} expr=v4818[32] }
        dx      = { defs={} expr=v4819[32] }
        bx      = { defs={} expr=v4820[32] }
        sp      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) }
        bp      = { defs={0x080484b0,0x080484b1} expr=(add[32] v4821[32] -4[32]) }
        si      = { defs={} expr=v4823[32] }
        di      = { defs={} expr=v4824[32] }
        es      = { defs={} expr=v4825[16] }
        cs      = { defs={} expr=v4826[16] }
        ss      = { defs={} expr=v4827[16] }
        ds      = { defs={} expr=v4828[16] }
        fs      = { defs={} expr=v4829[16] }
        gs      = { defs={} expr=v4830[16] }
        cf      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        ?1      = { defs={} expr=v4832[1] }
        pf      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))))) }
        ?3      = { defs={} expr=v4834[1] }
        af      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        ?5      = { defs={} expr=v4836[1] }
        zf      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(zerop[1] (add[32] (add[32] (add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])) }
        sf      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])) }
        tf      = { defs={} expr=v4839[1] }
        if      = { defs={} expr=v4840[1] }
        df      = { defs={} expr=v4841[1] }
        of      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        iopl0   = { defs={} expr=v4843[1] }
        iopl1   = { defs={} expr=v4844[1] }
        nt      = { defs={} expr=v4845[1] }
        ?15     = { defs={} expr=v4846[1] }
        rf      = { defs={} expr=v4847[1] }
        vm      = { defs={} expr=v4848[1] }
        ac      = { defs={} expr=v4849[1] }
        vif     = { defs={} expr=v4850[1] }
        vip     = { defs={} expr=v4851[1] }
        id      = { defs={} expr=v4852[1] }
        ?22     = { defs={} expr=v4853[1] }
        ?23     = { defs={} expr=v4854[1] }
        ?24     = { defs={} expr=v4855[1] }
        ?25     = { defs={} expr=v4856[1] }
        ?26     = { defs={} expr=v4857[1] }
        ?27     = { defs={} expr=v4858[1] }
        ?28     = { defs={} expr=v4859[1] }
        ?29     = { defs={} expr=v4860[1] }
        ?30     = { defs={} expr=v4861[1] }
        ?31     = { defs={} expr=v4862[1] }
        ip      = { defs={0x080484b0,0x080484b1,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=0x080484b9[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4820[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4820[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4820[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5} expr=(add[32] (add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4820[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4823[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4823[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4823[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3,0x080484b4} expr=(add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4823[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4824[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4824[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4824[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3} expr=(add[32] (add[32] v4821[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4824[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4821[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4822[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4821[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4822[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4821[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4822[32]) }
          flags = { }
        address = { defs={0x080484b0} expr=(add[32] v4821[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4822[32]) }
          flags = { }
    init mem:
0x80484b9:call   0x080484be<<Insn>>
    registers:
        ax      = { defs={} expr=v4817[32] }
        cx      = { defs={} expr=v4818[32] }
        dx      = { defs={} expr=v4819[32] }
        bx      = { defs={} expr=v4820[32] }
        sp      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6,0x080484b9} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) }
        bp      = { defs={0x080484b0,0x080484b1} expr=(add[32] v4821[32] -4[32]) }
        si      = { defs={} expr=v4823[32] }
        di      = { defs={} expr=v4824[32] }
        es      = { defs={} expr=v4825[16] }
        cs      = { defs={} expr=v4826[16] }
        ss      = { defs={} expr=v4827[16] }
        ds      = { defs={} expr=v4828[16] }
        fs      = { defs={} expr=v4829[16] }
        gs      = { defs={} expr=v4830[16] }
        cf      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        ?1      = { defs={} expr=v4832[1] }
        pf      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))))) }
        ?3      = { defs={} expr=v4834[1] }
        af      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        ?5      = { defs={} expr=v4836[1] }
        zf      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(zerop[1] (add[32] (add[32] (add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])) }
        sf      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])) }
        tf      = { defs={} expr=v4839[1] }
        if      = { defs={} expr=v4840[1] }
        df      = { defs={} expr=v4841[1] }
        of      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        iopl0   = { defs={} expr=v4843[1] }
        iopl1   = { defs={} expr=v4844[1] }
        nt      = { defs={} expr=v4845[1] }
        ?15     = { defs={} expr=v4846[1] }
        rf      = { defs={} expr=v4847[1] }
        vm      = { defs={} expr=v4848[1] }
        ac      = { defs={} expr=v4849[1] }
        vif     = { defs={} expr=v4850[1] }
        vip     = { defs={} expr=v4851[1] }
        id      = { defs={} expr=v4852[1] }
        ?22     = { defs={} expr=v4853[1] }
        ?23     = { defs={} expr=v4854[1] }
        ?24     = { defs={} expr=v4855[1] }
        ?25     = { defs={} expr=v4856[1] }
        ?26     = { defs={} expr=v4857[1] }
        ?27     = { defs={} expr=v4858[1] }
        ?28     = { defs={} expr=v4859[1] }
        ?29     = { defs={} expr=v4860[1] }
        ?30     = { defs={} expr=v4861[1] }
        ?31     = { defs={} expr=v4862[1] }
        ip      = { defs={0x080484b9} expr=0x080484be[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6,0x080484b9} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) }
          value = { defs={} expr=-66[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4820[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4820[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4820[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5} expr=(add[32] (add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4820[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4823[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4823[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4823[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3,0x080484b4} expr=(add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4823[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4824[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4824[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4821[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4824[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3} expr=(add[32] (add[32] v4821[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4824[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4821[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4822[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4821[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4822[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4821[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4822[32]) }
          flags = { }
        address = { defs={0x080484b0} expr=(add[32] v4821[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4822[32]) }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80484be:pop    ebx
    registers:
        ax      = { defs={} expr=v5005[32] }
        cx      = { defs={} expr=v5006[32] }
        dx      = { defs={} expr=v5007[32] }
        bx      = { defs={0x080484be} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5060[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5061[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5062[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5063[8]))) }
        sp      = { defs={0x080484be} expr=(add[32] v5009[32] 4[32]) }
        bp      = { defs={} expr=v5010[32] }
        si      = { defs={} expr=v5011[32] }
        di      = { defs={} expr=v5012[32] }
        es      = { defs={} expr=v5013[16] }
        cs      = { defs={} expr=v5014[16] }
        ss      = { defs={} expr=v5015[16] }
        ds      = { defs={} expr=v5016[16] }
        fs      = { defs={} expr=v5017[16] }
        gs      = { defs={} expr=v5018[16] }
        cf      = { defs={} expr=v5019[1] }
        ?1      = { defs={} expr=v5020[1] }
        pf      = { defs={} expr=v5021[1] }
        ?3      = { defs={} expr=v5022[1] }
        af      = { defs={} expr=v5023[1] }
        ?5      = { defs={} expr=v5024[1] }
        zf      = { defs={} expr=v5025[1] }
        sf      = { defs={} expr=v5026[1] }
        tf      = { defs={} expr=v5027[1] }
        if      = { defs={} expr=v5028[1] }
        df      = { defs={} expr=v5029[1] }
        of      = { defs={} expr=v5030[1] }
        iopl0   = { defs={} expr=v5031[1] }
        iopl1   = { defs={} expr=v5032[1] }
        nt      = { defs={} expr=v5033[1] }
        ?15     = { defs={} expr=v5034[1] }
        rf      = { defs={} expr=v5035[1] }
        vm      = { defs={} expr=v5036[1] }
        ac      = { defs={} expr=v5037[1] }
        vif     = { defs={} expr=v5038[1] }
        vip     = { defs={} expr=v5039[1] }
        id      = { defs={} expr=v5040[1] }
        ?22     = { defs={} expr=v5041[1] }
        ?23     = { defs={} expr=v5042[1] }
        ?24     = { defs={} expr=v5043[1] }
        ?25     = { defs={} expr=v5044[1] }
        ?26     = { defs={} expr=v5045[1] }
        ?27     = { defs={} expr=v5046[1] }
        ?28     = { defs={} expr=v5047[1] }
        ?29     = { defs={} expr=v5048[1] }
        ?30     = { defs={} expr=v5049[1] }
        ?31     = { defs={} expr=v5050[1] }
        ip      = { defs={0x080484be} expr=0x080484bf[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v5009[32] 3[32]) }
          value = { defs={} expr=v5063[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5009[32] 2[32]) }
          value = { defs={} expr=v5062[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5009[32] 1[32]) }
          value = { defs={} expr=v5061[8] }
          flags = { rdonly }
        address = { defs={0x080484be} expr=v5009[32] }
          value = { defs={} expr=v5060[8] }
          flags = { rdonly }
0x80484bf:add    ebx, 0x0000120a
    registers:
        ax      = { defs={} expr=v5005[32] }
        cx      = { defs={} expr=v5006[32] }
        dx      = { defs={} expr=v5007[32] }
        bx      = { defs={0x080484be,0x080484bf} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5060[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5061[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5062[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5063[8]))) 4618[32]) }
        sp      = { defs={0x080484be} expr=(add[32] v5009[32] 4[32]) }
        bp      = { defs={} expr=v5010[32] }
        si      = { defs={} expr=v5011[32] }
        di      = { defs={} expr=v5012[32] }
        es      = { defs={} expr=v5013[16] }
        cs      = { defs={} expr=v5014[16] }
        ss      = { defs={} expr=v5015[16] }
        ds      = { defs={} expr=v5016[16] }
        fs      = { defs={} expr=v5017[16] }
        gs      = { defs={} expr=v5018[16] }
        cf      = { defs={0x080484be,0x080484bf} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5060[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5061[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5062[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5063[8])))) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5060[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5061[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5062[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5063[8])))) 4618[33]))))) }
        ?1      = { defs={} expr=v5020[1] }
        pf      = { defs={0x080484be,0x080484bf} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5060[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5061[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5062[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5063[8]))) 4618[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5060[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5061[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5062[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5063[8]))) 4618[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5060[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5061[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5062[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5063[8]))) 4618[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5060[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5061[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5062[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5063[8]))) 4618[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5060[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5061[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5062[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5063[8]))) 4618[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5060[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5061[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5062[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5063[8]))) 4618[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5060[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5061[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5062[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5063[8]))) 4618[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5060[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5061[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5062[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5063[8]))) 4618[32]))))))) }
        ?3      = { defs={} expr=v5022[1] }
        af      = { defs={0x080484be,0x080484bf} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5060[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5061[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5062[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5063[8])))) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5060[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5061[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5062[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5063[8])))) 4618[33]))))) }
        ?5      = { defs={} expr=v5024[1] }
        zf      = { defs={0x080484be,0x080484bf} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5060[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5061[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5062[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5063[8]))) 4618[32])) }
        sf      = { defs={0x080484be,0x080484bf} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5060[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5061[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5062[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5063[8]))) 4618[32])) }
        tf      = { defs={} expr=v5027[1] }
        if      = { defs={} expr=v5028[1] }
        df      = { defs={} expr=v5029[1] }
        of      = { defs={0x080484be,0x080484bf} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5060[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5061[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5062[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5063[8])))) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5060[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5061[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5062[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5063[8])))) 4618[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5060[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5061[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5062[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5063[8])))) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5060[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5061[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5062[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5063[8])))) 4618[33])))))) }
        iopl0   = { defs={} expr=v5031[1] }
        iopl1   = { defs={} expr=v5032[1] }
        nt      = { defs={} expr=v5033[1] }
        ?15     = { defs={} expr=v5034[1] }
        rf      = { defs={} expr=v5035[1] }
        vm      = { defs={} expr=v5036[1] }
        ac      = { defs={} expr=v5037[1] }
        vif     = { defs={} expr=v5038[1] }
        vip     = { defs={} expr=v5039[1] }
        id      = { defs={} expr=v5040[1] }
        ?22     = { defs={} expr=v5041[1] }
        ?23     = { defs={} expr=v5042[1] }
        ?24     = { defs={} expr=v5043[1] }
        ?25     = { defs={} expr=v5044[1] }
        ?26     = { defs={} expr=v5045[1] }
        ?27     = { defs={} expr=v5046[1] }
        ?28     = { defs={} expr=v5047[1] }
        ?29     = { defs={} expr=v5048[1] }
        ?30     = { defs={} expr=v5049[1] }
        ?31     = { defs={} expr=v5050[1] }
        ip      = { defs={0x080484be,0x080484bf} expr=0x080484c5[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v5009[32] 3[32]) }
          value = { defs={} expr=v5063[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5009[32] 2[32]) }
          value = { defs={} expr=v5062[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5009[32] 1[32]) }
          value = { defs={} expr=v5061[8] }
          flags = { rdonly }
        address = { defs={0x080484be} expr=v5009[32] }
          value = { defs={} expr=v5060[8] }
          flags = { rdonly }
0x80484c5:call   0x080482c8<_init>
    registers:
        ax      = { defs={} expr=v5005[32] }
        cx      = { defs={} expr=v5006[32] }
        dx      = { defs={} expr=v5007[32] }
        bx      = { defs={0x080484be,0x080484bf} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5060[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5061[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5062[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5063[8]))) 4618[32]) }
        sp      = { defs={0x080484be,0x080484c5} expr=(add[32] (add[32] v5009[32] 4[32]) -4[32]) }
        bp      = { defs={} expr=v5010[32] }
        si      = { defs={} expr=v5011[32] }
        di      = { defs={} expr=v5012[32] }
        es      = { defs={} expr=v5013[16] }
        cs      = { defs={} expr=v5014[16] }
        ss      = { defs={} expr=v5015[16] }
        ds      = { defs={} expr=v5016[16] }
        fs      = { defs={} expr=v5017[16] }
        gs      = { defs={} expr=v5018[16] }
        cf      = { defs={0x080484be,0x080484bf} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5060[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5061[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5062[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5063[8])))) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5060[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5061[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5062[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5063[8])))) 4618[33]))))) }
        ?1      = { defs={} expr=v5020[1] }
        pf      = { defs={0x080484be,0x080484bf} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5060[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5061[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5062[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5063[8]))) 4618[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5060[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5061[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5062[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5063[8]))) 4618[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5060[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5061[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5062[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5063[8]))) 4618[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5060[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5061[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5062[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5063[8]))) 4618[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5060[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5061[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5062[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5063[8]))) 4618[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5060[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5061[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5062[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5063[8]))) 4618[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5060[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5061[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5062[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5063[8]))) 4618[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5060[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5061[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5062[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5063[8]))) 4618[32]))))))) }
        ?3      = { defs={} expr=v5022[1] }
        af      = { defs={0x080484be,0x080484bf} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5060[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5061[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5062[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5063[8])))) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5060[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5061[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5062[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5063[8])))) 4618[33]))))) }
        ?5      = { defs={} expr=v5024[1] }
        zf      = { defs={0x080484be,0x080484bf} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5060[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5061[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5062[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5063[8]))) 4618[32])) }
        sf      = { defs={0x080484be,0x080484bf} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5060[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5061[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5062[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5063[8]))) 4618[32])) }
        tf      = { defs={} expr=v5027[1] }
        if      = { defs={} expr=v5028[1] }
        df      = { defs={} expr=v5029[1] }
        of      = { defs={0x080484be,0x080484bf} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5060[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5061[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5062[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5063[8])))) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5060[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5061[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5062[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5063[8])))) 4618[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5060[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5061[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5062[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5063[8])))) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5060[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5061[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5062[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5063[8])))) 4618[33])))))) }
        iopl0   = { defs={} expr=v5031[1] }
        iopl1   = { defs={} expr=v5032[1] }
        nt      = { defs={} expr=v5033[1] }
        ?15     = { defs={} expr=v5034[1] }
        rf      = { defs={} expr=v5035[1] }
        vm      = { defs={} expr=v5036[1] }
        ac      = { defs={} expr=v5037[1] }
        vif     = { defs={} expr=v5038[1] }
        vip     = { defs={} expr=v5039[1] }
        id      = { defs={} expr=v5040[1] }
        ?22     = { defs={} expr=v5041[1] }
        ?23     = { defs={} expr=v5042[1] }
        ?24     = { defs={} expr=v5043[1] }
        ?25     = { defs={} expr=v5044[1] }
        ?26     = { defs={} expr=v5045[1] }
        ?27     = { defs={} expr=v5046[1] }
        ?28     = { defs={} expr=v5047[1] }
        ?29     = { defs={} expr=v5048[1] }
        ?30     = { defs={} expr=v5049[1] }
        ?31     = { defs={} expr=v5050[1] }
        ip      = { defs={0x080484c5} expr=0x080482c8[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v5009[32] 4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5009[32] 4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5009[32] 4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x080484be,0x080484c5} expr=(add[32] (add[32] v5009[32] 4[32]) -4[32]) }
          value = { defs={} expr=-54[8] }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v5009[32] 3[32]) }
          value = { defs={} expr=v5063[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5009[32] 2[32]) }
          value = { defs={} expr=v5062[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5009[32] 1[32]) }
          value = { defs={} expr=v5061[8] }
          flags = { rdonly }
        address = { defs={0x080484be} expr=v5009[32] }
          value = { defs={} expr=v5060[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80484ca:lea    eax, [ebx + 0xffffff20<-0x000000e0>]
    registers:
        ax      = { defs={0x080484ca} expr=(add[32] v5176[32] -224[32]) }
        cx      = { defs={} expr=v5174[32] }
        dx      = { defs={} expr=v5175[32] }
        bx      = { defs={} expr=v5176[32] }
        sp      = { defs={} expr=v5177[32] }
        bp      = { defs={} expr=v5178[32] }
        si      = { defs={} expr=v5179[32] }
        di      = { defs={} expr=v5180[32] }
        es      = { defs={} expr=v5181[16] }
        cs      = { defs={} expr=v5182[16] }
        ss      = { defs={} expr=v5183[16] }
        ds      = { defs={} expr=v5184[16] }
        fs      = { defs={} expr=v5185[16] }
        gs      = { defs={} expr=v5186[16] }
        cf      = { defs={} expr=v5187[1] }
        ?1      = { defs={} expr=v5188[1] }
        pf      = { defs={} expr=v5189[1] }
        ?3      = { defs={} expr=v5190[1] }
        af      = { defs={} expr=v5191[1] }
        ?5      = { defs={} expr=v5192[1] }
        zf      = { defs={} expr=v5193[1] }
        sf      = { defs={} expr=v5194[1] }
        tf      = { defs={} expr=v5195[1] }
        if      = { defs={} expr=v5196[1] }
        df      = { defs={} expr=v5197[1] }
        of      = { defs={} expr=v5198[1] }
        iopl0   = { defs={} expr=v5199[1] }
        iopl1   = { defs={} expr=v5200[1] }
        nt      = { defs={} expr=v5201[1] }
        ?15     = { defs={} expr=v5202[1] }
        rf      = { defs={} expr=v5203[1] }
        vm      = { defs={} expr=v5204[1] }
        ac      = { defs={} expr=v5205[1] }
        vif     = { defs={} expr=v5206[1] }
        vip     = { defs={} expr=v5207[1] }
        id      = { defs={} expr=v5208[1] }
        ?22     = { defs={} expr=v5209[1] }
        ?23     = { defs={} expr=v5210[1] }
        ?24     = { defs={} expr=v5211[1] }
        ?25     = { defs={} expr=v5212[1] }
        ?26     = { defs={} expr=v5213[1] }
        ?27     = { defs={} expr=v5214[1] }
        ?28     = { defs={} expr=v5215[1] }
        ?29     = { defs={} expr=v5216[1] }
        ?30     = { defs={} expr=v5217[1] }
        ?31     = { defs={} expr=v5218[1] }
        ip      = { defs={0x080484ca} expr=0x080484d0[32] }
    memory:
    init mem:
0x80484d0:lea    edx, [ebx + 0xffffff20<-0x000000e0>]
    registers:
        ax      = { defs={0x080484ca} expr=(add[32] v5176[32] -224[32]) }
        cx      = { defs={} expr=v5174[32] }
        dx      = { defs={0x080484d0} expr=(add[32] v5176[32] -224[32]) }
        bx      = { defs={} expr=v5176[32] }
        sp      = { defs={} expr=v5177[32] }
        bp      = { defs={} expr=v5178[32] }
        si      = { defs={} expr=v5179[32] }
        di      = { defs={} expr=v5180[32] }
        es      = { defs={} expr=v5181[16] }
        cs      = { defs={} expr=v5182[16] }
        ss      = { defs={} expr=v5183[16] }
        ds      = { defs={} expr=v5184[16] }
        fs      = { defs={} expr=v5185[16] }
        gs      = { defs={} expr=v5186[16] }
        cf      = { defs={} expr=v5187[1] }
        ?1      = { defs={} expr=v5188[1] }
        pf      = { defs={} expr=v5189[1] }
        ?3      = { defs={} expr=v5190[1] }
        af      = { defs={} expr=v5191[1] }
        ?5      = { defs={} expr=v5192[1] }
        zf      = { defs={} expr=v5193[1] }
        sf      = { defs={} expr=v5194[1] }
        tf      = { defs={} expr=v5195[1] }
        if      = { defs={} expr=v5196[1] }
        df      = { defs={} expr=v5197[1] }
        of      = { defs={} expr=v5198[1] }
        iopl0   = { defs={} expr=v5199[1] }
        iopl1   = { defs={} expr=v5200[1] }
        nt      = { defs={} expr=v5201[1] }
        ?15     = { defs={} expr=v5202[1] }
        rf      = { defs={} expr=v5203[1] }
        vm      = { defs={} expr=v5204[1] }
        ac      = { defs={} expr=v5205[1] }
        vif     = { defs={} expr=v5206[1] }
        vip     = { defs={} expr=v5207[1] }
        id      = { defs={} expr=v5208[1] }
        ?22     = { defs={} expr=v5209[1] }
        ?23     = { defs={} expr=v5210[1] }
        ?24     = { defs={} expr=v5211[1] }
        ?25     = { defs={} expr=v5212[1] }
        ?26     = { defs={} expr=v5213[1] }
        ?27     = { defs={} expr=v5214[1] }
        ?28     = { defs={} expr=v5215[1] }
        ?29     = { defs={} expr=v5216[1] }
        ?30     = { defs={} expr=v5217[1] }
        ?31     = { defs={} expr=v5218[1] }
        ip      = { defs={0x080484ca,0x080484d0} expr=0x080484d6[32] }
    memory:
    init mem:
0x80484d6:sub    eax, edx
    registers:
        ax      = { defs={0x080484ca,0x080484d0,0x080484d6} expr=(add[32] (add[32] v5176[32] -224[32]) (add[32] (invert[32] (add[32] v5176[32] -224[32])) 1[32])) }
        cx      = { defs={} expr=v5174[32] }
        dx      = { defs={0x080484d0} expr=(add[32] v5176[32] -224[32]) }
        bx      = { defs={} expr=v5176[32] }
        sp      = { defs={} expr=v5177[32] }
        bp      = { defs={} expr=v5178[32] }
        si      = { defs={} expr=v5179[32] }
        di      = { defs={} expr=v5180[32] }
        es      = { defs={} expr=v5181[16] }
        cs      = { defs={} expr=v5182[16] }
        ss      = { defs={} expr=v5183[16] }
        ds      = { defs={} expr=v5184[16] }
        fs      = { defs={} expr=v5185[16] }
        gs      = { defs={} expr=v5186[16] }
        cf      = { defs={0x080484ca,0x080484d0,0x080484d6} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v5176[32] -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v5176[32] -224[32]))) (add[33] (uextend[33] 33[32] (add[32] v5176[32] -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v5176[32] -224[32]))) 1[33]))))))) }
        ?1      = { defs={} expr=v5188[1] }
        pf      = { defs={0x080484ca,0x080484d0,0x080484d6} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5176[32] -224[32]) (add[32] (invert[32] (add[32] v5176[32] -224[32])) 1[32])))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5176[32] -224[32]) (add[32] (invert[32] (add[32] v5176[32] -224[32])) 1[32]))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5176[32] -224[32]) (add[32] (invert[32] (add[32] v5176[32] -224[32])) 1[32])))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5176[32] -224[32]) (add[32] (invert[32] (add[32] v5176[32] -224[32])) 1[32])))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5176[32] -224[32]) (add[32] (invert[32] (add[32] v5176[32] -224[32])) 1[32])))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5176[32] -224[32]) (add[32] (invert[32] (add[32] v5176[32] -224[32])) 1[32]))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5176[32] -224[32]) (add[32] (invert[32] (add[32] v5176[32] -224[32])) 1[32])))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5176[32] -224[32]) (add[32] (invert[32] (add[32] v5176[32] -224[32])) 1[32])))))))) }
        ?3      = { defs={} expr=v5190[1] }
        af      = { defs={0x080484ca,0x080484d0,0x080484d6} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v5176[32] -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v5176[32] -224[32]))) (add[33] (uextend[33] 33[32] (add[32] v5176[32] -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v5176[32] -224[32]))) 1[33]))))))) }
        ?5      = { defs={} expr=v5192[1] }
        zf      = { defs={0x080484ca,0x080484d0,0x080484d6} expr=(zerop[1] (add[32] (add[32] v5176[32] -224[32]) (add[32] (invert[32] (add[32] v5176[32] -224[32])) 1[32]))) }
        sf      = { defs={0x080484ca,0x080484d0,0x080484d6} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v5176[32] -224[32]) (add[32] (invert[32] (add[32] v5176[32] -224[32])) 1[32]))) }
        tf      = { defs={} expr=v5195[1] }
        if      = { defs={} expr=v5196[1] }
        df      = { defs={} expr=v5197[1] }
        of      = { defs={0x080484ca,0x080484d0,0x080484d6} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v5176[32] -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v5176[32] -224[32]))) (add[33] (uextend[33] 33[32] (add[32] v5176[32] -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v5176[32] -224[32]))) 1[33])))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v5176[32] -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v5176[32] -224[32]))) (add[33] (uextend[33] 33[32] (add[32] v5176[32] -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v5176[32] -224[32]))) 1[33]))))))) }
        iopl0   = { defs={} expr=v5199[1] }
        iopl1   = { defs={} expr=v5200[1] }
        nt      = { defs={} expr=v5201[1] }
        ?15     = { defs={} expr=v5202[1] }
        rf      = { defs={} expr=v5203[1] }
        vm      = { defs={} expr=v5204[1] }
        ac      = { defs={} expr=v5205[1] }
        vif     = { defs={} expr=v5206[1] }
        vip     = { defs={} expr=v5207[1] }
        id      = { defs={} expr=v5208[1] }
        ?22     = { defs={} expr=v5209[1] }
        ?23     = { defs={} expr=v5210[1] }
        ?24     = { defs={} expr=v5211[1] }
        ?25     = { defs={} expr=v5212[1] }
        ?26     = { defs={} expr=v5213[1] }
        ?27     = { defs={} expr=v5214[1] }
        ?28     = { defs={} expr=v5215[1] }
        ?29     = { defs={} expr=v5216[1] }
        ?30     = { defs={} expr=v5217[1] }
        ?31     = { defs={} expr=v5218[1] }
        ip      = { defs={0x080484ca,0x080484d0,0x080484d6} expr=0x080484d8[32] }
    memory:
    init mem:
0x80484d8:sar    eax, 0x02
    registers:
        ax      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(asr[32] 2[5] (add[32] (add[32] v5176[32] -224[32]) (add[32] (invert[32] (add[32] v5176[32] -224[32])) 1[32]))) }
        cx      = { defs={} expr=v5174[32] }
        dx      = { defs={0x080484d0} expr=(add[32] v5176[32] -224[32]) }
        bx      = { defs={} expr=v5176[32] }
        sp      = { defs={} expr=v5177[32] }
        bp      = { defs={} expr=v5178[32] }
        si      = { defs={} expr=v5179[32] }
        di      = { defs={} expr=v5180[32] }
        es      = { defs={} expr=v5181[16] }
        cs      = { defs={} expr=v5182[16] }
        ss      = { defs={} expr=v5183[16] }
        ds      = { defs={} expr=v5184[16] }
        fs      = { defs={} expr=v5185[16] }
        gs      = { defs={} expr=v5186[16] }
        cf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (add[32] v5176[32] -224[32]) (add[32] (invert[32] (add[32] v5176[32] -224[32])) 1[32])))) }
        ?1      = { defs={} expr=v5188[1] }
        pf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5176[32] -224[32]) (add[32] (invert[32] (add[32] v5176[32] -224[32])) 1[32]))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5176[32] -224[32]) (add[32] (invert[32] (add[32] v5176[32] -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5176[32] -224[32]) (add[32] (invert[32] (add[32] v5176[32] -224[32])) 1[32]))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5176[32] -224[32]) (add[32] (invert[32] (add[32] v5176[32] -224[32])) 1[32]))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5176[32] -224[32]) (add[32] (invert[32] (add[32] v5176[32] -224[32])) 1[32]))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5176[32] -224[32]) (add[32] (invert[32] (add[32] v5176[32] -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5176[32] -224[32]) (add[32] (invert[32] (add[32] v5176[32] -224[32])) 1[32]))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5176[32] -224[32]) (add[32] (invert[32] (add[32] v5176[32] -224[32])) 1[32]))))))))) }
        ?3      = { defs={} expr=v5190[1] }
        af      = { defs={0x080484d8} expr=v5300[1] }
        ?5      = { defs={} expr=v5192[1] }
        zf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(zerop[1] (asr[32] 2[5] (add[32] (add[32] v5176[32] -224[32]) (add[32] (invert[32] (add[32] v5176[32] -224[32])) 1[32])))) }
        sf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5176[32] -224[32]) (add[32] (invert[32] (add[32] v5176[32] -224[32])) 1[32])))) }
        tf      = { defs={} expr=v5195[1] }
        if      = { defs={} expr=v5196[1] }
        df      = { defs={} expr=v5197[1] }
        of      = { defs={0x080484d8} expr=v5315[1] }
        iopl0   = { defs={} expr=v5199[1] }
        iopl1   = { defs={} expr=v5200[1] }
        nt      = { defs={} expr=v5201[1] }
        ?15     = { defs={} expr=v5202[1] }
        rf      = { defs={} expr=v5203[1] }
        vm      = { defs={} expr=v5204[1] }
        ac      = { defs={} expr=v5205[1] }
        vif     = { defs={} expr=v5206[1] }
        vip     = { defs={} expr=v5207[1] }
        id      = { defs={} expr=v5208[1] }
        ?22     = { defs={} expr=v5209[1] }
        ?23     = { defs={} expr=v5210[1] }
        ?24     = { defs={} expr=v5211[1] }
        ?25     = { defs={} expr=v5212[1] }
        ?26     = { defs={} expr=v5213[1] }
        ?27     = { defs={} expr=v5214[1] }
        ?28     = { defs={} expr=v5215[1] }
        ?29     = { defs={} expr=v5216[1] }
        ?30     = { defs={} expr=v5217[1] }
        ?31     = { defs={} expr=v5218[1] }
        ip      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=0x080484db[32] }
    memory:
    init mem:
0x80484db:mov    DWORD PTR ss:[ebp + 0xf0<-0x10>], eax
    registers:
        ax      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(asr[32] 2[5] (add[32] (add[32] v5176[32] -224[32]) (add[32] (invert[32] (add[32] v5176[32] -224[32])) 1[32]))) }
        cx      = { defs={} expr=v5174[32] }
        dx      = { defs={0x080484d0} expr=(add[32] v5176[32] -224[32]) }
        bx      = { defs={} expr=v5176[32] }
        sp      = { defs={} expr=v5177[32] }
        bp      = { defs={} expr=v5178[32] }
        si      = { defs={} expr=v5179[32] }
        di      = { defs={} expr=v5180[32] }
        es      = { defs={} expr=v5181[16] }
        cs      = { defs={} expr=v5182[16] }
        ss      = { defs={} expr=v5183[16] }
        ds      = { defs={} expr=v5184[16] }
        fs      = { defs={} expr=v5185[16] }
        gs      = { defs={} expr=v5186[16] }
        cf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (add[32] v5176[32] -224[32]) (add[32] (invert[32] (add[32] v5176[32] -224[32])) 1[32])))) }
        ?1      = { defs={} expr=v5188[1] }
        pf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5176[32] -224[32]) (add[32] (invert[32] (add[32] v5176[32] -224[32])) 1[32]))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5176[32] -224[32]) (add[32] (invert[32] (add[32] v5176[32] -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5176[32] -224[32]) (add[32] (invert[32] (add[32] v5176[32] -224[32])) 1[32]))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5176[32] -224[32]) (add[32] (invert[32] (add[32] v5176[32] -224[32])) 1[32]))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5176[32] -224[32]) (add[32] (invert[32] (add[32] v5176[32] -224[32])) 1[32]))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5176[32] -224[32]) (add[32] (invert[32] (add[32] v5176[32] -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5176[32] -224[32]) (add[32] (invert[32] (add[32] v5176[32] -224[32])) 1[32]))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5176[32] -224[32]) (add[32] (invert[32] (add[32] v5176[32] -224[32])) 1[32]))))))))) }
        ?3      = { defs={} expr=v5190[1] }
        af      = { defs={0x080484d8} expr=v5300[1] }
        ?5      = { defs={} expr=v5192[1] }
        zf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(zerop[1] (asr[32] 2[5] (add[32] (add[32] v5176[32] -224[32]) (add[32] (invert[32] (add[32] v5176[32] -224[32])) 1[32])))) }
        sf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5176[32] -224[32]) (add[32] (invert[32] (add[32] v5176[32] -224[32])) 1[32])))) }
        tf      = { defs={} expr=v5195[1] }
        if      = { defs={} expr=v5196[1] }
        df      = { defs={} expr=v5197[1] }
        of      = { defs={0x080484d8} expr=v5315[1] }
        iopl0   = { defs={} expr=v5199[1] }
        iopl1   = { defs={} expr=v5200[1] }
        nt      = { defs={} expr=v5201[1] }
        ?15     = { defs={} expr=v5202[1] }
        rf      = { defs={} expr=v5203[1] }
        vm      = { defs={} expr=v5204[1] }
        ac      = { defs={} expr=v5205[1] }
        vif     = { defs={} expr=v5206[1] }
        vip     = { defs={} expr=v5207[1] }
        id      = { defs={} expr=v5208[1] }
        ?22     = { defs={} expr=v5209[1] }
        ?23     = { defs={} expr=v5210[1] }
        ?24     = { defs={} expr=v5211[1] }
        ?25     = { defs={} expr=v5212[1] }
        ?26     = { defs={} expr=v5213[1] }
        ?27     = { defs={} expr=v5214[1] }
        ?28     = { defs={} expr=v5215[1] }
        ?29     = { defs={} expr=v5216[1] }
        ?30     = { defs={} expr=v5217[1] }
        ?31     = { defs={} expr=v5218[1] }
        ip      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db} expr=0x080484de[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v5178[32] -16[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5176[32] -224[32]) (add[32] (invert[32] (add[32] v5176[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5178[32] -16[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5176[32] -224[32]) (add[32] (invert[32] (add[32] v5176[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5178[32] -16[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5176[32] -224[32]) (add[32] (invert[32] (add[32] v5176[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={0x080484db} expr=(add[32] v5178[32] -16[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5176[32] -224[32]) (add[32] (invert[32] (add[32] v5176[32] -224[32])) 1[32])))) }
          flags = { }
    init mem:
0x80484de:jne    0x080484f0<<StaticData@0x080484e8>+8>
    registers:
        ax      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(asr[32] 2[5] (add[32] (add[32] v5176[32] -224[32]) (add[32] (invert[32] (add[32] v5176[32] -224[32])) 1[32]))) }
        cx      = { defs={} expr=v5174[32] }
        dx      = { defs={0x080484d0} expr=(add[32] v5176[32] -224[32]) }
        bx      = { defs={} expr=v5176[32] }
        sp      = { defs={} expr=v5177[32] }
        bp      = { defs={} expr=v5178[32] }
        si      = { defs={} expr=v5179[32] }
        di      = { defs={} expr=v5180[32] }
        es      = { defs={} expr=v5181[16] }
        cs      = { defs={} expr=v5182[16] }
        ss      = { defs={} expr=v5183[16] }
        ds      = { defs={} expr=v5184[16] }
        fs      = { defs={} expr=v5185[16] }
        gs      = { defs={} expr=v5186[16] }
        cf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (add[32] v5176[32] -224[32]) (add[32] (invert[32] (add[32] v5176[32] -224[32])) 1[32])))) }
        ?1      = { defs={} expr=v5188[1] }
        pf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5176[32] -224[32]) (add[32] (invert[32] (add[32] v5176[32] -224[32])) 1[32]))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5176[32] -224[32]) (add[32] (invert[32] (add[32] v5176[32] -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5176[32] -224[32]) (add[32] (invert[32] (add[32] v5176[32] -224[32])) 1[32]))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5176[32] -224[32]) (add[32] (invert[32] (add[32] v5176[32] -224[32])) 1[32]))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5176[32] -224[32]) (add[32] (invert[32] (add[32] v5176[32] -224[32])) 1[32]))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5176[32] -224[32]) (add[32] (invert[32] (add[32] v5176[32] -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5176[32] -224[32]) (add[32] (invert[32] (add[32] v5176[32] -224[32])) 1[32]))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5176[32] -224[32]) (add[32] (invert[32] (add[32] v5176[32] -224[32])) 1[32]))))))))) }
        ?3      = { defs={} expr=v5190[1] }
        af      = { defs={0x080484d8} expr=v5300[1] }
        ?5      = { defs={} expr=v5192[1] }
        zf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(zerop[1] (asr[32] 2[5] (add[32] (add[32] v5176[32] -224[32]) (add[32] (invert[32] (add[32] v5176[32] -224[32])) 1[32])))) }
        sf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5176[32] -224[32]) (add[32] (invert[32] (add[32] v5176[32] -224[32])) 1[32])))) }
        tf      = { defs={} expr=v5195[1] }
        if      = { defs={} expr=v5196[1] }
        df      = { defs={} expr=v5197[1] }
        of      = { defs={0x080484d8} expr=v5315[1] }
        iopl0   = { defs={} expr=v5199[1] }
        iopl1   = { defs={} expr=v5200[1] }
        nt      = { defs={} expr=v5201[1] }
        ?15     = { defs={} expr=v5202[1] }
        rf      = { defs={} expr=v5203[1] }
        vm      = { defs={} expr=v5204[1] }
        ac      = { defs={} expr=v5205[1] }
        vif     = { defs={} expr=v5206[1] }
        vip     = { defs={} expr=v5207[1] }
        id      = { defs={} expr=v5208[1] }
        ?22     = { defs={} expr=v5209[1] }
        ?23     = { defs={} expr=v5210[1] }
        ?24     = { defs={} expr=v5211[1] }
        ?25     = { defs={} expr=v5212[1] }
        ?26     = { defs={} expr=v5213[1] }
        ?27     = { defs={} expr=v5214[1] }
        ?28     = { defs={} expr=v5215[1] }
        ?29     = { defs={} expr=v5216[1] }
        ?30     = { defs={} expr=v5217[1] }
        ?31     = { defs={} expr=v5218[1] }
        ip      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db,0x080484de} expr=(ite[32] (invert[1] (zerop[1] (asr[32] 2[5] (add[32] (add[32] v5176[32] -224[32]) (add[32] (invert[32] (add[32] v5176[32] -224[32])) 1[32]))))) 0x080484f0[32] 0x080484e0[32]) }
    memory:
        address = { defs={} expr=(add[32] (add[32] v5178[32] -16[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5176[32] -224[32]) (add[32] (invert[32] (add[32] v5176[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5178[32] -16[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5176[32] -224[32]) (add[32] (invert[32] (add[32] v5176[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5178[32] -16[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5176[32] -224[32]) (add[32] (invert[32] (add[32] v5176[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={0x080484db} expr=(add[32] v5178[32] -16[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5176[32] -224[32]) (add[32] (invert[32] (add[32] v5176[32] -224[32])) 1[32])))) }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80484e0:add    esp, 0x0c
    registers:
        ax      = { defs={} expr=v5414[32] }
        cx      = { defs={} expr=v5415[32] }
        dx      = { defs={} expr=v5416[32] }
        bx      = { defs={} expr=v5417[32] }
        sp      = { defs={0x080484e0} expr=(add[32] v5418[32] 12[32]) }
        bp      = { defs={} expr=v5419[32] }
        si      = { defs={} expr=v5420[32] }
        di      = { defs={} expr=v5421[32] }
        es      = { defs={} expr=v5422[16] }
        cs      = { defs={} expr=v5423[16] }
        ss      = { defs={} expr=v5424[16] }
        ds      = { defs={} expr=v5425[16] }
        fs      = { defs={} expr=v5426[16] }
        gs      = { defs={} expr=v5427[16] }
        cf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5418[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5418[32]) 12[33]))))) }
        ?1      = { defs={} expr=v5429[1] }
        pf      = { defs={0x080484e0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v5418[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v5418[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v5418[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v5418[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v5418[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v5418[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v5418[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v5418[32] 12[32]))))))) }
        ?3      = { defs={} expr=v5431[1] }
        af      = { defs={0x080484e0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5418[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5418[32]) 12[33]))))) }
        ?5      = { defs={} expr=v5433[1] }
        zf      = { defs={0x080484e0} expr=(zerop[1] (add[32] v5418[32] 12[32])) }
        sf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (add[32] v5418[32] 12[32])) }
        tf      = { defs={} expr=v5436[1] }
        if      = { defs={} expr=v5437[1] }
        df      = { defs={} expr=v5438[1] }
        of      = { defs={0x080484e0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5418[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5418[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5418[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5418[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v5440[1] }
        iopl1   = { defs={} expr=v5441[1] }
        nt      = { defs={} expr=v5442[1] }
        ?15     = { defs={} expr=v5443[1] }
        rf      = { defs={} expr=v5444[1] }
        vm      = { defs={} expr=v5445[1] }
        ac      = { defs={} expr=v5446[1] }
        vif     = { defs={} expr=v5447[1] }
        vip     = { defs={} expr=v5448[1] }
        id      = { defs={} expr=v5449[1] }
        ?22     = { defs={} expr=v5450[1] }
        ?23     = { defs={} expr=v5451[1] }
        ?24     = { defs={} expr=v5452[1] }
        ?25     = { defs={} expr=v5453[1] }
        ?26     = { defs={} expr=v5454[1] }
        ?27     = { defs={} expr=v5455[1] }
        ?28     = { defs={} expr=v5456[1] }
        ?29     = { defs={} expr=v5457[1] }
        ?30     = { defs={} expr=v5458[1] }
        ?31     = { defs={} expr=v5459[1] }
        ip      = { defs={0x080484e0} expr=0x080484e3[32] }
    memory:
    init mem:
0x80484e3:pop    ebx
    registers:
        ax      = { defs={} expr=v5414[32] }
        cx      = { defs={} expr=v5415[32] }
        dx      = { defs={} expr=v5416[32] }
        bx      = { defs={0x080484e3} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5517[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5518[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5519[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5520[8]))) }
        sp      = { defs={0x080484e0,0x080484e3} expr=(add[32] (add[32] v5418[32] 12[32]) 4[32]) }
        bp      = { defs={} expr=v5419[32] }
        si      = { defs={} expr=v5420[32] }
        di      = { defs={} expr=v5421[32] }
        es      = { defs={} expr=v5422[16] }
        cs      = { defs={} expr=v5423[16] }
        ss      = { defs={} expr=v5424[16] }
        ds      = { defs={} expr=v5425[16] }
        fs      = { defs={} expr=v5426[16] }
        gs      = { defs={} expr=v5427[16] }
        cf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5418[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5418[32]) 12[33]))))) }
        ?1      = { defs={} expr=v5429[1] }
        pf      = { defs={0x080484e0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v5418[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v5418[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v5418[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v5418[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v5418[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v5418[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v5418[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v5418[32] 12[32]))))))) }
        ?3      = { defs={} expr=v5431[1] }
        af      = { defs={0x080484e0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5418[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5418[32]) 12[33]))))) }
        ?5      = { defs={} expr=v5433[1] }
        zf      = { defs={0x080484e0} expr=(zerop[1] (add[32] v5418[32] 12[32])) }
        sf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (add[32] v5418[32] 12[32])) }
        tf      = { defs={} expr=v5436[1] }
        if      = { defs={} expr=v5437[1] }
        df      = { defs={} expr=v5438[1] }
        of      = { defs={0x080484e0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5418[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5418[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5418[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5418[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v5440[1] }
        iopl1   = { defs={} expr=v5441[1] }
        nt      = { defs={} expr=v5442[1] }
        ?15     = { defs={} expr=v5443[1] }
        rf      = { defs={} expr=v5444[1] }
        vm      = { defs={} expr=v5445[1] }
        ac      = { defs={} expr=v5446[1] }
        vif     = { defs={} expr=v5447[1] }
        vip     = { defs={} expr=v5448[1] }
        id      = { defs={} expr=v5449[1] }
        ?22     = { defs={} expr=v5450[1] }
        ?23     = { defs={} expr=v5451[1] }
        ?24     = { defs={} expr=v5452[1] }
        ?25     = { defs={} expr=v5453[1] }
        ?26     = { defs={} expr=v5454[1] }
        ?27     = { defs={} expr=v5455[1] }
        ?28     = { defs={} expr=v5456[1] }
        ?29     = { defs={} expr=v5457[1] }
        ?30     = { defs={} expr=v5458[1] }
        ?31     = { defs={} expr=v5459[1] }
        ip      = { defs={0x080484e0,0x080484e3} expr=0x080484e4[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v5418[32] 12[32]) 3[32]) }
          value = { defs={} expr=v5520[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v5418[32] 12[32]) 2[32]) }
          value = { defs={} expr=v5519[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v5418[32] 12[32]) 1[32]) }
          value = { defs={} expr=v5518[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3} expr=(add[32] v5418[32] 12[32]) }
          value = { defs={} expr=v5517[8] }
          flags = { rdonly }
0x80484e4:pop    esi
    registers:
        ax      = { defs={} expr=v5414[32] }
        cx      = { defs={} expr=v5415[32] }
        dx      = { defs={} expr=v5416[32] }
        bx      = { defs={0x080484e3} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5517[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5518[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5519[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5520[8]))) }
        sp      = { defs={0x080484e0,0x080484e3,0x080484e4} expr=(add[32] (add[32] (add[32] v5418[32] 12[32]) 4[32]) 4[32]) }
        bp      = { defs={} expr=v5419[32] }
        si      = { defs={0x080484e4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5534[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5535[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5536[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5537[8]))) }
        di      = { defs={} expr=v5421[32] }
        es      = { defs={} expr=v5422[16] }
        cs      = { defs={} expr=v5423[16] }
        ss      = { defs={} expr=v5424[16] }
        ds      = { defs={} expr=v5425[16] }
        fs      = { defs={} expr=v5426[16] }
        gs      = { defs={} expr=v5427[16] }
        cf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5418[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5418[32]) 12[33]))))) }
        ?1      = { defs={} expr=v5429[1] }
        pf      = { defs={0x080484e0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v5418[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v5418[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v5418[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v5418[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v5418[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v5418[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v5418[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v5418[32] 12[32]))))))) }
        ?3      = { defs={} expr=v5431[1] }
        af      = { defs={0x080484e0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5418[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5418[32]) 12[33]))))) }
        ?5      = { defs={} expr=v5433[1] }
        zf      = { defs={0x080484e0} expr=(zerop[1] (add[32] v5418[32] 12[32])) }
        sf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (add[32] v5418[32] 12[32])) }
        tf      = { defs={} expr=v5436[1] }
        if      = { defs={} expr=v5437[1] }
        df      = { defs={} expr=v5438[1] }
        of      = { defs={0x080484e0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5418[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5418[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5418[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5418[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v5440[1] }
        iopl1   = { defs={} expr=v5441[1] }
        nt      = { defs={} expr=v5442[1] }
        ?15     = { defs={} expr=v5443[1] }
        rf      = { defs={} expr=v5444[1] }
        vm      = { defs={} expr=v5445[1] }
        ac      = { defs={} expr=v5446[1] }
        vif     = { defs={} expr=v5447[1] }
        vip     = { defs={} expr=v5448[1] }
        id      = { defs={} expr=v5449[1] }
        ?22     = { defs={} expr=v5450[1] }
        ?23     = { defs={} expr=v5451[1] }
        ?24     = { defs={} expr=v5452[1] }
        ?25     = { defs={} expr=v5453[1] }
        ?26     = { defs={} expr=v5454[1] }
        ?27     = { defs={} expr=v5455[1] }
        ?28     = { defs={} expr=v5456[1] }
        ?29     = { defs={} expr=v5457[1] }
        ?30     = { defs={} expr=v5458[1] }
        ?31     = { defs={} expr=v5459[1] }
        ip      = { defs={0x080484e0,0x080484e3,0x080484e4} expr=0x080484e5[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] v5418[32] 12[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v5537[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5418[32] 12[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v5536[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5418[32] 12[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v5535[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3,0x080484e4} expr=(add[32] (add[32] v5418[32] 12[32]) 4[32]) }
          value = { defs={} expr=v5534[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v5418[32] 12[32]) 3[32]) }
          value = { defs={} expr=v5520[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v5418[32] 12[32]) 2[32]) }
          value = { defs={} expr=v5519[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v5418[32] 12[32]) 1[32]) }
          value = { defs={} expr=v5518[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3} expr=(add[32] v5418[32] 12[32]) }
          value = { defs={} expr=v5517[8] }
          flags = { rdonly }
0x80484e5:pop    edi
    registers:
        ax      = { defs={} expr=v5414[32] }
        cx      = { defs={} expr=v5415[32] }
        dx      = { defs={} expr=v5416[32] }
        bx      = { defs={0x080484e3} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5517[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5518[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5519[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5520[8]))) }
        sp      = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5} expr=(add[32] (add[32] (add[32] (add[32] v5418[32] 12[32]) 4[32]) 4[32]) 4[32]) }
        bp      = { defs={} expr=v5419[32] }
        si      = { defs={0x080484e4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5534[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5535[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5536[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5537[8]))) }
        di      = { defs={0x080484e5} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5551[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5552[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5553[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5554[8]))) }
        es      = { defs={} expr=v5422[16] }
        cs      = { defs={} expr=v5423[16] }
        ss      = { defs={} expr=v5424[16] }
        ds      = { defs={} expr=v5425[16] }
        fs      = { defs={} expr=v5426[16] }
        gs      = { defs={} expr=v5427[16] }
        cf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5418[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5418[32]) 12[33]))))) }
        ?1      = { defs={} expr=v5429[1] }
        pf      = { defs={0x080484e0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v5418[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v5418[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v5418[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v5418[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v5418[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v5418[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v5418[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v5418[32] 12[32]))))))) }
        ?3      = { defs={} expr=v5431[1] }
        af      = { defs={0x080484e0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5418[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5418[32]) 12[33]))))) }
        ?5      = { defs={} expr=v5433[1] }
        zf      = { defs={0x080484e0} expr=(zerop[1] (add[32] v5418[32] 12[32])) }
        sf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (add[32] v5418[32] 12[32])) }
        tf      = { defs={} expr=v5436[1] }
        if      = { defs={} expr=v5437[1] }
        df      = { defs={} expr=v5438[1] }
        of      = { defs={0x080484e0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5418[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5418[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5418[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5418[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v5440[1] }
        iopl1   = { defs={} expr=v5441[1] }
        nt      = { defs={} expr=v5442[1] }
        ?15     = { defs={} expr=v5443[1] }
        rf      = { defs={} expr=v5444[1] }
        vm      = { defs={} expr=v5445[1] }
        ac      = { defs={} expr=v5446[1] }
        vif     = { defs={} expr=v5447[1] }
        vip     = { defs={} expr=v5448[1] }
        id      = { defs={} expr=v5449[1] }
        ?22     = { defs={} expr=v5450[1] }
        ?23     = { defs={} expr=v5451[1] }
        ?24     = { defs={} expr=v5452[1] }
        ?25     = { defs={} expr=v5453[1] }
        ?26     = { defs={} expr=v5454[1] }
        ?27     = { defs={} expr=v5455[1] }
        ?28     = { defs={} expr=v5456[1] }
        ?29     = { defs={} expr=v5457[1] }
        ?30     = { defs={} expr=v5458[1] }
        ?31     = { defs={} expr=v5459[1] }
        ip      = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5} expr=0x080484e6[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5418[32] 12[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v5554[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5418[32] 12[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v5553[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5418[32] 12[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v5552[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5} expr=(add[32] (add[32] (add[32] v5418[32] 12[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v5551[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5418[32] 12[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v5537[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5418[32] 12[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v5536[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5418[32] 12[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v5535[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3,0x080484e4} expr=(add[32] (add[32] v5418[32] 12[32]) 4[32]) }
          value = { defs={} expr=v5534[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v5418[32] 12[32]) 3[32]) }
          value = { defs={} expr=v5520[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v5418[32] 12[32]) 2[32]) }
          value = { defs={} expr=v5519[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v5418[32] 12[32]) 1[32]) }
          value = { defs={} expr=v5518[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3} expr=(add[32] v5418[32] 12[32]) }
          value = { defs={} expr=v5517[8] }
          flags = { rdonly }
0x80484e6:pop    ebp
    registers:
        ax      = { defs={} expr=v5414[32] }
        cx      = { defs={} expr=v5415[32] }
        dx      = { defs={} expr=v5416[32] }
        bx      = { defs={0x080484e3} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5517[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5518[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5519[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5520[8]))) }
        sp      = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5418[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) }
        bp      = { defs={0x080484e6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5568[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5569[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5570[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5571[8]))) }
        si      = { defs={0x080484e4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5534[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5535[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5536[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5537[8]))) }
        di      = { defs={0x080484e5} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5551[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5552[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5553[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5554[8]))) }
        es      = { defs={} expr=v5422[16] }
        cs      = { defs={} expr=v5423[16] }
        ss      = { defs={} expr=v5424[16] }
        ds      = { defs={} expr=v5425[16] }
        fs      = { defs={} expr=v5426[16] }
        gs      = { defs={} expr=v5427[16] }
        cf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5418[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5418[32]) 12[33]))))) }
        ?1      = { defs={} expr=v5429[1] }
        pf      = { defs={0x080484e0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v5418[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v5418[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v5418[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v5418[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v5418[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v5418[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v5418[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v5418[32] 12[32]))))))) }
        ?3      = { defs={} expr=v5431[1] }
        af      = { defs={0x080484e0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5418[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5418[32]) 12[33]))))) }
        ?5      = { defs={} expr=v5433[1] }
        zf      = { defs={0x080484e0} expr=(zerop[1] (add[32] v5418[32] 12[32])) }
        sf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (add[32] v5418[32] 12[32])) }
        tf      = { defs={} expr=v5436[1] }
        if      = { defs={} expr=v5437[1] }
        df      = { defs={} expr=v5438[1] }
        of      = { defs={0x080484e0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5418[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5418[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5418[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5418[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v5440[1] }
        iopl1   = { defs={} expr=v5441[1] }
        nt      = { defs={} expr=v5442[1] }
        ?15     = { defs={} expr=v5443[1] }
        rf      = { defs={} expr=v5444[1] }
        vm      = { defs={} expr=v5445[1] }
        ac      = { defs={} expr=v5446[1] }
        vif     = { defs={} expr=v5447[1] }
        vip     = { defs={} expr=v5448[1] }
        id      = { defs={} expr=v5449[1] }
        ?22     = { defs={} expr=v5450[1] }
        ?23     = { defs={} expr=v5451[1] }
        ?24     = { defs={} expr=v5452[1] }
        ?25     = { defs={} expr=v5453[1] }
        ?26     = { defs={} expr=v5454[1] }
        ?27     = { defs={} expr=v5455[1] }
        ?28     = { defs={} expr=v5456[1] }
        ?29     = { defs={} expr=v5457[1] }
        ?30     = { defs={} expr=v5458[1] }
        ?31     = { defs={} expr=v5459[1] }
        ip      = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6} expr=0x080484e7[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5418[32] 12[32]) 4[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v5571[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5418[32] 12[32]) 4[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v5570[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5418[32] 12[32]) 4[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v5569[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6} expr=(add[32] (add[32] (add[32] (add[32] v5418[32] 12[32]) 4[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v5568[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5418[32] 12[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v5554[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5418[32] 12[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v5553[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5418[32] 12[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v5552[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5} expr=(add[32] (add[32] (add[32] v5418[32] 12[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v5551[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5418[32] 12[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v5537[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5418[32] 12[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v5536[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5418[32] 12[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v5535[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3,0x080484e4} expr=(add[32] (add[32] v5418[32] 12[32]) 4[32]) }
          value = { defs={} expr=v5534[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v5418[32] 12[32]) 3[32]) }
          value = { defs={} expr=v5520[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v5418[32] 12[32]) 2[32]) }
          value = { defs={} expr=v5519[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v5418[32] 12[32]) 1[32]) }
          value = { defs={} expr=v5518[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3} expr=(add[32] v5418[32] 12[32]) }
          value = { defs={} expr=v5517[8] }
          flags = { rdonly }
0x80484e7:ret    
    registers:
        ax      = { defs={} expr=v5414[32] }
        cx      = { defs={} expr=v5415[32] }
        dx      = { defs={} expr=v5416[32] }
        bx      = { defs={0x080484e3} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5517[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5518[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5519[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5520[8]))) }
        sp      = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6,0x080484e7} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5418[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 4[32]) }
        bp      = { defs={0x080484e6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5568[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5569[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5570[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5571[8]))) }
        si      = { defs={0x080484e4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5534[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5535[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5536[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5537[8]))) }
        di      = { defs={0x080484e5} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5551[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5552[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5553[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5554[8]))) }
        es      = { defs={} expr=v5422[16] }
        cs      = { defs={} expr=v5423[16] }
        ss      = { defs={} expr=v5424[16] }
        ds      = { defs={} expr=v5425[16] }
        fs      = { defs={} expr=v5426[16] }
        gs      = { defs={} expr=v5427[16] }
        cf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5418[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5418[32]) 12[33]))))) }
        ?1      = { defs={} expr=v5429[1] }
        pf      = { defs={0x080484e0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v5418[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v5418[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v5418[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v5418[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v5418[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v5418[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v5418[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v5418[32] 12[32]))))))) }
        ?3      = { defs={} expr=v5431[1] }
        af      = { defs={0x080484e0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5418[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5418[32]) 12[33]))))) }
        ?5      = { defs={} expr=v5433[1] }
        zf      = { defs={0x080484e0} expr=(zerop[1] (add[32] v5418[32] 12[32])) }
        sf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (add[32] v5418[32] 12[32])) }
        tf      = { defs={} expr=v5436[1] }
        if      = { defs={} expr=v5437[1] }
        df      = { defs={} expr=v5438[1] }
        of      = { defs={0x080484e0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5418[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5418[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5418[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5418[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v5440[1] }
        iopl1   = { defs={} expr=v5441[1] }
        nt      = { defs={} expr=v5442[1] }
        ?15     = { defs={} expr=v5443[1] }
        rf      = { defs={} expr=v5444[1] }
        vm      = { defs={} expr=v5445[1] }
        ac      = { defs={} expr=v5446[1] }
        vif     = { defs={} expr=v5447[1] }
        vip     = { defs={} expr=v5448[1] }
        id      = { defs={} expr=v5449[1] }
        ?22     = { defs={} expr=v5450[1] }
        ?23     = { defs={} expr=v5451[1] }
        ?24     = { defs={} expr=v5452[1] }
        ?25     = { defs={} expr=v5453[1] }
        ?26     = { defs={} expr=v5454[1] }
        ?27     = { defs={} expr=v5455[1] }
        ?28     = { defs={} expr=v5456[1] }
        ?29     = { defs={} expr=v5457[1] }
        ?30     = { defs={} expr=v5458[1] }
        ?31     = { defs={} expr=v5459[1] }
        ip      = { defs={0x080484e7} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5585[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5586[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5587[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5588[8]))) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5418[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v5588[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5418[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v5587[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5418[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v5586[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6,0x080484e7} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5418[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v5585[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5418[32] 12[32]) 4[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v5571[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5418[32] 12[32]) 4[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v5570[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5418[32] 12[32]) 4[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v5569[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6} expr=(add[32] (add[32] (add[32] (add[32] v5418[32] 12[32]) 4[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v5568[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5418[32] 12[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v5554[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5418[32] 12[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v5553[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5418[32] 12[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v5552[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5} expr=(add[32] (add[32] (add[32] v5418[32] 12[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v5551[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5418[32] 12[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v5537[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5418[32] 12[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v5536[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5418[32] 12[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v5535[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3,0x080484e4} expr=(add[32] (add[32] v5418[32] 12[32]) 4[32]) }
          value = { defs={} expr=v5534[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v5418[32] 12[32]) 3[32]) }
          value = { defs={} expr=v5520[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v5418[32] 12[32]) 2[32]) }
          value = { defs={} expr=v5519[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v5418[32] 12[32]) 1[32]) }
          value = { defs={} expr=v5518[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3} expr=(add[32] v5418[32] 12[32]) }
          value = { defs={} expr=v5517[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048520:push   ebp
    registers:
        ax      = { defs={} expr=v5643[32] }
        cx      = { defs={} expr=v5644[32] }
        dx      = { defs={} expr=v5645[32] }
        bx      = { defs={} expr=v5646[32] }
        sp      = { defs={0x08048520} expr=(add[32] v5647[32] -4[32]) }
        bp      = { defs={} expr=v5648[32] }
        si      = { defs={} expr=v5649[32] }
        di      = { defs={} expr=v5650[32] }
        es      = { defs={} expr=v5651[16] }
        cs      = { defs={} expr=v5652[16] }
        ss      = { defs={} expr=v5653[16] }
        ds      = { defs={} expr=v5654[16] }
        fs      = { defs={} expr=v5655[16] }
        gs      = { defs={} expr=v5656[16] }
        cf      = { defs={} expr=v5657[1] }
        ?1      = { defs={} expr=v5658[1] }
        pf      = { defs={} expr=v5659[1] }
        ?3      = { defs={} expr=v5660[1] }
        af      = { defs={} expr=v5661[1] }
        ?5      = { defs={} expr=v5662[1] }
        zf      = { defs={} expr=v5663[1] }
        sf      = { defs={} expr=v5664[1] }
        tf      = { defs={} expr=v5665[1] }
        if      = { defs={} expr=v5666[1] }
        df      = { defs={} expr=v5667[1] }
        of      = { defs={} expr=v5668[1] }
        iopl0   = { defs={} expr=v5669[1] }
        iopl1   = { defs={} expr=v5670[1] }
        nt      = { defs={} expr=v5671[1] }
        ?15     = { defs={} expr=v5672[1] }
        rf      = { defs={} expr=v5673[1] }
        vm      = { defs={} expr=v5674[1] }
        ac      = { defs={} expr=v5675[1] }
        vif     = { defs={} expr=v5676[1] }
        vip     = { defs={} expr=v5677[1] }
        id      = { defs={} expr=v5678[1] }
        ?22     = { defs={} expr=v5679[1] }
        ?23     = { defs={} expr=v5680[1] }
        ?24     = { defs={} expr=v5681[1] }
        ?25     = { defs={} expr=v5682[1] }
        ?26     = { defs={} expr=v5683[1] }
        ?27     = { defs={} expr=v5684[1] }
        ?28     = { defs={} expr=v5685[1] }
        ?29     = { defs={} expr=v5686[1] }
        ?30     = { defs={} expr=v5687[1] }
        ?31     = { defs={} expr=v5688[1] }
        ip      = { defs={0x08048520} expr=0x08048521[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v5647[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v5648[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5647[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v5648[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5647[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v5648[32]) }
          flags = { }
        address = { defs={0x08048520} expr=(add[32] v5647[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v5648[32]) }
          flags = { }
    init mem:
0x8048521:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v5643[32] }
        cx      = { defs={} expr=v5644[32] }
        dx      = { defs={} expr=v5645[32] }
        bx      = { defs={} expr=v5646[32] }
        sp      = { defs={0x08048520} expr=(add[32] v5647[32] -4[32]) }
        bp      = { defs={0x08048520,0x08048521} expr=(add[32] v5647[32] -4[32]) }
        si      = { defs={} expr=v5649[32] }
        di      = { defs={} expr=v5650[32] }
        es      = { defs={} expr=v5651[16] }
        cs      = { defs={} expr=v5652[16] }
        ss      = { defs={} expr=v5653[16] }
        ds      = { defs={} expr=v5654[16] }
        fs      = { defs={} expr=v5655[16] }
        gs      = { defs={} expr=v5656[16] }
        cf      = { defs={} expr=v5657[1] }
        ?1      = { defs={} expr=v5658[1] }
        pf      = { defs={} expr=v5659[1] }
        ?3      = { defs={} expr=v5660[1] }
        af      = { defs={} expr=v5661[1] }
        ?5      = { defs={} expr=v5662[1] }
        zf      = { defs={} expr=v5663[1] }
        sf      = { defs={} expr=v5664[1] }
        tf      = { defs={} expr=v5665[1] }
        if      = { defs={} expr=v5666[1] }
        df      = { defs={} expr=v5667[1] }
        of      = { defs={} expr=v5668[1] }
        iopl0   = { defs={} expr=v5669[1] }
        iopl1   = { defs={} expr=v5670[1] }
        nt      = { defs={} expr=v5671[1] }
        ?15     = { defs={} expr=v5672[1] }
        rf      = { defs={} expr=v5673[1] }
        vm      = { defs={} expr=v5674[1] }
        ac      = { defs={} expr=v5675[1] }
        vif     = { defs={} expr=v5676[1] }
        vip     = { defs={} expr=v5677[1] }
        id      = { defs={} expr=v5678[1] }
        ?22     = { defs={} expr=v5679[1] }
        ?23     = { defs={} expr=v5680[1] }
        ?24     = { defs={} expr=v5681[1] }
        ?25     = { defs={} expr=v5682[1] }
        ?26     = { defs={} expr=v5683[1] }
        ?27     = { defs={} expr=v5684[1] }
        ?28     = { defs={} expr=v5685[1] }
        ?29     = { defs={} expr=v5686[1] }
        ?30     = { defs={} expr=v5687[1] }
        ?31     = { defs={} expr=v5688[1] }
        ip      = { defs={0x08048520,0x08048521} expr=0x08048523[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v5647[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v5648[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5647[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v5648[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5647[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v5648[32]) }
          flags = { }
        address = { defs={0x08048520} expr=(add[32] v5647[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v5648[32]) }
          flags = { }
    init mem:
0x8048523:push   edi
    registers:
        ax      = { defs={} expr=v5643[32] }
        cx      = { defs={} expr=v5644[32] }
        dx      = { defs={} expr=v5645[32] }
        bx      = { defs={} expr=v5646[32] }
        sp      = { defs={0x08048520,0x08048523} expr=(add[32] (add[32] v5647[32] -4[32]) -4[32]) }
        bp      = { defs={0x08048520,0x08048521} expr=(add[32] v5647[32] -4[32]) }
        si      = { defs={} expr=v5649[32] }
        di      = { defs={} expr=v5650[32] }
        es      = { defs={} expr=v5651[16] }
        cs      = { defs={} expr=v5652[16] }
        ss      = { defs={} expr=v5653[16] }
        ds      = { defs={} expr=v5654[16] }
        fs      = { defs={} expr=v5655[16] }
        gs      = { defs={} expr=v5656[16] }
        cf      = { defs={} expr=v5657[1] }
        ?1      = { defs={} expr=v5658[1] }
        pf      = { defs={} expr=v5659[1] }
        ?3      = { defs={} expr=v5660[1] }
        af      = { defs={} expr=v5661[1] }
        ?5      = { defs={} expr=v5662[1] }
        zf      = { defs={} expr=v5663[1] }
        sf      = { defs={} expr=v5664[1] }
        tf      = { defs={} expr=v5665[1] }
        if      = { defs={} expr=v5666[1] }
        df      = { defs={} expr=v5667[1] }
        of      = { defs={} expr=v5668[1] }
        iopl0   = { defs={} expr=v5669[1] }
        iopl1   = { defs={} expr=v5670[1] }
        nt      = { defs={} expr=v5671[1] }
        ?15     = { defs={} expr=v5672[1] }
        rf      = { defs={} expr=v5673[1] }
        vm      = { defs={} expr=v5674[1] }
        ac      = { defs={} expr=v5675[1] }
        vif     = { defs={} expr=v5676[1] }
        vip     = { defs={} expr=v5677[1] }
        id      = { defs={} expr=v5678[1] }
        ?22     = { defs={} expr=v5679[1] }
        ?23     = { defs={} expr=v5680[1] }
        ?24     = { defs={} expr=v5681[1] }
        ?25     = { defs={} expr=v5682[1] }
        ?26     = { defs={} expr=v5683[1] }
        ?27     = { defs={} expr=v5684[1] }
        ?28     = { defs={} expr=v5685[1] }
        ?29     = { defs={} expr=v5686[1] }
        ?30     = { defs={} expr=v5687[1] }
        ?31     = { defs={} expr=v5688[1] }
        ip      = { defs={0x08048520,0x08048521,0x08048523} expr=0x08048524[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v5650[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v5650[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v5650[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523} expr=(add[32] (add[32] v5647[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v5650[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5647[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v5648[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5647[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v5648[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5647[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v5648[32]) }
          flags = { }
        address = { defs={0x08048520} expr=(add[32] v5647[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v5648[32]) }
          flags = { }
    init mem:
0x8048524:push   esi
    registers:
        ax      = { defs={} expr=v5643[32] }
        cx      = { defs={} expr=v5644[32] }
        dx      = { defs={} expr=v5645[32] }
        bx      = { defs={} expr=v5646[32] }
        sp      = { defs={0x08048520,0x08048523,0x08048524} expr=(add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048520,0x08048521} expr=(add[32] v5647[32] -4[32]) }
        si      = { defs={} expr=v5649[32] }
        di      = { defs={} expr=v5650[32] }
        es      = { defs={} expr=v5651[16] }
        cs      = { defs={} expr=v5652[16] }
        ss      = { defs={} expr=v5653[16] }
        ds      = { defs={} expr=v5654[16] }
        fs      = { defs={} expr=v5655[16] }
        gs      = { defs={} expr=v5656[16] }
        cf      = { defs={} expr=v5657[1] }
        ?1      = { defs={} expr=v5658[1] }
        pf      = { defs={} expr=v5659[1] }
        ?3      = { defs={} expr=v5660[1] }
        af      = { defs={} expr=v5661[1] }
        ?5      = { defs={} expr=v5662[1] }
        zf      = { defs={} expr=v5663[1] }
        sf      = { defs={} expr=v5664[1] }
        tf      = { defs={} expr=v5665[1] }
        if      = { defs={} expr=v5666[1] }
        df      = { defs={} expr=v5667[1] }
        of      = { defs={} expr=v5668[1] }
        iopl0   = { defs={} expr=v5669[1] }
        iopl1   = { defs={} expr=v5670[1] }
        nt      = { defs={} expr=v5671[1] }
        ?15     = { defs={} expr=v5672[1] }
        rf      = { defs={} expr=v5673[1] }
        vm      = { defs={} expr=v5674[1] }
        ac      = { defs={} expr=v5675[1] }
        vif     = { defs={} expr=v5676[1] }
        vip     = { defs={} expr=v5677[1] }
        id      = { defs={} expr=v5678[1] }
        ?22     = { defs={} expr=v5679[1] }
        ?23     = { defs={} expr=v5680[1] }
        ?24     = { defs={} expr=v5681[1] }
        ?25     = { defs={} expr=v5682[1] }
        ?26     = { defs={} expr=v5683[1] }
        ?27     = { defs={} expr=v5684[1] }
        ?28     = { defs={} expr=v5685[1] }
        ?29     = { defs={} expr=v5686[1] }
        ?30     = { defs={} expr=v5687[1] }
        ?31     = { defs={} expr=v5688[1] }
        ip      = { defs={0x08048520,0x08048521,0x08048523,0x08048524} expr=0x08048525[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v5649[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v5649[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v5649[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523,0x08048524} expr=(add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v5649[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v5650[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v5650[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v5650[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523} expr=(add[32] (add[32] v5647[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v5650[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5647[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v5648[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5647[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v5648[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5647[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v5648[32]) }
          flags = { }
        address = { defs={0x08048520} expr=(add[32] v5647[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v5648[32]) }
          flags = { }
    init mem:
0x8048525:push   ebx
    registers:
        ax      = { defs={} expr=v5643[32] }
        cx      = { defs={} expr=v5644[32] }
        dx      = { defs={} expr=v5645[32] }
        bx      = { defs={} expr=v5646[32] }
        sp      = { defs={0x08048520,0x08048523,0x08048524,0x08048525} expr=(add[32] (add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048520,0x08048521} expr=(add[32] v5647[32] -4[32]) }
        si      = { defs={} expr=v5649[32] }
        di      = { defs={} expr=v5650[32] }
        es      = { defs={} expr=v5651[16] }
        cs      = { defs={} expr=v5652[16] }
        ss      = { defs={} expr=v5653[16] }
        ds      = { defs={} expr=v5654[16] }
        fs      = { defs={} expr=v5655[16] }
        gs      = { defs={} expr=v5656[16] }
        cf      = { defs={} expr=v5657[1] }
        ?1      = { defs={} expr=v5658[1] }
        pf      = { defs={} expr=v5659[1] }
        ?3      = { defs={} expr=v5660[1] }
        af      = { defs={} expr=v5661[1] }
        ?5      = { defs={} expr=v5662[1] }
        zf      = { defs={} expr=v5663[1] }
        sf      = { defs={} expr=v5664[1] }
        tf      = { defs={} expr=v5665[1] }
        if      = { defs={} expr=v5666[1] }
        df      = { defs={} expr=v5667[1] }
        of      = { defs={} expr=v5668[1] }
        iopl0   = { defs={} expr=v5669[1] }
        iopl1   = { defs={} expr=v5670[1] }
        nt      = { defs={} expr=v5671[1] }
        ?15     = { defs={} expr=v5672[1] }
        rf      = { defs={} expr=v5673[1] }
        vm      = { defs={} expr=v5674[1] }
        ac      = { defs={} expr=v5675[1] }
        vif     = { defs={} expr=v5676[1] }
        vip     = { defs={} expr=v5677[1] }
        id      = { defs={} expr=v5678[1] }
        ?22     = { defs={} expr=v5679[1] }
        ?23     = { defs={} expr=v5680[1] }
        ?24     = { defs={} expr=v5681[1] }
        ?25     = { defs={} expr=v5682[1] }
        ?26     = { defs={} expr=v5683[1] }
        ?27     = { defs={} expr=v5684[1] }
        ?28     = { defs={} expr=v5685[1] }
        ?29     = { defs={} expr=v5686[1] }
        ?30     = { defs={} expr=v5687[1] }
        ?31     = { defs={} expr=v5688[1] }
        ip      = { defs={0x08048520,0x08048521,0x08048523,0x08048524,0x08048525} expr=0x08048526[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v5646[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v5646[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v5646[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523,0x08048524,0x08048525} expr=(add[32] (add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v5646[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v5649[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v5649[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v5649[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523,0x08048524} expr=(add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v5649[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v5650[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v5650[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v5650[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523} expr=(add[32] (add[32] v5647[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v5650[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5647[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v5648[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5647[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v5648[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5647[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v5648[32]) }
          flags = { }
        address = { defs={0x08048520} expr=(add[32] v5647[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v5648[32]) }
          flags = { }
    init mem:
0x8048526:sub    esp, 0x0c
    registers:
        ax      = { defs={} expr=v5643[32] }
        cx      = { defs={} expr=v5644[32] }
        dx      = { defs={} expr=v5645[32] }
        bx      = { defs={} expr=v5646[32] }
        sp      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) }
        bp      = { defs={0x08048520,0x08048521} expr=(add[32] v5647[32] -4[32]) }
        si      = { defs={} expr=v5649[32] }
        di      = { defs={} expr=v5650[32] }
        es      = { defs={} expr=v5651[16] }
        cs      = { defs={} expr=v5652[16] }
        ss      = { defs={} expr=v5653[16] }
        ds      = { defs={} expr=v5654[16] }
        fs      = { defs={} expr=v5655[16] }
        gs      = { defs={} expr=v5656[16] }
        cf      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        ?1      = { defs={} expr=v5658[1] }
        pf      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))))) }
        ?3      = { defs={} expr=v5660[1] }
        af      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        ?5      = { defs={} expr=v5662[1] }
        zf      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(zerop[1] (add[32] (add[32] (add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])) }
        sf      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])) }
        tf      = { defs={} expr=v5665[1] }
        if      = { defs={} expr=v5666[1] }
        df      = { defs={} expr=v5667[1] }
        of      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        iopl0   = { defs={} expr=v5669[1] }
        iopl1   = { defs={} expr=v5670[1] }
        nt      = { defs={} expr=v5671[1] }
        ?15     = { defs={} expr=v5672[1] }
        rf      = { defs={} expr=v5673[1] }
        vm      = { defs={} expr=v5674[1] }
        ac      = { defs={} expr=v5675[1] }
        vif     = { defs={} expr=v5676[1] }
        vip     = { defs={} expr=v5677[1] }
        id      = { defs={} expr=v5678[1] }
        ?22     = { defs={} expr=v5679[1] }
        ?23     = { defs={} expr=v5680[1] }
        ?24     = { defs={} expr=v5681[1] }
        ?25     = { defs={} expr=v5682[1] }
        ?26     = { defs={} expr=v5683[1] }
        ?27     = { defs={} expr=v5684[1] }
        ?28     = { defs={} expr=v5685[1] }
        ?29     = { defs={} expr=v5686[1] }
        ?30     = { defs={} expr=v5687[1] }
        ?31     = { defs={} expr=v5688[1] }
        ip      = { defs={0x08048520,0x08048521,0x08048523,0x08048524,0x08048525,0x08048526} expr=0x08048529[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v5646[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v5646[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v5646[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523,0x08048524,0x08048525} expr=(add[32] (add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v5646[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v5649[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v5649[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v5649[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523,0x08048524} expr=(add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v5649[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v5650[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v5650[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v5650[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523} expr=(add[32] (add[32] v5647[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v5650[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5647[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v5648[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5647[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v5648[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5647[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v5648[32]) }
          flags = { }
        address = { defs={0x08048520} expr=(add[32] v5647[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v5648[32]) }
          flags = { }
    init mem:
0x8048529:call   0x0804852e<<Insn>>
    registers:
        ax      = { defs={} expr=v5643[32] }
        cx      = { defs={} expr=v5644[32] }
        dx      = { defs={} expr=v5645[32] }
        bx      = { defs={} expr=v5646[32] }
        sp      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526,0x08048529} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) }
        bp      = { defs={0x08048520,0x08048521} expr=(add[32] v5647[32] -4[32]) }
        si      = { defs={} expr=v5649[32] }
        di      = { defs={} expr=v5650[32] }
        es      = { defs={} expr=v5651[16] }
        cs      = { defs={} expr=v5652[16] }
        ss      = { defs={} expr=v5653[16] }
        ds      = { defs={} expr=v5654[16] }
        fs      = { defs={} expr=v5655[16] }
        gs      = { defs={} expr=v5656[16] }
        cf      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        ?1      = { defs={} expr=v5658[1] }
        pf      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))))) }
        ?3      = { defs={} expr=v5660[1] }
        af      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        ?5      = { defs={} expr=v5662[1] }
        zf      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(zerop[1] (add[32] (add[32] (add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])) }
        sf      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])) }
        tf      = { defs={} expr=v5665[1] }
        if      = { defs={} expr=v5666[1] }
        df      = { defs={} expr=v5667[1] }
        of      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        iopl0   = { defs={} expr=v5669[1] }
        iopl1   = { defs={} expr=v5670[1] }
        nt      = { defs={} expr=v5671[1] }
        ?15     = { defs={} expr=v5672[1] }
        rf      = { defs={} expr=v5673[1] }
        vm      = { defs={} expr=v5674[1] }
        ac      = { defs={} expr=v5675[1] }
        vif     = { defs={} expr=v5676[1] }
        vip     = { defs={} expr=v5677[1] }
        id      = { defs={} expr=v5678[1] }
        ?22     = { defs={} expr=v5679[1] }
        ?23     = { defs={} expr=v5680[1] }
        ?24     = { defs={} expr=v5681[1] }
        ?25     = { defs={} expr=v5682[1] }
        ?26     = { defs={} expr=v5683[1] }
        ?27     = { defs={} expr=v5684[1] }
        ?28     = { defs={} expr=v5685[1] }
        ?29     = { defs={} expr=v5686[1] }
        ?30     = { defs={} expr=v5687[1] }
        ?31     = { defs={} expr=v5688[1] }
        ip      = { defs={0x08048529} expr=0x0804852e[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526,0x08048529} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) }
          value = { defs={} expr=46[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v5646[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v5646[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v5646[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523,0x08048524,0x08048525} expr=(add[32] (add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v5646[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v5649[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v5649[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v5649[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523,0x08048524} expr=(add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v5649[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v5650[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v5650[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v5647[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v5650[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523} expr=(add[32] (add[32] v5647[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v5650[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5647[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v5648[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5647[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v5648[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5647[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v5648[32]) }
          flags = { }
        address = { defs={0x08048520} expr=(add[32] v5647[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v5648[32]) }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804852e:pop    ebx
    registers:
        ax      = { defs={} expr=v5831[32] }
        cx      = { defs={} expr=v5832[32] }
        dx      = { defs={} expr=v5833[32] }
        bx      = { defs={0x0804852e} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) }
        sp      = { defs={0x0804852e} expr=(add[32] v5835[32] 4[32]) }
        bp      = { defs={} expr=v5836[32] }
        si      = { defs={} expr=v5837[32] }
        di      = { defs={} expr=v5838[32] }
        es      = { defs={} expr=v5839[16] }
        cs      = { defs={} expr=v5840[16] }
        ss      = { defs={} expr=v5841[16] }
        ds      = { defs={} expr=v5842[16] }
        fs      = { defs={} expr=v5843[16] }
        gs      = { defs={} expr=v5844[16] }
        cf      = { defs={} expr=v5845[1] }
        ?1      = { defs={} expr=v5846[1] }
        pf      = { defs={} expr=v5847[1] }
        ?3      = { defs={} expr=v5848[1] }
        af      = { defs={} expr=v5849[1] }
        ?5      = { defs={} expr=v5850[1] }
        zf      = { defs={} expr=v5851[1] }
        sf      = { defs={} expr=v5852[1] }
        tf      = { defs={} expr=v5853[1] }
        if      = { defs={} expr=v5854[1] }
        df      = { defs={} expr=v5855[1] }
        of      = { defs={} expr=v5856[1] }
        iopl0   = { defs={} expr=v5857[1] }
        iopl1   = { defs={} expr=v5858[1] }
        nt      = { defs={} expr=v5859[1] }
        ?15     = { defs={} expr=v5860[1] }
        rf      = { defs={} expr=v5861[1] }
        vm      = { defs={} expr=v5862[1] }
        ac      = { defs={} expr=v5863[1] }
        vif     = { defs={} expr=v5864[1] }
        vip     = { defs={} expr=v5865[1] }
        id      = { defs={} expr=v5866[1] }
        ?22     = { defs={} expr=v5867[1] }
        ?23     = { defs={} expr=v5868[1] }
        ?24     = { defs={} expr=v5869[1] }
        ?25     = { defs={} expr=v5870[1] }
        ?26     = { defs={} expr=v5871[1] }
        ?27     = { defs={} expr=v5872[1] }
        ?28     = { defs={} expr=v5873[1] }
        ?29     = { defs={} expr=v5874[1] }
        ?30     = { defs={} expr=v5875[1] }
        ?31     = { defs={} expr=v5876[1] }
        ip      = { defs={0x0804852e} expr=0x0804852f[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v5835[32] 3[32]) }
          value = { defs={} expr=v5889[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5835[32] 2[32]) }
          value = { defs={} expr=v5888[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5835[32] 1[32]) }
          value = { defs={} expr=v5887[8] }
          flags = { rdonly }
        address = { defs={0x0804852e} expr=v5835[32] }
          value = { defs={} expr=v5886[8] }
          flags = { rdonly }
0x804852f:add    ebx, 0x0000119a
    registers:
        ax      = { defs={} expr=v5831[32] }
        cx      = { defs={} expr=v5832[32] }
        dx      = { defs={} expr=v5833[32] }
        bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) }
        sp      = { defs={0x0804852e} expr=(add[32] v5835[32] 4[32]) }
        bp      = { defs={} expr=v5836[32] }
        si      = { defs={} expr=v5837[32] }
        di      = { defs={} expr=v5838[32] }
        es      = { defs={} expr=v5839[16] }
        cs      = { defs={} expr=v5840[16] }
        ss      = { defs={} expr=v5841[16] }
        ds      = { defs={} expr=v5842[16] }
        fs      = { defs={} expr=v5843[16] }
        gs      = { defs={} expr=v5844[16] }
        cf      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8])))) 4506[33]))))) }
        ?1      = { defs={} expr=v5846[1] }
        pf      = { defs={0x0804852e,0x0804852f} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]))))))) }
        ?3      = { defs={} expr=v5848[1] }
        af      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8])))) 4506[33]))))) }
        ?5      = { defs={} expr=v5850[1] }
        zf      = { defs={0x0804852e,0x0804852f} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32])) }
        sf      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32])) }
        tf      = { defs={} expr=v5853[1] }
        if      = { defs={} expr=v5854[1] }
        df      = { defs={} expr=v5855[1] }
        of      = { defs={0x0804852e,0x0804852f} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8])))) 4506[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8])))) 4506[33])))))) }
        iopl0   = { defs={} expr=v5857[1] }
        iopl1   = { defs={} expr=v5858[1] }
        nt      = { defs={} expr=v5859[1] }
        ?15     = { defs={} expr=v5860[1] }
        rf      = { defs={} expr=v5861[1] }
        vm      = { defs={} expr=v5862[1] }
        ac      = { defs={} expr=v5863[1] }
        vif     = { defs={} expr=v5864[1] }
        vip     = { defs={} expr=v5865[1] }
        id      = { defs={} expr=v5866[1] }
        ?22     = { defs={} expr=v5867[1] }
        ?23     = { defs={} expr=v5868[1] }
        ?24     = { defs={} expr=v5869[1] }
        ?25     = { defs={} expr=v5870[1] }
        ?26     = { defs={} expr=v5871[1] }
        ?27     = { defs={} expr=v5872[1] }
        ?28     = { defs={} expr=v5873[1] }
        ?29     = { defs={} expr=v5874[1] }
        ?30     = { defs={} expr=v5875[1] }
        ?31     = { defs={} expr=v5876[1] }
        ip      = { defs={0x0804852e,0x0804852f} expr=0x08048535[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v5835[32] 3[32]) }
          value = { defs={} expr=v5889[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5835[32] 2[32]) }
          value = { defs={} expr=v5888[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5835[32] 1[32]) }
          value = { defs={} expr=v5887[8] }
          flags = { rdonly }
        address = { defs={0x0804852e} expr=v5835[32] }
          value = { defs={} expr=v5886[8] }
          flags = { rdonly }
0x8048535:lea    eax, [ebx + 0xffffff20<-0x000000e0>]
    registers:
        ax      = { defs={0x0804852e,0x0804852f,0x08048535} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) }
        cx      = { defs={} expr=v5832[32] }
        dx      = { defs={} expr=v5833[32] }
        bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) }
        sp      = { defs={0x0804852e} expr=(add[32] v5835[32] 4[32]) }
        bp      = { defs={} expr=v5836[32] }
        si      = { defs={} expr=v5837[32] }
        di      = { defs={} expr=v5838[32] }
        es      = { defs={} expr=v5839[16] }
        cs      = { defs={} expr=v5840[16] }
        ss      = { defs={} expr=v5841[16] }
        ds      = { defs={} expr=v5842[16] }
        fs      = { defs={} expr=v5843[16] }
        gs      = { defs={} expr=v5844[16] }
        cf      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8])))) 4506[33]))))) }
        ?1      = { defs={} expr=v5846[1] }
        pf      = { defs={0x0804852e,0x0804852f} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]))))))) }
        ?3      = { defs={} expr=v5848[1] }
        af      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8])))) 4506[33]))))) }
        ?5      = { defs={} expr=v5850[1] }
        zf      = { defs={0x0804852e,0x0804852f} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32])) }
        sf      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32])) }
        tf      = { defs={} expr=v5853[1] }
        if      = { defs={} expr=v5854[1] }
        df      = { defs={} expr=v5855[1] }
        of      = { defs={0x0804852e,0x0804852f} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8])))) 4506[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8])))) 4506[33])))))) }
        iopl0   = { defs={} expr=v5857[1] }
        iopl1   = { defs={} expr=v5858[1] }
        nt      = { defs={} expr=v5859[1] }
        ?15     = { defs={} expr=v5860[1] }
        rf      = { defs={} expr=v5861[1] }
        vm      = { defs={} expr=v5862[1] }
        ac      = { defs={} expr=v5863[1] }
        vif     = { defs={} expr=v5864[1] }
        vip     = { defs={} expr=v5865[1] }
        id      = { defs={} expr=v5866[1] }
        ?22     = { defs={} expr=v5867[1] }
        ?23     = { defs={} expr=v5868[1] }
        ?24     = { defs={} expr=v5869[1] }
        ?25     = { defs={} expr=v5870[1] }
        ?26     = { defs={} expr=v5871[1] }
        ?27     = { defs={} expr=v5872[1] }
        ?28     = { defs={} expr=v5873[1] }
        ?29     = { defs={} expr=v5874[1] }
        ?30     = { defs={} expr=v5875[1] }
        ?31     = { defs={} expr=v5876[1] }
        ip      = { defs={0x0804852e,0x0804852f,0x08048535} expr=0x0804853b[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v5835[32] 3[32]) }
          value = { defs={} expr=v5889[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5835[32] 2[32]) }
          value = { defs={} expr=v5888[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5835[32] 1[32]) }
          value = { defs={} expr=v5887[8] }
          flags = { rdonly }
        address = { defs={0x0804852e} expr=v5835[32] }
          value = { defs={} expr=v5886[8] }
          flags = { rdonly }
0x804853b:lea    edx, [ebx + 0xffffff20<-0x000000e0>]
    registers:
        ax      = { defs={0x0804852e,0x0804852f,0x08048535} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) }
        cx      = { defs={} expr=v5832[32] }
        dx      = { defs={0x0804852e,0x0804852f,0x0804853b} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) }
        bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) }
        sp      = { defs={0x0804852e} expr=(add[32] v5835[32] 4[32]) }
        bp      = { defs={} expr=v5836[32] }
        si      = { defs={} expr=v5837[32] }
        di      = { defs={} expr=v5838[32] }
        es      = { defs={} expr=v5839[16] }
        cs      = { defs={} expr=v5840[16] }
        ss      = { defs={} expr=v5841[16] }
        ds      = { defs={} expr=v5842[16] }
        fs      = { defs={} expr=v5843[16] }
        gs      = { defs={} expr=v5844[16] }
        cf      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8])))) 4506[33]))))) }
        ?1      = { defs={} expr=v5846[1] }
        pf      = { defs={0x0804852e,0x0804852f} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]))))))) }
        ?3      = { defs={} expr=v5848[1] }
        af      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8])))) 4506[33]))))) }
        ?5      = { defs={} expr=v5850[1] }
        zf      = { defs={0x0804852e,0x0804852f} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32])) }
        sf      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32])) }
        tf      = { defs={} expr=v5853[1] }
        if      = { defs={} expr=v5854[1] }
        df      = { defs={} expr=v5855[1] }
        of      = { defs={0x0804852e,0x0804852f} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8])))) 4506[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8])))) 4506[33])))))) }
        iopl0   = { defs={} expr=v5857[1] }
        iopl1   = { defs={} expr=v5858[1] }
        nt      = { defs={} expr=v5859[1] }
        ?15     = { defs={} expr=v5860[1] }
        rf      = { defs={} expr=v5861[1] }
        vm      = { defs={} expr=v5862[1] }
        ac      = { defs={} expr=v5863[1] }
        vif     = { defs={} expr=v5864[1] }
        vip     = { defs={} expr=v5865[1] }
        id      = { defs={} expr=v5866[1] }
        ?22     = { defs={} expr=v5867[1] }
        ?23     = { defs={} expr=v5868[1] }
        ?24     = { defs={} expr=v5869[1] }
        ?25     = { defs={} expr=v5870[1] }
        ?26     = { defs={} expr=v5871[1] }
        ?27     = { defs={} expr=v5872[1] }
        ?28     = { defs={} expr=v5873[1] }
        ?29     = { defs={} expr=v5874[1] }
        ?30     = { defs={} expr=v5875[1] }
        ?31     = { defs={} expr=v5876[1] }
        ip      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b} expr=0x08048541[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v5835[32] 3[32]) }
          value = { defs={} expr=v5889[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5835[32] 2[32]) }
          value = { defs={} expr=v5888[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5835[32] 1[32]) }
          value = { defs={} expr=v5887[8] }
          flags = { rdonly }
        address = { defs={0x0804852e} expr=v5835[32] }
          value = { defs={} expr=v5886[8] }
          flags = { rdonly }
0x8048541:sub    eax, edx
    registers:
        ax      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32])) }
        cx      = { defs={} expr=v5832[32] }
        dx      = { defs={0x0804852e,0x0804852f,0x0804853b} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) }
        bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) }
        sp      = { defs={0x0804852e} expr=(add[32] v5835[32] 4[32]) }
        bp      = { defs={} expr=v5836[32] }
        si      = { defs={} expr=v5837[32] }
        di      = { defs={} expr=v5838[32] }
        es      = { defs={} expr=v5839[16] }
        cs      = { defs={} expr=v5840[16] }
        ss      = { defs={} expr=v5841[16] }
        ds      = { defs={} expr=v5842[16] }
        fs      = { defs={} expr=v5843[16] }
        gs      = { defs={} expr=v5844[16] }
        cf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]))) (add[33] (uextend[33] 33[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]))) 1[33]))))))) }
        ?1      = { defs={} expr=v5846[1] }
        pf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32])))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32])))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32])))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32])))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32])))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32])))))))) }
        ?3      = { defs={} expr=v5848[1] }
        af      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]))) (add[33] (uextend[33] 33[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]))) 1[33]))))))) }
        ?5      = { defs={} expr=v5850[1] }
        zf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541} expr=(zerop[1] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))) }
        sf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))) }
        tf      = { defs={} expr=v5853[1] }
        if      = { defs={} expr=v5854[1] }
        df      = { defs={} expr=v5855[1] }
        of      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]))) (add[33] (uextend[33] 33[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]))) 1[33])))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]))) (add[33] (uextend[33] 33[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]))) 1[33]))))))) }
        iopl0   = { defs={} expr=v5857[1] }
        iopl1   = { defs={} expr=v5858[1] }
        nt      = { defs={} expr=v5859[1] }
        ?15     = { defs={} expr=v5860[1] }
        rf      = { defs={} expr=v5861[1] }
        vm      = { defs={} expr=v5862[1] }
        ac      = { defs={} expr=v5863[1] }
        vif     = { defs={} expr=v5864[1] }
        vip     = { defs={} expr=v5865[1] }
        id      = { defs={} expr=v5866[1] }
        ?22     = { defs={} expr=v5867[1] }
        ?23     = { defs={} expr=v5868[1] }
        ?24     = { defs={} expr=v5869[1] }
        ?25     = { defs={} expr=v5870[1] }
        ?26     = { defs={} expr=v5871[1] }
        ?27     = { defs={} expr=v5872[1] }
        ?28     = { defs={} expr=v5873[1] }
        ?29     = { defs={} expr=v5874[1] }
        ?30     = { defs={} expr=v5875[1] }
        ?31     = { defs={} expr=v5876[1] }
        ip      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541} expr=0x08048543[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v5835[32] 3[32]) }
          value = { defs={} expr=v5889[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5835[32] 2[32]) }
          value = { defs={} expr=v5888[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5835[32] 1[32]) }
          value = { defs={} expr=v5887[8] }
          flags = { rdonly }
        address = { defs={0x0804852e} expr=v5835[32] }
          value = { defs={} expr=v5886[8] }
          flags = { rdonly }
0x8048543:sar    eax, 0x02
    registers:
        ax      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))) }
        cx      = { defs={} expr=v5832[32] }
        dx      = { defs={0x0804852e,0x0804852f,0x0804853b} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) }
        bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) }
        sp      = { defs={0x0804852e} expr=(add[32] v5835[32] 4[32]) }
        bp      = { defs={} expr=v5836[32] }
        si      = { defs={} expr=v5837[32] }
        di      = { defs={} expr=v5838[32] }
        es      = { defs={} expr=v5839[16] }
        cs      = { defs={} expr=v5840[16] }
        ss      = { defs={} expr=v5841[16] }
        ds      = { defs={} expr=v5842[16] }
        fs      = { defs={} expr=v5843[16] }
        gs      = { defs={} expr=v5844[16] }
        cf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32])))) }
        ?1      = { defs={} expr=v5846[1] }
        pf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))))))))) }
        ?3      = { defs={} expr=v5848[1] }
        af      = { defs={0x08048543} expr=v6023[1] }
        ?5      = { defs={} expr=v5850[1] }
        zf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(zerop[1] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32])))) }
        sf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32])))) }
        tf      = { defs={} expr=v5853[1] }
        if      = { defs={} expr=v5854[1] }
        df      = { defs={} expr=v5855[1] }
        of      = { defs={0x08048543} expr=v6038[1] }
        iopl0   = { defs={} expr=v5857[1] }
        iopl1   = { defs={} expr=v5858[1] }
        nt      = { defs={} expr=v5859[1] }
        ?15     = { defs={} expr=v5860[1] }
        rf      = { defs={} expr=v5861[1] }
        vm      = { defs={} expr=v5862[1] }
        ac      = { defs={} expr=v5863[1] }
        vif     = { defs={} expr=v5864[1] }
        vip     = { defs={} expr=v5865[1] }
        id      = { defs={} expr=v5866[1] }
        ?22     = { defs={} expr=v5867[1] }
        ?23     = { defs={} expr=v5868[1] }
        ?24     = { defs={} expr=v5869[1] }
        ?25     = { defs={} expr=v5870[1] }
        ?26     = { defs={} expr=v5871[1] }
        ?27     = { defs={} expr=v5872[1] }
        ?28     = { defs={} expr=v5873[1] }
        ?29     = { defs={} expr=v5874[1] }
        ?30     = { defs={} expr=v5875[1] }
        ?31     = { defs={} expr=v5876[1] }
        ip      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=0x08048546[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v5835[32] 3[32]) }
          value = { defs={} expr=v5889[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5835[32] 2[32]) }
          value = { defs={} expr=v5888[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5835[32] 1[32]) }
          value = { defs={} expr=v5887[8] }
          flags = { rdonly }
        address = { defs={0x0804852e} expr=v5835[32] }
          value = { defs={} expr=v5886[8] }
          flags = { rdonly }
0x8048546:mov    DWORD PTR ss:[ebp + 0xf0<-0x10>], eax
    registers:
        ax      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))) }
        cx      = { defs={} expr=v5832[32] }
        dx      = { defs={0x0804852e,0x0804852f,0x0804853b} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) }
        bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) }
        sp      = { defs={0x0804852e} expr=(add[32] v5835[32] 4[32]) }
        bp      = { defs={} expr=v5836[32] }
        si      = { defs={} expr=v5837[32] }
        di      = { defs={} expr=v5838[32] }
        es      = { defs={} expr=v5839[16] }
        cs      = { defs={} expr=v5840[16] }
        ss      = { defs={} expr=v5841[16] }
        ds      = { defs={} expr=v5842[16] }
        fs      = { defs={} expr=v5843[16] }
        gs      = { defs={} expr=v5844[16] }
        cf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32])))) }
        ?1      = { defs={} expr=v5846[1] }
        pf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))))))))) }
        ?3      = { defs={} expr=v5848[1] }
        af      = { defs={0x08048543} expr=v6023[1] }
        ?5      = { defs={} expr=v5850[1] }
        zf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(zerop[1] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32])))) }
        sf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32])))) }
        tf      = { defs={} expr=v5853[1] }
        if      = { defs={} expr=v5854[1] }
        df      = { defs={} expr=v5855[1] }
        of      = { defs={0x08048543} expr=v6038[1] }
        iopl0   = { defs={} expr=v5857[1] }
        iopl1   = { defs={} expr=v5858[1] }
        nt      = { defs={} expr=v5859[1] }
        ?15     = { defs={} expr=v5860[1] }
        rf      = { defs={} expr=v5861[1] }
        vm      = { defs={} expr=v5862[1] }
        ac      = { defs={} expr=v5863[1] }
        vif     = { defs={} expr=v5864[1] }
        vip     = { defs={} expr=v5865[1] }
        id      = { defs={} expr=v5866[1] }
        ?22     = { defs={} expr=v5867[1] }
        ?23     = { defs={} expr=v5868[1] }
        ?24     = { defs={} expr=v5869[1] }
        ?25     = { defs={} expr=v5870[1] }
        ?26     = { defs={} expr=v5871[1] }
        ?27     = { defs={} expr=v5872[1] }
        ?28     = { defs={} expr=v5873[1] }
        ?29     = { defs={} expr=v5874[1] }
        ?30     = { defs={} expr=v5875[1] }
        ?31     = { defs={} expr=v5876[1] }
        ip      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546} expr=0x08048549[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v5836[32] -16[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5836[32] -16[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5836[32] -16[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={0x08048546} expr=(add[32] v5836[32] -16[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v5835[32] 3[32]) }
          value = { defs={} expr=v5889[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5835[32] 2[32]) }
          value = { defs={} expr=v5888[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5835[32] 1[32]) }
          value = { defs={} expr=v5887[8] }
          flags = { rdonly }
        address = { defs={0x0804852e} expr=v5835[32] }
          value = { defs={} expr=v5886[8] }
          flags = { rdonly }
0x8048549:dec    eax
    registers:
        ax      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=(add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) }
        cx      = { defs={} expr=v5832[32] }
        dx      = { defs={0x0804852e,0x0804852f,0x0804853b} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) }
        bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) }
        sp      = { defs={0x0804852e} expr=(add[32] v5835[32] 4[32]) }
        bp      = { defs={} expr=v5836[32] }
        si      = { defs={} expr=v5837[32] }
        di      = { defs={} expr=v5838[32] }
        es      = { defs={} expr=v5839[16] }
        cs      = { defs={} expr=v5840[16] }
        ss      = { defs={} expr=v5841[16] }
        ds      = { defs={} expr=v5842[16] }
        fs      = { defs={} expr=v5843[16] }
        gs      = { defs={} expr=v5844[16] }
        cf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32])))) }
        ?1      = { defs={} expr=v5846[1] }
        pf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]))))))) }
        ?3      = { defs={} expr=v5848[1] }
        af      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32])))) (bv-xor[33] 4294967295[33] (add[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32])))) 4294967295[33])))))) }
        ?5      = { defs={} expr=v5850[1] }
        zf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=(zerop[1] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) }
        sf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=(extract[1] 31[32] 32[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) }
        tf      = { defs={} expr=v5853[1] }
        if      = { defs={} expr=v5854[1] }
        df      = { defs={} expr=v5855[1] }
        of      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32])))) (bv-xor[33] 4294967295[33] (add[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32])))) 4294967295[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32])))) (bv-xor[33] 4294967295[33] (add[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32])))) 4294967295[33])))))) }
        iopl0   = { defs={} expr=v5857[1] }
        iopl1   = { defs={} expr=v5858[1] }
        nt      = { defs={} expr=v5859[1] }
        ?15     = { defs={} expr=v5860[1] }
        rf      = { defs={} expr=v5861[1] }
        vm      = { defs={} expr=v5862[1] }
        ac      = { defs={} expr=v5863[1] }
        vif     = { defs={} expr=v5864[1] }
        vip     = { defs={} expr=v5865[1] }
        id      = { defs={} expr=v5866[1] }
        ?22     = { defs={} expr=v5867[1] }
        ?23     = { defs={} expr=v5868[1] }
        ?24     = { defs={} expr=v5869[1] }
        ?25     = { defs={} expr=v5870[1] }
        ?26     = { defs={} expr=v5871[1] }
        ?27     = { defs={} expr=v5872[1] }
        ?28     = { defs={} expr=v5873[1] }
        ?29     = { defs={} expr=v5874[1] }
        ?30     = { defs={} expr=v5875[1] }
        ?31     = { defs={} expr=v5876[1] }
        ip      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546,0x08048549} expr=0x0804854a[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v5836[32] -16[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5836[32] -16[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5836[32] -16[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={0x08048546} expr=(add[32] v5836[32] -16[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v5835[32] 3[32]) }
          value = { defs={} expr=v5889[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5835[32] 2[32]) }
          value = { defs={} expr=v5888[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5835[32] 1[32]) }
          value = { defs={} expr=v5887[8] }
          flags = { rdonly }
        address = { defs={0x0804852e} expr=v5835[32] }
          value = { defs={} expr=v5886[8] }
          flags = { rdonly }
0x804854a:cmp    eax, 0xff<-0x01>
    registers:
        ax      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=(add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) }
        cx      = { defs={} expr=v5832[32] }
        dx      = { defs={0x0804852e,0x0804852f,0x0804853b} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) }
        bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) }
        sp      = { defs={0x0804852e} expr=(add[32] v5835[32] 4[32]) }
        bp      = { defs={} expr=v5836[32] }
        si      = { defs={} expr=v5837[32] }
        di      = { defs={} expr=v5838[32] }
        es      = { defs={} expr=v5839[16] }
        cs      = { defs={} expr=v5840[16] }
        ss      = { defs={} expr=v5841[16] }
        ds      = { defs={} expr=v5842[16] }
        fs      = { defs={} expr=v5843[16] }
        gs      = { defs={} expr=v5844[16] }
        cf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33])))))) }
        ?1      = { defs={} expr=v5846[1] }
        pf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))))))) }
        ?3      = { defs={} expr=v5848[1] }
        af      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33])))))) }
        ?5      = { defs={} expr=v5850[1] }
        zf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(zerop[1] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])) }
        sf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])) }
        tf      = { defs={} expr=v5853[1] }
        if      = { defs={} expr=v5854[1] }
        df      = { defs={} expr=v5855[1] }
        of      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33])))))) }
        iopl0   = { defs={} expr=v5857[1] }
        iopl1   = { defs={} expr=v5858[1] }
        nt      = { defs={} expr=v5859[1] }
        ?15     = { defs={} expr=v5860[1] }
        rf      = { defs={} expr=v5861[1] }
        vm      = { defs={} expr=v5862[1] }
        ac      = { defs={} expr=v5863[1] }
        vif     = { defs={} expr=v5864[1] }
        vip     = { defs={} expr=v5865[1] }
        id      = { defs={} expr=v5866[1] }
        ?22     = { defs={} expr=v5867[1] }
        ?23     = { defs={} expr=v5868[1] }
        ?24     = { defs={} expr=v5869[1] }
        ?25     = { defs={} expr=v5870[1] }
        ?26     = { defs={} expr=v5871[1] }
        ?27     = { defs={} expr=v5872[1] }
        ?28     = { defs={} expr=v5873[1] }
        ?29     = { defs={} expr=v5874[1] }
        ?30     = { defs={} expr=v5875[1] }
        ?31     = { defs={} expr=v5876[1] }
        ip      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546,0x08048549,0x0804854a} expr=0x0804854d[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v5836[32] -16[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5836[32] -16[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5836[32] -16[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={0x08048546} expr=(add[32] v5836[32] -16[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v5835[32] 3[32]) }
          value = { defs={} expr=v5889[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5835[32] 2[32]) }
          value = { defs={} expr=v5888[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5835[32] 1[32]) }
          value = { defs={} expr=v5887[8] }
          flags = { rdonly }
        address = { defs={0x0804852e} expr=v5835[32] }
          value = { defs={} expr=v5886[8] }
          flags = { rdonly }
0x804854d:je     0x0804856b<<Insn>>
    registers:
        ax      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=(add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) }
        cx      = { defs={} expr=v5832[32] }
        dx      = { defs={0x0804852e,0x0804852f,0x0804853b} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) }
        bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) }
        sp      = { defs={0x0804852e} expr=(add[32] v5835[32] 4[32]) }
        bp      = { defs={} expr=v5836[32] }
        si      = { defs={} expr=v5837[32] }
        di      = { defs={} expr=v5838[32] }
        es      = { defs={} expr=v5839[16] }
        cs      = { defs={} expr=v5840[16] }
        ss      = { defs={} expr=v5841[16] }
        ds      = { defs={} expr=v5842[16] }
        fs      = { defs={} expr=v5843[16] }
        gs      = { defs={} expr=v5844[16] }
        cf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33])))))) }
        ?1      = { defs={} expr=v5846[1] }
        pf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))))))) }
        ?3      = { defs={} expr=v5848[1] }
        af      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33])))))) }
        ?5      = { defs={} expr=v5850[1] }
        zf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(zerop[1] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])) }
        sf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])) }
        tf      = { defs={} expr=v5853[1] }
        if      = { defs={} expr=v5854[1] }
        df      = { defs={} expr=v5855[1] }
        of      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33])))))) }
        iopl0   = { defs={} expr=v5857[1] }
        iopl1   = { defs={} expr=v5858[1] }
        nt      = { defs={} expr=v5859[1] }
        ?15     = { defs={} expr=v5860[1] }
        rf      = { defs={} expr=v5861[1] }
        vm      = { defs={} expr=v5862[1] }
        ac      = { defs={} expr=v5863[1] }
        vif     = { defs={} expr=v5864[1] }
        vip     = { defs={} expr=v5865[1] }
        id      = { defs={} expr=v5866[1] }
        ?22     = { defs={} expr=v5867[1] }
        ?23     = { defs={} expr=v5868[1] }
        ?24     = { defs={} expr=v5869[1] }
        ?25     = { defs={} expr=v5870[1] }
        ?26     = { defs={} expr=v5871[1] }
        ?27     = { defs={} expr=v5872[1] }
        ?28     = { defs={} expr=v5873[1] }
        ?29     = { defs={} expr=v5874[1] }
        ?30     = { defs={} expr=v5875[1] }
        ?31     = { defs={} expr=v5876[1] }
        ip      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546,0x08048549,0x0804854a,0x0804854d} expr=(ite[32] (zerop[1] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])) 0x0804856b[32] 0x0804854f[32]) }
    memory:
        address = { defs={} expr=(add[32] (add[32] v5836[32] -16[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5836[32] -16[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v5836[32] -16[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={0x08048546} expr=(add[32] v5836[32] -16[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5886[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5887[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5888[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5889[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v5835[32] 3[32]) }
          value = { defs={} expr=v5889[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5835[32] 2[32]) }
          value = { defs={} expr=v5888[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5835[32] 1[32]) }
          value = { defs={} expr=v5887[8] }
          flags = { rdonly }
        address = { defs={0x0804852e} expr=v5835[32] }
          value = { defs={} expr=v5886[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804854f:lea    esi, [edx + eax*0x04]
    registers:
        ax      = { defs={} expr=v6234[32] }
        cx      = { defs={} expr=v6235[32] }
        dx      = { defs={} expr=v6236[32] }
        bx      = { defs={} expr=v6237[32] }
        sp      = { defs={} expr=v6238[32] }
        bp      = { defs={} expr=v6239[32] }
        si      = { defs={0x0804854f} expr=(add[32] v6236[32] (extract[32] 0[32] 32[32] (umul[40] v6234[32] 4[8]))) }
        di      = { defs={} expr=v6241[32] }
        es      = { defs={} expr=v6242[16] }
        cs      = { defs={} expr=v6243[16] }
        ss      = { defs={} expr=v6244[16] }
        ds      = { defs={} expr=v6245[16] }
        fs      = { defs={} expr=v6246[16] }
        gs      = { defs={} expr=v6247[16] }
        cf      = { defs={} expr=v6248[1] }
        ?1      = { defs={} expr=v6249[1] }
        pf      = { defs={} expr=v6250[1] }
        ?3      = { defs={} expr=v6251[1] }
        af      = { defs={} expr=v6252[1] }
        ?5      = { defs={} expr=v6253[1] }
        zf      = { defs={} expr=v6254[1] }
        sf      = { defs={} expr=v6255[1] }
        tf      = { defs={} expr=v6256[1] }
        if      = { defs={} expr=v6257[1] }
        df      = { defs={} expr=v6258[1] }
        of      = { defs={} expr=v6259[1] }
        iopl0   = { defs={} expr=v6260[1] }
        iopl1   = { defs={} expr=v6261[1] }
        nt      = { defs={} expr=v6262[1] }
        ?15     = { defs={} expr=v6263[1] }
        rf      = { defs={} expr=v6264[1] }
        vm      = { defs={} expr=v6265[1] }
        ac      = { defs={} expr=v6266[1] }
        vif     = { defs={} expr=v6267[1] }
        vip     = { defs={} expr=v6268[1] }
        id      = { defs={} expr=v6269[1] }
        ?22     = { defs={} expr=v6270[1] }
        ?23     = { defs={} expr=v6271[1] }
        ?24     = { defs={} expr=v6272[1] }
        ?25     = { defs={} expr=v6273[1] }
        ?26     = { defs={} expr=v6274[1] }
        ?27     = { defs={} expr=v6275[1] }
        ?28     = { defs={} expr=v6276[1] }
        ?29     = { defs={} expr=v6277[1] }
        ?30     = { defs={} expr=v6278[1] }
        ?31     = { defs={} expr=v6279[1] }
        ip      = { defs={0x0804854f} expr=0x08048552[32] }
    memory:
    init mem:
0x8048552:xor    edi, edi
    registers:
        ax      = { defs={} expr=v6234[32] }
        cx      = { defs={} expr=v6235[32] }
        dx      = { defs={} expr=v6236[32] }
        bx      = { defs={} expr=v6237[32] }
        sp      = { defs={} expr=v6238[32] }
        bp      = { defs={} expr=v6239[32] }
        si      = { defs={0x0804854f} expr=(add[32] v6236[32] (extract[32] 0[32] 32[32] (umul[40] v6234[32] 4[8]))) }
        di      = { defs={0x08048552} expr=0[32] }
        es      = { defs={} expr=v6242[16] }
        cs      = { defs={} expr=v6243[16] }
        ss      = { defs={} expr=v6244[16] }
        ds      = { defs={} expr=v6245[16] }
        fs      = { defs={} expr=v6246[16] }
        gs      = { defs={} expr=v6247[16] }
        cf      = { defs={0x08048552} expr=0[1] }
        ?1      = { defs={} expr=v6249[1] }
        pf      = { defs={0x08048552} expr=1[1] }
        ?3      = { defs={} expr=v6251[1] }
        af      = { defs={0x08048552} expr=v6323[1] }
        ?5      = { defs={} expr=v6253[1] }
        zf      = { defs={0x08048552} expr=1[1] }
        sf      = { defs={0x08048552} expr=0[1] }
        tf      = { defs={} expr=v6256[1] }
        if      = { defs={} expr=v6257[1] }
        df      = { defs={} expr=v6258[1] }
        of      = { defs={0x08048552} expr=0[1] }
        iopl0   = { defs={} expr=v6260[1] }
        iopl1   = { defs={} expr=v6261[1] }
        nt      = { defs={} expr=v6262[1] }
        ?15     = { defs={} expr=v6263[1] }
        rf      = { defs={} expr=v6264[1] }
        vm      = { defs={} expr=v6265[1] }
        ac      = { defs={} expr=v6266[1] }
        vif     = { defs={} expr=v6267[1] }
        vip     = { defs={} expr=v6268[1] }
        id      = { defs={} expr=v6269[1] }
        ?22     = { defs={} expr=v6270[1] }
        ?23     = { defs={} expr=v6271[1] }
        ?24     = { defs={} expr=v6272[1] }
        ?25     = { defs={} expr=v6273[1] }
        ?26     = { defs={} expr=v6274[1] }
        ?27     = { defs={} expr=v6275[1] }
        ?28     = { defs={} expr=v6276[1] }
        ?29     = { defs={} expr=v6277[1] }
        ?30     = { defs={} expr=v6278[1] }
        ?31     = { defs={} expr=v6279[1] }
        ip      = { defs={0x0804854f,0x08048552} expr=0x08048554[32] }
    memory:
    init mem:
0x8048554:lea    esi, [esi + 0x00000000]
    registers:
        ax      = { defs={} expr=v6234[32] }
        cx      = { defs={} expr=v6235[32] }
        dx      = { defs={} expr=v6236[32] }
        bx      = { defs={} expr=v6237[32] }
        sp      = { defs={} expr=v6238[32] }
        bp      = { defs={} expr=v6239[32] }
        si      = { defs={0x0804854f,0x08048554} expr=(add[32] v6236[32] (extract[32] 0[32] 32[32] (umul[40] v6234[32] 4[8]))) }
        di      = { defs={0x08048552} expr=0[32] }
        es      = { defs={} expr=v6242[16] }
        cs      = { defs={} expr=v6243[16] }
        ss      = { defs={} expr=v6244[16] }
        ds      = { defs={} expr=v6245[16] }
        fs      = { defs={} expr=v6246[16] }
        gs      = { defs={} expr=v6247[16] }
        cf      = { defs={0x08048552} expr=0[1] }
        ?1      = { defs={} expr=v6249[1] }
        pf      = { defs={0x08048552} expr=1[1] }
        ?3      = { defs={} expr=v6251[1] }
        af      = { defs={0x08048552} expr=v6323[1] }
        ?5      = { defs={} expr=v6253[1] }
        zf      = { defs={0x08048552} expr=1[1] }
        sf      = { defs={0x08048552} expr=0[1] }
        tf      = { defs={} expr=v6256[1] }
        if      = { defs={} expr=v6257[1] }
        df      = { defs={} expr=v6258[1] }
        of      = { defs={0x08048552} expr=0[1] }
        iopl0   = { defs={} expr=v6260[1] }
        iopl1   = { defs={} expr=v6261[1] }
        nt      = { defs={} expr=v6262[1] }
        ?15     = { defs={} expr=v6263[1] }
        rf      = { defs={} expr=v6264[1] }
        vm      = { defs={} expr=v6265[1] }
        ac      = { defs={} expr=v6266[1] }
        vif     = { defs={} expr=v6267[1] }
        vip     = { defs={} expr=v6268[1] }
        id      = { defs={} expr=v6269[1] }
        ?22     = { defs={} expr=v6270[1] }
        ?23     = { defs={} expr=v6271[1] }
        ?24     = { defs={} expr=v6272[1] }
        ?25     = { defs={} expr=v6273[1] }
        ?26     = { defs={} expr=v6274[1] }
        ?27     = { defs={} expr=v6275[1] }
        ?28     = { defs={} expr=v6276[1] }
        ?29     = { defs={} expr=v6277[1] }
        ?30     = { defs={} expr=v6278[1] }
        ?31     = { defs={} expr=v6279[1] }
        ip      = { defs={0x0804854f,0x08048552,0x08048554} expr=0x0804855a[32] }
    memory:
    init mem:
0x804855a:lea    edi, [edi + 0x00000000]
    registers:
        ax      = { defs={} expr=v6234[32] }
        cx      = { defs={} expr=v6235[32] }
        dx      = { defs={} expr=v6236[32] }
        bx      = { defs={} expr=v6237[32] }
        sp      = { defs={} expr=v6238[32] }
        bp      = { defs={} expr=v6239[32] }
        si      = { defs={0x0804854f,0x08048554} expr=(add[32] v6236[32] (extract[32] 0[32] 32[32] (umul[40] v6234[32] 4[8]))) }
        di      = { defs={0x08048552,0x0804855a} expr=0[32] }
        es      = { defs={} expr=v6242[16] }
        cs      = { defs={} expr=v6243[16] }
        ss      = { defs={} expr=v6244[16] }
        ds      = { defs={} expr=v6245[16] }
        fs      = { defs={} expr=v6246[16] }
        gs      = { defs={} expr=v6247[16] }
        cf      = { defs={0x08048552} expr=0[1] }
        ?1      = { defs={} expr=v6249[1] }
        pf      = { defs={0x08048552} expr=1[1] }
        ?3      = { defs={} expr=v6251[1] }
        af      = { defs={0x08048552} expr=v6323[1] }
        ?5      = { defs={} expr=v6253[1] }
        zf      = { defs={0x08048552} expr=1[1] }
        sf      = { defs={0x08048552} expr=0[1] }
        tf      = { defs={} expr=v6256[1] }
        if      = { defs={} expr=v6257[1] }
        df      = { defs={} expr=v6258[1] }
        of      = { defs={0x08048552} expr=0[1] }
        iopl0   = { defs={} expr=v6260[1] }
        iopl1   = { defs={} expr=v6261[1] }
        nt      = { defs={} expr=v6262[1] }
        ?15     = { defs={} expr=v6263[1] }
        rf      = { defs={} expr=v6264[1] }
        vm      = { defs={} expr=v6265[1] }
        ac      = { defs={} expr=v6266[1] }
        vif     = { defs={} expr=v6267[1] }
        vip     = { defs={} expr=v6268[1] }
        id      = { defs={} expr=v6269[1] }
        ?22     = { defs={} expr=v6270[1] }
        ?23     = { defs={} expr=v6271[1] }
        ?24     = { defs={} expr=v6272[1] }
        ?25     = { defs={} expr=v6273[1] }
        ?26     = { defs={} expr=v6274[1] }
        ?27     = { defs={} expr=v6275[1] }
        ?28     = { defs={} expr=v6276[1] }
        ?29     = { defs={} expr=v6277[1] }
        ?30     = { defs={} expr=v6278[1] }
        ?31     = { defs={} expr=v6279[1] }
        ip      = { defs={0x0804854f,0x08048552,0x08048554,0x0804855a} expr=0x08048560[32] }
    memory:
    init mem:
0x8048560:call   DWORD PTR ds:[esi]
    registers:
        ax      = { defs={} expr=v6234[32] }
        cx      = { defs={} expr=v6235[32] }
        dx      = { defs={} expr=v6236[32] }
        bx      = { defs={} expr=v6237[32] }
        sp      = { defs={0x08048560} expr=(add[32] v6238[32] -4[32]) }
        bp      = { defs={} expr=v6239[32] }
        si      = { defs={0x0804854f,0x08048554} expr=(add[32] v6236[32] (extract[32] 0[32] 32[32] (umul[40] v6234[32] 4[8]))) }
        di      = { defs={0x08048552,0x0804855a} expr=0[32] }
        es      = { defs={} expr=v6242[16] }
        cs      = { defs={} expr=v6243[16] }
        ss      = { defs={} expr=v6244[16] }
        ds      = { defs={} expr=v6245[16] }
        fs      = { defs={} expr=v6246[16] }
        gs      = { defs={} expr=v6247[16] }
        cf      = { defs={0x08048552} expr=0[1] }
        ?1      = { defs={} expr=v6249[1] }
        pf      = { defs={0x08048552} expr=1[1] }
        ?3      = { defs={} expr=v6251[1] }
        af      = { defs={0x08048552} expr=v6323[1] }
        ?5      = { defs={} expr=v6253[1] }
        zf      = { defs={0x08048552} expr=1[1] }
        sf      = { defs={0x08048552} expr=0[1] }
        tf      = { defs={} expr=v6256[1] }
        if      = { defs={} expr=v6257[1] }
        df      = { defs={} expr=v6258[1] }
        of      = { defs={0x08048552} expr=0[1] }
        iopl0   = { defs={} expr=v6260[1] }
        iopl1   = { defs={} expr=v6261[1] }
        nt      = { defs={} expr=v6262[1] }
        ?15     = { defs={} expr=v6263[1] }
        rf      = { defs={} expr=v6264[1] }
        vm      = { defs={} expr=v6265[1] }
        ac      = { defs={} expr=v6266[1] }
        vif     = { defs={} expr=v6267[1] }
        vip     = { defs={} expr=v6268[1] }
        id      = { defs={} expr=v6269[1] }
        ?22     = { defs={} expr=v6270[1] }
        ?23     = { defs={} expr=v6271[1] }
        ?24     = { defs={} expr=v6272[1] }
        ?25     = { defs={} expr=v6273[1] }
        ?26     = { defs={} expr=v6274[1] }
        ?27     = { defs={} expr=v6275[1] }
        ?28     = { defs={} expr=v6276[1] }
        ?29     = { defs={} expr=v6277[1] }
        ?30     = { defs={} expr=v6278[1] }
        ?31     = { defs={} expr=v6279[1] }
        ip      = { defs={0x08048560} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6347[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6348[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6349[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6350[8]))) }
    memory:
        address = { defs={} expr=(add[32] (add[32] v6238[32] -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v6238[32] -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v6238[32] -4[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x08048560} expr=(add[32] v6238[32] -4[32]) }
          value = { defs={} expr=98[8] }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] (add[32] v6236[32] (extract[32] 0[32] 32[32] (umul[40] v6234[32] 4[8]))) 3[32]) }
          value = { defs={} expr=v6350[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v6236[32] (extract[32] 0[32] 32[32] (umul[40] v6234[32] 4[8]))) 2[32]) }
          value = { defs={} expr=v6349[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v6236[32] (extract[32] 0[32] 32[32] (umul[40] v6234[32] 4[8]))) 1[32]) }
          value = { defs={} expr=v6348[8] }
          flags = { rdonly }
        address = { defs={0x0804854f,0x08048554,0x08048560} expr=(add[32] v6236[32] (extract[32] 0[32] 32[32] (umul[40] v6234[32] 4[8]))) }
          value = { defs={} expr=v6347[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048562:inc    edi
    registers:
        ax      = { defs={} expr=v6405[32] }
        cx      = { defs={} expr=v6406[32] }
        dx      = { defs={} expr=v6407[32] }
        bx      = { defs={} expr=v6408[32] }
        sp      = { defs={} expr=v6409[32] }
        bp      = { defs={} expr=v6410[32] }
        si      = { defs={} expr=v6411[32] }
        di      = { defs={0x08048562} expr=(add[32] v6412[32] 1[32]) }
        es      = { defs={} expr=v6413[16] }
        cs      = { defs={} expr=v6414[16] }
        ss      = { defs={} expr=v6415[16] }
        ds      = { defs={} expr=v6416[16] }
        fs      = { defs={} expr=v6417[16] }
        gs      = { defs={} expr=v6418[16] }
        cf      = { defs={} expr=v6419[1] }
        ?1      = { defs={} expr=v6420[1] }
        pf      = { defs={0x08048562} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v6412[32] 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v6412[32] 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v6412[32] 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v6412[32] 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v6412[32] 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v6412[32] 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v6412[32] 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v6412[32] 1[32]))))))) }
        ?3      = { defs={} expr=v6422[1] }
        af      = { defs={0x08048562} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6412[32]) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] v6412[32]) 1[33]))))) }
        ?5      = { defs={} expr=v6424[1] }
        zf      = { defs={0x08048562} expr=(zerop[1] (add[32] v6412[32] 1[32])) }
        sf      = { defs={0x08048562} expr=(extract[1] 31[32] 32[32] (add[32] v6412[32] 1[32])) }
        tf      = { defs={} expr=v6427[1] }
        if      = { defs={} expr=v6428[1] }
        df      = { defs={} expr=v6429[1] }
        of      = { defs={0x08048562} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6412[32]) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] v6412[32]) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6412[32]) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] v6412[32]) 1[33])))))) }
        iopl0   = { defs={} expr=v6431[1] }
        iopl1   = { defs={} expr=v6432[1] }
        nt      = { defs={} expr=v6433[1] }
        ?15     = { defs={} expr=v6434[1] }
        rf      = { defs={} expr=v6435[1] }
        vm      = { defs={} expr=v6436[1] }
        ac      = { defs={} expr=v6437[1] }
        vif     = { defs={} expr=v6438[1] }
        vip     = { defs={} expr=v6439[1] }
        id      = { defs={} expr=v6440[1] }
        ?22     = { defs={} expr=v6441[1] }
        ?23     = { defs={} expr=v6442[1] }
        ?24     = { defs={} expr=v6443[1] }
        ?25     = { defs={} expr=v6444[1] }
        ?26     = { defs={} expr=v6445[1] }
        ?27     = { defs={} expr=v6446[1] }
        ?28     = { defs={} expr=v6447[1] }
        ?29     = { defs={} expr=v6448[1] }
        ?30     = { defs={} expr=v6449[1] }
        ?31     = { defs={} expr=v6450[1] }
        ip      = { defs={0x08048562} expr=0x08048563[32] }
    memory:
    init mem:
0x8048563:sub    esi, 0x04
    registers:
        ax      = { defs={} expr=v6405[32] }
        cx      = { defs={} expr=v6406[32] }
        dx      = { defs={} expr=v6407[32] }
        bx      = { defs={} expr=v6408[32] }
        sp      = { defs={} expr=v6409[32] }
        bp      = { defs={} expr=v6410[32] }
        si      = { defs={0x08048563} expr=(add[32] v6411[32] -4[32]) }
        di      = { defs={0x08048562} expr=(add[32] v6412[32] 1[32]) }
        es      = { defs={} expr=v6413[16] }
        cs      = { defs={} expr=v6414[16] }
        ss      = { defs={} expr=v6415[16] }
        ds      = { defs={} expr=v6416[16] }
        fs      = { defs={} expr=v6417[16] }
        gs      = { defs={} expr=v6418[16] }
        cf      = { defs={0x08048563} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6411[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v6411[32]) 4294967292[33])))))) }
        ?1      = { defs={} expr=v6420[1] }
        pf      = { defs={0x08048563} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v6411[32] -4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v6411[32] -4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v6411[32] -4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v6411[32] -4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v6411[32] -4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v6411[32] -4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v6411[32] -4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v6411[32] -4[32]))))))) }
        ?3      = { defs={} expr=v6422[1] }
        af      = { defs={0x08048563} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6411[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v6411[32]) 4294967292[33])))))) }
        ?5      = { defs={} expr=v6424[1] }
        zf      = { defs={0x08048563} expr=(zerop[1] (add[32] v6411[32] -4[32])) }
        sf      = { defs={0x08048563} expr=(extract[1] 31[32] 32[32] (add[32] v6411[32] -4[32])) }
        tf      = { defs={} expr=v6427[1] }
        if      = { defs={} expr=v6428[1] }
        df      = { defs={} expr=v6429[1] }
        of      = { defs={0x08048563} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6411[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v6411[32]) 4294967292[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6411[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v6411[32]) 4294967292[33])))))) }
        iopl0   = { defs={} expr=v6431[1] }
        iopl1   = { defs={} expr=v6432[1] }
        nt      = { defs={} expr=v6433[1] }
        ?15     = { defs={} expr=v6434[1] }
        rf      = { defs={} expr=v6435[1] }
        vm      = { defs={} expr=v6436[1] }
        ac      = { defs={} expr=v6437[1] }
        vif     = { defs={} expr=v6438[1] }
        vip     = { defs={} expr=v6439[1] }
        id      = { defs={} expr=v6440[1] }
        ?22     = { defs={} expr=v6441[1] }
        ?23     = { defs={} expr=v6442[1] }
        ?24     = { defs={} expr=v6443[1] }
        ?25     = { defs={} expr=v6444[1] }
        ?26     = { defs={} expr=v6445[1] }
        ?27     = { defs={} expr=v6446[1] }
        ?28     = { defs={} expr=v6447[1] }
        ?29     = { defs={} expr=v6448[1] }
        ?30     = { defs={} expr=v6449[1] }
        ?31     = { defs={} expr=v6450[1] }
        ip      = { defs={0x08048562,0x08048563} expr=0x08048566[32] }
    memory:
    init mem:
0x8048566:cmp    DWORD PTR ss:[ebp + 0xf0<-0x10>], edi
    registers:
        ax      = { defs={} expr=v6405[32] }
        cx      = { defs={} expr=v6406[32] }
        dx      = { defs={} expr=v6407[32] }
        bx      = { defs={} expr=v6408[32] }
        sp      = { defs={} expr=v6409[32] }
        bp      = { defs={} expr=v6410[32] }
        si      = { defs={0x08048563} expr=(add[32] v6411[32] -4[32]) }
        di      = { defs={0x08048562} expr=(add[32] v6412[32] 1[32]) }
        es      = { defs={} expr=v6413[16] }
        cs      = { defs={} expr=v6414[16] }
        ss      = { defs={} expr=v6415[16] }
        ds      = { defs={} expr=v6416[16] }
        fs      = { defs={} expr=v6417[16] }
        gs      = { defs={} expr=v6418[16] }
        cf      = { defs={0x08048562,0x08048566} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6559[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6560[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6561[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6562[8])))) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v6412[32] 1[32]))) (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6559[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6560[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6561[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6562[8])))) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v6412[32] 1[32]))) 1[33]))))))) }
        ?1      = { defs={} expr=v6420[1] }
        pf      = { defs={0x08048562,0x08048566} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6559[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6560[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6561[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6562[8]))) (add[32] (invert[32] (add[32] v6412[32] 1[32])) 1[32])))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6559[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6560[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6561[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6562[8]))) (add[32] (invert[32] (add[32] v6412[32] 1[32])) 1[32]))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6559[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6560[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6561[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6562[8]))) (add[32] (invert[32] (add[32] v6412[32] 1[32])) 1[32])))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6559[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6560[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6561[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6562[8]))) (add[32] (invert[32] (add[32] v6412[32] 1[32])) 1[32])))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6559[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6560[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6561[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6562[8]))) (add[32] (invert[32] (add[32] v6412[32] 1[32])) 1[32])))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6559[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6560[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6561[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6562[8]))) (add[32] (invert[32] (add[32] v6412[32] 1[32])) 1[32]))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6559[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6560[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6561[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6562[8]))) (add[32] (invert[32] (add[32] v6412[32] 1[32])) 1[32])))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6559[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6560[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6561[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6562[8]))) (add[32] (invert[32] (add[32] v6412[32] 1[32])) 1[32])))))))) }
        ?3      = { defs={} expr=v6422[1] }
        af      = { defs={0x08048562,0x08048566} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6559[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6560[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6561[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6562[8])))) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v6412[32] 1[32]))) (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6559[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6560[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6561[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6562[8])))) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v6412[32] 1[32]))) 1[33]))))))) }
        ?5      = { defs={} expr=v6424[1] }
        zf      = { defs={0x08048562,0x08048566} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6559[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6560[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6561[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6562[8]))) (add[32] (invert[32] (add[32] v6412[32] 1[32])) 1[32]))) }
        sf      = { defs={0x08048562,0x08048566} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6559[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6560[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6561[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6562[8]))) (add[32] (invert[32] (add[32] v6412[32] 1[32])) 1[32]))) }
        tf      = { defs={} expr=v6427[1] }
        if      = { defs={} expr=v6428[1] }
        df      = { defs={} expr=v6429[1] }
        of      = { defs={0x08048562,0x08048566} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6559[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6560[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6561[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6562[8])))) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v6412[32] 1[32]))) (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6559[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6560[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6561[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6562[8])))) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v6412[32] 1[32]))) 1[33])))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6559[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6560[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6561[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6562[8])))) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v6412[32] 1[32]))) (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6559[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6560[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6561[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6562[8])))) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v6412[32] 1[32]))) 1[33]))))))) }
        iopl0   = { defs={} expr=v6431[1] }
        iopl1   = { defs={} expr=v6432[1] }
        nt      = { defs={} expr=v6433[1] }
        ?15     = { defs={} expr=v6434[1] }
        rf      = { defs={} expr=v6435[1] }
        vm      = { defs={} expr=v6436[1] }
        ac      = { defs={} expr=v6437[1] }
        vif     = { defs={} expr=v6438[1] }
        vip     = { defs={} expr=v6439[1] }
        id      = { defs={} expr=v6440[1] }
        ?22     = { defs={} expr=v6441[1] }
        ?23     = { defs={} expr=v6442[1] }
        ?24     = { defs={} expr=v6443[1] }
        ?25     = { defs={} expr=v6444[1] }
        ?26     = { defs={} expr=v6445[1] }
        ?27     = { defs={} expr=v6446[1] }
        ?28     = { defs={} expr=v6447[1] }
        ?29     = { defs={} expr=v6448[1] }
        ?30     = { defs={} expr=v6449[1] }
        ?31     = { defs={} expr=v6450[1] }
        ip      = { defs={0x08048562,0x08048563,0x08048566} expr=0x08048569[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v6410[32] -16[32]) 3[32]) }
          value = { defs={} expr=v6562[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v6410[32] -16[32]) 2[32]) }
          value = { defs={} expr=v6561[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v6410[32] -16[32]) 1[32]) }
          value = { defs={} expr=v6560[8] }
          flags = { rdonly }
        address = { defs={0x08048566} expr=(add[32] v6410[32] -16[32]) }
          value = { defs={} expr=v6559[8] }
          flags = { rdonly }
0x8048569:jne    0x08048560<<Insn>>
    registers:
        ax      = { defs={} expr=v6405[32] }
        cx      = { defs={} expr=v6406[32] }
        dx      = { defs={} expr=v6407[32] }
        bx      = { defs={} expr=v6408[32] }
        sp      = { defs={} expr=v6409[32] }
        bp      = { defs={} expr=v6410[32] }
        si      = { defs={0x08048563} expr=(add[32] v6411[32] -4[32]) }
        di      = { defs={0x08048562} expr=(add[32] v6412[32] 1[32]) }
        es      = { defs={} expr=v6413[16] }
        cs      = { defs={} expr=v6414[16] }
        ss      = { defs={} expr=v6415[16] }
        ds      = { defs={} expr=v6416[16] }
        fs      = { defs={} expr=v6417[16] }
        gs      = { defs={} expr=v6418[16] }
        cf      = { defs={0x08048562,0x08048566} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6559[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6560[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6561[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6562[8])))) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v6412[32] 1[32]))) (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6559[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6560[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6561[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6562[8])))) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v6412[32] 1[32]))) 1[33]))))))) }
        ?1      = { defs={} expr=v6420[1] }
        pf      = { defs={0x08048562,0x08048566} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6559[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6560[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6561[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6562[8]))) (add[32] (invert[32] (add[32] v6412[32] 1[32])) 1[32])))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6559[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6560[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6561[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6562[8]))) (add[32] (invert[32] (add[32] v6412[32] 1[32])) 1[32]))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6559[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6560[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6561[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6562[8]))) (add[32] (invert[32] (add[32] v6412[32] 1[32])) 1[32])))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6559[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6560[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6561[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6562[8]))) (add[32] (invert[32] (add[32] v6412[32] 1[32])) 1[32])))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6559[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6560[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6561[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6562[8]))) (add[32] (invert[32] (add[32] v6412[32] 1[32])) 1[32])))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6559[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6560[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6561[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6562[8]))) (add[32] (invert[32] (add[32] v6412[32] 1[32])) 1[32]))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6559[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6560[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6561[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6562[8]))) (add[32] (invert[32] (add[32] v6412[32] 1[32])) 1[32])))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6559[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6560[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6561[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6562[8]))) (add[32] (invert[32] (add[32] v6412[32] 1[32])) 1[32])))))))) }
        ?3      = { defs={} expr=v6422[1] }
        af      = { defs={0x08048562,0x08048566} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6559[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6560[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6561[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6562[8])))) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v6412[32] 1[32]))) (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6559[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6560[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6561[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6562[8])))) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v6412[32] 1[32]))) 1[33]))))))) }
        ?5      = { defs={} expr=v6424[1] }
        zf      = { defs={0x08048562,0x08048566} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6559[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6560[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6561[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6562[8]))) (add[32] (invert[32] (add[32] v6412[32] 1[32])) 1[32]))) }
        sf      = { defs={0x08048562,0x08048566} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6559[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6560[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6561[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6562[8]))) (add[32] (invert[32] (add[32] v6412[32] 1[32])) 1[32]))) }
        tf      = { defs={} expr=v6427[1] }
        if      = { defs={} expr=v6428[1] }
        df      = { defs={} expr=v6429[1] }
        of      = { defs={0x08048562,0x08048566} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6559[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6560[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6561[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6562[8])))) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v6412[32] 1[32]))) (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6559[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6560[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6561[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6562[8])))) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v6412[32] 1[32]))) 1[33])))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6559[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6560[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6561[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6562[8])))) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v6412[32] 1[32]))) (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6559[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6560[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6561[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6562[8])))) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v6412[32] 1[32]))) 1[33]))))))) }
        iopl0   = { defs={} expr=v6431[1] }
        iopl1   = { defs={} expr=v6432[1] }
        nt      = { defs={} expr=v6433[1] }
        ?15     = { defs={} expr=v6434[1] }
        rf      = { defs={} expr=v6435[1] }
        vm      = { defs={} expr=v6436[1] }
        ac      = { defs={} expr=v6437[1] }
        vif     = { defs={} expr=v6438[1] }
        vip     = { defs={} expr=v6439[1] }
        id      = { defs={} expr=v6440[1] }
        ?22     = { defs={} expr=v6441[1] }
        ?23     = { defs={} expr=v6442[1] }
        ?24     = { defs={} expr=v6443[1] }
        ?25     = { defs={} expr=v6444[1] }
        ?26     = { defs={} expr=v6445[1] }
        ?27     = { defs={} expr=v6446[1] }
        ?28     = { defs={} expr=v6447[1] }
        ?29     = { defs={} expr=v6448[1] }
        ?30     = { defs={} expr=v6449[1] }
        ?31     = { defs={} expr=v6450[1] }
        ip      = { defs={0x08048562,0x08048563,0x08048566,0x08048569} expr=(ite[32] (invert[1] (zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6559[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6560[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6561[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6562[8]))) (add[32] (invert[32] (add[32] v6412[32] 1[32])) 1[32])))) 0x08048560[32] 0x0804856b[32]) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v6410[32] -16[32]) 3[32]) }
          value = { defs={} expr=v6562[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v6410[32] -16[32]) 2[32]) }
          value = { defs={} expr=v6561[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v6410[32] -16[32]) 1[32]) }
          value = { defs={} expr=v6560[8] }
          flags = { rdonly }
        address = { defs={0x08048566} expr=(add[32] v6410[32] -16[32]) }
          value = { defs={} expr=v6559[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804856b:call   0x080485b0<_fini>
    registers:
        ax      = { defs={} expr=v6669[32] }
        cx      = { defs={} expr=v6670[32] }
        dx      = { defs={} expr=v6671[32] }
        bx      = { defs={} expr=v6672[32] }
        sp      = { defs={0x0804856b} expr=(add[32] v6673[32] -4[32]) }
        bp      = { defs={} expr=v6674[32] }
        si      = { defs={} expr=v6675[32] }
        di      = { defs={} expr=v6676[32] }
        es      = { defs={} expr=v6677[16] }
        cs      = { defs={} expr=v6678[16] }
        ss      = { defs={} expr=v6679[16] }
        ds      = { defs={} expr=v6680[16] }
        fs      = { defs={} expr=v6681[16] }
        gs      = { defs={} expr=v6682[16] }
        cf      = { defs={} expr=v6683[1] }
        ?1      = { defs={} expr=v6684[1] }
        pf      = { defs={} expr=v6685[1] }
        ?3      = { defs={} expr=v6686[1] }
        af      = { defs={} expr=v6687[1] }
        ?5      = { defs={} expr=v6688[1] }
        zf      = { defs={} expr=v6689[1] }
        sf      = { defs={} expr=v6690[1] }
        tf      = { defs={} expr=v6691[1] }
        if      = { defs={} expr=v6692[1] }
        df      = { defs={} expr=v6693[1] }
        of      = { defs={} expr=v6694[1] }
        iopl0   = { defs={} expr=v6695[1] }
        iopl1   = { defs={} expr=v6696[1] }
        nt      = { defs={} expr=v6697[1] }
        ?15     = { defs={} expr=v6698[1] }
        rf      = { defs={} expr=v6699[1] }
        vm      = { defs={} expr=v6700[1] }
        ac      = { defs={} expr=v6701[1] }
        vif     = { defs={} expr=v6702[1] }
        vip     = { defs={} expr=v6703[1] }
        id      = { defs={} expr=v6704[1] }
        ?22     = { defs={} expr=v6705[1] }
        ?23     = { defs={} expr=v6706[1] }
        ?24     = { defs={} expr=v6707[1] }
        ?25     = { defs={} expr=v6708[1] }
        ?26     = { defs={} expr=v6709[1] }
        ?27     = { defs={} expr=v6710[1] }
        ?28     = { defs={} expr=v6711[1] }
        ?29     = { defs={} expr=v6712[1] }
        ?30     = { defs={} expr=v6713[1] }
        ?31     = { defs={} expr=v6714[1] }
        ip      = { defs={0x0804856b} expr=0x080485b0[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v6673[32] -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v6673[32] -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v6673[32] -4[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x0804856b} expr=(add[32] v6673[32] -4[32]) }
          value = { defs={} expr=112[8] }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048570:add    esp, 0x0c
    registers:
        ax      = { defs={} expr=v6772[32] }
        cx      = { defs={} expr=v6773[32] }
        dx      = { defs={} expr=v6774[32] }
        bx      = { defs={} expr=v6775[32] }
        sp      = { defs={0x08048570} expr=(add[32] v6776[32] 12[32]) }
        bp      = { defs={} expr=v6777[32] }
        si      = { defs={} expr=v6778[32] }
        di      = { defs={} expr=v6779[32] }
        es      = { defs={} expr=v6780[16] }
        cs      = { defs={} expr=v6781[16] }
        ss      = { defs={} expr=v6782[16] }
        ds      = { defs={} expr=v6783[16] }
        fs      = { defs={} expr=v6784[16] }
        gs      = { defs={} expr=v6785[16] }
        cf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6776[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6776[32]) 12[33]))))) }
        ?1      = { defs={} expr=v6787[1] }
        pf      = { defs={0x08048570} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v6776[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v6776[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v6776[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v6776[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v6776[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v6776[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v6776[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v6776[32] 12[32]))))))) }
        ?3      = { defs={} expr=v6789[1] }
        af      = { defs={0x08048570} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6776[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6776[32]) 12[33]))))) }
        ?5      = { defs={} expr=v6791[1] }
        zf      = { defs={0x08048570} expr=(zerop[1] (add[32] v6776[32] 12[32])) }
        sf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (add[32] v6776[32] 12[32])) }
        tf      = { defs={} expr=v6794[1] }
        if      = { defs={} expr=v6795[1] }
        df      = { defs={} expr=v6796[1] }
        of      = { defs={0x08048570} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6776[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6776[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6776[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6776[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v6798[1] }
        iopl1   = { defs={} expr=v6799[1] }
        nt      = { defs={} expr=v6800[1] }
        ?15     = { defs={} expr=v6801[1] }
        rf      = { defs={} expr=v6802[1] }
        vm      = { defs={} expr=v6803[1] }
        ac      = { defs={} expr=v6804[1] }
        vif     = { defs={} expr=v6805[1] }
        vip     = { defs={} expr=v6806[1] }
        id      = { defs={} expr=v6807[1] }
        ?22     = { defs={} expr=v6808[1] }
        ?23     = { defs={} expr=v6809[1] }
        ?24     = { defs={} expr=v6810[1] }
        ?25     = { defs={} expr=v6811[1] }
        ?26     = { defs={} expr=v6812[1] }
        ?27     = { defs={} expr=v6813[1] }
        ?28     = { defs={} expr=v6814[1] }
        ?29     = { defs={} expr=v6815[1] }
        ?30     = { defs={} expr=v6816[1] }
        ?31     = { defs={} expr=v6817[1] }
        ip      = { defs={0x08048570} expr=0x08048573[32] }
    memory:
    init mem:
0x8048573:pop    ebx
    registers:
        ax      = { defs={} expr=v6772[32] }
        cx      = { defs={} expr=v6773[32] }
        dx      = { defs={} expr=v6774[32] }
        bx      = { defs={0x08048573} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6875[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6876[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6877[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6878[8]))) }
        sp      = { defs={0x08048570,0x08048573} expr=(add[32] (add[32] v6776[32] 12[32]) 4[32]) }
        bp      = { defs={} expr=v6777[32] }
        si      = { defs={} expr=v6778[32] }
        di      = { defs={} expr=v6779[32] }
        es      = { defs={} expr=v6780[16] }
        cs      = { defs={} expr=v6781[16] }
        ss      = { defs={} expr=v6782[16] }
        ds      = { defs={} expr=v6783[16] }
        fs      = { defs={} expr=v6784[16] }
        gs      = { defs={} expr=v6785[16] }
        cf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6776[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6776[32]) 12[33]))))) }
        ?1      = { defs={} expr=v6787[1] }
        pf      = { defs={0x08048570} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v6776[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v6776[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v6776[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v6776[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v6776[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v6776[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v6776[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v6776[32] 12[32]))))))) }
        ?3      = { defs={} expr=v6789[1] }
        af      = { defs={0x08048570} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6776[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6776[32]) 12[33]))))) }
        ?5      = { defs={} expr=v6791[1] }
        zf      = { defs={0x08048570} expr=(zerop[1] (add[32] v6776[32] 12[32])) }
        sf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (add[32] v6776[32] 12[32])) }
        tf      = { defs={} expr=v6794[1] }
        if      = { defs={} expr=v6795[1] }
        df      = { defs={} expr=v6796[1] }
        of      = { defs={0x08048570} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6776[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6776[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6776[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6776[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v6798[1] }
        iopl1   = { defs={} expr=v6799[1] }
        nt      = { defs={} expr=v6800[1] }
        ?15     = { defs={} expr=v6801[1] }
        rf      = { defs={} expr=v6802[1] }
        vm      = { defs={} expr=v6803[1] }
        ac      = { defs={} expr=v6804[1] }
        vif     = { defs={} expr=v6805[1] }
        vip     = { defs={} expr=v6806[1] }
        id      = { defs={} expr=v6807[1] }
        ?22     = { defs={} expr=v6808[1] }
        ?23     = { defs={} expr=v6809[1] }
        ?24     = { defs={} expr=v6810[1] }
        ?25     = { defs={} expr=v6811[1] }
        ?26     = { defs={} expr=v6812[1] }
        ?27     = { defs={} expr=v6813[1] }
        ?28     = { defs={} expr=v6814[1] }
        ?29     = { defs={} expr=v6815[1] }
        ?30     = { defs={} expr=v6816[1] }
        ?31     = { defs={} expr=v6817[1] }
        ip      = { defs={0x08048570,0x08048573} expr=0x08048574[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v6776[32] 12[32]) 3[32]) }
          value = { defs={} expr=v6878[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v6776[32] 12[32]) 2[32]) }
          value = { defs={} expr=v6877[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v6776[32] 12[32]) 1[32]) }
          value = { defs={} expr=v6876[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573} expr=(add[32] v6776[32] 12[32]) }
          value = { defs={} expr=v6875[8] }
          flags = { rdonly }
0x8048574:pop    esi
    registers:
        ax      = { defs={} expr=v6772[32] }
        cx      = { defs={} expr=v6773[32] }
        dx      = { defs={} expr=v6774[32] }
        bx      = { defs={0x08048573} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6875[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6876[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6877[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6878[8]))) }
        sp      = { defs={0x08048570,0x08048573,0x08048574} expr=(add[32] (add[32] (add[32] v6776[32] 12[32]) 4[32]) 4[32]) }
        bp      = { defs={} expr=v6777[32] }
        si      = { defs={0x08048574} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6892[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6893[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6894[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6895[8]))) }
        di      = { defs={} expr=v6779[32] }
        es      = { defs={} expr=v6780[16] }
        cs      = { defs={} expr=v6781[16] }
        ss      = { defs={} expr=v6782[16] }
        ds      = { defs={} expr=v6783[16] }
        fs      = { defs={} expr=v6784[16] }
        gs      = { defs={} expr=v6785[16] }
        cf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6776[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6776[32]) 12[33]))))) }
        ?1      = { defs={} expr=v6787[1] }
        pf      = { defs={0x08048570} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v6776[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v6776[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v6776[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v6776[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v6776[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v6776[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v6776[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v6776[32] 12[32]))))))) }
        ?3      = { defs={} expr=v6789[1] }
        af      = { defs={0x08048570} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6776[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6776[32]) 12[33]))))) }
        ?5      = { defs={} expr=v6791[1] }
        zf      = { defs={0x08048570} expr=(zerop[1] (add[32] v6776[32] 12[32])) }
        sf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (add[32] v6776[32] 12[32])) }
        tf      = { defs={} expr=v6794[1] }
        if      = { defs={} expr=v6795[1] }
        df      = { defs={} expr=v6796[1] }
        of      = { defs={0x08048570} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6776[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6776[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6776[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6776[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v6798[1] }
        iopl1   = { defs={} expr=v6799[1] }
        nt      = { defs={} expr=v6800[1] }
        ?15     = { defs={} expr=v6801[1] }
        rf      = { defs={} expr=v6802[1] }
        vm      = { defs={} expr=v6803[1] }
        ac      = { defs={} expr=v6804[1] }
        vif     = { defs={} expr=v6805[1] }
        vip     = { defs={} expr=v6806[1] }
        id      = { defs={} expr=v6807[1] }
        ?22     = { defs={} expr=v6808[1] }
        ?23     = { defs={} expr=v6809[1] }
        ?24     = { defs={} expr=v6810[1] }
        ?25     = { defs={} expr=v6811[1] }
        ?26     = { defs={} expr=v6812[1] }
        ?27     = { defs={} expr=v6813[1] }
        ?28     = { defs={} expr=v6814[1] }
        ?29     = { defs={} expr=v6815[1] }
        ?30     = { defs={} expr=v6816[1] }
        ?31     = { defs={} expr=v6817[1] }
        ip      = { defs={0x08048570,0x08048573,0x08048574} expr=0x08048575[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] v6776[32] 12[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v6895[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v6776[32] 12[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v6894[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v6776[32] 12[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v6893[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573,0x08048574} expr=(add[32] (add[32] v6776[32] 12[32]) 4[32]) }
          value = { defs={} expr=v6892[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v6776[32] 12[32]) 3[32]) }
          value = { defs={} expr=v6878[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v6776[32] 12[32]) 2[32]) }
          value = { defs={} expr=v6877[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v6776[32] 12[32]) 1[32]) }
          value = { defs={} expr=v6876[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573} expr=(add[32] v6776[32] 12[32]) }
          value = { defs={} expr=v6875[8] }
          flags = { rdonly }
0x8048575:pop    edi
    registers:
        ax      = { defs={} expr=v6772[32] }
        cx      = { defs={} expr=v6773[32] }
        dx      = { defs={} expr=v6774[32] }
        bx      = { defs={0x08048573} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6875[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6876[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6877[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6878[8]))) }
        sp      = { defs={0x08048570,0x08048573,0x08048574,0x08048575} expr=(add[32] (add[32] (add[32] (add[32] v6776[32] 12[32]) 4[32]) 4[32]) 4[32]) }
        bp      = { defs={} expr=v6777[32] }
        si      = { defs={0x08048574} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6892[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6893[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6894[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6895[8]))) }
        di      = { defs={0x08048575} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6909[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6910[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6911[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6912[8]))) }
        es      = { defs={} expr=v6780[16] }
        cs      = { defs={} expr=v6781[16] }
        ss      = { defs={} expr=v6782[16] }
        ds      = { defs={} expr=v6783[16] }
        fs      = { defs={} expr=v6784[16] }
        gs      = { defs={} expr=v6785[16] }
        cf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6776[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6776[32]) 12[33]))))) }
        ?1      = { defs={} expr=v6787[1] }
        pf      = { defs={0x08048570} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v6776[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v6776[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v6776[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v6776[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v6776[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v6776[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v6776[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v6776[32] 12[32]))))))) }
        ?3      = { defs={} expr=v6789[1] }
        af      = { defs={0x08048570} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6776[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6776[32]) 12[33]))))) }
        ?5      = { defs={} expr=v6791[1] }
        zf      = { defs={0x08048570} expr=(zerop[1] (add[32] v6776[32] 12[32])) }
        sf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (add[32] v6776[32] 12[32])) }
        tf      = { defs={} expr=v6794[1] }
        if      = { defs={} expr=v6795[1] }
        df      = { defs={} expr=v6796[1] }
        of      = { defs={0x08048570} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6776[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6776[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6776[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6776[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v6798[1] }
        iopl1   = { defs={} expr=v6799[1] }
        nt      = { defs={} expr=v6800[1] }
        ?15     = { defs={} expr=v6801[1] }
        rf      = { defs={} expr=v6802[1] }
        vm      = { defs={} expr=v6803[1] }
        ac      = { defs={} expr=v6804[1] }
        vif     = { defs={} expr=v6805[1] }
        vip     = { defs={} expr=v6806[1] }
        id      = { defs={} expr=v6807[1] }
        ?22     = { defs={} expr=v6808[1] }
        ?23     = { defs={} expr=v6809[1] }
        ?24     = { defs={} expr=v6810[1] }
        ?25     = { defs={} expr=v6811[1] }
        ?26     = { defs={} expr=v6812[1] }
        ?27     = { defs={} expr=v6813[1] }
        ?28     = { defs={} expr=v6814[1] }
        ?29     = { defs={} expr=v6815[1] }
        ?30     = { defs={} expr=v6816[1] }
        ?31     = { defs={} expr=v6817[1] }
        ip      = { defs={0x08048570,0x08048573,0x08048574,0x08048575} expr=0x08048576[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v6776[32] 12[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v6912[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v6776[32] 12[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v6911[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v6776[32] 12[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v6910[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573,0x08048574,0x08048575} expr=(add[32] (add[32] (add[32] v6776[32] 12[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v6909[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v6776[32] 12[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v6895[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v6776[32] 12[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v6894[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v6776[32] 12[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v6893[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573,0x08048574} expr=(add[32] (add[32] v6776[32] 12[32]) 4[32]) }
          value = { defs={} expr=v6892[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v6776[32] 12[32]) 3[32]) }
          value = { defs={} expr=v6878[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v6776[32] 12[32]) 2[32]) }
          value = { defs={} expr=v6877[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v6776[32] 12[32]) 1[32]) }
          value = { defs={} expr=v6876[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573} expr=(add[32] v6776[32] 12[32]) }
          value = { defs={} expr=v6875[8] }
          flags = { rdonly }
0x8048576:pop    ebp
    registers:
        ax      = { defs={} expr=v6772[32] }
        cx      = { defs={} expr=v6773[32] }
        dx      = { defs={} expr=v6774[32] }
        bx      = { defs={0x08048573} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6875[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6876[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6877[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6878[8]))) }
        sp      = { defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v6776[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) }
        bp      = { defs={0x08048576} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6926[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6927[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6928[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6929[8]))) }
        si      = { defs={0x08048574} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6892[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6893[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6894[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6895[8]))) }
        di      = { defs={0x08048575} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6909[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6910[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6911[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6912[8]))) }
        es      = { defs={} expr=v6780[16] }
        cs      = { defs={} expr=v6781[16] }
        ss      = { defs={} expr=v6782[16] }
        ds      = { defs={} expr=v6783[16] }
        fs      = { defs={} expr=v6784[16] }
        gs      = { defs={} expr=v6785[16] }
        cf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6776[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6776[32]) 12[33]))))) }
        ?1      = { defs={} expr=v6787[1] }
        pf      = { defs={0x08048570} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v6776[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v6776[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v6776[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v6776[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v6776[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v6776[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v6776[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v6776[32] 12[32]))))))) }
        ?3      = { defs={} expr=v6789[1] }
        af      = { defs={0x08048570} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6776[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6776[32]) 12[33]))))) }
        ?5      = { defs={} expr=v6791[1] }
        zf      = { defs={0x08048570} expr=(zerop[1] (add[32] v6776[32] 12[32])) }
        sf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (add[32] v6776[32] 12[32])) }
        tf      = { defs={} expr=v6794[1] }
        if      = { defs={} expr=v6795[1] }
        df      = { defs={} expr=v6796[1] }
        of      = { defs={0x08048570} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6776[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6776[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6776[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6776[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v6798[1] }
        iopl1   = { defs={} expr=v6799[1] }
        nt      = { defs={} expr=v6800[1] }
        ?15     = { defs={} expr=v6801[1] }
        rf      = { defs={} expr=v6802[1] }
        vm      = { defs={} expr=v6803[1] }
        ac      = { defs={} expr=v6804[1] }
        vif     = { defs={} expr=v6805[1] }
        vip     = { defs={} expr=v6806[1] }
        id      = { defs={} expr=v6807[1] }
        ?22     = { defs={} expr=v6808[1] }
        ?23     = { defs={} expr=v6809[1] }
        ?24     = { defs={} expr=v6810[1] }
        ?25     = { defs={} expr=v6811[1] }
        ?26     = { defs={} expr=v6812[1] }
        ?27     = { defs={} expr=v6813[1] }
        ?28     = { defs={} expr=v6814[1] }
        ?29     = { defs={} expr=v6815[1] }
        ?30     = { defs={} expr=v6816[1] }
        ?31     = { defs={} expr=v6817[1] }
        ip      = { defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576} expr=0x08048577[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v6776[32] 12[32]) 4[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v6929[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v6776[32] 12[32]) 4[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v6928[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v6776[32] 12[32]) 4[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v6927[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576} expr=(add[32] (add[32] (add[32] (add[32] v6776[32] 12[32]) 4[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v6926[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v6776[32] 12[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v6912[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v6776[32] 12[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v6911[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v6776[32] 12[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v6910[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573,0x08048574,0x08048575} expr=(add[32] (add[32] (add[32] v6776[32] 12[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v6909[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v6776[32] 12[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v6895[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v6776[32] 12[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v6894[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v6776[32] 12[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v6893[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573,0x08048574} expr=(add[32] (add[32] v6776[32] 12[32]) 4[32]) }
          value = { defs={} expr=v6892[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v6776[32] 12[32]) 3[32]) }
          value = { defs={} expr=v6878[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v6776[32] 12[32]) 2[32]) }
          value = { defs={} expr=v6877[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v6776[32] 12[32]) 1[32]) }
          value = { defs={} expr=v6876[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573} expr=(add[32] v6776[32] 12[32]) }
          value = { defs={} expr=v6875[8] }
          flags = { rdonly }
0x8048577:ret    
    registers:
        ax      = { defs={} expr=v6772[32] }
        cx      = { defs={} expr=v6773[32] }
        dx      = { defs={} expr=v6774[32] }
        bx      = { defs={0x08048573} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6875[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6876[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6877[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6878[8]))) }
        sp      = { defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576,0x08048577} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v6776[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 4[32]) }
        bp      = { defs={0x08048576} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6926[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6927[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6928[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6929[8]))) }
        si      = { defs={0x08048574} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6892[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6893[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6894[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6895[8]))) }
        di      = { defs={0x08048575} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6909[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6910[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6911[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6912[8]))) }
        es      = { defs={} expr=v6780[16] }
        cs      = { defs={} expr=v6781[16] }
        ss      = { defs={} expr=v6782[16] }
        ds      = { defs={} expr=v6783[16] }
        fs      = { defs={} expr=v6784[16] }
        gs      = { defs={} expr=v6785[16] }
        cf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6776[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6776[32]) 12[33]))))) }
        ?1      = { defs={} expr=v6787[1] }
        pf      = { defs={0x08048570} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v6776[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v6776[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v6776[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v6776[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v6776[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v6776[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v6776[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v6776[32] 12[32]))))))) }
        ?3      = { defs={} expr=v6789[1] }
        af      = { defs={0x08048570} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6776[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6776[32]) 12[33]))))) }
        ?5      = { defs={} expr=v6791[1] }
        zf      = { defs={0x08048570} expr=(zerop[1] (add[32] v6776[32] 12[32])) }
        sf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (add[32] v6776[32] 12[32])) }
        tf      = { defs={} expr=v6794[1] }
        if      = { defs={} expr=v6795[1] }
        df      = { defs={} expr=v6796[1] }
        of      = { defs={0x08048570} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6776[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6776[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6776[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6776[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v6798[1] }
        iopl1   = { defs={} expr=v6799[1] }
        nt      = { defs={} expr=v6800[1] }
        ?15     = { defs={} expr=v6801[1] }
        rf      = { defs={} expr=v6802[1] }
        vm      = { defs={} expr=v6803[1] }
        ac      = { defs={} expr=v6804[1] }
        vif     = { defs={} expr=v6805[1] }
        vip     = { defs={} expr=v6806[1] }
        id      = { defs={} expr=v6807[1] }
        ?22     = { defs={} expr=v6808[1] }
        ?23     = { defs={} expr=v6809[1] }
        ?24     = { defs={} expr=v6810[1] }
        ?25     = { defs={} expr=v6811[1] }
        ?26     = { defs={} expr=v6812[1] }
        ?27     = { defs={} expr=v6813[1] }
        ?28     = { defs={} expr=v6814[1] }
        ?29     = { defs={} expr=v6815[1] }
        ?30     = { defs={} expr=v6816[1] }
        ?31     = { defs={} expr=v6817[1] }
        ip      = { defs={0x08048577} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6943[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6944[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6945[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6946[8]))) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v6776[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v6946[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v6776[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v6945[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v6776[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v6944[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576,0x08048577} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v6776[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v6943[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v6776[32] 12[32]) 4[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v6929[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v6776[32] 12[32]) 4[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v6928[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v6776[32] 12[32]) 4[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v6927[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576} expr=(add[32] (add[32] (add[32] (add[32] v6776[32] 12[32]) 4[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v6926[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v6776[32] 12[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v6912[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v6776[32] 12[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v6911[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v6776[32] 12[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v6910[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573,0x08048574,0x08048575} expr=(add[32] (add[32] (add[32] v6776[32] 12[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v6909[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v6776[32] 12[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v6895[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v6776[32] 12[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v6894[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v6776[32] 12[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v6893[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573,0x08048574} expr=(add[32] (add[32] v6776[32] 12[32]) 4[32]) }
          value = { defs={} expr=v6892[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v6776[32] 12[32]) 3[32]) }
          value = { defs={} expr=v6878[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v6776[32] 12[32]) 2[32]) }
          value = { defs={} expr=v6877[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v6776[32] 12[32]) 1[32]) }
          value = { defs={} expr=v6876[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573} expr=(add[32] v6776[32] 12[32]) }
          value = { defs={} expr=v6875[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048580:push   ebp
    registers:
        ax      = { defs={} expr=v7001[32] }
        cx      = { defs={} expr=v7002[32] }
        dx      = { defs={} expr=v7003[32] }
        bx      = { defs={} expr=v7004[32] }
        sp      = { defs={0x08048580} expr=(add[32] v7005[32] -4[32]) }
        bp      = { defs={} expr=v7006[32] }
        si      = { defs={} expr=v7007[32] }
        di      = { defs={} expr=v7008[32] }
        es      = { defs={} expr=v7009[16] }
        cs      = { defs={} expr=v7010[16] }
        ss      = { defs={} expr=v7011[16] }
        ds      = { defs={} expr=v7012[16] }
        fs      = { defs={} expr=v7013[16] }
        gs      = { defs={} expr=v7014[16] }
        cf      = { defs={} expr=v7015[1] }
        ?1      = { defs={} expr=v7016[1] }
        pf      = { defs={} expr=v7017[1] }
        ?3      = { defs={} expr=v7018[1] }
        af      = { defs={} expr=v7019[1] }
        ?5      = { defs={} expr=v7020[1] }
        zf      = { defs={} expr=v7021[1] }
        sf      = { defs={} expr=v7022[1] }
        tf      = { defs={} expr=v7023[1] }
        if      = { defs={} expr=v7024[1] }
        df      = { defs={} expr=v7025[1] }
        of      = { defs={} expr=v7026[1] }
        iopl0   = { defs={} expr=v7027[1] }
        iopl1   = { defs={} expr=v7028[1] }
        nt      = { defs={} expr=v7029[1] }
        ?15     = { defs={} expr=v7030[1] }
        rf      = { defs={} expr=v7031[1] }
        vm      = { defs={} expr=v7032[1] }
        ac      = { defs={} expr=v7033[1] }
        vif     = { defs={} expr=v7034[1] }
        vip     = { defs={} expr=v7035[1] }
        id      = { defs={} expr=v7036[1] }
        ?22     = { defs={} expr=v7037[1] }
        ?23     = { defs={} expr=v7038[1] }
        ?24     = { defs={} expr=v7039[1] }
        ?25     = { defs={} expr=v7040[1] }
        ?26     = { defs={} expr=v7041[1] }
        ?27     = { defs={} expr=v7042[1] }
        ?28     = { defs={} expr=v7043[1] }
        ?29     = { defs={} expr=v7044[1] }
        ?30     = { defs={} expr=v7045[1] }
        ?31     = { defs={} expr=v7046[1] }
        ip      = { defs={0x08048580} expr=0x08048581[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v7005[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v7006[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7005[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v7006[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7005[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v7006[32]) }
          flags = { }
        address = { defs={0x08048580} expr=(add[32] v7005[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v7006[32]) }
          flags = { }
    init mem:
0x8048581:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v7001[32] }
        cx      = { defs={} expr=v7002[32] }
        dx      = { defs={} expr=v7003[32] }
        bx      = { defs={} expr=v7004[32] }
        sp      = { defs={0x08048580} expr=(add[32] v7005[32] -4[32]) }
        bp      = { defs={0x08048580,0x08048581} expr=(add[32] v7005[32] -4[32]) }
        si      = { defs={} expr=v7007[32] }
        di      = { defs={} expr=v7008[32] }
        es      = { defs={} expr=v7009[16] }
        cs      = { defs={} expr=v7010[16] }
        ss      = { defs={} expr=v7011[16] }
        ds      = { defs={} expr=v7012[16] }
        fs      = { defs={} expr=v7013[16] }
        gs      = { defs={} expr=v7014[16] }
        cf      = { defs={} expr=v7015[1] }
        ?1      = { defs={} expr=v7016[1] }
        pf      = { defs={} expr=v7017[1] }
        ?3      = { defs={} expr=v7018[1] }
        af      = { defs={} expr=v7019[1] }
        ?5      = { defs={} expr=v7020[1] }
        zf      = { defs={} expr=v7021[1] }
        sf      = { defs={} expr=v7022[1] }
        tf      = { defs={} expr=v7023[1] }
        if      = { defs={} expr=v7024[1] }
        df      = { defs={} expr=v7025[1] }
        of      = { defs={} expr=v7026[1] }
        iopl0   = { defs={} expr=v7027[1] }
        iopl1   = { defs={} expr=v7028[1] }
        nt      = { defs={} expr=v7029[1] }
        ?15     = { defs={} expr=v7030[1] }
        rf      = { defs={} expr=v7031[1] }
        vm      = { defs={} expr=v7032[1] }
        ac      = { defs={} expr=v7033[1] }
        vif     = { defs={} expr=v7034[1] }
        vip     = { defs={} expr=v7035[1] }
        id      = { defs={} expr=v7036[1] }
        ?22     = { defs={} expr=v7037[1] }
        ?23     = { defs={} expr=v7038[1] }
        ?24     = { defs={} expr=v7039[1] }
        ?25     = { defs={} expr=v7040[1] }
        ?26     = { defs={} expr=v7041[1] }
        ?27     = { defs={} expr=v7042[1] }
        ?28     = { defs={} expr=v7043[1] }
        ?29     = { defs={} expr=v7044[1] }
        ?30     = { defs={} expr=v7045[1] }
        ?31     = { defs={} expr=v7046[1] }
        ip      = { defs={0x08048580,0x08048581} expr=0x08048583[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v7005[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v7006[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7005[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v7006[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7005[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v7006[32]) }
          flags = { }
        address = { defs={0x08048580} expr=(add[32] v7005[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v7006[32]) }
          flags = { }
    init mem:
0x8048583:push   ebx
    registers:
        ax      = { defs={} expr=v7001[32] }
        cx      = { defs={} expr=v7002[32] }
        dx      = { defs={} expr=v7003[32] }
        bx      = { defs={} expr=v7004[32] }
        sp      = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v7005[32] -4[32]) -4[32]) }
        bp      = { defs={0x08048580,0x08048581} expr=(add[32] v7005[32] -4[32]) }
        si      = { defs={} expr=v7007[32] }
        di      = { defs={} expr=v7008[32] }
        es      = { defs={} expr=v7009[16] }
        cs      = { defs={} expr=v7010[16] }
        ss      = { defs={} expr=v7011[16] }
        ds      = { defs={} expr=v7012[16] }
        fs      = { defs={} expr=v7013[16] }
        gs      = { defs={} expr=v7014[16] }
        cf      = { defs={} expr=v7015[1] }
        ?1      = { defs={} expr=v7016[1] }
        pf      = { defs={} expr=v7017[1] }
        ?3      = { defs={} expr=v7018[1] }
        af      = { defs={} expr=v7019[1] }
        ?5      = { defs={} expr=v7020[1] }
        zf      = { defs={} expr=v7021[1] }
        sf      = { defs={} expr=v7022[1] }
        tf      = { defs={} expr=v7023[1] }
        if      = { defs={} expr=v7024[1] }
        df      = { defs={} expr=v7025[1] }
        of      = { defs={} expr=v7026[1] }
        iopl0   = { defs={} expr=v7027[1] }
        iopl1   = { defs={} expr=v7028[1] }
        nt      = { defs={} expr=v7029[1] }
        ?15     = { defs={} expr=v7030[1] }
        rf      = { defs={} expr=v7031[1] }
        vm      = { defs={} expr=v7032[1] }
        ac      = { defs={} expr=v7033[1] }
        vif     = { defs={} expr=v7034[1] }
        vip     = { defs={} expr=v7035[1] }
        id      = { defs={} expr=v7036[1] }
        ?22     = { defs={} expr=v7037[1] }
        ?23     = { defs={} expr=v7038[1] }
        ?24     = { defs={} expr=v7039[1] }
        ?25     = { defs={} expr=v7040[1] }
        ?26     = { defs={} expr=v7041[1] }
        ?27     = { defs={} expr=v7042[1] }
        ?28     = { defs={} expr=v7043[1] }
        ?29     = { defs={} expr=v7044[1] }
        ?30     = { defs={} expr=v7045[1] }
        ?31     = { defs={} expr=v7046[1] }
        ip      = { defs={0x08048580,0x08048581,0x08048583} expr=0x08048584[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v7005[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v7004[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7005[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v7004[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7005[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v7004[32]) }
          flags = { }
        address = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v7005[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v7004[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7005[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v7006[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7005[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v7006[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7005[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v7006[32]) }
          flags = { }
        address = { defs={0x08048580} expr=(add[32] v7005[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v7006[32]) }
          flags = { }
    init mem:
0x8048584:sub    esp, 0x04
    registers:
        ax      = { defs={} expr=v7001[32] }
        cx      = { defs={} expr=v7002[32] }
        dx      = { defs={} expr=v7003[32] }
        bx      = { defs={} expr=v7004[32] }
        sp      = { defs={0x08048580,0x08048583,0x08048584} expr=(add[32] (add[32] (add[32] v7005[32] -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048580,0x08048581} expr=(add[32] v7005[32] -4[32]) }
        si      = { defs={} expr=v7007[32] }
        di      = { defs={} expr=v7008[32] }
        es      = { defs={} expr=v7009[16] }
        cs      = { defs={} expr=v7010[16] }
        ss      = { defs={} expr=v7011[16] }
        ds      = { defs={} expr=v7012[16] }
        fs      = { defs={} expr=v7013[16] }
        gs      = { defs={} expr=v7014[16] }
        cf      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v7005[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v7005[32] -4[32]) -4[32])) 4294967292[33])))))) }
        ?1      = { defs={} expr=v7016[1] }
        pf      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7005[32] -4[32]) -4[32]) -4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7005[32] -4[32]) -4[32]) -4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7005[32] -4[32]) -4[32]) -4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7005[32] -4[32]) -4[32]) -4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7005[32] -4[32]) -4[32]) -4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7005[32] -4[32]) -4[32]) -4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7005[32] -4[32]) -4[32]) -4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7005[32] -4[32]) -4[32]) -4[32]))))))) }
        ?3      = { defs={} expr=v7018[1] }
        af      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v7005[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v7005[32] -4[32]) -4[32])) 4294967292[33])))))) }
        ?5      = { defs={} expr=v7020[1] }
        zf      = { defs={0x08048580,0x08048583,0x08048584} expr=(zerop[1] (add[32] (add[32] (add[32] v7005[32] -4[32]) -4[32]) -4[32])) }
        sf      = { defs={0x08048580,0x08048583,0x08048584} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] v7005[32] -4[32]) -4[32]) -4[32])) }
        tf      = { defs={} expr=v7023[1] }
        if      = { defs={} expr=v7024[1] }
        df      = { defs={} expr=v7025[1] }
        of      = { defs={0x08048580,0x08048583,0x08048584} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v7005[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v7005[32] -4[32]) -4[32])) 4294967292[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v7005[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v7005[32] -4[32]) -4[32])) 4294967292[33])))))) }
        iopl0   = { defs={} expr=v7027[1] }
        iopl1   = { defs={} expr=v7028[1] }
        nt      = { defs={} expr=v7029[1] }
        ?15     = { defs={} expr=v7030[1] }
        rf      = { defs={} expr=v7031[1] }
        vm      = { defs={} expr=v7032[1] }
        ac      = { defs={} expr=v7033[1] }
        vif     = { defs={} expr=v7034[1] }
        vip     = { defs={} expr=v7035[1] }
        id      = { defs={} expr=v7036[1] }
        ?22     = { defs={} expr=v7037[1] }
        ?23     = { defs={} expr=v7038[1] }
        ?24     = { defs={} expr=v7039[1] }
        ?25     = { defs={} expr=v7040[1] }
        ?26     = { defs={} expr=v7041[1] }
        ?27     = { defs={} expr=v7042[1] }
        ?28     = { defs={} expr=v7043[1] }
        ?29     = { defs={} expr=v7044[1] }
        ?30     = { defs={} expr=v7045[1] }
        ?31     = { defs={} expr=v7046[1] }
        ip      = { defs={0x08048580,0x08048581,0x08048583,0x08048584} expr=0x08048587[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v7005[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v7004[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7005[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v7004[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7005[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v7004[32]) }
          flags = { }
        address = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v7005[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v7004[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7005[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v7006[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7005[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v7006[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7005[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v7006[32]) }
          flags = { }
        address = { defs={0x08048580} expr=(add[32] v7005[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v7006[32]) }
          flags = { }
    init mem:
0x8048587:mov    ebx, 0x080495e8<.ctors>
    registers:
        ax      = { defs={} expr=v7001[32] }
        cx      = { defs={} expr=v7002[32] }
        dx      = { defs={} expr=v7003[32] }
        bx      = { defs={0x08048587} expr=0x080495e8[32] }
        sp      = { defs={0x08048580,0x08048583,0x08048584} expr=(add[32] (add[32] (add[32] v7005[32] -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048580,0x08048581} expr=(add[32] v7005[32] -4[32]) }
        si      = { defs={} expr=v7007[32] }
        di      = { defs={} expr=v7008[32] }
        es      = { defs={} expr=v7009[16] }
        cs      = { defs={} expr=v7010[16] }
        ss      = { defs={} expr=v7011[16] }
        ds      = { defs={} expr=v7012[16] }
        fs      = { defs={} expr=v7013[16] }
        gs      = { defs={} expr=v7014[16] }
        cf      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v7005[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v7005[32] -4[32]) -4[32])) 4294967292[33])))))) }
        ?1      = { defs={} expr=v7016[1] }
        pf      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7005[32] -4[32]) -4[32]) -4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7005[32] -4[32]) -4[32]) -4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7005[32] -4[32]) -4[32]) -4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7005[32] -4[32]) -4[32]) -4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7005[32] -4[32]) -4[32]) -4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7005[32] -4[32]) -4[32]) -4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7005[32] -4[32]) -4[32]) -4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7005[32] -4[32]) -4[32]) -4[32]))))))) }
        ?3      = { defs={} expr=v7018[1] }
        af      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v7005[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v7005[32] -4[32]) -4[32])) 4294967292[33])))))) }
        ?5      = { defs={} expr=v7020[1] }
        zf      = { defs={0x08048580,0x08048583,0x08048584} expr=(zerop[1] (add[32] (add[32] (add[32] v7005[32] -4[32]) -4[32]) -4[32])) }
        sf      = { defs={0x08048580,0x08048583,0x08048584} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] v7005[32] -4[32]) -4[32]) -4[32])) }
        tf      = { defs={} expr=v7023[1] }
        if      = { defs={} expr=v7024[1] }
        df      = { defs={} expr=v7025[1] }
        of      = { defs={0x08048580,0x08048583,0x08048584} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v7005[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v7005[32] -4[32]) -4[32])) 4294967292[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v7005[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v7005[32] -4[32]) -4[32])) 4294967292[33])))))) }
        iopl0   = { defs={} expr=v7027[1] }
        iopl1   = { defs={} expr=v7028[1] }
        nt      = { defs={} expr=v7029[1] }
        ?15     = { defs={} expr=v7030[1] }
        rf      = { defs={} expr=v7031[1] }
        vm      = { defs={} expr=v7032[1] }
        ac      = { defs={} expr=v7033[1] }
        vif     = { defs={} expr=v7034[1] }
        vip     = { defs={} expr=v7035[1] }
        id      = { defs={} expr=v7036[1] }
        ?22     = { defs={} expr=v7037[1] }
        ?23     = { defs={} expr=v7038[1] }
        ?24     = { defs={} expr=v7039[1] }
        ?25     = { defs={} expr=v7040[1] }
        ?26     = { defs={} expr=v7041[1] }
        ?27     = { defs={} expr=v7042[1] }
        ?28     = { defs={} expr=v7043[1] }
        ?29     = { defs={} expr=v7044[1] }
        ?30     = { defs={} expr=v7045[1] }
        ?31     = { defs={} expr=v7046[1] }
        ip      = { defs={0x08048580,0x08048581,0x08048583,0x08048584,0x08048587} expr=0x0804858c[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v7005[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v7004[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7005[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v7004[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7005[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v7004[32]) }
          flags = { }
        address = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v7005[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v7004[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7005[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v7006[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7005[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v7006[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7005[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v7006[32]) }
          flags = { }
        address = { defs={0x08048580} expr=(add[32] v7005[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v7006[32]) }
          flags = { }
    init mem:
0x804858c:mov    eax, DWORD PTR ds:[0x080495e8<.ctors>]
    registers:
        ax      = { defs={0x0804858c} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7128[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7129[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7130[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7131[8]))) }
        cx      = { defs={} expr=v7002[32] }
        dx      = { defs={} expr=v7003[32] }
        bx      = { defs={0x08048587} expr=0x080495e8[32] }
        sp      = { defs={0x08048580,0x08048583,0x08048584} expr=(add[32] (add[32] (add[32] v7005[32] -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048580,0x08048581} expr=(add[32] v7005[32] -4[32]) }
        si      = { defs={} expr=v7007[32] }
        di      = { defs={} expr=v7008[32] }
        es      = { defs={} expr=v7009[16] }
        cs      = { defs={} expr=v7010[16] }
        ss      = { defs={} expr=v7011[16] }
        ds      = { defs={} expr=v7012[16] }
        fs      = { defs={} expr=v7013[16] }
        gs      = { defs={} expr=v7014[16] }
        cf      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v7005[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v7005[32] -4[32]) -4[32])) 4294967292[33])))))) }
        ?1      = { defs={} expr=v7016[1] }
        pf      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7005[32] -4[32]) -4[32]) -4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7005[32] -4[32]) -4[32]) -4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7005[32] -4[32]) -4[32]) -4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7005[32] -4[32]) -4[32]) -4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7005[32] -4[32]) -4[32]) -4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7005[32] -4[32]) -4[32]) -4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7005[32] -4[32]) -4[32]) -4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v7005[32] -4[32]) -4[32]) -4[32]))))))) }
        ?3      = { defs={} expr=v7018[1] }
        af      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v7005[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v7005[32] -4[32]) -4[32])) 4294967292[33])))))) }
        ?5      = { defs={} expr=v7020[1] }
        zf      = { defs={0x08048580,0x08048583,0x08048584} expr=(zerop[1] (add[32] (add[32] (add[32] v7005[32] -4[32]) -4[32]) -4[32])) }
        sf      = { defs={0x08048580,0x08048583,0x08048584} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] v7005[32] -4[32]) -4[32]) -4[32])) }
        tf      = { defs={} expr=v7023[1] }
        if      = { defs={} expr=v7024[1] }
        df      = { defs={} expr=v7025[1] }
        of      = { defs={0x08048580,0x08048583,0x08048584} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v7005[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v7005[32] -4[32]) -4[32])) 4294967292[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v7005[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v7005[32] -4[32]) -4[32])) 4294967292[33])))))) }
        iopl0   = { defs={} expr=v7027[1] }
        iopl1   = { defs={} expr=v7028[1] }
        nt      = { defs={} expr=v7029[1] }
        ?15     = { defs={} expr=v7030[1] }
        rf      = { defs={} expr=v7031[1] }
        vm      = { defs={} expr=v7032[1] }
        ac      = { defs={} expr=v7033[1] }
        vif     = { defs={} expr=v7034[1] }
        vip     = { defs={} expr=v7035[1] }
        id      = { defs={} expr=v7036[1] }
        ?22     = { defs={} expr=v7037[1] }
        ?23     = { defs={} expr=v7038[1] }
        ?24     = { defs={} expr=v7039[1] }
        ?25     = { defs={} expr=v7040[1] }
        ?26     = { defs={} expr=v7041[1] }
        ?27     = { defs={} expr=v7042[1] }
        ?28     = { defs={} expr=v7043[1] }
        ?29     = { defs={} expr=v7044[1] }
        ?30     = { defs={} expr=v7045[1] }
        ?31     = { defs={} expr=v7046[1] }
        ip      = { defs={0x08048580,0x08048581,0x08048583,0x08048584,0x08048587,0x0804858c} expr=0x08048591[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v7005[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v7004[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7005[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v7004[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7005[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v7004[32]) }
          flags = { }
        address = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v7005[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v7004[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7005[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v7006[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7005[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v7006[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7005[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v7006[32]) }
          flags = { }
        address = { defs={0x08048580} expr=(add[32] v7005[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v7006[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=0x080495eb[32] }
          value = { defs={} expr=v7131[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495ea[32] }
          value = { defs={} expr=v7130[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495e9[32] }
          value = { defs={} expr=v7129[8] }
          flags = { rdonly }
        address = { defs={0x0804858c} expr=0x080495e8[32] }
          value = { defs={} expr=v7128[8] }
          flags = { rdonly }
0x8048591:cmp    eax, 0xff<-0x01>
    registers:
        ax      = { defs={0x0804858c} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7128[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7129[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7130[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7131[8]))) }
        cx      = { defs={} expr=v7002[32] }
        dx      = { defs={} expr=v7003[32] }
        bx      = { defs={0x08048587} expr=0x080495e8[32] }
        sp      = { defs={0x08048580,0x08048583,0x08048584} expr=(add[32] (add[32] (add[32] v7005[32] -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048580,0x08048581} expr=(add[32] v7005[32] -4[32]) }
        si      = { defs={} expr=v7007[32] }
        di      = { defs={} expr=v7008[32] }
        es      = { defs={} expr=v7009[16] }
        cs      = { defs={} expr=v7010[16] }
        ss      = { defs={} expr=v7011[16] }
        ds      = { defs={} expr=v7012[16] }
        fs      = { defs={} expr=v7013[16] }
        gs      = { defs={} expr=v7014[16] }
        cf      = { defs={0x0804858c,0x08048591} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7128[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7129[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7130[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7131[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7128[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7129[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7130[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7131[8])))) 1[33])))))) }
        ?1      = { defs={} expr=v7016[1] }
        pf      = { defs={0x0804858c,0x08048591} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7128[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7129[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7130[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7131[8]))) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7128[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7129[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7130[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7131[8]))) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7128[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7129[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7130[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7131[8]))) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7128[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7129[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7130[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7131[8]))) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7128[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7129[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7130[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7131[8]))) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7128[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7129[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7130[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7131[8]))) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7128[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7129[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7130[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7131[8]))) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7128[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7129[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7130[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7131[8]))) 1[32]))))))) }
        ?3      = { defs={} expr=v7018[1] }
        af      = { defs={0x0804858c,0x08048591} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7128[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7129[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7130[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7131[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7128[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7129[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7130[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7131[8])))) 1[33])))))) }
        ?5      = { defs={} expr=v7020[1] }
        zf      = { defs={0x0804858c,0x08048591} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7128[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7129[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7130[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7131[8]))) 1[32])) }
        sf      = { defs={0x0804858c,0x08048591} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7128[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7129[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7130[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7131[8]))) 1[32])) }
        tf      = { defs={} expr=v7023[1] }
        if      = { defs={} expr=v7024[1] }
        df      = { defs={} expr=v7025[1] }
        of      = { defs={0x0804858c,0x08048591} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7128[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7129[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7130[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7131[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7128[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7129[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7130[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7131[8])))) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7128[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7129[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7130[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7131[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7128[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7129[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7130[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7131[8])))) 1[33])))))) }
        iopl0   = { defs={} expr=v7027[1] }
        iopl1   = { defs={} expr=v7028[1] }
        nt      = { defs={} expr=v7029[1] }
        ?15     = { defs={} expr=v7030[1] }
        rf      = { defs={} expr=v7031[1] }
        vm      = { defs={} expr=v7032[1] }
        ac      = { defs={} expr=v7033[1] }
        vif     = { defs={} expr=v7034[1] }
        vip     = { defs={} expr=v7035[1] }
        id      = { defs={} expr=v7036[1] }
        ?22     = { defs={} expr=v7037[1] }
        ?23     = { defs={} expr=v7038[1] }
        ?24     = { defs={} expr=v7039[1] }
        ?25     = { defs={} expr=v7040[1] }
        ?26     = { defs={} expr=v7041[1] }
        ?27     = { defs={} expr=v7042[1] }
        ?28     = { defs={} expr=v7043[1] }
        ?29     = { defs={} expr=v7044[1] }
        ?30     = { defs={} expr=v7045[1] }
        ?31     = { defs={} expr=v7046[1] }
        ip      = { defs={0x08048580,0x08048581,0x08048583,0x08048584,0x08048587,0x0804858c,0x08048591} expr=0x08048594[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v7005[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v7004[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7005[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v7004[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7005[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v7004[32]) }
          flags = { }
        address = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v7005[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v7004[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7005[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v7006[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7005[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v7006[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7005[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v7006[32]) }
          flags = { }
        address = { defs={0x08048580} expr=(add[32] v7005[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v7006[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=0x080495eb[32] }
          value = { defs={} expr=v7131[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495ea[32] }
          value = { defs={} expr=v7130[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495e9[32] }
          value = { defs={} expr=v7129[8] }
          flags = { rdonly }
        address = { defs={0x0804858c} expr=0x080495e8[32] }
          value = { defs={} expr=v7128[8] }
          flags = { rdonly }
0x8048594:je     0x080485ac<<Insn>>
    registers:
        ax      = { defs={0x0804858c} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7128[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7129[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7130[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7131[8]))) }
        cx      = { defs={} expr=v7002[32] }
        dx      = { defs={} expr=v7003[32] }
        bx      = { defs={0x08048587} expr=0x080495e8[32] }
        sp      = { defs={0x08048580,0x08048583,0x08048584} expr=(add[32] (add[32] (add[32] v7005[32] -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048580,0x08048581} expr=(add[32] v7005[32] -4[32]) }
        si      = { defs={} expr=v7007[32] }
        di      = { defs={} expr=v7008[32] }
        es      = { defs={} expr=v7009[16] }
        cs      = { defs={} expr=v7010[16] }
        ss      = { defs={} expr=v7011[16] }
        ds      = { defs={} expr=v7012[16] }
        fs      = { defs={} expr=v7013[16] }
        gs      = { defs={} expr=v7014[16] }
        cf      = { defs={0x0804858c,0x08048591} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7128[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7129[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7130[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7131[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7128[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7129[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7130[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7131[8])))) 1[33])))))) }
        ?1      = { defs={} expr=v7016[1] }
        pf      = { defs={0x0804858c,0x08048591} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7128[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7129[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7130[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7131[8]))) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7128[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7129[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7130[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7131[8]))) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7128[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7129[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7130[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7131[8]))) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7128[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7129[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7130[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7131[8]))) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7128[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7129[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7130[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7131[8]))) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7128[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7129[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7130[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7131[8]))) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7128[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7129[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7130[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7131[8]))) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7128[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7129[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7130[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7131[8]))) 1[32]))))))) }
        ?3      = { defs={} expr=v7018[1] }
        af      = { defs={0x0804858c,0x08048591} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7128[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7129[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7130[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7131[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7128[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7129[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7130[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7131[8])))) 1[33])))))) }
        ?5      = { defs={} expr=v7020[1] }
        zf      = { defs={0x0804858c,0x08048591} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7128[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7129[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7130[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7131[8]))) 1[32])) }
        sf      = { defs={0x0804858c,0x08048591} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7128[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7129[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7130[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7131[8]))) 1[32])) }
        tf      = { defs={} expr=v7023[1] }
        if      = { defs={} expr=v7024[1] }
        df      = { defs={} expr=v7025[1] }
        of      = { defs={0x0804858c,0x08048591} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7128[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7129[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7130[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7131[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7128[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7129[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7130[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7131[8])))) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7128[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7129[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7130[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7131[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7128[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7129[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7130[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7131[8])))) 1[33])))))) }
        iopl0   = { defs={} expr=v7027[1] }
        iopl1   = { defs={} expr=v7028[1] }
        nt      = { defs={} expr=v7029[1] }
        ?15     = { defs={} expr=v7030[1] }
        rf      = { defs={} expr=v7031[1] }
        vm      = { defs={} expr=v7032[1] }
        ac      = { defs={} expr=v7033[1] }
        vif     = { defs={} expr=v7034[1] }
        vip     = { defs={} expr=v7035[1] }
        id      = { defs={} expr=v7036[1] }
        ?22     = { defs={} expr=v7037[1] }
        ?23     = { defs={} expr=v7038[1] }
        ?24     = { defs={} expr=v7039[1] }
        ?25     = { defs={} expr=v7040[1] }
        ?26     = { defs={} expr=v7041[1] }
        ?27     = { defs={} expr=v7042[1] }
        ?28     = { defs={} expr=v7043[1] }
        ?29     = { defs={} expr=v7044[1] }
        ?30     = { defs={} expr=v7045[1] }
        ?31     = { defs={} expr=v7046[1] }
        ip      = { defs={0x08048580,0x08048581,0x08048583,0x08048584,0x08048587,0x0804858c,0x08048591,0x08048594} expr=(ite[32] (zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7128[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7129[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7130[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7131[8]))) 1[32])) 0x080485ac[32] 0x08048596[32]) }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v7005[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v7004[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7005[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v7004[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7005[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v7004[32]) }
          flags = { }
        address = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v7005[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v7004[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7005[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v7006[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7005[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v7006[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7005[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v7006[32]) }
          flags = { }
        address = { defs={0x08048580} expr=(add[32] v7005[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v7006[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=0x080495eb[32] }
          value = { defs={} expr=v7131[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495ea[32] }
          value = { defs={} expr=v7130[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495e9[32] }
          value = { defs={} expr=v7129[8] }
          flags = { rdonly }
        address = { defs={0x0804858c} expr=0x080495e8[32] }
          value = { defs={} expr=v7128[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048596:lea    esi, [esi + 0x00]
    registers:
        ax      = { defs={} expr=v7243[32] }
        cx      = { defs={} expr=v7244[32] }
        dx      = { defs={} expr=v7245[32] }
        bx      = { defs={} expr=v7246[32] }
        sp      = { defs={} expr=v7247[32] }
        bp      = { defs={} expr=v7248[32] }
        si      = { defs={0x08048596} expr=v7249[32] }
        di      = { defs={} expr=v7250[32] }
        es      = { defs={} expr=v7251[16] }
        cs      = { defs={} expr=v7252[16] }
        ss      = { defs={} expr=v7253[16] }
        ds      = { defs={} expr=v7254[16] }
        fs      = { defs={} expr=v7255[16] }
        gs      = { defs={} expr=v7256[16] }
        cf      = { defs={} expr=v7257[1] }
        ?1      = { defs={} expr=v7258[1] }
        pf      = { defs={} expr=v7259[1] }
        ?3      = { defs={} expr=v7260[1] }
        af      = { defs={} expr=v7261[1] }
        ?5      = { defs={} expr=v7262[1] }
        zf      = { defs={} expr=v7263[1] }
        sf      = { defs={} expr=v7264[1] }
        tf      = { defs={} expr=v7265[1] }
        if      = { defs={} expr=v7266[1] }
        df      = { defs={} expr=v7267[1] }
        of      = { defs={} expr=v7268[1] }
        iopl0   = { defs={} expr=v7269[1] }
        iopl1   = { defs={} expr=v7270[1] }
        nt      = { defs={} expr=v7271[1] }
        ?15     = { defs={} expr=v7272[1] }
        rf      = { defs={} expr=v7273[1] }
        vm      = { defs={} expr=v7274[1] }
        ac      = { defs={} expr=v7275[1] }
        vif     = { defs={} expr=v7276[1] }
        vip     = { defs={} expr=v7277[1] }
        id      = { defs={} expr=v7278[1] }
        ?22     = { defs={} expr=v7279[1] }
        ?23     = { defs={} expr=v7280[1] }
        ?24     = { defs={} expr=v7281[1] }
        ?25     = { defs={} expr=v7282[1] }
        ?26     = { defs={} expr=v7283[1] }
        ?27     = { defs={} expr=v7284[1] }
        ?28     = { defs={} expr=v7285[1] }
        ?29     = { defs={} expr=v7286[1] }
        ?30     = { defs={} expr=v7287[1] }
        ?31     = { defs={} expr=v7288[1] }
        ip      = { defs={0x08048596} expr=0x08048599[32] }
    memory:
    init mem:
0x8048599:lea    edi, [edi + 0x00000000]
    registers:
        ax      = { defs={} expr=v7243[32] }
        cx      = { defs={} expr=v7244[32] }
        dx      = { defs={} expr=v7245[32] }
        bx      = { defs={} expr=v7246[32] }
        sp      = { defs={} expr=v7247[32] }
        bp      = { defs={} expr=v7248[32] }
        si      = { defs={0x08048596} expr=v7249[32] }
        di      = { defs={0x08048599} expr=v7250[32] }
        es      = { defs={} expr=v7251[16] }
        cs      = { defs={} expr=v7252[16] }
        ss      = { defs={} expr=v7253[16] }
        ds      = { defs={} expr=v7254[16] }
        fs      = { defs={} expr=v7255[16] }
        gs      = { defs={} expr=v7256[16] }
        cf      = { defs={} expr=v7257[1] }
        ?1      = { defs={} expr=v7258[1] }
        pf      = { defs={} expr=v7259[1] }
        ?3      = { defs={} expr=v7260[1] }
        af      = { defs={} expr=v7261[1] }
        ?5      = { defs={} expr=v7262[1] }
        zf      = { defs={} expr=v7263[1] }
        sf      = { defs={} expr=v7264[1] }
        tf      = { defs={} expr=v7265[1] }
        if      = { defs={} expr=v7266[1] }
        df      = { defs={} expr=v7267[1] }
        of      = { defs={} expr=v7268[1] }
        iopl0   = { defs={} expr=v7269[1] }
        iopl1   = { defs={} expr=v7270[1] }
        nt      = { defs={} expr=v7271[1] }
        ?15     = { defs={} expr=v7272[1] }
        rf      = { defs={} expr=v7273[1] }
        vm      = { defs={} expr=v7274[1] }
        ac      = { defs={} expr=v7275[1] }
        vif     = { defs={} expr=v7276[1] }
        vip     = { defs={} expr=v7277[1] }
        id      = { defs={} expr=v7278[1] }
        ?22     = { defs={} expr=v7279[1] }
        ?23     = { defs={} expr=v7280[1] }
        ?24     = { defs={} expr=v7281[1] }
        ?25     = { defs={} expr=v7282[1] }
        ?26     = { defs={} expr=v7283[1] }
        ?27     = { defs={} expr=v7284[1] }
        ?28     = { defs={} expr=v7285[1] }
        ?29     = { defs={} expr=v7286[1] }
        ?30     = { defs={} expr=v7287[1] }
        ?31     = { defs={} expr=v7288[1] }
        ip      = { defs={0x08048596,0x08048599} expr=0x080485a0[32] }
    memory:
    init mem:
0x80485a0:sub    ebx, 0x04
    registers:
        ax      = { defs={} expr=v7243[32] }
        cx      = { defs={} expr=v7244[32] }
        dx      = { defs={} expr=v7245[32] }
        bx      = { defs={0x080485a0} expr=(add[32] v7246[32] -4[32]) }
        sp      = { defs={} expr=v7247[32] }
        bp      = { defs={} expr=v7248[32] }
        si      = { defs={0x08048596} expr=v7249[32] }
        di      = { defs={0x08048599} expr=v7250[32] }
        es      = { defs={} expr=v7251[16] }
        cs      = { defs={} expr=v7252[16] }
        ss      = { defs={} expr=v7253[16] }
        ds      = { defs={} expr=v7254[16] }
        fs      = { defs={} expr=v7255[16] }
        gs      = { defs={} expr=v7256[16] }
        cf      = { defs={0x080485a0} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v7246[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v7246[32]) 4294967292[33])))))) }
        ?1      = { defs={} expr=v7258[1] }
        pf      = { defs={0x080485a0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v7246[32] -4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v7246[32] -4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v7246[32] -4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v7246[32] -4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v7246[32] -4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v7246[32] -4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v7246[32] -4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v7246[32] -4[32]))))))) }
        ?3      = { defs={} expr=v7260[1] }
        af      = { defs={0x080485a0} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v7246[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v7246[32]) 4294967292[33])))))) }
        ?5      = { defs={} expr=v7262[1] }
        zf      = { defs={0x080485a0} expr=(zerop[1] (add[32] v7246[32] -4[32])) }
        sf      = { defs={0x080485a0} expr=(extract[1] 31[32] 32[32] (add[32] v7246[32] -4[32])) }
        tf      = { defs={} expr=v7265[1] }
        if      = { defs={} expr=v7266[1] }
        df      = { defs={} expr=v7267[1] }
        of      = { defs={0x080485a0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v7246[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v7246[32]) 4294967292[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v7246[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v7246[32]) 4294967292[33])))))) }
        iopl0   = { defs={} expr=v7269[1] }
        iopl1   = { defs={} expr=v7270[1] }
        nt      = { defs={} expr=v7271[1] }
        ?15     = { defs={} expr=v7272[1] }
        rf      = { defs={} expr=v7273[1] }
        vm      = { defs={} expr=v7274[1] }
        ac      = { defs={} expr=v7275[1] }
        vif     = { defs={} expr=v7276[1] }
        vip     = { defs={} expr=v7277[1] }
        id      = { defs={} expr=v7278[1] }
        ?22     = { defs={} expr=v7279[1] }
        ?23     = { defs={} expr=v7280[1] }
        ?24     = { defs={} expr=v7281[1] }
        ?25     = { defs={} expr=v7282[1] }
        ?26     = { defs={} expr=v7283[1] }
        ?27     = { defs={} expr=v7284[1] }
        ?28     = { defs={} expr=v7285[1] }
        ?29     = { defs={} expr=v7286[1] }
        ?30     = { defs={} expr=v7287[1] }
        ?31     = { defs={} expr=v7288[1] }
        ip      = { defs={0x08048596,0x08048599,0x080485a0} expr=0x080485a3[32] }
    memory:
    init mem:
0x80485a3:call   eax
    registers:
        ax      = { defs={} expr=v7243[32] }
        cx      = { defs={} expr=v7244[32] }
        dx      = { defs={} expr=v7245[32] }
        bx      = { defs={0x080485a0} expr=(add[32] v7246[32] -4[32]) }
        sp      = { defs={0x080485a3} expr=(add[32] v7247[32] -4[32]) }
        bp      = { defs={} expr=v7248[32] }
        si      = { defs={0x08048596} expr=v7249[32] }
        di      = { defs={0x08048599} expr=v7250[32] }
        es      = { defs={} expr=v7251[16] }
        cs      = { defs={} expr=v7252[16] }
        ss      = { defs={} expr=v7253[16] }
        ds      = { defs={} expr=v7254[16] }
        fs      = { defs={} expr=v7255[16] }
        gs      = { defs={} expr=v7256[16] }
        cf      = { defs={0x080485a0} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v7246[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v7246[32]) 4294967292[33])))))) }
        ?1      = { defs={} expr=v7258[1] }
        pf      = { defs={0x080485a0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v7246[32] -4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v7246[32] -4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v7246[32] -4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v7246[32] -4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v7246[32] -4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v7246[32] -4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v7246[32] -4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v7246[32] -4[32]))))))) }
        ?3      = { defs={} expr=v7260[1] }
        af      = { defs={0x080485a0} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v7246[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v7246[32]) 4294967292[33])))))) }
        ?5      = { defs={} expr=v7262[1] }
        zf      = { defs={0x080485a0} expr=(zerop[1] (add[32] v7246[32] -4[32])) }
        sf      = { defs={0x080485a0} expr=(extract[1] 31[32] 32[32] (add[32] v7246[32] -4[32])) }
        tf      = { defs={} expr=v7265[1] }
        if      = { defs={} expr=v7266[1] }
        df      = { defs={} expr=v7267[1] }
        of      = { defs={0x080485a0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v7246[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v7246[32]) 4294967292[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v7246[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v7246[32]) 4294967292[33])))))) }
        iopl0   = { defs={} expr=v7269[1] }
        iopl1   = { defs={} expr=v7270[1] }
        nt      = { defs={} expr=v7271[1] }
        ?15     = { defs={} expr=v7272[1] }
        rf      = { defs={} expr=v7273[1] }
        vm      = { defs={} expr=v7274[1] }
        ac      = { defs={} expr=v7275[1] }
        vif     = { defs={} expr=v7276[1] }
        vip     = { defs={} expr=v7277[1] }
        id      = { defs={} expr=v7278[1] }
        ?22     = { defs={} expr=v7279[1] }
        ?23     = { defs={} expr=v7280[1] }
        ?24     = { defs={} expr=v7281[1] }
        ?25     = { defs={} expr=v7282[1] }
        ?26     = { defs={} expr=v7283[1] }
        ?27     = { defs={} expr=v7284[1] }
        ?28     = { defs={} expr=v7285[1] }
        ?29     = { defs={} expr=v7286[1] }
        ?30     = { defs={} expr=v7287[1] }
        ?31     = { defs={} expr=v7288[1] }
        ip      = { defs={0x080485a3} expr=v7243[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v7247[32] -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7247[32] -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7247[32] -4[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x080485a3} expr=(add[32] v7247[32] -4[32]) }
          value = { defs={} expr=-91[8] }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80485a5:mov    eax, DWORD PTR ds:[ebx]
    registers:
        ax      = { defs={0x080485a5} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7464[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7465[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7466[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7467[8]))) }
        cx      = { defs={} expr=v7412[32] }
        dx      = { defs={} expr=v7413[32] }
        bx      = { defs={} expr=v7414[32] }
        sp      = { defs={} expr=v7415[32] }
        bp      = { defs={} expr=v7416[32] }
        si      = { defs={} expr=v7417[32] }
        di      = { defs={} expr=v7418[32] }
        es      = { defs={} expr=v7419[16] }
        cs      = { defs={} expr=v7420[16] }
        ss      = { defs={} expr=v7421[16] }
        ds      = { defs={} expr=v7422[16] }
        fs      = { defs={} expr=v7423[16] }
        gs      = { defs={} expr=v7424[16] }
        cf      = { defs={} expr=v7425[1] }
        ?1      = { defs={} expr=v7426[1] }
        pf      = { defs={} expr=v7427[1] }
        ?3      = { defs={} expr=v7428[1] }
        af      = { defs={} expr=v7429[1] }
        ?5      = { defs={} expr=v7430[1] }
        zf      = { defs={} expr=v7431[1] }
        sf      = { defs={} expr=v7432[1] }
        tf      = { defs={} expr=v7433[1] }
        if      = { defs={} expr=v7434[1] }
        df      = { defs={} expr=v7435[1] }
        of      = { defs={} expr=v7436[1] }
        iopl0   = { defs={} expr=v7437[1] }
        iopl1   = { defs={} expr=v7438[1] }
        nt      = { defs={} expr=v7439[1] }
        ?15     = { defs={} expr=v7440[1] }
        rf      = { defs={} expr=v7441[1] }
        vm      = { defs={} expr=v7442[1] }
        ac      = { defs={} expr=v7443[1] }
        vif     = { defs={} expr=v7444[1] }
        vip     = { defs={} expr=v7445[1] }
        id      = { defs={} expr=v7446[1] }
        ?22     = { defs={} expr=v7447[1] }
        ?23     = { defs={} expr=v7448[1] }
        ?24     = { defs={} expr=v7449[1] }
        ?25     = { defs={} expr=v7450[1] }
        ?26     = { defs={} expr=v7451[1] }
        ?27     = { defs={} expr=v7452[1] }
        ?28     = { defs={} expr=v7453[1] }
        ?29     = { defs={} expr=v7454[1] }
        ?30     = { defs={} expr=v7455[1] }
        ?31     = { defs={} expr=v7456[1] }
        ip      = { defs={0x080485a5} expr=0x080485a7[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v7414[32] 3[32]) }
          value = { defs={} expr=v7467[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7414[32] 2[32]) }
          value = { defs={} expr=v7466[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7414[32] 1[32]) }
          value = { defs={} expr=v7465[8] }
          flags = { rdonly }
        address = { defs={0x080485a5} expr=v7414[32] }
          value = { defs={} expr=v7464[8] }
          flags = { rdonly }
0x80485a7:cmp    eax, 0xff<-0x01>
    registers:
        ax      = { defs={0x080485a5} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7464[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7465[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7466[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7467[8]))) }
        cx      = { defs={} expr=v7412[32] }
        dx      = { defs={} expr=v7413[32] }
        bx      = { defs={} expr=v7414[32] }
        sp      = { defs={} expr=v7415[32] }
        bp      = { defs={} expr=v7416[32] }
        si      = { defs={} expr=v7417[32] }
        di      = { defs={} expr=v7418[32] }
        es      = { defs={} expr=v7419[16] }
        cs      = { defs={} expr=v7420[16] }
        ss      = { defs={} expr=v7421[16] }
        ds      = { defs={} expr=v7422[16] }
        fs      = { defs={} expr=v7423[16] }
        gs      = { defs={} expr=v7424[16] }
        cf      = { defs={0x080485a5,0x080485a7} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7464[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7465[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7466[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7467[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7464[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7465[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7466[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7467[8])))) 1[33])))))) }
        ?1      = { defs={} expr=v7426[1] }
        pf      = { defs={0x080485a5,0x080485a7} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7464[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7465[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7466[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7467[8]))) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7464[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7465[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7466[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7467[8]))) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7464[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7465[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7466[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7467[8]))) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7464[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7465[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7466[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7467[8]))) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7464[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7465[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7466[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7467[8]))) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7464[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7465[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7466[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7467[8]))) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7464[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7465[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7466[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7467[8]))) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7464[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7465[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7466[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7467[8]))) 1[32]))))))) }
        ?3      = { defs={} expr=v7428[1] }
        af      = { defs={0x080485a5,0x080485a7} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7464[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7465[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7466[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7467[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7464[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7465[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7466[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7467[8])))) 1[33])))))) }
        ?5      = { defs={} expr=v7430[1] }
        zf      = { defs={0x080485a5,0x080485a7} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7464[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7465[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7466[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7467[8]))) 1[32])) }
        sf      = { defs={0x080485a5,0x080485a7} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7464[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7465[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7466[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7467[8]))) 1[32])) }
        tf      = { defs={} expr=v7433[1] }
        if      = { defs={} expr=v7434[1] }
        df      = { defs={} expr=v7435[1] }
        of      = { defs={0x080485a5,0x080485a7} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7464[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7465[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7466[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7467[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7464[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7465[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7466[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7467[8])))) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7464[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7465[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7466[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7467[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7464[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7465[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7466[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7467[8])))) 1[33])))))) }
        iopl0   = { defs={} expr=v7437[1] }
        iopl1   = { defs={} expr=v7438[1] }
        nt      = { defs={} expr=v7439[1] }
        ?15     = { defs={} expr=v7440[1] }
        rf      = { defs={} expr=v7441[1] }
        vm      = { defs={} expr=v7442[1] }
        ac      = { defs={} expr=v7443[1] }
        vif     = { defs={} expr=v7444[1] }
        vip     = { defs={} expr=v7445[1] }
        id      = { defs={} expr=v7446[1] }
        ?22     = { defs={} expr=v7447[1] }
        ?23     = { defs={} expr=v7448[1] }
        ?24     = { defs={} expr=v7449[1] }
        ?25     = { defs={} expr=v7450[1] }
        ?26     = { defs={} expr=v7451[1] }
        ?27     = { defs={} expr=v7452[1] }
        ?28     = { defs={} expr=v7453[1] }
        ?29     = { defs={} expr=v7454[1] }
        ?30     = { defs={} expr=v7455[1] }
        ?31     = { defs={} expr=v7456[1] }
        ip      = { defs={0x080485a5,0x080485a7} expr=0x080485aa[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v7414[32] 3[32]) }
          value = { defs={} expr=v7467[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7414[32] 2[32]) }
          value = { defs={} expr=v7466[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7414[32] 1[32]) }
          value = { defs={} expr=v7465[8] }
          flags = { rdonly }
        address = { defs={0x080485a5} expr=v7414[32] }
          value = { defs={} expr=v7464[8] }
          flags = { rdonly }
0x80485aa:jne    0x080485a0<<Insn>>
    registers:
        ax      = { defs={0x080485a5} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7464[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7465[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7466[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7467[8]))) }
        cx      = { defs={} expr=v7412[32] }
        dx      = { defs={} expr=v7413[32] }
        bx      = { defs={} expr=v7414[32] }
        sp      = { defs={} expr=v7415[32] }
        bp      = { defs={} expr=v7416[32] }
        si      = { defs={} expr=v7417[32] }
        di      = { defs={} expr=v7418[32] }
        es      = { defs={} expr=v7419[16] }
        cs      = { defs={} expr=v7420[16] }
        ss      = { defs={} expr=v7421[16] }
        ds      = { defs={} expr=v7422[16] }
        fs      = { defs={} expr=v7423[16] }
        gs      = { defs={} expr=v7424[16] }
        cf      = { defs={0x080485a5,0x080485a7} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7464[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7465[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7466[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7467[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7464[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7465[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7466[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7467[8])))) 1[33])))))) }
        ?1      = { defs={} expr=v7426[1] }
        pf      = { defs={0x080485a5,0x080485a7} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7464[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7465[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7466[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7467[8]))) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7464[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7465[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7466[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7467[8]))) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7464[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7465[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7466[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7467[8]))) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7464[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7465[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7466[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7467[8]))) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7464[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7465[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7466[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7467[8]))) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7464[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7465[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7466[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7467[8]))) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7464[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7465[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7466[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7467[8]))) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7464[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7465[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7466[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7467[8]))) 1[32]))))))) }
        ?3      = { defs={} expr=v7428[1] }
        af      = { defs={0x080485a5,0x080485a7} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7464[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7465[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7466[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7467[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7464[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7465[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7466[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7467[8])))) 1[33])))))) }
        ?5      = { defs={} expr=v7430[1] }
        zf      = { defs={0x080485a5,0x080485a7} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7464[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7465[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7466[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7467[8]))) 1[32])) }
        sf      = { defs={0x080485a5,0x080485a7} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7464[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7465[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7466[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7467[8]))) 1[32])) }
        tf      = { defs={} expr=v7433[1] }
        if      = { defs={} expr=v7434[1] }
        df      = { defs={} expr=v7435[1] }
        of      = { defs={0x080485a5,0x080485a7} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7464[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7465[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7466[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7467[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7464[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7465[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7466[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7467[8])))) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7464[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7465[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7466[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7467[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7464[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7465[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7466[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7467[8])))) 1[33])))))) }
        iopl0   = { defs={} expr=v7437[1] }
        iopl1   = { defs={} expr=v7438[1] }
        nt      = { defs={} expr=v7439[1] }
        ?15     = { defs={} expr=v7440[1] }
        rf      = { defs={} expr=v7441[1] }
        vm      = { defs={} expr=v7442[1] }
        ac      = { defs={} expr=v7443[1] }
        vif     = { defs={} expr=v7444[1] }
        vip     = { defs={} expr=v7445[1] }
        id      = { defs={} expr=v7446[1] }
        ?22     = { defs={} expr=v7447[1] }
        ?23     = { defs={} expr=v7448[1] }
        ?24     = { defs={} expr=v7449[1] }
        ?25     = { defs={} expr=v7450[1] }
        ?26     = { defs={} expr=v7451[1] }
        ?27     = { defs={} expr=v7452[1] }
        ?28     = { defs={} expr=v7453[1] }
        ?29     = { defs={} expr=v7454[1] }
        ?30     = { defs={} expr=v7455[1] }
        ?31     = { defs={} expr=v7456[1] }
        ip      = { defs={0x080485a5,0x080485a7,0x080485aa} expr=(ite[32] (invert[1] (zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7464[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7465[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7466[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7467[8]))) 1[32]))) 0x080485a0[32] 0x080485ac[32]) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v7414[32] 3[32]) }
          value = { defs={} expr=v7467[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7414[32] 2[32]) }
          value = { defs={} expr=v7466[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7414[32] 1[32]) }
          value = { defs={} expr=v7465[8] }
          flags = { rdonly }
        address = { defs={0x080485a5} expr=v7414[32] }
          value = { defs={} expr=v7464[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80485ac:pop    eax
    registers:
        ax      = { defs={0x080485ac} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7635[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7636[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7637[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7638[8]))) }
        cx      = { defs={} expr=v7581[32] }
        dx      = { defs={} expr=v7582[32] }
        bx      = { defs={} expr=v7583[32] }
        sp      = { defs={0x080485ac} expr=(add[32] v7584[32] 4[32]) }
        bp      = { defs={} expr=v7585[32] }
        si      = { defs={} expr=v7586[32] }
        di      = { defs={} expr=v7587[32] }
        es      = { defs={} expr=v7588[16] }
        cs      = { defs={} expr=v7589[16] }
        ss      = { defs={} expr=v7590[16] }
        ds      = { defs={} expr=v7591[16] }
        fs      = { defs={} expr=v7592[16] }
        gs      = { defs={} expr=v7593[16] }
        cf      = { defs={} expr=v7594[1] }
        ?1      = { defs={} expr=v7595[1] }
        pf      = { defs={} expr=v7596[1] }
        ?3      = { defs={} expr=v7597[1] }
        af      = { defs={} expr=v7598[1] }
        ?5      = { defs={} expr=v7599[1] }
        zf      = { defs={} expr=v7600[1] }
        sf      = { defs={} expr=v7601[1] }
        tf      = { defs={} expr=v7602[1] }
        if      = { defs={} expr=v7603[1] }
        df      = { defs={} expr=v7604[1] }
        of      = { defs={} expr=v7605[1] }
        iopl0   = { defs={} expr=v7606[1] }
        iopl1   = { defs={} expr=v7607[1] }
        nt      = { defs={} expr=v7608[1] }
        ?15     = { defs={} expr=v7609[1] }
        rf      = { defs={} expr=v7610[1] }
        vm      = { defs={} expr=v7611[1] }
        ac      = { defs={} expr=v7612[1] }
        vif     = { defs={} expr=v7613[1] }
        vip     = { defs={} expr=v7614[1] }
        id      = { defs={} expr=v7615[1] }
        ?22     = { defs={} expr=v7616[1] }
        ?23     = { defs={} expr=v7617[1] }
        ?24     = { defs={} expr=v7618[1] }
        ?25     = { defs={} expr=v7619[1] }
        ?26     = { defs={} expr=v7620[1] }
        ?27     = { defs={} expr=v7621[1] }
        ?28     = { defs={} expr=v7622[1] }
        ?29     = { defs={} expr=v7623[1] }
        ?30     = { defs={} expr=v7624[1] }
        ?31     = { defs={} expr=v7625[1] }
        ip      = { defs={0x080485ac} expr=0x080485ad[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v7584[32] 3[32]) }
          value = { defs={} expr=v7638[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7584[32] 2[32]) }
          value = { defs={} expr=v7637[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7584[32] 1[32]) }
          value = { defs={} expr=v7636[8] }
          flags = { rdonly }
        address = { defs={0x080485ac} expr=v7584[32] }
          value = { defs={} expr=v7635[8] }
          flags = { rdonly }
0x80485ad:pop    ebx
    registers:
        ax      = { defs={0x080485ac} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7635[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7636[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7637[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7638[8]))) }
        cx      = { defs={} expr=v7581[32] }
        dx      = { defs={} expr=v7582[32] }
        bx      = { defs={0x080485ad} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7652[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7653[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7654[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7655[8]))) }
        sp      = { defs={0x080485ac,0x080485ad} expr=(add[32] (add[32] v7584[32] 4[32]) 4[32]) }
        bp      = { defs={} expr=v7585[32] }
        si      = { defs={} expr=v7586[32] }
        di      = { defs={} expr=v7587[32] }
        es      = { defs={} expr=v7588[16] }
        cs      = { defs={} expr=v7589[16] }
        ss      = { defs={} expr=v7590[16] }
        ds      = { defs={} expr=v7591[16] }
        fs      = { defs={} expr=v7592[16] }
        gs      = { defs={} expr=v7593[16] }
        cf      = { defs={} expr=v7594[1] }
        ?1      = { defs={} expr=v7595[1] }
        pf      = { defs={} expr=v7596[1] }
        ?3      = { defs={} expr=v7597[1] }
        af      = { defs={} expr=v7598[1] }
        ?5      = { defs={} expr=v7599[1] }
        zf      = { defs={} expr=v7600[1] }
        sf      = { defs={} expr=v7601[1] }
        tf      = { defs={} expr=v7602[1] }
        if      = { defs={} expr=v7603[1] }
        df      = { defs={} expr=v7604[1] }
        of      = { defs={} expr=v7605[1] }
        iopl0   = { defs={} expr=v7606[1] }
        iopl1   = { defs={} expr=v7607[1] }
        nt      = { defs={} expr=v7608[1] }
        ?15     = { defs={} expr=v7609[1] }
        rf      = { defs={} expr=v7610[1] }
        vm      = { defs={} expr=v7611[1] }
        ac      = { defs={} expr=v7612[1] }
        vif     = { defs={} expr=v7613[1] }
        vip     = { defs={} expr=v7614[1] }
        id      = { defs={} expr=v7615[1] }
        ?22     = { defs={} expr=v7616[1] }
        ?23     = { defs={} expr=v7617[1] }
        ?24     = { defs={} expr=v7618[1] }
        ?25     = { defs={} expr=v7619[1] }
        ?26     = { defs={} expr=v7620[1] }
        ?27     = { defs={} expr=v7621[1] }
        ?28     = { defs={} expr=v7622[1] }
        ?29     = { defs={} expr=v7623[1] }
        ?30     = { defs={} expr=v7624[1] }
        ?31     = { defs={} expr=v7625[1] }
        ip      = { defs={0x080485ac,0x080485ad} expr=0x080485ae[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v7584[32] 4[32]) 3[32]) }
          value = { defs={} expr=v7655[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v7584[32] 4[32]) 2[32]) }
          value = { defs={} expr=v7654[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v7584[32] 4[32]) 1[32]) }
          value = { defs={} expr=v7653[8] }
          flags = { rdonly }
        address = { defs={0x080485ac,0x080485ad} expr=(add[32] v7584[32] 4[32]) }
          value = { defs={} expr=v7652[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7584[32] 3[32]) }
          value = { defs={} expr=v7638[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7584[32] 2[32]) }
          value = { defs={} expr=v7637[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7584[32] 1[32]) }
          value = { defs={} expr=v7636[8] }
          flags = { rdonly }
        address = { defs={0x080485ac} expr=v7584[32] }
          value = { defs={} expr=v7635[8] }
          flags = { rdonly }
0x80485ae:pop    ebp
    registers:
        ax      = { defs={0x080485ac} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7635[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7636[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7637[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7638[8]))) }
        cx      = { defs={} expr=v7581[32] }
        dx      = { defs={} expr=v7582[32] }
        bx      = { defs={0x080485ad} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7652[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7653[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7654[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7655[8]))) }
        sp      = { defs={0x080485ac,0x080485ad,0x080485ae} expr=(add[32] (add[32] (add[32] v7584[32] 4[32]) 4[32]) 4[32]) }
        bp      = { defs={0x080485ae} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7669[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7670[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7671[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7672[8]))) }
        si      = { defs={} expr=v7586[32] }
        di      = { defs={} expr=v7587[32] }
        es      = { defs={} expr=v7588[16] }
        cs      = { defs={} expr=v7589[16] }
        ss      = { defs={} expr=v7590[16] }
        ds      = { defs={} expr=v7591[16] }
        fs      = { defs={} expr=v7592[16] }
        gs      = { defs={} expr=v7593[16] }
        cf      = { defs={} expr=v7594[1] }
        ?1      = { defs={} expr=v7595[1] }
        pf      = { defs={} expr=v7596[1] }
        ?3      = { defs={} expr=v7597[1] }
        af      = { defs={} expr=v7598[1] }
        ?5      = { defs={} expr=v7599[1] }
        zf      = { defs={} expr=v7600[1] }
        sf      = { defs={} expr=v7601[1] }
        tf      = { defs={} expr=v7602[1] }
        if      = { defs={} expr=v7603[1] }
        df      = { defs={} expr=v7604[1] }
        of      = { defs={} expr=v7605[1] }
        iopl0   = { defs={} expr=v7606[1] }
        iopl1   = { defs={} expr=v7607[1] }
        nt      = { defs={} expr=v7608[1] }
        ?15     = { defs={} expr=v7609[1] }
        rf      = { defs={} expr=v7610[1] }
        vm      = { defs={} expr=v7611[1] }
        ac      = { defs={} expr=v7612[1] }
        vif     = { defs={} expr=v7613[1] }
        vip     = { defs={} expr=v7614[1] }
        id      = { defs={} expr=v7615[1] }
        ?22     = { defs={} expr=v7616[1] }
        ?23     = { defs={} expr=v7617[1] }
        ?24     = { defs={} expr=v7618[1] }
        ?25     = { defs={} expr=v7619[1] }
        ?26     = { defs={} expr=v7620[1] }
        ?27     = { defs={} expr=v7621[1] }
        ?28     = { defs={} expr=v7622[1] }
        ?29     = { defs={} expr=v7623[1] }
        ?30     = { defs={} expr=v7624[1] }
        ?31     = { defs={} expr=v7625[1] }
        ip      = { defs={0x080485ac,0x080485ad,0x080485ae} expr=0x080485af[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] v7584[32] 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v7672[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7584[32] 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v7671[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7584[32] 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v7670[8] }
          flags = { rdonly }
        address = { defs={0x080485ac,0x080485ad,0x080485ae} expr=(add[32] (add[32] v7584[32] 4[32]) 4[32]) }
          value = { defs={} expr=v7669[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v7584[32] 4[32]) 3[32]) }
          value = { defs={} expr=v7655[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v7584[32] 4[32]) 2[32]) }
          value = { defs={} expr=v7654[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v7584[32] 4[32]) 1[32]) }
          value = { defs={} expr=v7653[8] }
          flags = { rdonly }
        address = { defs={0x080485ac,0x080485ad} expr=(add[32] v7584[32] 4[32]) }
          value = { defs={} expr=v7652[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7584[32] 3[32]) }
          value = { defs={} expr=v7638[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7584[32] 2[32]) }
          value = { defs={} expr=v7637[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7584[32] 1[32]) }
          value = { defs={} expr=v7636[8] }
          flags = { rdonly }
        address = { defs={0x080485ac} expr=v7584[32] }
          value = { defs={} expr=v7635[8] }
          flags = { rdonly }
0x80485af:ret    
    registers:
        ax      = { defs={0x080485ac} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7635[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7636[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7637[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7638[8]))) }
        cx      = { defs={} expr=v7581[32] }
        dx      = { defs={} expr=v7582[32] }
        bx      = { defs={0x080485ad} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7652[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7653[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7654[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7655[8]))) }
        sp      = { defs={0x080485ac,0x080485ad,0x080485ae,0x080485af} expr=(add[32] (add[32] (add[32] (add[32] v7584[32] 4[32]) 4[32]) 4[32]) 4[32]) }
        bp      = { defs={0x080485ae} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7669[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7670[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7671[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7672[8]))) }
        si      = { defs={} expr=v7586[32] }
        di      = { defs={} expr=v7587[32] }
        es      = { defs={} expr=v7588[16] }
        cs      = { defs={} expr=v7589[16] }
        ss      = { defs={} expr=v7590[16] }
        ds      = { defs={} expr=v7591[16] }
        fs      = { defs={} expr=v7592[16] }
        gs      = { defs={} expr=v7593[16] }
        cf      = { defs={} expr=v7594[1] }
        ?1      = { defs={} expr=v7595[1] }
        pf      = { defs={} expr=v7596[1] }
        ?3      = { defs={} expr=v7597[1] }
        af      = { defs={} expr=v7598[1] }
        ?5      = { defs={} expr=v7599[1] }
        zf      = { defs={} expr=v7600[1] }
        sf      = { defs={} expr=v7601[1] }
        tf      = { defs={} expr=v7602[1] }
        if      = { defs={} expr=v7603[1] }
        df      = { defs={} expr=v7604[1] }
        of      = { defs={} expr=v7605[1] }
        iopl0   = { defs={} expr=v7606[1] }
        iopl1   = { defs={} expr=v7607[1] }
        nt      = { defs={} expr=v7608[1] }
        ?15     = { defs={} expr=v7609[1] }
        rf      = { defs={} expr=v7610[1] }
        vm      = { defs={} expr=v7611[1] }
        ac      = { defs={} expr=v7612[1] }
        vif     = { defs={} expr=v7613[1] }
        vip     = { defs={} expr=v7614[1] }
        id      = { defs={} expr=v7615[1] }
        ?22     = { defs={} expr=v7616[1] }
        ?23     = { defs={} expr=v7617[1] }
        ?24     = { defs={} expr=v7618[1] }
        ?25     = { defs={} expr=v7619[1] }
        ?26     = { defs={} expr=v7620[1] }
        ?27     = { defs={} expr=v7621[1] }
        ?28     = { defs={} expr=v7622[1] }
        ?29     = { defs={} expr=v7623[1] }
        ?30     = { defs={} expr=v7624[1] }
        ?31     = { defs={} expr=v7625[1] }
        ip      = { defs={0x080485af} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7689[8]))) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v7584[32] 4[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v7689[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v7584[32] 4[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v7688[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v7584[32] 4[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v7687[8] }
          flags = { rdonly }
        address = { defs={0x080485ac,0x080485ad,0x080485ae,0x080485af} expr=(add[32] (add[32] (add[32] v7584[32] 4[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v7686[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7584[32] 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v7672[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7584[32] 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v7671[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7584[32] 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v7670[8] }
          flags = { rdonly }
        address = { defs={0x080485ac,0x080485ad,0x080485ae} expr=(add[32] (add[32] v7584[32] 4[32]) 4[32]) }
          value = { defs={} expr=v7669[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v7584[32] 4[32]) 3[32]) }
          value = { defs={} expr=v7655[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v7584[32] 4[32]) 2[32]) }
          value = { defs={} expr=v7654[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v7584[32] 4[32]) 1[32]) }
          value = { defs={} expr=v7653[8] }
          flags = { rdonly }
        address = { defs={0x080485ac,0x080485ad} expr=(add[32] v7584[32] 4[32]) }
          value = { defs={} expr=v7652[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7584[32] 3[32]) }
          value = { defs={} expr=v7638[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7584[32] 2[32]) }
          value = { defs={} expr=v7637[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7584[32] 1[32]) }
          value = { defs={} expr=v7636[8] }
          flags = { rdonly }
        address = { defs={0x080485ac} expr=v7584[32] }
          value = { defs={} expr=v7635[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80485b0:push   ebp
    registers:
        ax      = { defs={} expr=v7744[32] }
        cx      = { defs={} expr=v7745[32] }
        dx      = { defs={} expr=v7746[32] }
        bx      = { defs={} expr=v7747[32] }
        sp      = { defs={0x080485b0} expr=(add[32] v7748[32] -4[32]) }
        bp      = { defs={} expr=v7749[32] }
        si      = { defs={} expr=v7750[32] }
        di      = { defs={} expr=v7751[32] }
        es      = { defs={} expr=v7752[16] }
        cs      = { defs={} expr=v7753[16] }
        ss      = { defs={} expr=v7754[16] }
        ds      = { defs={} expr=v7755[16] }
        fs      = { defs={} expr=v7756[16] }
        gs      = { defs={} expr=v7757[16] }
        cf      = { defs={} expr=v7758[1] }
        ?1      = { defs={} expr=v7759[1] }
        pf      = { defs={} expr=v7760[1] }
        ?3      = { defs={} expr=v7761[1] }
        af      = { defs={} expr=v7762[1] }
        ?5      = { defs={} expr=v7763[1] }
        zf      = { defs={} expr=v7764[1] }
        sf      = { defs={} expr=v7765[1] }
        tf      = { defs={} expr=v7766[1] }
        if      = { defs={} expr=v7767[1] }
        df      = { defs={} expr=v7768[1] }
        of      = { defs={} expr=v7769[1] }
        iopl0   = { defs={} expr=v7770[1] }
        iopl1   = { defs={} expr=v7771[1] }
        nt      = { defs={} expr=v7772[1] }
        ?15     = { defs={} expr=v7773[1] }
        rf      = { defs={} expr=v7774[1] }
        vm      = { defs={} expr=v7775[1] }
        ac      = { defs={} expr=v7776[1] }
        vif     = { defs={} expr=v7777[1] }
        vip     = { defs={} expr=v7778[1] }
        id      = { defs={} expr=v7779[1] }
        ?22     = { defs={} expr=v7780[1] }
        ?23     = { defs={} expr=v7781[1] }
        ?24     = { defs={} expr=v7782[1] }
        ?25     = { defs={} expr=v7783[1] }
        ?26     = { defs={} expr=v7784[1] }
        ?27     = { defs={} expr=v7785[1] }
        ?28     = { defs={} expr=v7786[1] }
        ?29     = { defs={} expr=v7787[1] }
        ?30     = { defs={} expr=v7788[1] }
        ?31     = { defs={} expr=v7789[1] }
        ip      = { defs={0x080485b0} expr=0x080485b1[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v7748[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v7749[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7748[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v7749[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7748[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v7749[32]) }
          flags = { }
        address = { defs={0x080485b0} expr=(add[32] v7748[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v7749[32]) }
          flags = { }
    init mem:
0x80485b1:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v7744[32] }
        cx      = { defs={} expr=v7745[32] }
        dx      = { defs={} expr=v7746[32] }
        bx      = { defs={} expr=v7747[32] }
        sp      = { defs={0x080485b0} expr=(add[32] v7748[32] -4[32]) }
        bp      = { defs={0x080485b0,0x080485b1} expr=(add[32] v7748[32] -4[32]) }
        si      = { defs={} expr=v7750[32] }
        di      = { defs={} expr=v7751[32] }
        es      = { defs={} expr=v7752[16] }
        cs      = { defs={} expr=v7753[16] }
        ss      = { defs={} expr=v7754[16] }
        ds      = { defs={} expr=v7755[16] }
        fs      = { defs={} expr=v7756[16] }
        gs      = { defs={} expr=v7757[16] }
        cf      = { defs={} expr=v7758[1] }
        ?1      = { defs={} expr=v7759[1] }
        pf      = { defs={} expr=v7760[1] }
        ?3      = { defs={} expr=v7761[1] }
        af      = { defs={} expr=v7762[1] }
        ?5      = { defs={} expr=v7763[1] }
        zf      = { defs={} expr=v7764[1] }
        sf      = { defs={} expr=v7765[1] }
        tf      = { defs={} expr=v7766[1] }
        if      = { defs={} expr=v7767[1] }
        df      = { defs={} expr=v7768[1] }
        of      = { defs={} expr=v7769[1] }
        iopl0   = { defs={} expr=v7770[1] }
        iopl1   = { defs={} expr=v7771[1] }
        nt      = { defs={} expr=v7772[1] }
        ?15     = { defs={} expr=v7773[1] }
        rf      = { defs={} expr=v7774[1] }
        vm      = { defs={} expr=v7775[1] }
        ac      = { defs={} expr=v7776[1] }
        vif     = { defs={} expr=v7777[1] }
        vip     = { defs={} expr=v7778[1] }
        id      = { defs={} expr=v7779[1] }
        ?22     = { defs={} expr=v7780[1] }
        ?23     = { defs={} expr=v7781[1] }
        ?24     = { defs={} expr=v7782[1] }
        ?25     = { defs={} expr=v7783[1] }
        ?26     = { defs={} expr=v7784[1] }
        ?27     = { defs={} expr=v7785[1] }
        ?28     = { defs={} expr=v7786[1] }
        ?29     = { defs={} expr=v7787[1] }
        ?30     = { defs={} expr=v7788[1] }
        ?31     = { defs={} expr=v7789[1] }
        ip      = { defs={0x080485b0,0x080485b1} expr=0x080485b3[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v7748[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v7749[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7748[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v7749[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7748[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v7749[32]) }
          flags = { }
        address = { defs={0x080485b0} expr=(add[32] v7748[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v7749[32]) }
          flags = { }
    init mem:
0x80485b3:push   ebx
    registers:
        ax      = { defs={} expr=v7744[32] }
        cx      = { defs={} expr=v7745[32] }
        dx      = { defs={} expr=v7746[32] }
        bx      = { defs={} expr=v7747[32] }
        sp      = { defs={0x080485b0,0x080485b3} expr=(add[32] (add[32] v7748[32] -4[32]) -4[32]) }
        bp      = { defs={0x080485b0,0x080485b1} expr=(add[32] v7748[32] -4[32]) }
        si      = { defs={} expr=v7750[32] }
        di      = { defs={} expr=v7751[32] }
        es      = { defs={} expr=v7752[16] }
        cs      = { defs={} expr=v7753[16] }
        ss      = { defs={} expr=v7754[16] }
        ds      = { defs={} expr=v7755[16] }
        fs      = { defs={} expr=v7756[16] }
        gs      = { defs={} expr=v7757[16] }
        cf      = { defs={} expr=v7758[1] }
        ?1      = { defs={} expr=v7759[1] }
        pf      = { defs={} expr=v7760[1] }
        ?3      = { defs={} expr=v7761[1] }
        af      = { defs={} expr=v7762[1] }
        ?5      = { defs={} expr=v7763[1] }
        zf      = { defs={} expr=v7764[1] }
        sf      = { defs={} expr=v7765[1] }
        tf      = { defs={} expr=v7766[1] }
        if      = { defs={} expr=v7767[1] }
        df      = { defs={} expr=v7768[1] }
        of      = { defs={} expr=v7769[1] }
        iopl0   = { defs={} expr=v7770[1] }
        iopl1   = { defs={} expr=v7771[1] }
        nt      = { defs={} expr=v7772[1] }
        ?15     = { defs={} expr=v7773[1] }
        rf      = { defs={} expr=v7774[1] }
        vm      = { defs={} expr=v7775[1] }
        ac      = { defs={} expr=v7776[1] }
        vif     = { defs={} expr=v7777[1] }
        vip     = { defs={} expr=v7778[1] }
        id      = { defs={} expr=v7779[1] }
        ?22     = { defs={} expr=v7780[1] }
        ?23     = { defs={} expr=v7781[1] }
        ?24     = { defs={} expr=v7782[1] }
        ?25     = { defs={} expr=v7783[1] }
        ?26     = { defs={} expr=v7784[1] }
        ?27     = { defs={} expr=v7785[1] }
        ?28     = { defs={} expr=v7786[1] }
        ?29     = { defs={} expr=v7787[1] }
        ?30     = { defs={} expr=v7788[1] }
        ?31     = { defs={} expr=v7789[1] }
        ip      = { defs={0x080485b0,0x080485b1,0x080485b3} expr=0x080485b4[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v7748[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v7747[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7748[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v7747[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7748[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v7747[32]) }
          flags = { }
        address = { defs={0x080485b0,0x080485b3} expr=(add[32] (add[32] v7748[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v7747[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7748[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v7749[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7748[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v7749[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7748[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v7749[32]) }
          flags = { }
        address = { defs={0x080485b0} expr=(add[32] v7748[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v7749[32]) }
          flags = { }
    init mem:
0x80485b4:push   eax
    registers:
        ax      = { defs={} expr=v7744[32] }
        cx      = { defs={} expr=v7745[32] }
        dx      = { defs={} expr=v7746[32] }
        bx      = { defs={} expr=v7747[32] }
        sp      = { defs={0x080485b0,0x080485b3,0x080485b4} expr=(add[32] (add[32] (add[32] v7748[32] -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x080485b0,0x080485b1} expr=(add[32] v7748[32] -4[32]) }
        si      = { defs={} expr=v7750[32] }
        di      = { defs={} expr=v7751[32] }
        es      = { defs={} expr=v7752[16] }
        cs      = { defs={} expr=v7753[16] }
        ss      = { defs={} expr=v7754[16] }
        ds      = { defs={} expr=v7755[16] }
        fs      = { defs={} expr=v7756[16] }
        gs      = { defs={} expr=v7757[16] }
        cf      = { defs={} expr=v7758[1] }
        ?1      = { defs={} expr=v7759[1] }
        pf      = { defs={} expr=v7760[1] }
        ?3      = { defs={} expr=v7761[1] }
        af      = { defs={} expr=v7762[1] }
        ?5      = { defs={} expr=v7763[1] }
        zf      = { defs={} expr=v7764[1] }
        sf      = { defs={} expr=v7765[1] }
        tf      = { defs={} expr=v7766[1] }
        if      = { defs={} expr=v7767[1] }
        df      = { defs={} expr=v7768[1] }
        of      = { defs={} expr=v7769[1] }
        iopl0   = { defs={} expr=v7770[1] }
        iopl1   = { defs={} expr=v7771[1] }
        nt      = { defs={} expr=v7772[1] }
        ?15     = { defs={} expr=v7773[1] }
        rf      = { defs={} expr=v7774[1] }
        vm      = { defs={} expr=v7775[1] }
        ac      = { defs={} expr=v7776[1] }
        vif     = { defs={} expr=v7777[1] }
        vip     = { defs={} expr=v7778[1] }
        id      = { defs={} expr=v7779[1] }
        ?22     = { defs={} expr=v7780[1] }
        ?23     = { defs={} expr=v7781[1] }
        ?24     = { defs={} expr=v7782[1] }
        ?25     = { defs={} expr=v7783[1] }
        ?26     = { defs={} expr=v7784[1] }
        ?27     = { defs={} expr=v7785[1] }
        ?28     = { defs={} expr=v7786[1] }
        ?29     = { defs={} expr=v7787[1] }
        ?30     = { defs={} expr=v7788[1] }
        ?31     = { defs={} expr=v7789[1] }
        ip      = { defs={0x080485b0,0x080485b1,0x080485b3,0x080485b4} expr=0x080485b5[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v7748[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v7744[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v7748[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v7744[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v7748[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v7744[32]) }
          flags = { }
        address = { defs={0x080485b0,0x080485b3,0x080485b4} expr=(add[32] (add[32] (add[32] v7748[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v7744[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7748[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v7747[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7748[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v7747[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7748[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v7747[32]) }
          flags = { }
        address = { defs={0x080485b0,0x080485b3} expr=(add[32] (add[32] v7748[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v7747[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7748[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v7749[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7748[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v7749[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7748[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v7749[32]) }
          flags = { }
        address = { defs={0x080485b0} expr=(add[32] v7748[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v7749[32]) }
          flags = { }
    init mem:
0x80485b5:call   0x080485ba<<Insn>>
    registers:
        ax      = { defs={} expr=v7744[32] }
        cx      = { defs={} expr=v7745[32] }
        dx      = { defs={} expr=v7746[32] }
        bx      = { defs={} expr=v7747[32] }
        sp      = { defs={0x080485b0,0x080485b3,0x080485b4,0x080485b5} expr=(add[32] (add[32] (add[32] (add[32] v7748[32] -4[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x080485b0,0x080485b1} expr=(add[32] v7748[32] -4[32]) }
        si      = { defs={} expr=v7750[32] }
        di      = { defs={} expr=v7751[32] }
        es      = { defs={} expr=v7752[16] }
        cs      = { defs={} expr=v7753[16] }
        ss      = { defs={} expr=v7754[16] }
        ds      = { defs={} expr=v7755[16] }
        fs      = { defs={} expr=v7756[16] }
        gs      = { defs={} expr=v7757[16] }
        cf      = { defs={} expr=v7758[1] }
        ?1      = { defs={} expr=v7759[1] }
        pf      = { defs={} expr=v7760[1] }
        ?3      = { defs={} expr=v7761[1] }
        af      = { defs={} expr=v7762[1] }
        ?5      = { defs={} expr=v7763[1] }
        zf      = { defs={} expr=v7764[1] }
        sf      = { defs={} expr=v7765[1] }
        tf      = { defs={} expr=v7766[1] }
        if      = { defs={} expr=v7767[1] }
        df      = { defs={} expr=v7768[1] }
        of      = { defs={} expr=v7769[1] }
        iopl0   = { defs={} expr=v7770[1] }
        iopl1   = { defs={} expr=v7771[1] }
        nt      = { defs={} expr=v7772[1] }
        ?15     = { defs={} expr=v7773[1] }
        rf      = { defs={} expr=v7774[1] }
        vm      = { defs={} expr=v7775[1] }
        ac      = { defs={} expr=v7776[1] }
        vif     = { defs={} expr=v7777[1] }
        vip     = { defs={} expr=v7778[1] }
        id      = { defs={} expr=v7779[1] }
        ?22     = { defs={} expr=v7780[1] }
        ?23     = { defs={} expr=v7781[1] }
        ?24     = { defs={} expr=v7782[1] }
        ?25     = { defs={} expr=v7783[1] }
        ?26     = { defs={} expr=v7784[1] }
        ?27     = { defs={} expr=v7785[1] }
        ?28     = { defs={} expr=v7786[1] }
        ?29     = { defs={} expr=v7787[1] }
        ?30     = { defs={} expr=v7788[1] }
        ?31     = { defs={} expr=v7789[1] }
        ip      = { defs={0x080485b5} expr=0x080485ba[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v7748[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v7748[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v7748[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x080485b0,0x080485b3,0x080485b4,0x080485b5} expr=(add[32] (add[32] (add[32] (add[32] v7748[32] -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=-70[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v7748[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v7744[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v7748[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v7744[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v7748[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v7744[32]) }
          flags = { }
        address = { defs={0x080485b0,0x080485b3,0x080485b4} expr=(add[32] (add[32] (add[32] v7748[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v7744[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7748[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v7747[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7748[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v7747[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7748[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v7747[32]) }
          flags = { }
        address = { defs={0x080485b0,0x080485b3} expr=(add[32] (add[32] v7748[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v7747[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7748[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v7749[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7748[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v7749[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v7748[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v7749[32]) }
          flags = { }
        address = { defs={0x080485b0} expr=(add[32] v7748[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v7749[32]) }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80485ba:pop    ebx
    registers:
        ax      = { defs={} expr=v7873[32] }
        cx      = { defs={} expr=v7874[32] }
        dx      = { defs={} expr=v7875[32] }
        bx      = { defs={0x080485ba} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7928[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7929[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7930[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7931[8]))) }
        sp      = { defs={0x080485ba} expr=(add[32] v7877[32] 4[32]) }
        bp      = { defs={} expr=v7878[32] }
        si      = { defs={} expr=v7879[32] }
        di      = { defs={} expr=v7880[32] }
        es      = { defs={} expr=v7881[16] }
        cs      = { defs={} expr=v7882[16] }
        ss      = { defs={} expr=v7883[16] }
        ds      = { defs={} expr=v7884[16] }
        fs      = { defs={} expr=v7885[16] }
        gs      = { defs={} expr=v7886[16] }
        cf      = { defs={} expr=v7887[1] }
        ?1      = { defs={} expr=v7888[1] }
        pf      = { defs={} expr=v7889[1] }
        ?3      = { defs={} expr=v7890[1] }
        af      = { defs={} expr=v7891[1] }
        ?5      = { defs={} expr=v7892[1] }
        zf      = { defs={} expr=v7893[1] }
        sf      = { defs={} expr=v7894[1] }
        tf      = { defs={} expr=v7895[1] }
        if      = { defs={} expr=v7896[1] }
        df      = { defs={} expr=v7897[1] }
        of      = { defs={} expr=v7898[1] }
        iopl0   = { defs={} expr=v7899[1] }
        iopl1   = { defs={} expr=v7900[1] }
        nt      = { defs={} expr=v7901[1] }
        ?15     = { defs={} expr=v7902[1] }
        rf      = { defs={} expr=v7903[1] }
        vm      = { defs={} expr=v7904[1] }
        ac      = { defs={} expr=v7905[1] }
        vif     = { defs={} expr=v7906[1] }
        vip     = { defs={} expr=v7907[1] }
        id      = { defs={} expr=v7908[1] }
        ?22     = { defs={} expr=v7909[1] }
        ?23     = { defs={} expr=v7910[1] }
        ?24     = { defs={} expr=v7911[1] }
        ?25     = { defs={} expr=v7912[1] }
        ?26     = { defs={} expr=v7913[1] }
        ?27     = { defs={} expr=v7914[1] }
        ?28     = { defs={} expr=v7915[1] }
        ?29     = { defs={} expr=v7916[1] }
        ?30     = { defs={} expr=v7917[1] }
        ?31     = { defs={} expr=v7918[1] }
        ip      = { defs={0x080485ba} expr=0x080485bb[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v7877[32] 3[32]) }
          value = { defs={} expr=v7931[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7877[32] 2[32]) }
          value = { defs={} expr=v7930[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7877[32] 1[32]) }
          value = { defs={} expr=v7929[8] }
          flags = { rdonly }
        address = { defs={0x080485ba} expr=v7877[32] }
          value = { defs={} expr=v7928[8] }
          flags = { rdonly }
0x80485bb:add    ebx, 0x0000110e
    registers:
        ax      = { defs={} expr=v7873[32] }
        cx      = { defs={} expr=v7874[32] }
        dx      = { defs={} expr=v7875[32] }
        bx      = { defs={0x080485ba,0x080485bb} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7928[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7929[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7930[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7931[8]))) 4366[32]) }
        sp      = { defs={0x080485ba} expr=(add[32] v7877[32] 4[32]) }
        bp      = { defs={} expr=v7878[32] }
        si      = { defs={} expr=v7879[32] }
        di      = { defs={} expr=v7880[32] }
        es      = { defs={} expr=v7881[16] }
        cs      = { defs={} expr=v7882[16] }
        ss      = { defs={} expr=v7883[16] }
        ds      = { defs={} expr=v7884[16] }
        fs      = { defs={} expr=v7885[16] }
        gs      = { defs={} expr=v7886[16] }
        cf      = { defs={0x080485ba,0x080485bb} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7928[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7929[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7930[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7931[8])))) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7928[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7929[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7930[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7931[8])))) 4366[33]))))) }
        ?1      = { defs={} expr=v7888[1] }
        pf      = { defs={0x080485ba,0x080485bb} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7928[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7929[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7930[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7931[8]))) 4366[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7928[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7929[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7930[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7931[8]))) 4366[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7928[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7929[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7930[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7931[8]))) 4366[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7928[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7929[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7930[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7931[8]))) 4366[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7928[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7929[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7930[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7931[8]))) 4366[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7928[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7929[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7930[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7931[8]))) 4366[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7928[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7929[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7930[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7931[8]))) 4366[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7928[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7929[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7930[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7931[8]))) 4366[32]))))))) }
        ?3      = { defs={} expr=v7890[1] }
        af      = { defs={0x080485ba,0x080485bb} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7928[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7929[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7930[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7931[8])))) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7928[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7929[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7930[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7931[8])))) 4366[33]))))) }
        ?5      = { defs={} expr=v7892[1] }
        zf      = { defs={0x080485ba,0x080485bb} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7928[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7929[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7930[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7931[8]))) 4366[32])) }
        sf      = { defs={0x080485ba,0x080485bb} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7928[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7929[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7930[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7931[8]))) 4366[32])) }
        tf      = { defs={} expr=v7895[1] }
        if      = { defs={} expr=v7896[1] }
        df      = { defs={} expr=v7897[1] }
        of      = { defs={0x080485ba,0x080485bb} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7928[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7929[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7930[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7931[8])))) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7928[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7929[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7930[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7931[8])))) 4366[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7928[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7929[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7930[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7931[8])))) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7928[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7929[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7930[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7931[8])))) 4366[33])))))) }
        iopl0   = { defs={} expr=v7899[1] }
        iopl1   = { defs={} expr=v7900[1] }
        nt      = { defs={} expr=v7901[1] }
        ?15     = { defs={} expr=v7902[1] }
        rf      = { defs={} expr=v7903[1] }
        vm      = { defs={} expr=v7904[1] }
        ac      = { defs={} expr=v7905[1] }
        vif     = { defs={} expr=v7906[1] }
        vip     = { defs={} expr=v7907[1] }
        id      = { defs={} expr=v7908[1] }
        ?22     = { defs={} expr=v7909[1] }
        ?23     = { defs={} expr=v7910[1] }
        ?24     = { defs={} expr=v7911[1] }
        ?25     = { defs={} expr=v7912[1] }
        ?26     = { defs={} expr=v7913[1] }
        ?27     = { defs={} expr=v7914[1] }
        ?28     = { defs={} expr=v7915[1] }
        ?29     = { defs={} expr=v7916[1] }
        ?30     = { defs={} expr=v7917[1] }
        ?31     = { defs={} expr=v7918[1] }
        ip      = { defs={0x080485ba,0x080485bb} expr=0x080485c1[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v7877[32] 3[32]) }
          value = { defs={} expr=v7931[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7877[32] 2[32]) }
          value = { defs={} expr=v7930[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7877[32] 1[32]) }
          value = { defs={} expr=v7929[8] }
          flags = { rdonly }
        address = { defs={0x080485ba} expr=v7877[32] }
          value = { defs={} expr=v7928[8] }
          flags = { rdonly }
0x80485c1:call   0x08048390<__do_global_dtors_aux>
    registers:
        ax      = { defs={} expr=v7873[32] }
        cx      = { defs={} expr=v7874[32] }
        dx      = { defs={} expr=v7875[32] }
        bx      = { defs={0x080485ba,0x080485bb} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7928[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7929[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7930[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7931[8]))) 4366[32]) }
        sp      = { defs={0x080485ba,0x080485c1} expr=(add[32] (add[32] v7877[32] 4[32]) -4[32]) }
        bp      = { defs={} expr=v7878[32] }
        si      = { defs={} expr=v7879[32] }
        di      = { defs={} expr=v7880[32] }
        es      = { defs={} expr=v7881[16] }
        cs      = { defs={} expr=v7882[16] }
        ss      = { defs={} expr=v7883[16] }
        ds      = { defs={} expr=v7884[16] }
        fs      = { defs={} expr=v7885[16] }
        gs      = { defs={} expr=v7886[16] }
        cf      = { defs={0x080485ba,0x080485bb} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7928[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7929[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7930[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7931[8])))) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7928[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7929[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7930[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7931[8])))) 4366[33]))))) }
        ?1      = { defs={} expr=v7888[1] }
        pf      = { defs={0x080485ba,0x080485bb} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7928[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7929[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7930[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7931[8]))) 4366[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7928[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7929[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7930[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7931[8]))) 4366[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7928[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7929[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7930[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7931[8]))) 4366[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7928[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7929[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7930[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7931[8]))) 4366[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7928[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7929[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7930[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7931[8]))) 4366[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7928[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7929[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7930[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7931[8]))) 4366[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7928[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7929[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7930[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7931[8]))) 4366[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7928[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7929[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7930[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7931[8]))) 4366[32]))))))) }
        ?3      = { defs={} expr=v7890[1] }
        af      = { defs={0x080485ba,0x080485bb} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7928[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7929[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7930[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7931[8])))) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7928[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7929[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7930[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7931[8])))) 4366[33]))))) }
        ?5      = { defs={} expr=v7892[1] }
        zf      = { defs={0x080485ba,0x080485bb} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7928[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7929[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7930[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7931[8]))) 4366[32])) }
        sf      = { defs={0x080485ba,0x080485bb} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7928[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7929[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7930[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7931[8]))) 4366[32])) }
        tf      = { defs={} expr=v7895[1] }
        if      = { defs={} expr=v7896[1] }
        df      = { defs={} expr=v7897[1] }
        of      = { defs={0x080485ba,0x080485bb} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7928[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7929[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7930[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7931[8])))) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7928[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7929[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7930[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7931[8])))) 4366[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7928[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7929[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7930[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7931[8])))) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7928[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7929[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7930[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7931[8])))) 4366[33])))))) }
        iopl0   = { defs={} expr=v7899[1] }
        iopl1   = { defs={} expr=v7900[1] }
        nt      = { defs={} expr=v7901[1] }
        ?15     = { defs={} expr=v7902[1] }
        rf      = { defs={} expr=v7903[1] }
        vm      = { defs={} expr=v7904[1] }
        ac      = { defs={} expr=v7905[1] }
        vif     = { defs={} expr=v7906[1] }
        vip     = { defs={} expr=v7907[1] }
        id      = { defs={} expr=v7908[1] }
        ?22     = { defs={} expr=v7909[1] }
        ?23     = { defs={} expr=v7910[1] }
        ?24     = { defs={} expr=v7911[1] }
        ?25     = { defs={} expr=v7912[1] }
        ?26     = { defs={} expr=v7913[1] }
        ?27     = { defs={} expr=v7914[1] }
        ?28     = { defs={} expr=v7915[1] }
        ?29     = { defs={} expr=v7916[1] }
        ?30     = { defs={} expr=v7917[1] }
        ?31     = { defs={} expr=v7918[1] }
        ip      = { defs={0x080485c1} expr=0x08048390[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v7877[32] 4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7877[32] 4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v7877[32] 4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x080485ba,0x080485c1} expr=(add[32] (add[32] v7877[32] 4[32]) -4[32]) }
          value = { defs={} expr=-58[8] }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v7877[32] 3[32]) }
          value = { defs={} expr=v7931[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7877[32] 2[32]) }
          value = { defs={} expr=v7930[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v7877[32] 1[32]) }
          value = { defs={} expr=v7929[8] }
          flags = { rdonly }
        address = { defs={0x080485ba} expr=v7877[32] }
          value = { defs={} expr=v7928[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80485c6:pop    eax
    registers:
        ax      = { defs={0x080485c6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8096[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8097[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8098[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8099[8]))) }
        cx      = { defs={} expr=v8042[32] }
        dx      = { defs={} expr=v8043[32] }
        bx      = { defs={} expr=v8044[32] }
        sp      = { defs={0x080485c6} expr=(add[32] v8045[32] 4[32]) }
        bp      = { defs={} expr=v8046[32] }
        si      = { defs={} expr=v8047[32] }
        di      = { defs={} expr=v8048[32] }
        es      = { defs={} expr=v8049[16] }
        cs      = { defs={} expr=v8050[16] }
        ss      = { defs={} expr=v8051[16] }
        ds      = { defs={} expr=v8052[16] }
        fs      = { defs={} expr=v8053[16] }
        gs      = { defs={} expr=v8054[16] }
        cf      = { defs={} expr=v8055[1] }
        ?1      = { defs={} expr=v8056[1] }
        pf      = { defs={} expr=v8057[1] }
        ?3      = { defs={} expr=v8058[1] }
        af      = { defs={} expr=v8059[1] }
        ?5      = { defs={} expr=v8060[1] }
        zf      = { defs={} expr=v8061[1] }
        sf      = { defs={} expr=v8062[1] }
        tf      = { defs={} expr=v8063[1] }
        if      = { defs={} expr=v8064[1] }
        df      = { defs={} expr=v8065[1] }
        of      = { defs={} expr=v8066[1] }
        iopl0   = { defs={} expr=v8067[1] }
        iopl1   = { defs={} expr=v8068[1] }
        nt      = { defs={} expr=v8069[1] }
        ?15     = { defs={} expr=v8070[1] }
        rf      = { defs={} expr=v8071[1] }
        vm      = { defs={} expr=v8072[1] }
        ac      = { defs={} expr=v8073[1] }
        vif     = { defs={} expr=v8074[1] }
        vip     = { defs={} expr=v8075[1] }
        id      = { defs={} expr=v8076[1] }
        ?22     = { defs={} expr=v8077[1] }
        ?23     = { defs={} expr=v8078[1] }
        ?24     = { defs={} expr=v8079[1] }
        ?25     = { defs={} expr=v8080[1] }
        ?26     = { defs={} expr=v8081[1] }
        ?27     = { defs={} expr=v8082[1] }
        ?28     = { defs={} expr=v8083[1] }
        ?29     = { defs={} expr=v8084[1] }
        ?30     = { defs={} expr=v8085[1] }
        ?31     = { defs={} expr=v8086[1] }
        ip      = { defs={0x080485c6} expr=0x080485c7[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v8045[32] 3[32]) }
          value = { defs={} expr=v8099[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v8045[32] 2[32]) }
          value = { defs={} expr=v8098[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v8045[32] 1[32]) }
          value = { defs={} expr=v8097[8] }
          flags = { rdonly }
        address = { defs={0x080485c6} expr=v8045[32] }
          value = { defs={} expr=v8096[8] }
          flags = { rdonly }
0x80485c7:pop    ebx
    registers:
        ax      = { defs={0x080485c6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8096[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8097[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8098[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8099[8]))) }
        cx      = { defs={} expr=v8042[32] }
        dx      = { defs={} expr=v8043[32] }
        bx      = { defs={0x080485c7} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8113[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8114[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8115[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8116[8]))) }
        sp      = { defs={0x080485c6,0x080485c7} expr=(add[32] (add[32] v8045[32] 4[32]) 4[32]) }
        bp      = { defs={} expr=v8046[32] }
        si      = { defs={} expr=v8047[32] }
        di      = { defs={} expr=v8048[32] }
        es      = { defs={} expr=v8049[16] }
        cs      = { defs={} expr=v8050[16] }
        ss      = { defs={} expr=v8051[16] }
        ds      = { defs={} expr=v8052[16] }
        fs      = { defs={} expr=v8053[16] }
        gs      = { defs={} expr=v8054[16] }
        cf      = { defs={} expr=v8055[1] }
        ?1      = { defs={} expr=v8056[1] }
        pf      = { defs={} expr=v8057[1] }
        ?3      = { defs={} expr=v8058[1] }
        af      = { defs={} expr=v8059[1] }
        ?5      = { defs={} expr=v8060[1] }
        zf      = { defs={} expr=v8061[1] }
        sf      = { defs={} expr=v8062[1] }
        tf      = { defs={} expr=v8063[1] }
        if      = { defs={} expr=v8064[1] }
        df      = { defs={} expr=v8065[1] }
        of      = { defs={} expr=v8066[1] }
        iopl0   = { defs={} expr=v8067[1] }
        iopl1   = { defs={} expr=v8068[1] }
        nt      = { defs={} expr=v8069[1] }
        ?15     = { defs={} expr=v8070[1] }
        rf      = { defs={} expr=v8071[1] }
        vm      = { defs={} expr=v8072[1] }
        ac      = { defs={} expr=v8073[1] }
        vif     = { defs={} expr=v8074[1] }
        vip     = { defs={} expr=v8075[1] }
        id      = { defs={} expr=v8076[1] }
        ?22     = { defs={} expr=v8077[1] }
        ?23     = { defs={} expr=v8078[1] }
        ?24     = { defs={} expr=v8079[1] }
        ?25     = { defs={} expr=v8080[1] }
        ?26     = { defs={} expr=v8081[1] }
        ?27     = { defs={} expr=v8082[1] }
        ?28     = { defs={} expr=v8083[1] }
        ?29     = { defs={} expr=v8084[1] }
        ?30     = { defs={} expr=v8085[1] }
        ?31     = { defs={} expr=v8086[1] }
        ip      = { defs={0x080485c6,0x080485c7} expr=0x080485c8[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v8045[32] 4[32]) 3[32]) }
          value = { defs={} expr=v8116[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v8045[32] 4[32]) 2[32]) }
          value = { defs={} expr=v8115[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v8045[32] 4[32]) 1[32]) }
          value = { defs={} expr=v8114[8] }
          flags = { rdonly }
        address = { defs={0x080485c6,0x080485c7} expr=(add[32] v8045[32] 4[32]) }
          value = { defs={} expr=v8113[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v8045[32] 3[32]) }
          value = { defs={} expr=v8099[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v8045[32] 2[32]) }
          value = { defs={} expr=v8098[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v8045[32] 1[32]) }
          value = { defs={} expr=v8097[8] }
          flags = { rdonly }
        address = { defs={0x080485c6} expr=v8045[32] }
          value = { defs={} expr=v8096[8] }
          flags = { rdonly }
0x80485c8:leave  
    registers:
        ax      = { defs={0x080485c6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8096[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8097[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8098[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8099[8]))) }
        cx      = { defs={} expr=v8042[32] }
        dx      = { defs={} expr=v8043[32] }
        bx      = { defs={0x080485c7} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8113[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8114[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8115[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8116[8]))) }
        sp      = { defs={0x080485c8} expr=(add[32] v8046[32] 4[32]) }
        bp      = { defs={0x080485c8} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8131[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8132[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8133[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8134[8]))) }
        si      = { defs={} expr=v8047[32] }
        di      = { defs={} expr=v8048[32] }
        es      = { defs={} expr=v8049[16] }
        cs      = { defs={} expr=v8050[16] }
        ss      = { defs={} expr=v8051[16] }
        ds      = { defs={} expr=v8052[16] }
        fs      = { defs={} expr=v8053[16] }
        gs      = { defs={} expr=v8054[16] }
        cf      = { defs={} expr=v8055[1] }
        ?1      = { defs={} expr=v8056[1] }
        pf      = { defs={} expr=v8057[1] }
        ?3      = { defs={} expr=v8058[1] }
        af      = { defs={} expr=v8059[1] }
        ?5      = { defs={} expr=v8060[1] }
        zf      = { defs={} expr=v8061[1] }
        sf      = { defs={} expr=v8062[1] }
        tf      = { defs={} expr=v8063[1] }
        if      = { defs={} expr=v8064[1] }
        df      = { defs={} expr=v8065[1] }
        of      = { defs={} expr=v8066[1] }
        iopl0   = { defs={} expr=v8067[1] }
        iopl1   = { defs={} expr=v8068[1] }
        nt      = { defs={} expr=v8069[1] }
        ?15     = { defs={} expr=v8070[1] }
        rf      = { defs={} expr=v8071[1] }
        vm      = { defs={} expr=v8072[1] }
        ac      = { defs={} expr=v8073[1] }
        vif     = { defs={} expr=v8074[1] }
        vip     = { defs={} expr=v8075[1] }
        id      = { defs={} expr=v8076[1] }
        ?22     = { defs={} expr=v8077[1] }
        ?23     = { defs={} expr=v8078[1] }
        ?24     = { defs={} expr=v8079[1] }
        ?25     = { defs={} expr=v8080[1] }
        ?26     = { defs={} expr=v8081[1] }
        ?27     = { defs={} expr=v8082[1] }
        ?28     = { defs={} expr=v8083[1] }
        ?29     = { defs={} expr=v8084[1] }
        ?30     = { defs={} expr=v8085[1] }
        ?31     = { defs={} expr=v8086[1] }
        ip      = { defs={0x080485c6,0x080485c7,0x080485c8} expr=0x080485c9[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v8046[32] 3[32]) }
          value = { defs={} expr=v8134[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v8046[32] 2[32]) }
          value = { defs={} expr=v8133[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v8046[32] 1[32]) }
          value = { defs={} expr=v8132[8] }
          flags = { rdonly }
        address = { defs={0x080485c8} expr=v8046[32] }
          value = { defs={} expr=v8131[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v8045[32] 4[32]) 3[32]) }
          value = { defs={} expr=v8116[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v8045[32] 4[32]) 2[32]) }
          value = { defs={} expr=v8115[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v8045[32] 4[32]) 1[32]) }
          value = { defs={} expr=v8114[8] }
          flags = { rdonly }
        address = { defs={0x080485c6,0x080485c7} expr=(add[32] v8045[32] 4[32]) }
          value = { defs={} expr=v8113[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v8045[32] 3[32]) }
          value = { defs={} expr=v8099[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v8045[32] 2[32]) }
          value = { defs={} expr=v8098[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v8045[32] 1[32]) }
          value = { defs={} expr=v8097[8] }
          flags = { rdonly }
        address = { defs={0x080485c6} expr=v8045[32] }
          value = { defs={} expr=v8096[8] }
          flags = { rdonly }
0x80485c9:ret    
    registers:
        ax      = { defs={0x080485c6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8096[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8097[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8098[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8099[8]))) }
        cx      = { defs={} expr=v8042[32] }
        dx      = { defs={} expr=v8043[32] }
        bx      = { defs={0x080485c7} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8113[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8114[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8115[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8116[8]))) }
        sp      = { defs={0x080485c8,0x080485c9} expr=(add[32] (add[32] v8046[32] 4[32]) 4[32]) }
        bp      = { defs={0x080485c8} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8131[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8132[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8133[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8134[8]))) }
        si      = { defs={} expr=v8047[32] }
        di      = { defs={} expr=v8048[32] }
        es      = { defs={} expr=v8049[16] }
        cs      = { defs={} expr=v8050[16] }
        ss      = { defs={} expr=v8051[16] }
        ds      = { defs={} expr=v8052[16] }
        fs      = { defs={} expr=v8053[16] }
        gs      = { defs={} expr=v8054[16] }
        cf      = { defs={} expr=v8055[1] }
        ?1      = { defs={} expr=v8056[1] }
        pf      = { defs={} expr=v8057[1] }
        ?3      = { defs={} expr=v8058[1] }
        af      = { defs={} expr=v8059[1] }
        ?5      = { defs={} expr=v8060[1] }
        zf      = { defs={} expr=v8061[1] }
        sf      = { defs={} expr=v8062[1] }
        tf      = { defs={} expr=v8063[1] }
        if      = { defs={} expr=v8064[1] }
        df      = { defs={} expr=v8065[1] }
        of      = { defs={} expr=v8066[1] }
        iopl0   = { defs={} expr=v8067[1] }
        iopl1   = { defs={} expr=v8068[1] }
        nt      = { defs={} expr=v8069[1] }
        ?15     = { defs={} expr=v8070[1] }
        rf      = { defs={} expr=v8071[1] }
        vm      = { defs={} expr=v8072[1] }
        ac      = { defs={} expr=v8073[1] }
        vif     = { defs={} expr=v8074[1] }
        vip     = { defs={} expr=v8075[1] }
        id      = { defs={} expr=v8076[1] }
        ?22     = { defs={} expr=v8077[1] }
        ?23     = { defs={} expr=v8078[1] }
        ?24     = { defs={} expr=v8079[1] }
        ?25     = { defs={} expr=v8080[1] }
        ?26     = { defs={} expr=v8081[1] }
        ?27     = { defs={} expr=v8082[1] }
        ?28     = { defs={} expr=v8083[1] }
        ?29     = { defs={} expr=v8084[1] }
        ?30     = { defs={} expr=v8085[1] }
        ?31     = { defs={} expr=v8086[1] }
        ip      = { defs={0x080485c9} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8149[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8150[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8151[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8152[8]))) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v8046[32] 4[32]) 3[32]) }
          value = { defs={} expr=v8152[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v8046[32] 4[32]) 2[32]) }
          value = { defs={} expr=v8151[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v8046[32] 4[32]) 1[32]) }
          value = { defs={} expr=v8150[8] }
          flags = { rdonly }
        address = { defs={0x080485c8,0x080485c9} expr=(add[32] v8046[32] 4[32]) }
          value = { defs={} expr=v8149[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v8046[32] 3[32]) }
          value = { defs={} expr=v8134[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v8046[32] 2[32]) }
          value = { defs={} expr=v8133[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v8046[32] 1[32]) }
          value = { defs={} expr=v8132[8] }
          flags = { rdonly }
        address = { defs={0x080485c8} expr=v8046[32] }
          value = { defs={} expr=v8131[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v8045[32] 4[32]) 3[32]) }
          value = { defs={} expr=v8116[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v8045[32] 4[32]) 2[32]) }
          value = { defs={} expr=v8115[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v8045[32] 4[32]) 1[32]) }
          value = { defs={} expr=v8114[8] }
          flags = { rdonly }
        address = { defs={0x080485c6,0x080485c7} expr=(add[32] v8045[32] 4[32]) }
          value = { defs={} expr=v8113[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v8045[32] 3[32]) }
          value = { defs={} expr=v8099[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v8045[32] 2[32]) }
          value = { defs={} expr=v8098[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v8045[32] 1[32]) }
          value = { defs={} expr=v8097[8] }
          flags = { rdonly }
        address = { defs={0x080485c6} expr=v8045[32] }
          value = { defs={} expr=v8096[8] }
          flags = { rdonly }
analyzed headers: 1
