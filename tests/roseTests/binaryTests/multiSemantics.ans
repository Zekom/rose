=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80482c8:push   ebp
registers:
    ax      = { v31317 }
    cx      = { v31318 }
    dx      = { v31319 }
    bx      = { v31320 }
    sp      = { v31321-0x4 }
    bp      = { v31322 }
    si      = { v31323 }
    di      = { v31324 }
    es      = { v31325 }
    cs      = { v31326 }
    ss      = { v31327 }
    ds      = { v31328 }
    fs      = { v31329 }
    gs      = { v31330 }
    cf      = { v31331 }
    ?1      = { v31332 }
    pf      = { v31333 }
    ?3      = { v31334 }
    af      = { v31335 }
    ?5      = { v31336 }
    zf      = { v31337 }
    sf      = { v31338 }
    tf      = { v31339 }
    if      = { v31340 }
    df      = { v31341 }
    of      = { v31342 }
    iopl0   = { v31343 }
    iopl1   = { v31344 }
    nt      = { v31345 }
    ?15     = { v31346 }
    rf      = { v31347 }
    vm      = { v31348 }
    ac      = { v31349 }
    vif     = { v31350 }
    vip     = { v31351 }
    id      = { v31352 }
    ?22     = { v31353 }
    ?23     = { v31354 }
    ?24     = { v31355 }
    ?25     = { v31356 }
    ?26     = { v31357 }
    ?27     = { v31358 }
    ?28     = { v31359 }
    ?29     = { v31360 }
    ?30     = { v31361 }
    ?31     = { v31362 }
    ip      = { 0x80482c9 }
memory:
    address = { v31321-0x4 }
      value = { v31322 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v48[32] }
    cx      = { defs={} expr=v49[32] }
    dx      = { defs={} expr=v50[32] }
    bx      = { defs={} expr=v51[32] }
    sp      = { defs={0x080482c8} expr=(add[32] v52[32] -4[32]) }
    bp      = { defs={} expr=v53[32] }
    si      = { defs={} expr=v54[32] }
    di      = { defs={} expr=v55[32] }
    es      = { defs={} expr=v56[16] }
    cs      = { defs={} expr=v57[16] }
    ss      = { defs={} expr=v58[16] }
    ds      = { defs={} expr=v59[16] }
    fs      = { defs={} expr=v60[16] }
    gs      = { defs={} expr=v61[16] }
    cf      = { defs={} expr=v62[1] }
    ?1      = { defs={} expr=v63[1] }
    pf      = { defs={} expr=v64[1] }
    ?3      = { defs={} expr=v65[1] }
    af      = { defs={} expr=v66[1] }
    ?5      = { defs={} expr=v67[1] }
    zf      = { defs={} expr=v68[1] }
    sf      = { defs={} expr=v69[1] }
    tf      = { defs={} expr=v70[1] }
    if      = { defs={} expr=v71[1] }
    df      = { defs={} expr=v72[1] }
    of      = { defs={} expr=v73[1] }
    iopl0   = { defs={} expr=v74[1] }
    iopl1   = { defs={} expr=v75[1] }
    nt      = { defs={} expr=v76[1] }
    ?15     = { defs={} expr=v77[1] }
    rf      = { defs={} expr=v78[1] }
    vm      = { defs={} expr=v79[1] }
    ac      = { defs={} expr=v80[1] }
    vif     = { defs={} expr=v81[1] }
    vip     = { defs={} expr=v82[1] }
    id      = { defs={} expr=v83[1] }
    ?22     = { defs={} expr=v84[1] }
    ?23     = { defs={} expr=v85[1] }
    ?24     = { defs={} expr=v86[1] }
    ?25     = { defs={} expr=v87[1] }
    ?26     = { defs={} expr=v88[1] }
    ?27     = { defs={} expr=v89[1] }
    ?28     = { defs={} expr=v90[1] }
    ?29     = { defs={} expr=v91[1] }
    ?30     = { defs={} expr=v92[1] }
    ?31     = { defs={} expr=v93[1] }
    ip      = { defs={0x080482c8} expr=0x080482c9[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v53[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v53[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v53[32]) }
      flags = { }
    address = { defs={0x080482c8} expr=(add[32] v52[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v53[32]) }
      flags = { }
init mem:
null state
null state
0x80482c9:mov    ebp, esp
registers:
    ax      = { v31317 }
    cx      = { v31318 }
    dx      = { v31319 }
    bx      = { v31320 }
    sp      = { v31321-0x4 }
    bp      = { v31321-0x4 }
    si      = { v31323 }
    di      = { v31324 }
    es      = { v31325 }
    cs      = { v31326 }
    ss      = { v31327 }
    ds      = { v31328 }
    fs      = { v31329 }
    gs      = { v31330 }
    cf      = { v31331 }
    ?1      = { v31332 }
    pf      = { v31333 }
    ?3      = { v31334 }
    af      = { v31335 }
    ?5      = { v31336 }
    zf      = { v31337 }
    sf      = { v31338 }
    tf      = { v31339 }
    if      = { v31340 }
    df      = { v31341 }
    of      = { v31342 }
    iopl0   = { v31343 }
    iopl1   = { v31344 }
    nt      = { v31345 }
    ?15     = { v31346 }
    rf      = { v31347 }
    vm      = { v31348 }
    ac      = { v31349 }
    vif     = { v31350 }
    vip     = { v31351 }
    id      = { v31352 }
    ?22     = { v31353 }
    ?23     = { v31354 }
    ?24     = { v31355 }
    ?25     = { v31356 }
    ?26     = { v31357 }
    ?27     = { v31358 }
    ?28     = { v31359 }
    ?29     = { v31360 }
    ?30     = { v31361 }
    ?31     = { v31362 }
    ip      = { 0x80482cb }
memory:
    address = { v31321-0x4 }
      value = { v31322 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v48[32] }
    cx      = { defs={} expr=v49[32] }
    dx      = { defs={} expr=v50[32] }
    bx      = { defs={} expr=v51[32] }
    sp      = { defs={0x080482c8} expr=(add[32] v52[32] -4[32]) }
    bp      = { defs={0x080482c8,0x080482c9} expr=(add[32] v52[32] -4[32]) }
    si      = { defs={} expr=v54[32] }
    di      = { defs={} expr=v55[32] }
    es      = { defs={} expr=v56[16] }
    cs      = { defs={} expr=v57[16] }
    ss      = { defs={} expr=v58[16] }
    ds      = { defs={} expr=v59[16] }
    fs      = { defs={} expr=v60[16] }
    gs      = { defs={} expr=v61[16] }
    cf      = { defs={} expr=v62[1] }
    ?1      = { defs={} expr=v63[1] }
    pf      = { defs={} expr=v64[1] }
    ?3      = { defs={} expr=v65[1] }
    af      = { defs={} expr=v66[1] }
    ?5      = { defs={} expr=v67[1] }
    zf      = { defs={} expr=v68[1] }
    sf      = { defs={} expr=v69[1] }
    tf      = { defs={} expr=v70[1] }
    if      = { defs={} expr=v71[1] }
    df      = { defs={} expr=v72[1] }
    of      = { defs={} expr=v73[1] }
    iopl0   = { defs={} expr=v74[1] }
    iopl1   = { defs={} expr=v75[1] }
    nt      = { defs={} expr=v76[1] }
    ?15     = { defs={} expr=v77[1] }
    rf      = { defs={} expr=v78[1] }
    vm      = { defs={} expr=v79[1] }
    ac      = { defs={} expr=v80[1] }
    vif     = { defs={} expr=v81[1] }
    vip     = { defs={} expr=v82[1] }
    id      = { defs={} expr=v83[1] }
    ?22     = { defs={} expr=v84[1] }
    ?23     = { defs={} expr=v85[1] }
    ?24     = { defs={} expr=v86[1] }
    ?25     = { defs={} expr=v87[1] }
    ?26     = { defs={} expr=v88[1] }
    ?27     = { defs={} expr=v89[1] }
    ?28     = { defs={} expr=v90[1] }
    ?29     = { defs={} expr=v91[1] }
    ?30     = { defs={} expr=v92[1] }
    ?31     = { defs={} expr=v93[1] }
    ip      = { defs={0x080482c8,0x080482c9} expr=0x080482cb[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v53[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v53[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v53[32]) }
      flags = { }
    address = { defs={0x080482c8} expr=(add[32] v52[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v53[32]) }
      flags = { }
init mem:
null state
null state
0x80482cb:sub    esp, 0x08
registers:
    ax      = { v31317 }
    cx      = { v31318 }
    dx      = { v31319 }
    bx      = { v31320 }
    sp      = { v31321-0xc }
    bp      = { v31321-0x4 }
    si      = { v31323 }
    di      = { v31324 }
    es      = { v31325 }
    cs      = { v31326 }
    ss      = { v31327 }
    ds      = { v31328 }
    fs      = { v31329 }
    gs      = { v31330 }
    cf      = { -v31428+0x1 }
    ?1      = { v31332 }
    pf      = { -v31418+0x1 }
    ?3      = { v31334 }
    af      = { -v31425+0x1 }
    ?5      = { v31336 }
    zf      = { v31423 }
    sf      = { v31421 }
    tf      = { v31339 }
    if      = { v31340 }
    df      = { v31341 }
    of      = { v31435 }
    iopl0   = { v31343 }
    iopl1   = { v31344 }
    nt      = { v31345 }
    ?15     = { v31346 }
    rf      = { v31347 }
    vm      = { v31348 }
    ac      = { v31349 }
    vif     = { v31350 }
    vip     = { v31351 }
    id      = { v31352 }
    ?22     = { v31353 }
    ?23     = { v31354 }
    ?24     = { v31355 }
    ?25     = { v31356 }
    ?26     = { v31357 }
    ?27     = { v31358 }
    ?28     = { v31359 }
    ?29     = { v31360 }
    ?30     = { v31361 }
    ?31     = { v31362 }
    ip      = { 0x80482ce }
memory:
    address = { v31321-0x4 }
      value = { v31322 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v48[32] }
    cx      = { defs={} expr=v49[32] }
    dx      = { defs={} expr=v50[32] }
    bx      = { defs={} expr=v51[32] }
    sp      = { defs={0x080482c8,0x080482cb} expr=(add[32] (add[32] v52[32] -4[32]) -8[32]) }
    bp      = { defs={0x080482c8,0x080482c9} expr=(add[32] v52[32] -4[32]) }
    si      = { defs={} expr=v54[32] }
    di      = { defs={} expr=v55[32] }
    es      = { defs={} expr=v56[16] }
    cs      = { defs={} expr=v57[16] }
    ss      = { defs={} expr=v58[16] }
    ds      = { defs={} expr=v59[16] }
    fs      = { defs={} expr=v60[16] }
    gs      = { defs={} expr=v61[16] }
    cf      = { defs={0x080482c8,0x080482cb} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) 4294967288[33])))))) }
    ?1      = { defs={} expr=v63[1] }
    pf      = { defs={0x080482c8,0x080482cb} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))))))) }
    ?3      = { defs={} expr=v65[1] }
    af      = { defs={0x080482c8,0x080482cb} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) 4294967288[33])))))) }
    ?5      = { defs={} expr=v67[1] }
    zf      = { defs={0x080482c8,0x080482cb} expr=(zerop[1] (add[32] (add[32] v52[32] -4[32]) -8[32])) }
    sf      = { defs={0x080482c8,0x080482cb} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v52[32] -4[32]) -8[32])) }
    tf      = { defs={} expr=v70[1] }
    if      = { defs={} expr=v71[1] }
    df      = { defs={} expr=v72[1] }
    of      = { defs={0x080482c8,0x080482cb} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) 4294967288[33])))))) }
    iopl0   = { defs={} expr=v74[1] }
    iopl1   = { defs={} expr=v75[1] }
    nt      = { defs={} expr=v76[1] }
    ?15     = { defs={} expr=v77[1] }
    rf      = { defs={} expr=v78[1] }
    vm      = { defs={} expr=v79[1] }
    ac      = { defs={} expr=v80[1] }
    vif     = { defs={} expr=v81[1] }
    vip     = { defs={} expr=v82[1] }
    id      = { defs={} expr=v83[1] }
    ?22     = { defs={} expr=v84[1] }
    ?23     = { defs={} expr=v85[1] }
    ?24     = { defs={} expr=v86[1] }
    ?25     = { defs={} expr=v87[1] }
    ?26     = { defs={} expr=v88[1] }
    ?27     = { defs={} expr=v89[1] }
    ?28     = { defs={} expr=v90[1] }
    ?29     = { defs={} expr=v91[1] }
    ?30     = { defs={} expr=v92[1] }
    ?31     = { defs={} expr=v93[1] }
    ip      = { defs={0x080482c8,0x080482c9,0x080482cb} expr=0x080482ce[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v53[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v53[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v53[32]) }
      flags = { }
    address = { defs={0x080482c8} expr=(add[32] v52[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v53[32]) }
      flags = { }
init mem:
null state
null state
0x80482ce:call   0x08048364<call_gmon_start>
registers:
    ax      = { v31317 }
    cx      = { v31318 }
    dx      = { v31319 }
    bx      = { v31320 }
    sp      = { v31321-0x10 }
    bp      = { v31321-0x4 }
    si      = { v31323 }
    di      = { v31324 }
    es      = { v31325 }
    cs      = { v31326 }
    ss      = { v31327 }
    ds      = { v31328 }
    fs      = { v31329 }
    gs      = { v31330 }
    cf      = { -v31428+0x1 }
    ?1      = { v31332 }
    pf      = { -v31418+0x1 }
    ?3      = { v31334 }
    af      = { -v31425+0x1 }
    ?5      = { v31336 }
    zf      = { v31423 }
    sf      = { v31421 }
    tf      = { v31339 }
    if      = { v31340 }
    df      = { v31341 }
    of      = { v31435 }
    iopl0   = { v31343 }
    iopl1   = { v31344 }
    nt      = { v31345 }
    ?15     = { v31346 }
    rf      = { v31347 }
    vm      = { v31348 }
    ac      = { v31349 }
    vif     = { v31350 }
    vip     = { v31351 }
    id      = { v31352 }
    ?22     = { v31353 }
    ?23     = { v31354 }
    ?24     = { v31355 }
    ?25     = { v31356 }
    ?26     = { v31357 }
    ?27     = { v31358 }
    ?28     = { v31359 }
    ?29     = { v31360 }
    ?30     = { v31361 }
    ?31     = { v31362 }
    ip      = { 0x8048364 }
memory:
    address = { v31321-0x4 }
      value = { v31322 }
      flags = { size=4 }
    address = { v31321-0x10 }
      value = { 0x80482d3 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v48[32] }
    cx      = { defs={} expr=v49[32] }
    dx      = { defs={} expr=v50[32] }
    bx      = { defs={} expr=v51[32] }
    sp      = { defs={0x080482c8,0x080482cb,0x080482ce} expr=(add[32] (add[32] (add[32] v52[32] -4[32]) -8[32]) -4[32]) }
    bp      = { defs={0x080482c8,0x080482c9} expr=(add[32] v52[32] -4[32]) }
    si      = { defs={} expr=v54[32] }
    di      = { defs={} expr=v55[32] }
    es      = { defs={} expr=v56[16] }
    cs      = { defs={} expr=v57[16] }
    ss      = { defs={} expr=v58[16] }
    ds      = { defs={} expr=v59[16] }
    fs      = { defs={} expr=v60[16] }
    gs      = { defs={} expr=v61[16] }
    cf      = { defs={0x080482c8,0x080482cb} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) 4294967288[33])))))) }
    ?1      = { defs={} expr=v63[1] }
    pf      = { defs={0x080482c8,0x080482cb} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))))))) }
    ?3      = { defs={} expr=v65[1] }
    af      = { defs={0x080482c8,0x080482cb} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) 4294967288[33])))))) }
    ?5      = { defs={} expr=v67[1] }
    zf      = { defs={0x080482c8,0x080482cb} expr=(zerop[1] (add[32] (add[32] v52[32] -4[32]) -8[32])) }
    sf      = { defs={0x080482c8,0x080482cb} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v52[32] -4[32]) -8[32])) }
    tf      = { defs={} expr=v70[1] }
    if      = { defs={} expr=v71[1] }
    df      = { defs={} expr=v72[1] }
    of      = { defs={0x080482c8,0x080482cb} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) 4294967288[33])))))) }
    iopl0   = { defs={} expr=v74[1] }
    iopl1   = { defs={} expr=v75[1] }
    nt      = { defs={} expr=v76[1] }
    ?15     = { defs={} expr=v77[1] }
    rf      = { defs={} expr=v78[1] }
    vm      = { defs={} expr=v79[1] }
    ac      = { defs={} expr=v80[1] }
    vif     = { defs={} expr=v81[1] }
    vip     = { defs={} expr=v82[1] }
    id      = { defs={} expr=v83[1] }
    ?22     = { defs={} expr=v84[1] }
    ?23     = { defs={} expr=v85[1] }
    ?24     = { defs={} expr=v86[1] }
    ?25     = { defs={} expr=v87[1] }
    ?26     = { defs={} expr=v88[1] }
    ?27     = { defs={} expr=v89[1] }
    ?28     = { defs={} expr=v90[1] }
    ?29     = { defs={} expr=v91[1] }
    ?30     = { defs={} expr=v92[1] }
    ?31     = { defs={} expr=v93[1] }
    ip      = { defs={0x080482ce} expr=0x08048364[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v52[32] -4[32]) -8[32]) -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v52[32] -4[32]) -8[32]) -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v52[32] -4[32]) -8[32]) -4[32]) 1[32]) }
      value = { defs={} expr=-126[8] }
      flags = { }
    address = { defs={0x080482c8,0x080482cb,0x080482ce} expr=(add[32] (add[32] (add[32] v52[32] -4[32]) -8[32]) -4[32]) }
      value = { defs={} expr=-45[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v53[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v53[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v53[32]) }
      flags = { }
    address = { defs={0x080482c8} expr=(add[32] v52[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v53[32]) }
      flags = { }
init mem:
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80482d3:call   0x080483d0<frame_dummy>
registers:
    ax      = { v31495 }
    cx      = { v31496 }
    dx      = { v31497 }
    bx      = { v31498 }
    sp      = { v31499-0x4 }
    bp      = { v31500 }
    si      = { v31501 }
    di      = { v31502 }
    es      = { v31503 }
    cs      = { v31504 }
    ss      = { v31505 }
    ds      = { v31506 }
    fs      = { v31507 }
    gs      = { v31508 }
    cf      = { v31509 }
    ?1      = { v31510 }
    pf      = { v31511 }
    ?3      = { v31512 }
    af      = { v31513 }
    ?5      = { v31514 }
    zf      = { v31515 }
    sf      = { v31516 }
    tf      = { v31517 }
    if      = { v31518 }
    df      = { v31519 }
    of      = { v31520 }
    iopl0   = { v31521 }
    iopl1   = { v31522 }
    nt      = { v31523 }
    ?15     = { v31524 }
    rf      = { v31525 }
    vm      = { v31526 }
    ac      = { v31527 }
    vif     = { v31528 }
    vip     = { v31529 }
    id      = { v31530 }
    ?22     = { v31531 }
    ?23     = { v31532 }
    ?24     = { v31533 }
    ?25     = { v31534 }
    ?26     = { v31535 }
    ?27     = { v31536 }
    ?28     = { v31537 }
    ?29     = { v31538 }
    ?30     = { v31539 }
    ?31     = { v31540 }
    ip      = { 0x80483d0 }
memory:
    address = { v31499-0x4 }
      value = { 0x80482d8 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v280[32] }
    cx      = { defs={} expr=v281[32] }
    dx      = { defs={} expr=v282[32] }
    bx      = { defs={} expr=v283[32] }
    sp      = { defs={0x080482d3} expr=(add[32] v284[32] -4[32]) }
    bp      = { defs={} expr=v285[32] }
    si      = { defs={} expr=v286[32] }
    di      = { defs={} expr=v287[32] }
    es      = { defs={} expr=v288[16] }
    cs      = { defs={} expr=v289[16] }
    ss      = { defs={} expr=v290[16] }
    ds      = { defs={} expr=v291[16] }
    fs      = { defs={} expr=v292[16] }
    gs      = { defs={} expr=v293[16] }
    cf      = { defs={} expr=v294[1] }
    ?1      = { defs={} expr=v295[1] }
    pf      = { defs={} expr=v296[1] }
    ?3      = { defs={} expr=v297[1] }
    af      = { defs={} expr=v298[1] }
    ?5      = { defs={} expr=v299[1] }
    zf      = { defs={} expr=v300[1] }
    sf      = { defs={} expr=v301[1] }
    tf      = { defs={} expr=v302[1] }
    if      = { defs={} expr=v303[1] }
    df      = { defs={} expr=v304[1] }
    of      = { defs={} expr=v305[1] }
    iopl0   = { defs={} expr=v306[1] }
    iopl1   = { defs={} expr=v307[1] }
    nt      = { defs={} expr=v308[1] }
    ?15     = { defs={} expr=v309[1] }
    rf      = { defs={} expr=v310[1] }
    vm      = { defs={} expr=v311[1] }
    ac      = { defs={} expr=v312[1] }
    vif     = { defs={} expr=v313[1] }
    vip     = { defs={} expr=v314[1] }
    id      = { defs={} expr=v315[1] }
    ?22     = { defs={} expr=v316[1] }
    ?23     = { defs={} expr=v317[1] }
    ?24     = { defs={} expr=v318[1] }
    ?25     = { defs={} expr=v319[1] }
    ?26     = { defs={} expr=v320[1] }
    ?27     = { defs={} expr=v321[1] }
    ?28     = { defs={} expr=v322[1] }
    ?29     = { defs={} expr=v323[1] }
    ?30     = { defs={} expr=v324[1] }
    ?31     = { defs={} expr=v325[1] }
    ip      = { defs={0x080482d3} expr=0x080483d0[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v284[32] -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v284[32] -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v284[32] -4[32]) 1[32]) }
      value = { defs={} expr=-126[8] }
      flags = { }
    address = { defs={0x080482d3} expr=(add[32] v284[32] -4[32]) }
      value = { defs={} expr=-40[8] }
      flags = { }
init mem:
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80482d8:call   0x08048580<__do_global_ctors_aux>
registers:
    ax      = { v31600 }
    cx      = { v31601 }
    dx      = { v31602 }
    bx      = { v31603 }
    sp      = { v31604-0x4 }
    bp      = { v31605 }
    si      = { v31606 }
    di      = { v31607 }
    es      = { v31608 }
    cs      = { v31609 }
    ss      = { v31610 }
    ds      = { v31611 }
    fs      = { v31612 }
    gs      = { v31613 }
    cf      = { v31614 }
    ?1      = { v31615 }
    pf      = { v31616 }
    ?3      = { v31617 }
    af      = { v31618 }
    ?5      = { v31619 }
    zf      = { v31620 }
    sf      = { v31621 }
    tf      = { v31622 }
    if      = { v31623 }
    df      = { v31624 }
    of      = { v31625 }
    iopl0   = { v31626 }
    iopl1   = { v31627 }
    nt      = { v31628 }
    ?15     = { v31629 }
    rf      = { v31630 }
    vm      = { v31631 }
    ac      = { v31632 }
    vif     = { v31633 }
    vip     = { v31634 }
    id      = { v31635 }
    ?22     = { v31636 }
    ?23     = { v31637 }
    ?24     = { v31638 }
    ?25     = { v31639 }
    ?26     = { v31640 }
    ?27     = { v31641 }
    ?28     = { v31642 }
    ?29     = { v31643 }
    ?30     = { v31644 }
    ?31     = { v31645 }
    ip      = { 0x8048580 }
memory:
    address = { v31604-0x4 }
      value = { 0x80482dd }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v394[32] }
    cx      = { defs={} expr=v395[32] }
    dx      = { defs={} expr=v396[32] }
    bx      = { defs={} expr=v397[32] }
    sp      = { defs={0x080482d8} expr=(add[32] v398[32] -4[32]) }
    bp      = { defs={} expr=v399[32] }
    si      = { defs={} expr=v400[32] }
    di      = { defs={} expr=v401[32] }
    es      = { defs={} expr=v402[16] }
    cs      = { defs={} expr=v403[16] }
    ss      = { defs={} expr=v404[16] }
    ds      = { defs={} expr=v405[16] }
    fs      = { defs={} expr=v406[16] }
    gs      = { defs={} expr=v407[16] }
    cf      = { defs={} expr=v408[1] }
    ?1      = { defs={} expr=v409[1] }
    pf      = { defs={} expr=v410[1] }
    ?3      = { defs={} expr=v411[1] }
    af      = { defs={} expr=v412[1] }
    ?5      = { defs={} expr=v413[1] }
    zf      = { defs={} expr=v414[1] }
    sf      = { defs={} expr=v415[1] }
    tf      = { defs={} expr=v416[1] }
    if      = { defs={} expr=v417[1] }
    df      = { defs={} expr=v418[1] }
    of      = { defs={} expr=v419[1] }
    iopl0   = { defs={} expr=v420[1] }
    iopl1   = { defs={} expr=v421[1] }
    nt      = { defs={} expr=v422[1] }
    ?15     = { defs={} expr=v423[1] }
    rf      = { defs={} expr=v424[1] }
    vm      = { defs={} expr=v425[1] }
    ac      = { defs={} expr=v426[1] }
    vif     = { defs={} expr=v427[1] }
    vip     = { defs={} expr=v428[1] }
    id      = { defs={} expr=v429[1] }
    ?22     = { defs={} expr=v430[1] }
    ?23     = { defs={} expr=v431[1] }
    ?24     = { defs={} expr=v432[1] }
    ?25     = { defs={} expr=v433[1] }
    ?26     = { defs={} expr=v434[1] }
    ?27     = { defs={} expr=v435[1] }
    ?28     = { defs={} expr=v436[1] }
    ?29     = { defs={} expr=v437[1] }
    ?30     = { defs={} expr=v438[1] }
    ?31     = { defs={} expr=v439[1] }
    ip      = { defs={0x080482d8} expr=0x08048580[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v398[32] -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v398[32] -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v398[32] -4[32]) 1[32]) }
      value = { defs={} expr=-126[8] }
      flags = { }
    address = { defs={0x080482d8} expr=(add[32] v398[32] -4[32]) }
      value = { defs={} expr=-35[8] }
      flags = { }
init mem:
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80482dd:leave  
registers:
    ax      = { v31705 }
    cx      = { v31706 }
    dx      = { v31707 }
    bx      = { v31708 }
    sp      = { v31710+0x4 }
    bp      = { v31761 }
    si      = { v31711 }
    di      = { v31712 }
    es      = { v31713 }
    cs      = { v31714 }
    ss      = { v31715 }
    ds      = { v31716 }
    fs      = { v31717 }
    gs      = { v31718 }
    cf      = { v31719 }
    ?1      = { v31720 }
    pf      = { v31721 }
    ?3      = { v31722 }
    af      = { v31723 }
    ?5      = { v31724 }
    zf      = { v31725 }
    sf      = { v31726 }
    tf      = { v31727 }
    if      = { v31728 }
    df      = { v31729 }
    of      = { v31730 }
    iopl0   = { v31731 }
    iopl1   = { v31732 }
    nt      = { v31733 }
    ?15     = { v31734 }
    rf      = { v31735 }
    vm      = { v31736 }
    ac      = { v31737 }
    vif     = { v31738 }
    vip     = { v31739 }
    id      = { v31740 }
    ?22     = { v31741 }
    ?23     = { v31742 }
    ?24     = { v31743 }
    ?25     = { v31744 }
    ?26     = { v31745 }
    ?27     = { v31746 }
    ?28     = { v31747 }
    ?29     = { v31748 }
    ?30     = { v31749 }
    ?31     = { v31750 }
    ip      = { 0x80482de }
memory:
    address = { v31710 }
      value = { v31761 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={} expr=v508[32] }
    cx      = { defs={} expr=v509[32] }
    dx      = { defs={} expr=v510[32] }
    bx      = { defs={} expr=v511[32] }
    sp      = { defs={0x080482dd} expr=(add[32] v513[32] 4[32]) }
    bp      = { defs={0x080482dd} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v574[8]) (shr0[32] 8[32] (uextend[32] 32[32] v575[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v576[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v577[8]))) }
    si      = { defs={} expr=v514[32] }
    di      = { defs={} expr=v515[32] }
    es      = { defs={} expr=v516[16] }
    cs      = { defs={} expr=v517[16] }
    ss      = { defs={} expr=v518[16] }
    ds      = { defs={} expr=v519[16] }
    fs      = { defs={} expr=v520[16] }
    gs      = { defs={} expr=v521[16] }
    cf      = { defs={} expr=v522[1] }
    ?1      = { defs={} expr=v523[1] }
    pf      = { defs={} expr=v524[1] }
    ?3      = { defs={} expr=v525[1] }
    af      = { defs={} expr=v526[1] }
    ?5      = { defs={} expr=v527[1] }
    zf      = { defs={} expr=v528[1] }
    sf      = { defs={} expr=v529[1] }
    tf      = { defs={} expr=v530[1] }
    if      = { defs={} expr=v531[1] }
    df      = { defs={} expr=v532[1] }
    of      = { defs={} expr=v533[1] }
    iopl0   = { defs={} expr=v534[1] }
    iopl1   = { defs={} expr=v535[1] }
    nt      = { defs={} expr=v536[1] }
    ?15     = { defs={} expr=v537[1] }
    rf      = { defs={} expr=v538[1] }
    vm      = { defs={} expr=v539[1] }
    ac      = { defs={} expr=v540[1] }
    vif     = { defs={} expr=v541[1] }
    vip     = { defs={} expr=v542[1] }
    id      = { defs={} expr=v543[1] }
    ?22     = { defs={} expr=v544[1] }
    ?23     = { defs={} expr=v545[1] }
    ?24     = { defs={} expr=v546[1] }
    ?25     = { defs={} expr=v547[1] }
    ?26     = { defs={} expr=v548[1] }
    ?27     = { defs={} expr=v549[1] }
    ?28     = { defs={} expr=v550[1] }
    ?29     = { defs={} expr=v551[1] }
    ?30     = { defs={} expr=v552[1] }
    ?31     = { defs={} expr=v553[1] }
    ip      = { defs={0x080482dd} expr=0x080482de[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] v513[32] 3[32]) }
      value = { defs={} expr=v577[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v513[32] 2[32]) }
      value = { defs={} expr=v576[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v513[32] 1[32]) }
      value = { defs={} expr=v575[8] }
      flags = { rdonly }
    address = { defs={0x080482dd} expr=v513[32] }
      value = { defs={} expr=v574[8] }
      flags = { rdonly }
null state
null state
0x80482de:ret    
registers:
    ax      = { v31705 }
    cx      = { v31706 }
    dx      = { v31707 }
    bx      = { v31708 }
    sp      = { v31710+0x8 }
    bp      = { v31761 }
    si      = { v31711 }
    di      = { v31712 }
    es      = { v31713 }
    cs      = { v31714 }
    ss      = { v31715 }
    ds      = { v31716 }
    fs      = { v31717 }
    gs      = { v31718 }
    cf      = { v31719 }
    ?1      = { v31720 }
    pf      = { v31721 }
    ?3      = { v31722 }
    af      = { v31723 }
    ?5      = { v31724 }
    zf      = { v31725 }
    sf      = { v31726 }
    tf      = { v31727 }
    if      = { v31728 }
    df      = { v31729 }
    of      = { v31730 }
    iopl0   = { v31731 }
    iopl1   = { v31732 }
    nt      = { v31733 }
    ?15     = { v31734 }
    rf      = { v31735 }
    vm      = { v31736 }
    ac      = { v31737 }
    vif     = { v31738 }
    vip     = { v31739 }
    id      = { v31740 }
    ?22     = { v31741 }
    ?23     = { v31742 }
    ?24     = { v31743 }
    ?25     = { v31744 }
    ?26     = { v31745 }
    ?27     = { v31746 }
    ?28     = { v31747 }
    ?29     = { v31748 }
    ?30     = { v31749 }
    ?31     = { v31750 }
    ip      = { v31773 }
memory:
    address = { v31710 }
      value = { v31761 }
      flags = { size=4; read-only }
    address = { v31710+0x4 }
      value = { v31773 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={} expr=v508[32] }
    cx      = { defs={} expr=v509[32] }
    dx      = { defs={} expr=v510[32] }
    bx      = { defs={} expr=v511[32] }
    sp      = { defs={0x080482dd,0x080482de} expr=(add[32] (add[32] v513[32] 4[32]) 4[32]) }
    bp      = { defs={0x080482dd} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v574[8]) (shr0[32] 8[32] (uextend[32] 32[32] v575[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v576[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v577[8]))) }
    si      = { defs={} expr=v514[32] }
    di      = { defs={} expr=v515[32] }
    es      = { defs={} expr=v516[16] }
    cs      = { defs={} expr=v517[16] }
    ss      = { defs={} expr=v518[16] }
    ds      = { defs={} expr=v519[16] }
    fs      = { defs={} expr=v520[16] }
    gs      = { defs={} expr=v521[16] }
    cf      = { defs={} expr=v522[1] }
    ?1      = { defs={} expr=v523[1] }
    pf      = { defs={} expr=v524[1] }
    ?3      = { defs={} expr=v525[1] }
    af      = { defs={} expr=v526[1] }
    ?5      = { defs={} expr=v527[1] }
    zf      = { defs={} expr=v528[1] }
    sf      = { defs={} expr=v529[1] }
    tf      = { defs={} expr=v530[1] }
    if      = { defs={} expr=v531[1] }
    df      = { defs={} expr=v532[1] }
    of      = { defs={} expr=v533[1] }
    iopl0   = { defs={} expr=v534[1] }
    iopl1   = { defs={} expr=v535[1] }
    nt      = { defs={} expr=v536[1] }
    ?15     = { defs={} expr=v537[1] }
    rf      = { defs={} expr=v538[1] }
    vm      = { defs={} expr=v539[1] }
    ac      = { defs={} expr=v540[1] }
    vif     = { defs={} expr=v541[1] }
    vip     = { defs={} expr=v542[1] }
    id      = { defs={} expr=v543[1] }
    ?22     = { defs={} expr=v544[1] }
    ?23     = { defs={} expr=v545[1] }
    ?24     = { defs={} expr=v546[1] }
    ?25     = { defs={} expr=v547[1] }
    ?26     = { defs={} expr=v548[1] }
    ?27     = { defs={} expr=v549[1] }
    ?28     = { defs={} expr=v550[1] }
    ?29     = { defs={} expr=v551[1] }
    ?30     = { defs={} expr=v552[1] }
    ?31     = { defs={} expr=v553[1] }
    ip      = { defs={0x080482de} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v604[8]) (shr0[32] 8[32] (uextend[32] 32[32] v605[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v606[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v607[8]))) }
memory:
init mem:
    address = { defs={} expr=(add[32] (add[32] v513[32] 4[32]) 3[32]) }
      value = { defs={} expr=v607[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v513[32] 4[32]) 2[32]) }
      value = { defs={} expr=v606[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v513[32] 4[32]) 1[32]) }
      value = { defs={} expr=v605[8] }
      flags = { rdonly }
    address = { defs={0x080482dd,0x080482de} expr=(add[32] v513[32] 4[32]) }
      value = { defs={} expr=v604[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v513[32] 3[32]) }
      value = { defs={} expr=v577[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v513[32] 2[32]) }
      value = { defs={} expr=v576[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v513[32] 1[32]) }
      value = { defs={} expr=v575[8] }
      flags = { rdonly }
    address = { defs={0x080482dd} expr=v513[32] }
      value = { defs={} expr=v574[8] }
      flags = { rdonly }
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80482f0:jmp    DWORD PTR ds:[0x080496d4<.got.plt+0x0c>]
registers:
    ax      = { v31824 }
    cx      = { v31825 }
    dx      = { v31826 }
    bx      = { v31827 }
    sp      = { v31828 }
    bp      = { v31829 }
    si      = { v31830 }
    di      = { v31831 }
    es      = { v31832 }
    cs      = { v31833 }
    ss      = { v31834 }
    ds      = { v31835 }
    fs      = { v31836 }
    gs      = { v31837 }
    cf      = { v31838 }
    ?1      = { v31839 }
    pf      = { v31840 }
    ?3      = { v31841 }
    af      = { v31842 }
    ?5      = { v31843 }
    zf      = { v31844 }
    sf      = { v31845 }
    tf      = { v31846 }
    if      = { v31847 }
    df      = { v31848 }
    of      = { v31849 }
    iopl0   = { v31850 }
    iopl1   = { v31851 }
    nt      = { v31852 }
    ?15     = { v31853 }
    rf      = { v31854 }
    vm      = { v31855 }
    ac      = { v31856 }
    vif     = { v31857 }
    vip     = { v31858 }
    id      = { v31859 }
    ?22     = { v31860 }
    ?23     = { v31861 }
    ?24     = { v31862 }
    ?25     = { v31863 }
    ?26     = { v31864 }
    ?27     = { v31865 }
    ?28     = { v31866 }
    ?29     = { v31867 }
    ?30     = { v31868 }
    ?31     = { v31869 }
    ip      = { v31877 }
memory:
    address = { 0x80496d4 }
      value = { v31877 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={} expr=v665[32] }
    cx      = { defs={} expr=v666[32] }
    dx      = { defs={} expr=v667[32] }
    bx      = { defs={} expr=v668[32] }
    sp      = { defs={} expr=v669[32] }
    bp      = { defs={} expr=v670[32] }
    si      = { defs={} expr=v671[32] }
    di      = { defs={} expr=v672[32] }
    es      = { defs={} expr=v673[16] }
    cs      = { defs={} expr=v674[16] }
    ss      = { defs={} expr=v675[16] }
    ds      = { defs={} expr=v676[16] }
    fs      = { defs={} expr=v677[16] }
    gs      = { defs={} expr=v678[16] }
    cf      = { defs={} expr=v679[1] }
    ?1      = { defs={} expr=v680[1] }
    pf      = { defs={} expr=v681[1] }
    ?3      = { defs={} expr=v682[1] }
    af      = { defs={} expr=v683[1] }
    ?5      = { defs={} expr=v684[1] }
    zf      = { defs={} expr=v685[1] }
    sf      = { defs={} expr=v686[1] }
    tf      = { defs={} expr=v687[1] }
    if      = { defs={} expr=v688[1] }
    df      = { defs={} expr=v689[1] }
    of      = { defs={} expr=v690[1] }
    iopl0   = { defs={} expr=v691[1] }
    iopl1   = { defs={} expr=v692[1] }
    nt      = { defs={} expr=v693[1] }
    ?15     = { defs={} expr=v694[1] }
    rf      = { defs={} expr=v695[1] }
    vm      = { defs={} expr=v696[1] }
    ac      = { defs={} expr=v697[1] }
    vif     = { defs={} expr=v698[1] }
    vip     = { defs={} expr=v699[1] }
    id      = { defs={} expr=v700[1] }
    ?22     = { defs={} expr=v701[1] }
    ?23     = { defs={} expr=v702[1] }
    ?24     = { defs={} expr=v703[1] }
    ?25     = { defs={} expr=v704[1] }
    ?26     = { defs={} expr=v705[1] }
    ?27     = { defs={} expr=v706[1] }
    ?28     = { defs={} expr=v707[1] }
    ?29     = { defs={} expr=v708[1] }
    ?30     = { defs={} expr=v709[1] }
    ?31     = { defs={} expr=v710[1] }
    ip      = { defs={0x080482f0} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v724[8]) (shr0[32] 8[32] (uextend[32] 32[32] v725[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v726[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v727[8]))) }
memory:
init mem:
    address = { defs={} expr=0x080496d7[32] }
      value = { defs={} expr=v727[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496d6[32] }
      value = { defs={} expr=v726[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496d5[32] }
      value = { defs={} expr=v725[8] }
      flags = { rdonly }
    address = { defs={0x080482f0} expr=0x080496d4[32] }
      value = { defs={} expr=v724[8] }
      flags = { rdonly }
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048300:jmp    DWORD PTR ds:[0x080496d8<.got.plt+0x10>]
registers:
    ax      = { v31928 }
    cx      = { v31929 }
    dx      = { v31930 }
    bx      = { v31931 }
    sp      = { v31932 }
    bp      = { v31933 }
    si      = { v31934 }
    di      = { v31935 }
    es      = { v31936 }
    cs      = { v31937 }
    ss      = { v31938 }
    ds      = { v31939 }
    fs      = { v31940 }
    gs      = { v31941 }
    cf      = { v31942 }
    ?1      = { v31943 }
    pf      = { v31944 }
    ?3      = { v31945 }
    af      = { v31946 }
    ?5      = { v31947 }
    zf      = { v31948 }
    sf      = { v31949 }
    tf      = { v31950 }
    if      = { v31951 }
    df      = { v31952 }
    of      = { v31953 }
    iopl0   = { v31954 }
    iopl1   = { v31955 }
    nt      = { v31956 }
    ?15     = { v31957 }
    rf      = { v31958 }
    vm      = { v31959 }
    ac      = { v31960 }
    vif     = { v31961 }
    vip     = { v31962 }
    id      = { v31963 }
    ?22     = { v31964 }
    ?23     = { v31965 }
    ?24     = { v31966 }
    ?25     = { v31967 }
    ?26     = { v31968 }
    ?27     = { v31969 }
    ?28     = { v31970 }
    ?29     = { v31971 }
    ?30     = { v31972 }
    ?31     = { v31973 }
    ip      = { v31981 }
memory:
    address = { 0x80496d8 }
      value = { v31981 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={} expr=v784[32] }
    cx      = { defs={} expr=v785[32] }
    dx      = { defs={} expr=v786[32] }
    bx      = { defs={} expr=v787[32] }
    sp      = { defs={} expr=v788[32] }
    bp      = { defs={} expr=v789[32] }
    si      = { defs={} expr=v790[32] }
    di      = { defs={} expr=v791[32] }
    es      = { defs={} expr=v792[16] }
    cs      = { defs={} expr=v793[16] }
    ss      = { defs={} expr=v794[16] }
    ds      = { defs={} expr=v795[16] }
    fs      = { defs={} expr=v796[16] }
    gs      = { defs={} expr=v797[16] }
    cf      = { defs={} expr=v798[1] }
    ?1      = { defs={} expr=v799[1] }
    pf      = { defs={} expr=v800[1] }
    ?3      = { defs={} expr=v801[1] }
    af      = { defs={} expr=v802[1] }
    ?5      = { defs={} expr=v803[1] }
    zf      = { defs={} expr=v804[1] }
    sf      = { defs={} expr=v805[1] }
    tf      = { defs={} expr=v806[1] }
    if      = { defs={} expr=v807[1] }
    df      = { defs={} expr=v808[1] }
    of      = { defs={} expr=v809[1] }
    iopl0   = { defs={} expr=v810[1] }
    iopl1   = { defs={} expr=v811[1] }
    nt      = { defs={} expr=v812[1] }
    ?15     = { defs={} expr=v813[1] }
    rf      = { defs={} expr=v814[1] }
    vm      = { defs={} expr=v815[1] }
    ac      = { defs={} expr=v816[1] }
    vif     = { defs={} expr=v817[1] }
    vip     = { defs={} expr=v818[1] }
    id      = { defs={} expr=v819[1] }
    ?22     = { defs={} expr=v820[1] }
    ?23     = { defs={} expr=v821[1] }
    ?24     = { defs={} expr=v822[1] }
    ?25     = { defs={} expr=v823[1] }
    ?26     = { defs={} expr=v824[1] }
    ?27     = { defs={} expr=v825[1] }
    ?28     = { defs={} expr=v826[1] }
    ?29     = { defs={} expr=v827[1] }
    ?30     = { defs={} expr=v828[1] }
    ?31     = { defs={} expr=v829[1] }
    ip      = { defs={0x08048300} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v843[8]) (shr0[32] 8[32] (uextend[32] 32[32] v844[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v845[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v846[8]))) }
memory:
init mem:
    address = { defs={} expr=0x080496db[32] }
      value = { defs={} expr=v846[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496da[32] }
      value = { defs={} expr=v845[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496d9[32] }
      value = { defs={} expr=v844[8] }
      flags = { rdonly }
    address = { defs={0x08048300} expr=0x080496d8[32] }
      value = { defs={} expr=v843[8] }
      flags = { rdonly }
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048310:jmp    DWORD PTR ds:[0x080496dc<.got.plt+0x14>]
registers:
    ax      = { v32032 }
    cx      = { v32033 }
    dx      = { v32034 }
    bx      = { v32035 }
    sp      = { v32036 }
    bp      = { v32037 }
    si      = { v32038 }
    di      = { v32039 }
    es      = { v32040 }
    cs      = { v32041 }
    ss      = { v32042 }
    ds      = { v32043 }
    fs      = { v32044 }
    gs      = { v32045 }
    cf      = { v32046 }
    ?1      = { v32047 }
    pf      = { v32048 }
    ?3      = { v32049 }
    af      = { v32050 }
    ?5      = { v32051 }
    zf      = { v32052 }
    sf      = { v32053 }
    tf      = { v32054 }
    if      = { v32055 }
    df      = { v32056 }
    of      = { v32057 }
    iopl0   = { v32058 }
    iopl1   = { v32059 }
    nt      = { v32060 }
    ?15     = { v32061 }
    rf      = { v32062 }
    vm      = { v32063 }
    ac      = { v32064 }
    vif     = { v32065 }
    vip     = { v32066 }
    id      = { v32067 }
    ?22     = { v32068 }
    ?23     = { v32069 }
    ?24     = { v32070 }
    ?25     = { v32071 }
    ?26     = { v32072 }
    ?27     = { v32073 }
    ?28     = { v32074 }
    ?29     = { v32075 }
    ?30     = { v32076 }
    ?31     = { v32077 }
    ip      = { v32085 }
memory:
    address = { 0x80496dc }
      value = { v32085 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={} expr=v903[32] }
    cx      = { defs={} expr=v904[32] }
    dx      = { defs={} expr=v905[32] }
    bx      = { defs={} expr=v906[32] }
    sp      = { defs={} expr=v907[32] }
    bp      = { defs={} expr=v908[32] }
    si      = { defs={} expr=v909[32] }
    di      = { defs={} expr=v910[32] }
    es      = { defs={} expr=v911[16] }
    cs      = { defs={} expr=v912[16] }
    ss      = { defs={} expr=v913[16] }
    ds      = { defs={} expr=v914[16] }
    fs      = { defs={} expr=v915[16] }
    gs      = { defs={} expr=v916[16] }
    cf      = { defs={} expr=v917[1] }
    ?1      = { defs={} expr=v918[1] }
    pf      = { defs={} expr=v919[1] }
    ?3      = { defs={} expr=v920[1] }
    af      = { defs={} expr=v921[1] }
    ?5      = { defs={} expr=v922[1] }
    zf      = { defs={} expr=v923[1] }
    sf      = { defs={} expr=v924[1] }
    tf      = { defs={} expr=v925[1] }
    if      = { defs={} expr=v926[1] }
    df      = { defs={} expr=v927[1] }
    of      = { defs={} expr=v928[1] }
    iopl0   = { defs={} expr=v929[1] }
    iopl1   = { defs={} expr=v930[1] }
    nt      = { defs={} expr=v931[1] }
    ?15     = { defs={} expr=v932[1] }
    rf      = { defs={} expr=v933[1] }
    vm      = { defs={} expr=v934[1] }
    ac      = { defs={} expr=v935[1] }
    vif     = { defs={} expr=v936[1] }
    vip     = { defs={} expr=v937[1] }
    id      = { defs={} expr=v938[1] }
    ?22     = { defs={} expr=v939[1] }
    ?23     = { defs={} expr=v940[1] }
    ?24     = { defs={} expr=v941[1] }
    ?25     = { defs={} expr=v942[1] }
    ?26     = { defs={} expr=v943[1] }
    ?27     = { defs={} expr=v944[1] }
    ?28     = { defs={} expr=v945[1] }
    ?29     = { defs={} expr=v946[1] }
    ?30     = { defs={} expr=v947[1] }
    ?31     = { defs={} expr=v948[1] }
    ip      = { defs={0x08048310} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v962[8]) (shr0[32] 8[32] (uextend[32] 32[32] v963[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v964[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v965[8]))) }
memory:
init mem:
    address = { defs={} expr=0x080496df[32] }
      value = { defs={} expr=v965[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496de[32] }
      value = { defs={} expr=v964[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496dd[32] }
      value = { defs={} expr=v963[8] }
      flags = { rdonly }
    address = { defs={0x08048310} expr=0x080496dc[32] }
      value = { defs={} expr=v962[8] }
      flags = { rdonly }
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048320:jmp    DWORD PTR ds:[0x080496e0<.got.plt+0x18>]
registers:
    ax      = { v32136 }
    cx      = { v32137 }
    dx      = { v32138 }
    bx      = { v32139 }
    sp      = { v32140 }
    bp      = { v32141 }
    si      = { v32142 }
    di      = { v32143 }
    es      = { v32144 }
    cs      = { v32145 }
    ss      = { v32146 }
    ds      = { v32147 }
    fs      = { v32148 }
    gs      = { v32149 }
    cf      = { v32150 }
    ?1      = { v32151 }
    pf      = { v32152 }
    ?3      = { v32153 }
    af      = { v32154 }
    ?5      = { v32155 }
    zf      = { v32156 }
    sf      = { v32157 }
    tf      = { v32158 }
    if      = { v32159 }
    df      = { v32160 }
    of      = { v32161 }
    iopl0   = { v32162 }
    iopl1   = { v32163 }
    nt      = { v32164 }
    ?15     = { v32165 }
    rf      = { v32166 }
    vm      = { v32167 }
    ac      = { v32168 }
    vif     = { v32169 }
    vip     = { v32170 }
    id      = { v32171 }
    ?22     = { v32172 }
    ?23     = { v32173 }
    ?24     = { v32174 }
    ?25     = { v32175 }
    ?26     = { v32176 }
    ?27     = { v32177 }
    ?28     = { v32178 }
    ?29     = { v32179 }
    ?30     = { v32180 }
    ?31     = { v32181 }
    ip      = { v32189 }
memory:
    address = { 0x80496e0 }
      value = { v32189 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={} expr=v1022[32] }
    cx      = { defs={} expr=v1023[32] }
    dx      = { defs={} expr=v1024[32] }
    bx      = { defs={} expr=v1025[32] }
    sp      = { defs={} expr=v1026[32] }
    bp      = { defs={} expr=v1027[32] }
    si      = { defs={} expr=v1028[32] }
    di      = { defs={} expr=v1029[32] }
    es      = { defs={} expr=v1030[16] }
    cs      = { defs={} expr=v1031[16] }
    ss      = { defs={} expr=v1032[16] }
    ds      = { defs={} expr=v1033[16] }
    fs      = { defs={} expr=v1034[16] }
    gs      = { defs={} expr=v1035[16] }
    cf      = { defs={} expr=v1036[1] }
    ?1      = { defs={} expr=v1037[1] }
    pf      = { defs={} expr=v1038[1] }
    ?3      = { defs={} expr=v1039[1] }
    af      = { defs={} expr=v1040[1] }
    ?5      = { defs={} expr=v1041[1] }
    zf      = { defs={} expr=v1042[1] }
    sf      = { defs={} expr=v1043[1] }
    tf      = { defs={} expr=v1044[1] }
    if      = { defs={} expr=v1045[1] }
    df      = { defs={} expr=v1046[1] }
    of      = { defs={} expr=v1047[1] }
    iopl0   = { defs={} expr=v1048[1] }
    iopl1   = { defs={} expr=v1049[1] }
    nt      = { defs={} expr=v1050[1] }
    ?15     = { defs={} expr=v1051[1] }
    rf      = { defs={} expr=v1052[1] }
    vm      = { defs={} expr=v1053[1] }
    ac      = { defs={} expr=v1054[1] }
    vif     = { defs={} expr=v1055[1] }
    vip     = { defs={} expr=v1056[1] }
    id      = { defs={} expr=v1057[1] }
    ?22     = { defs={} expr=v1058[1] }
    ?23     = { defs={} expr=v1059[1] }
    ?24     = { defs={} expr=v1060[1] }
    ?25     = { defs={} expr=v1061[1] }
    ?26     = { defs={} expr=v1062[1] }
    ?27     = { defs={} expr=v1063[1] }
    ?28     = { defs={} expr=v1064[1] }
    ?29     = { defs={} expr=v1065[1] }
    ?30     = { defs={} expr=v1066[1] }
    ?31     = { defs={} expr=v1067[1] }
    ip      = { defs={0x08048320} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1081[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1082[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1083[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1084[8]))) }
memory:
init mem:
    address = { defs={} expr=0x080496e3[32] }
      value = { defs={} expr=v1084[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496e2[32] }
      value = { defs={} expr=v1083[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496e1[32] }
      value = { defs={} expr=v1082[8] }
      flags = { rdonly }
    address = { defs={0x08048320} expr=0x080496e0[32] }
      value = { defs={} expr=v1081[8] }
      flags = { rdonly }
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048330:jmp    DWORD PTR ds:[0x080496e4<.got.plt+0x1c>]
registers:
    ax      = { v32240 }
    cx      = { v32241 }
    dx      = { v32242 }
    bx      = { v32243 }
    sp      = { v32244 }
    bp      = { v32245 }
    si      = { v32246 }
    di      = { v32247 }
    es      = { v32248 }
    cs      = { v32249 }
    ss      = { v32250 }
    ds      = { v32251 }
    fs      = { v32252 }
    gs      = { v32253 }
    cf      = { v32254 }
    ?1      = { v32255 }
    pf      = { v32256 }
    ?3      = { v32257 }
    af      = { v32258 }
    ?5      = { v32259 }
    zf      = { v32260 }
    sf      = { v32261 }
    tf      = { v32262 }
    if      = { v32263 }
    df      = { v32264 }
    of      = { v32265 }
    iopl0   = { v32266 }
    iopl1   = { v32267 }
    nt      = { v32268 }
    ?15     = { v32269 }
    rf      = { v32270 }
    vm      = { v32271 }
    ac      = { v32272 }
    vif     = { v32273 }
    vip     = { v32274 }
    id      = { v32275 }
    ?22     = { v32276 }
    ?23     = { v32277 }
    ?24     = { v32278 }
    ?25     = { v32279 }
    ?26     = { v32280 }
    ?27     = { v32281 }
    ?28     = { v32282 }
    ?29     = { v32283 }
    ?30     = { v32284 }
    ?31     = { v32285 }
    ip      = { v32293 }
memory:
    address = { 0x80496e4 }
      value = { v32293 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={} expr=v1141[32] }
    cx      = { defs={} expr=v1142[32] }
    dx      = { defs={} expr=v1143[32] }
    bx      = { defs={} expr=v1144[32] }
    sp      = { defs={} expr=v1145[32] }
    bp      = { defs={} expr=v1146[32] }
    si      = { defs={} expr=v1147[32] }
    di      = { defs={} expr=v1148[32] }
    es      = { defs={} expr=v1149[16] }
    cs      = { defs={} expr=v1150[16] }
    ss      = { defs={} expr=v1151[16] }
    ds      = { defs={} expr=v1152[16] }
    fs      = { defs={} expr=v1153[16] }
    gs      = { defs={} expr=v1154[16] }
    cf      = { defs={} expr=v1155[1] }
    ?1      = { defs={} expr=v1156[1] }
    pf      = { defs={} expr=v1157[1] }
    ?3      = { defs={} expr=v1158[1] }
    af      = { defs={} expr=v1159[1] }
    ?5      = { defs={} expr=v1160[1] }
    zf      = { defs={} expr=v1161[1] }
    sf      = { defs={} expr=v1162[1] }
    tf      = { defs={} expr=v1163[1] }
    if      = { defs={} expr=v1164[1] }
    df      = { defs={} expr=v1165[1] }
    of      = { defs={} expr=v1166[1] }
    iopl0   = { defs={} expr=v1167[1] }
    iopl1   = { defs={} expr=v1168[1] }
    nt      = { defs={} expr=v1169[1] }
    ?15     = { defs={} expr=v1170[1] }
    rf      = { defs={} expr=v1171[1] }
    vm      = { defs={} expr=v1172[1] }
    ac      = { defs={} expr=v1173[1] }
    vif     = { defs={} expr=v1174[1] }
    vip     = { defs={} expr=v1175[1] }
    id      = { defs={} expr=v1176[1] }
    ?22     = { defs={} expr=v1177[1] }
    ?23     = { defs={} expr=v1178[1] }
    ?24     = { defs={} expr=v1179[1] }
    ?25     = { defs={} expr=v1180[1] }
    ?26     = { defs={} expr=v1181[1] }
    ?27     = { defs={} expr=v1182[1] }
    ?28     = { defs={} expr=v1183[1] }
    ?29     = { defs={} expr=v1184[1] }
    ?30     = { defs={} expr=v1185[1] }
    ?31     = { defs={} expr=v1186[1] }
    ip      = { defs={0x08048330} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1200[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1201[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1202[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1203[8]))) }
memory:
init mem:
    address = { defs={} expr=0x080496e7[32] }
      value = { defs={} expr=v1203[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496e6[32] }
      value = { defs={} expr=v1202[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496e5[32] }
      value = { defs={} expr=v1201[8] }
      flags = { rdonly }
    address = { defs={0x08048330} expr=0x080496e4[32] }
      value = { defs={} expr=v1200[8] }
      flags = { rdonly }
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048340:xor    ebp, ebp
registers:
    ax      = { v32344 }
    cx      = { v32345 }
    dx      = { v32346 }
    bx      = { v32347 }
    sp      = { v32348 }
    bp      = { 0x0 }
    si      = { v32350 }
    di      = { v32351 }
    es      = { v32352 }
    cs      = { v32353 }
    ss      = { v32354 }
    ds      = { v32355 }
    fs      = { v32356 }
    gs      = { v32357 }
    cf      = { 0x0 }
    ?1      = { v32359 }
    pf      = { 0x1 }
    ?3      = { v32361 }
    af      = { v32418 }
    ?5      = { v32363 }
    zf      = { 0x1 }
    sf      = { 0x0 }
    tf      = { v32366 }
    if      = { v32367 }
    df      = { v32368 }
    of      = { 0x0 }
    iopl0   = { v32370 }
    iopl1   = { v32371 }
    nt      = { v32372 }
    ?15     = { v32373 }
    rf      = { v32374 }
    vm      = { v32375 }
    ac      = { v32376 }
    vif     = { v32377 }
    vip     = { v32378 }
    id      = { v32379 }
    ?22     = { v32380 }
    ?23     = { v32381 }
    ?24     = { v32382 }
    ?25     = { v32383 }
    ?26     = { v32384 }
    ?27     = { v32385 }
    ?28     = { v32386 }
    ?29     = { v32387 }
    ?30     = { v32388 }
    ?31     = { v32389 }
    ip      = { 0x8048342 }
memory:
registers:
    ax      = { defs={} expr=v1260[32] }
    cx      = { defs={} expr=v1261[32] }
    dx      = { defs={} expr=v1262[32] }
    bx      = { defs={} expr=v1263[32] }
    sp      = { defs={} expr=v1264[32] }
    bp      = { defs={0x08048340} expr=0[32] }
    si      = { defs={} expr=v1266[32] }
    di      = { defs={} expr=v1267[32] }
    es      = { defs={} expr=v1268[16] }
    cs      = { defs={} expr=v1269[16] }
    ss      = { defs={} expr=v1270[16] }
    ds      = { defs={} expr=v1271[16] }
    fs      = { defs={} expr=v1272[16] }
    gs      = { defs={} expr=v1273[16] }
    cf      = { defs={0x08048340} expr=0[1] }
    ?1      = { defs={} expr=v1275[1] }
    pf      = { defs={0x08048340} expr=1[1] }
    ?3      = { defs={} expr=v1277[1] }
    af      = { defs={0x08048340} expr=v1367[1] }
    ?5      = { defs={} expr=v1279[1] }
    zf      = { defs={0x08048340} expr=1[1] }
    sf      = { defs={0x08048340} expr=0[1] }
    tf      = { defs={} expr=v1282[1] }
    if      = { defs={} expr=v1283[1] }
    df      = { defs={} expr=v1284[1] }
    of      = { defs={0x08048340} expr=0[1] }
    iopl0   = { defs={} expr=v1286[1] }
    iopl1   = { defs={} expr=v1287[1] }
    nt      = { defs={} expr=v1288[1] }
    ?15     = { defs={} expr=v1289[1] }
    rf      = { defs={} expr=v1290[1] }
    vm      = { defs={} expr=v1291[1] }
    ac      = { defs={} expr=v1292[1] }
    vif     = { defs={} expr=v1293[1] }
    vip     = { defs={} expr=v1294[1] }
    id      = { defs={} expr=v1295[1] }
    ?22     = { defs={} expr=v1296[1] }
    ?23     = { defs={} expr=v1297[1] }
    ?24     = { defs={} expr=v1298[1] }
    ?25     = { defs={} expr=v1299[1] }
    ?26     = { defs={} expr=v1300[1] }
    ?27     = { defs={} expr=v1301[1] }
    ?28     = { defs={} expr=v1302[1] }
    ?29     = { defs={} expr=v1303[1] }
    ?30     = { defs={} expr=v1304[1] }
    ?31     = { defs={} expr=v1305[1] }
    ip      = { defs={0x08048340} expr=0x08048342[32] }
memory:
init mem:
null state
null state
0x8048342:pop    esi
registers:
    ax      = { v32344 }
    cx      = { v32345 }
    dx      = { v32346 }
    bx      = { v32347 }
    sp      = { v32348+0x4 }
    bp      = { 0x0 }
    si      = { v32429 }
    di      = { v32351 }
    es      = { v32352 }
    cs      = { v32353 }
    ss      = { v32354 }
    ds      = { v32355 }
    fs      = { v32356 }
    gs      = { v32357 }
    cf      = { 0x0 }
    ?1      = { v32359 }
    pf      = { 0x1 }
    ?3      = { v32361 }
    af      = { v32418 }
    ?5      = { v32363 }
    zf      = { 0x1 }
    sf      = { 0x0 }
    tf      = { v32366 }
    if      = { v32367 }
    df      = { v32368 }
    of      = { 0x0 }
    iopl0   = { v32370 }
    iopl1   = { v32371 }
    nt      = { v32372 }
    ?15     = { v32373 }
    rf      = { v32374 }
    vm      = { v32375 }
    ac      = { v32376 }
    vif     = { v32377 }
    vip     = { v32378 }
    id      = { v32379 }
    ?22     = { v32380 }
    ?23     = { v32381 }
    ?24     = { v32382 }
    ?25     = { v32383 }
    ?26     = { v32384 }
    ?27     = { v32385 }
    ?28     = { v32386 }
    ?29     = { v32387 }
    ?30     = { v32388 }
    ?31     = { v32389 }
    ip      = { 0x8048343 }
memory:
    address = { v32348 }
      value = { v32429 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={} expr=v1260[32] }
    cx      = { defs={} expr=v1261[32] }
    dx      = { defs={} expr=v1262[32] }
    bx      = { defs={} expr=v1263[32] }
    sp      = { defs={0x08048342} expr=(add[32] v1264[32] 4[32]) }
    bp      = { defs={0x08048340} expr=0[32] }
    si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1389[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1390[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1391[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1392[8]))) }
    di      = { defs={} expr=v1267[32] }
    es      = { defs={} expr=v1268[16] }
    cs      = { defs={} expr=v1269[16] }
    ss      = { defs={} expr=v1270[16] }
    ds      = { defs={} expr=v1271[16] }
    fs      = { defs={} expr=v1272[16] }
    gs      = { defs={} expr=v1273[16] }
    cf      = { defs={0x08048340} expr=0[1] }
    ?1      = { defs={} expr=v1275[1] }
    pf      = { defs={0x08048340} expr=1[1] }
    ?3      = { defs={} expr=v1277[1] }
    af      = { defs={0x08048340} expr=v1367[1] }
    ?5      = { defs={} expr=v1279[1] }
    zf      = { defs={0x08048340} expr=1[1] }
    sf      = { defs={0x08048340} expr=0[1] }
    tf      = { defs={} expr=v1282[1] }
    if      = { defs={} expr=v1283[1] }
    df      = { defs={} expr=v1284[1] }
    of      = { defs={0x08048340} expr=0[1] }
    iopl0   = { defs={} expr=v1286[1] }
    iopl1   = { defs={} expr=v1287[1] }
    nt      = { defs={} expr=v1288[1] }
    ?15     = { defs={} expr=v1289[1] }
    rf      = { defs={} expr=v1290[1] }
    vm      = { defs={} expr=v1291[1] }
    ac      = { defs={} expr=v1292[1] }
    vif     = { defs={} expr=v1293[1] }
    vip     = { defs={} expr=v1294[1] }
    id      = { defs={} expr=v1295[1] }
    ?22     = { defs={} expr=v1296[1] }
    ?23     = { defs={} expr=v1297[1] }
    ?24     = { defs={} expr=v1298[1] }
    ?25     = { defs={} expr=v1299[1] }
    ?26     = { defs={} expr=v1300[1] }
    ?27     = { defs={} expr=v1301[1] }
    ?28     = { defs={} expr=v1302[1] }
    ?29     = { defs={} expr=v1303[1] }
    ?30     = { defs={} expr=v1304[1] }
    ?31     = { defs={} expr=v1305[1] }
    ip      = { defs={0x08048340,0x08048342} expr=0x08048343[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] v1264[32] 3[32]) }
      value = { defs={} expr=v1392[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1264[32] 2[32]) }
      value = { defs={} expr=v1391[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1264[32] 1[32]) }
      value = { defs={} expr=v1390[8] }
      flags = { rdonly }
    address = { defs={0x08048342} expr=v1264[32] }
      value = { defs={} expr=v1389[8] }
      flags = { rdonly }
null state
null state
0x8048343:mov    ecx, esp
registers:
    ax      = { v32344 }
    cx      = { v32348+0x4 }
    dx      = { v32346 }
    bx      = { v32347 }
    sp      = { v32348+0x4 }
    bp      = { 0x0 }
    si      = { v32429 }
    di      = { v32351 }
    es      = { v32352 }
    cs      = { v32353 }
    ss      = { v32354 }
    ds      = { v32355 }
    fs      = { v32356 }
    gs      = { v32357 }
    cf      = { 0x0 }
    ?1      = { v32359 }
    pf      = { 0x1 }
    ?3      = { v32361 }
    af      = { v32418 }
    ?5      = { v32363 }
    zf      = { 0x1 }
    sf      = { 0x0 }
    tf      = { v32366 }
    if      = { v32367 }
    df      = { v32368 }
    of      = { 0x0 }
    iopl0   = { v32370 }
    iopl1   = { v32371 }
    nt      = { v32372 }
    ?15     = { v32373 }
    rf      = { v32374 }
    vm      = { v32375 }
    ac      = { v32376 }
    vif     = { v32377 }
    vip     = { v32378 }
    id      = { v32379 }
    ?22     = { v32380 }
    ?23     = { v32381 }
    ?24     = { v32382 }
    ?25     = { v32383 }
    ?26     = { v32384 }
    ?27     = { v32385 }
    ?28     = { v32386 }
    ?29     = { v32387 }
    ?30     = { v32388 }
    ?31     = { v32389 }
    ip      = { 0x8048345 }
memory:
    address = { v32348 }
      value = { v32429 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={} expr=v1260[32] }
    cx      = { defs={0x08048342,0x08048343} expr=(add[32] v1264[32] 4[32]) }
    dx      = { defs={} expr=v1262[32] }
    bx      = { defs={} expr=v1263[32] }
    sp      = { defs={0x08048342} expr=(add[32] v1264[32] 4[32]) }
    bp      = { defs={0x08048340} expr=0[32] }
    si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1389[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1390[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1391[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1392[8]))) }
    di      = { defs={} expr=v1267[32] }
    es      = { defs={} expr=v1268[16] }
    cs      = { defs={} expr=v1269[16] }
    ss      = { defs={} expr=v1270[16] }
    ds      = { defs={} expr=v1271[16] }
    fs      = { defs={} expr=v1272[16] }
    gs      = { defs={} expr=v1273[16] }
    cf      = { defs={0x08048340} expr=0[1] }
    ?1      = { defs={} expr=v1275[1] }
    pf      = { defs={0x08048340} expr=1[1] }
    ?3      = { defs={} expr=v1277[1] }
    af      = { defs={0x08048340} expr=v1367[1] }
    ?5      = { defs={} expr=v1279[1] }
    zf      = { defs={0x08048340} expr=1[1] }
    sf      = { defs={0x08048340} expr=0[1] }
    tf      = { defs={} expr=v1282[1] }
    if      = { defs={} expr=v1283[1] }
    df      = { defs={} expr=v1284[1] }
    of      = { defs={0x08048340} expr=0[1] }
    iopl0   = { defs={} expr=v1286[1] }
    iopl1   = { defs={} expr=v1287[1] }
    nt      = { defs={} expr=v1288[1] }
    ?15     = { defs={} expr=v1289[1] }
    rf      = { defs={} expr=v1290[1] }
    vm      = { defs={} expr=v1291[1] }
    ac      = { defs={} expr=v1292[1] }
    vif     = { defs={} expr=v1293[1] }
    vip     = { defs={} expr=v1294[1] }
    id      = { defs={} expr=v1295[1] }
    ?22     = { defs={} expr=v1296[1] }
    ?23     = { defs={} expr=v1297[1] }
    ?24     = { defs={} expr=v1298[1] }
    ?25     = { defs={} expr=v1299[1] }
    ?26     = { defs={} expr=v1300[1] }
    ?27     = { defs={} expr=v1301[1] }
    ?28     = { defs={} expr=v1302[1] }
    ?29     = { defs={} expr=v1303[1] }
    ?30     = { defs={} expr=v1304[1] }
    ?31     = { defs={} expr=v1305[1] }
    ip      = { defs={0x08048340,0x08048342,0x08048343} expr=0x08048345[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] v1264[32] 3[32]) }
      value = { defs={} expr=v1392[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1264[32] 2[32]) }
      value = { defs={} expr=v1391[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1264[32] 1[32]) }
      value = { defs={} expr=v1390[8] }
      flags = { rdonly }
    address = { defs={0x08048342} expr=v1264[32] }
      value = { defs={} expr=v1389[8] }
      flags = { rdonly }
null state
null state
0x8048345:and    esp, 0xf0<-0x10>
registers:
    ax      = { v32344 }
    cx      = { v32348+0x4 }
    dx      = { v32346 }
    bx      = { v32347 }
    sp      = { v32442 }
    bp      = { 0x0 }
    si      = { v32429 }
    di      = { v32351 }
    es      = { v32352 }
    cs      = { v32353 }
    ss      = { v32354 }
    ds      = { v32355 }
    fs      = { v32356 }
    gs      = { v32357 }
    cf      = { 0x0 }
    ?1      = { v32359 }
    pf      = { -v32472+0x1 }
    ?3      = { v32361 }
    af      = { v32480 }
    ?5      = { v32363 }
    zf      = { v32477 }
    sf      = { v32475 }
    tf      = { v32366 }
    if      = { v32367 }
    df      = { v32368 }
    of      = { 0x0 }
    iopl0   = { v32370 }
    iopl1   = { v32371 }
    nt      = { v32372 }
    ?15     = { v32373 }
    rf      = { v32374 }
    vm      = { v32375 }
    ac      = { v32376 }
    vif     = { v32377 }
    vip     = { v32378 }
    id      = { v32379 }
    ?22     = { v32380 }
    ?23     = { v32381 }
    ?24     = { v32382 }
    ?25     = { v32383 }
    ?26     = { v32384 }
    ?27     = { v32385 }
    ?28     = { v32386 }
    ?29     = { v32387 }
    ?30     = { v32388 }
    ?31     = { v32389 }
    ip      = { 0x8048348 }
memory:
    address = { v32348 }
      value = { v32429 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={} expr=v1260[32] }
    cx      = { defs={0x08048342,0x08048343} expr=(add[32] v1264[32] 4[32]) }
    dx      = { defs={} expr=v1262[32] }
    bx      = { defs={} expr=v1263[32] }
    sp      = { defs={0x08048342,0x08048345} expr=(bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) }
    bp      = { defs={0x08048340} expr=0[32] }
    si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1389[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1390[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1391[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1392[8]))) }
    di      = { defs={} expr=v1267[32] }
    es      = { defs={} expr=v1268[16] }
    cs      = { defs={} expr=v1269[16] }
    ss      = { defs={} expr=v1270[16] }
    ds      = { defs={} expr=v1271[16] }
    fs      = { defs={} expr=v1272[16] }
    gs      = { defs={} expr=v1273[16] }
    cf      = { defs={0x08048345} expr=0[1] }
    ?1      = { defs={} expr=v1275[1] }
    pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]))))))) }
    ?3      = { defs={} expr=v1277[1] }
    af      = { defs={0x08048345} expr=v1469[1] }
    ?5      = { defs={} expr=v1279[1] }
    zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32])) }
    sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32])) }
    tf      = { defs={} expr=v1282[1] }
    if      = { defs={} expr=v1283[1] }
    df      = { defs={} expr=v1284[1] }
    of      = { defs={0x08048345} expr=0[1] }
    iopl0   = { defs={} expr=v1286[1] }
    iopl1   = { defs={} expr=v1287[1] }
    nt      = { defs={} expr=v1288[1] }
    ?15     = { defs={} expr=v1289[1] }
    rf      = { defs={} expr=v1290[1] }
    vm      = { defs={} expr=v1291[1] }
    ac      = { defs={} expr=v1292[1] }
    vif     = { defs={} expr=v1293[1] }
    vip     = { defs={} expr=v1294[1] }
    id      = { defs={} expr=v1295[1] }
    ?22     = { defs={} expr=v1296[1] }
    ?23     = { defs={} expr=v1297[1] }
    ?24     = { defs={} expr=v1298[1] }
    ?25     = { defs={} expr=v1299[1] }
    ?26     = { defs={} expr=v1300[1] }
    ?27     = { defs={} expr=v1301[1] }
    ?28     = { defs={} expr=v1302[1] }
    ?29     = { defs={} expr=v1303[1] }
    ?30     = { defs={} expr=v1304[1] }
    ?31     = { defs={} expr=v1305[1] }
    ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345} expr=0x08048348[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] v1264[32] 3[32]) }
      value = { defs={} expr=v1392[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1264[32] 2[32]) }
      value = { defs={} expr=v1391[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1264[32] 1[32]) }
      value = { defs={} expr=v1390[8] }
      flags = { rdonly }
    address = { defs={0x08048342} expr=v1264[32] }
      value = { defs={} expr=v1389[8] }
      flags = { rdonly }
null state
null state
0x8048348:push   eax
registers:
    ax      = { v32344 }
    cx      = { v32348+0x4 }
    dx      = { v32346 }
    bx      = { v32347 }
    sp      = { v32442-0x4 }
    bp      = { 0x0 }
    si      = { v32429 }
    di      = { v32351 }
    es      = { v32352 }
    cs      = { v32353 }
    ss      = { v32354 }
    ds      = { v32355 }
    fs      = { v32356 }
    gs      = { v32357 }
    cf      = { 0x0 }
    ?1      = { v32359 }
    pf      = { -v32472+0x1 }
    ?3      = { v32361 }
    af      = { v32480 }
    ?5      = { v32363 }
    zf      = { v32477 }
    sf      = { v32475 }
    tf      = { v32366 }
    if      = { v32367 }
    df      = { v32368 }
    of      = { 0x0 }
    iopl0   = { v32370 }
    iopl1   = { v32371 }
    nt      = { v32372 }
    ?15     = { v32373 }
    rf      = { v32374 }
    vm      = { v32375 }
    ac      = { v32376 }
    vif     = { v32377 }
    vip     = { v32378 }
    id      = { v32379 }
    ?22     = { v32380 }
    ?23     = { v32381 }
    ?24     = { v32382 }
    ?25     = { v32383 }
    ?26     = { v32384 }
    ?27     = { v32385 }
    ?28     = { v32386 }
    ?29     = { v32387 }
    ?30     = { v32388 }
    ?31     = { v32389 }
    ip      = { 0x8048349 }
memory:
    address = { v32348 }
      value = { v32429 }
      flags = { size=4; read-only; clobbered }
    address = { v32442-0x4 }
      value = { v32344 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v1260[32] }
    cx      = { defs={0x08048342,0x08048343} expr=(add[32] v1264[32] 4[32]) }
    dx      = { defs={} expr=v1262[32] }
    bx      = { defs={} expr=v1263[32] }
    sp      = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) }
    bp      = { defs={0x08048340} expr=0[32] }
    si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1389[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1390[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1391[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1392[8]))) }
    di      = { defs={} expr=v1267[32] }
    es      = { defs={} expr=v1268[16] }
    cs      = { defs={} expr=v1269[16] }
    ss      = { defs={} expr=v1270[16] }
    ds      = { defs={} expr=v1271[16] }
    fs      = { defs={} expr=v1272[16] }
    gs      = { defs={} expr=v1273[16] }
    cf      = { defs={0x08048345} expr=0[1] }
    ?1      = { defs={} expr=v1275[1] }
    pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]))))))) }
    ?3      = { defs={} expr=v1277[1] }
    af      = { defs={0x08048345} expr=v1469[1] }
    ?5      = { defs={} expr=v1279[1] }
    zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32])) }
    sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32])) }
    tf      = { defs={} expr=v1282[1] }
    if      = { defs={} expr=v1283[1] }
    df      = { defs={} expr=v1284[1] }
    of      = { defs={0x08048345} expr=0[1] }
    iopl0   = { defs={} expr=v1286[1] }
    iopl1   = { defs={} expr=v1287[1] }
    nt      = { defs={} expr=v1288[1] }
    ?15     = { defs={} expr=v1289[1] }
    rf      = { defs={} expr=v1290[1] }
    vm      = { defs={} expr=v1291[1] }
    ac      = { defs={} expr=v1292[1] }
    vif     = { defs={} expr=v1293[1] }
    vip     = { defs={} expr=v1294[1] }
    id      = { defs={} expr=v1295[1] }
    ?22     = { defs={} expr=v1296[1] }
    ?23     = { defs={} expr=v1297[1] }
    ?24     = { defs={} expr=v1298[1] }
    ?25     = { defs={} expr=v1299[1] }
    ?26     = { defs={} expr=v1300[1] }
    ?27     = { defs={} expr=v1301[1] }
    ?28     = { defs={} expr=v1302[1] }
    ?29     = { defs={} expr=v1303[1] }
    ?30     = { defs={} expr=v1304[1] }
    ?31     = { defs={} expr=v1305[1] }
    ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348} expr=0x08048349[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v1260[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v1260[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v1260[32]) }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v1260[32]) }
      flags = { }
init mem:
    address = { defs={} expr=(add[32] v1264[32] 3[32]) }
      value = { defs={} expr=v1392[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1264[32] 2[32]) }
      value = { defs={} expr=v1391[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1264[32] 1[32]) }
      value = { defs={} expr=v1390[8] }
      flags = { rdonly }
    address = { defs={0x08048342} expr=v1264[32] }
      value = { defs={} expr=v1389[8] }
      flags = { rdonly }
null state
null state
0x8048349:push   esp
registers:
    ax      = { v32344 }
    cx      = { v32348+0x4 }
    dx      = { v32346 }
    bx      = { v32347 }
    sp      = { v32442-0x8 }
    bp      = { 0x0 }
    si      = { v32429 }
    di      = { v32351 }
    es      = { v32352 }
    cs      = { v32353 }
    ss      = { v32354 }
    ds      = { v32355 }
    fs      = { v32356 }
    gs      = { v32357 }
    cf      = { 0x0 }
    ?1      = { v32359 }
    pf      = { -v32472+0x1 }
    ?3      = { v32361 }
    af      = { v32480 }
    ?5      = { v32363 }
    zf      = { v32477 }
    sf      = { v32475 }
    tf      = { v32366 }
    if      = { v32367 }
    df      = { v32368 }
    of      = { 0x0 }
    iopl0   = { v32370 }
    iopl1   = { v32371 }
    nt      = { v32372 }
    ?15     = { v32373 }
    rf      = { v32374 }
    vm      = { v32375 }
    ac      = { v32376 }
    vif     = { v32377 }
    vip     = { v32378 }
    id      = { v32379 }
    ?22     = { v32380 }
    ?23     = { v32381 }
    ?24     = { v32382 }
    ?25     = { v32383 }
    ?26     = { v32384 }
    ?27     = { v32385 }
    ?28     = { v32386 }
    ?29     = { v32387 }
    ?30     = { v32388 }
    ?31     = { v32389 }
    ip      = { 0x804834a }
memory:
    address = { v32348 }
      value = { v32429 }
      flags = { size=4; read-only; clobbered }
    address = { v32442-0x4 }
      value = { v32344 }
      flags = { size=4 }
    address = { v32442-0x8 }
      value = { v32442-0x4 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v1260[32] }
    cx      = { defs={0x08048342,0x08048343} expr=(add[32] v1264[32] 4[32]) }
    dx      = { defs={} expr=v1262[32] }
    bx      = { defs={} expr=v1263[32] }
    sp      = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) }
    bp      = { defs={0x08048340} expr=0[32] }
    si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1389[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1390[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1391[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1392[8]))) }
    di      = { defs={} expr=v1267[32] }
    es      = { defs={} expr=v1268[16] }
    cs      = { defs={} expr=v1269[16] }
    ss      = { defs={} expr=v1270[16] }
    ds      = { defs={} expr=v1271[16] }
    fs      = { defs={} expr=v1272[16] }
    gs      = { defs={} expr=v1273[16] }
    cf      = { defs={0x08048345} expr=0[1] }
    ?1      = { defs={} expr=v1275[1] }
    pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]))))))) }
    ?3      = { defs={} expr=v1277[1] }
    af      = { defs={0x08048345} expr=v1469[1] }
    ?5      = { defs={} expr=v1279[1] }
    zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32])) }
    sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32])) }
    tf      = { defs={} expr=v1282[1] }
    if      = { defs={} expr=v1283[1] }
    df      = { defs={} expr=v1284[1] }
    of      = { defs={0x08048345} expr=0[1] }
    iopl0   = { defs={} expr=v1286[1] }
    iopl1   = { defs={} expr=v1287[1] }
    nt      = { defs={} expr=v1288[1] }
    ?15     = { defs={} expr=v1289[1] }
    rf      = { defs={} expr=v1290[1] }
    vm      = { defs={} expr=v1291[1] }
    ac      = { defs={} expr=v1292[1] }
    vif     = { defs={} expr=v1293[1] }
    vip     = { defs={} expr=v1294[1] }
    id      = { defs={} expr=v1295[1] }
    ?22     = { defs={} expr=v1296[1] }
    ?23     = { defs={} expr=v1297[1] }
    ?24     = { defs={} expr=v1298[1] }
    ?25     = { defs={} expr=v1299[1] }
    ?26     = { defs={} expr=v1300[1] }
    ?27     = { defs={} expr=v1301[1] }
    ?28     = { defs={} expr=v1302[1] }
    ?29     = { defs={} expr=v1303[1] }
    ?30     = { defs={} expr=v1304[1] }
    ?31     = { defs={} expr=v1305[1] }
    ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348,0x08048349} expr=0x0804834a[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32])) }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v1260[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v1260[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v1260[32]) }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v1260[32]) }
      flags = { }
init mem:
    address = { defs={} expr=(add[32] v1264[32] 3[32]) }
      value = { defs={} expr=v1392[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1264[32] 2[32]) }
      value = { defs={} expr=v1391[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1264[32] 1[32]) }
      value = { defs={} expr=v1390[8] }
      flags = { rdonly }
    address = { defs={0x08048342} expr=v1264[32] }
      value = { defs={} expr=v1389[8] }
      flags = { rdonly }
null state
null state
0x804834a:push   edx
registers:
    ax      = { v32344 }
    cx      = { v32348+0x4 }
    dx      = { v32346 }
    bx      = { v32347 }
    sp      = { v32442-0xc }
    bp      = { 0x0 }
    si      = { v32429 }
    di      = { v32351 }
    es      = { v32352 }
    cs      = { v32353 }
    ss      = { v32354 }
    ds      = { v32355 }
    fs      = { v32356 }
    gs      = { v32357 }
    cf      = { 0x0 }
    ?1      = { v32359 }
    pf      = { -v32472+0x1 }
    ?3      = { v32361 }
    af      = { v32480 }
    ?5      = { v32363 }
    zf      = { v32477 }
    sf      = { v32475 }
    tf      = { v32366 }
    if      = { v32367 }
    df      = { v32368 }
    of      = { 0x0 }
    iopl0   = { v32370 }
    iopl1   = { v32371 }
    nt      = { v32372 }
    ?15     = { v32373 }
    rf      = { v32374 }
    vm      = { v32375 }
    ac      = { v32376 }
    vif     = { v32377 }
    vip     = { v32378 }
    id      = { v32379 }
    ?22     = { v32380 }
    ?23     = { v32381 }
    ?24     = { v32382 }
    ?25     = { v32383 }
    ?26     = { v32384 }
    ?27     = { v32385 }
    ?28     = { v32386 }
    ?29     = { v32387 }
    ?30     = { v32388 }
    ?31     = { v32389 }
    ip      = { 0x804834b }
memory:
    address = { v32348 }
      value = { v32429 }
      flags = { size=4; read-only; clobbered }
    address = { v32442-0x4 }
      value = { v32344 }
      flags = { size=4 }
    address = { v32442-0x8 }
      value = { v32442-0x4 }
      flags = { size=4 }
    address = { v32442-0xc }
      value = { v32346 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v1260[32] }
    cx      = { defs={0x08048342,0x08048343} expr=(add[32] v1264[32] 4[32]) }
    dx      = { defs={} expr=v1262[32] }
    bx      = { defs={} expr=v1263[32] }
    sp      = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) }
    bp      = { defs={0x08048340} expr=0[32] }
    si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1389[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1390[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1391[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1392[8]))) }
    di      = { defs={} expr=v1267[32] }
    es      = { defs={} expr=v1268[16] }
    cs      = { defs={} expr=v1269[16] }
    ss      = { defs={} expr=v1270[16] }
    ds      = { defs={} expr=v1271[16] }
    fs      = { defs={} expr=v1272[16] }
    gs      = { defs={} expr=v1273[16] }
    cf      = { defs={0x08048345} expr=0[1] }
    ?1      = { defs={} expr=v1275[1] }
    pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]))))))) }
    ?3      = { defs={} expr=v1277[1] }
    af      = { defs={0x08048345} expr=v1469[1] }
    ?5      = { defs={} expr=v1279[1] }
    zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32])) }
    sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32])) }
    tf      = { defs={} expr=v1282[1] }
    if      = { defs={} expr=v1283[1] }
    df      = { defs={} expr=v1284[1] }
    of      = { defs={0x08048345} expr=0[1] }
    iopl0   = { defs={} expr=v1286[1] }
    iopl1   = { defs={} expr=v1287[1] }
    nt      = { defs={} expr=v1288[1] }
    ?15     = { defs={} expr=v1289[1] }
    rf      = { defs={} expr=v1290[1] }
    vm      = { defs={} expr=v1291[1] }
    ac      = { defs={} expr=v1292[1] }
    vif     = { defs={} expr=v1293[1] }
    vip     = { defs={} expr=v1294[1] }
    id      = { defs={} expr=v1295[1] }
    ?22     = { defs={} expr=v1296[1] }
    ?23     = { defs={} expr=v1297[1] }
    ?24     = { defs={} expr=v1298[1] }
    ?25     = { defs={} expr=v1299[1] }
    ?26     = { defs={} expr=v1300[1] }
    ?27     = { defs={} expr=v1301[1] }
    ?28     = { defs={} expr=v1302[1] }
    ?29     = { defs={} expr=v1303[1] }
    ?30     = { defs={} expr=v1304[1] }
    ?31     = { defs={} expr=v1305[1] }
    ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348,0x08048349,0x0804834a} expr=0x0804834b[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v1262[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v1262[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v1262[32]) }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v1262[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32])) }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v1260[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v1260[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v1260[32]) }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v1260[32]) }
      flags = { }
init mem:
    address = { defs={} expr=(add[32] v1264[32] 3[32]) }
      value = { defs={} expr=v1392[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1264[32] 2[32]) }
      value = { defs={} expr=v1391[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1264[32] 1[32]) }
      value = { defs={} expr=v1390[8] }
      flags = { rdonly }
    address = { defs={0x08048342} expr=v1264[32] }
      value = { defs={} expr=v1389[8] }
      flags = { rdonly }
null state
null state
0x804834b:push   0x08048520<__libc_csu_fini>
registers:
    ax      = { v32344 }
    cx      = { v32348+0x4 }
    dx      = { v32346 }
    bx      = { v32347 }
    sp      = { v32442-0x10 }
    bp      = { 0x0 }
    si      = { v32429 }
    di      = { v32351 }
    es      = { v32352 }
    cs      = { v32353 }
    ss      = { v32354 }
    ds      = { v32355 }
    fs      = { v32356 }
    gs      = { v32357 }
    cf      = { 0x0 }
    ?1      = { v32359 }
    pf      = { -v32472+0x1 }
    ?3      = { v32361 }
    af      = { v32480 }
    ?5      = { v32363 }
    zf      = { v32477 }
    sf      = { v32475 }
    tf      = { v32366 }
    if      = { v32367 }
    df      = { v32368 }
    of      = { 0x0 }
    iopl0   = { v32370 }
    iopl1   = { v32371 }
    nt      = { v32372 }
    ?15     = { v32373 }
    rf      = { v32374 }
    vm      = { v32375 }
    ac      = { v32376 }
    vif     = { v32377 }
    vip     = { v32378 }
    id      = { v32379 }
    ?22     = { v32380 }
    ?23     = { v32381 }
    ?24     = { v32382 }
    ?25     = { v32383 }
    ?26     = { v32384 }
    ?27     = { v32385 }
    ?28     = { v32386 }
    ?29     = { v32387 }
    ?30     = { v32388 }
    ?31     = { v32389 }
    ip      = { 0x8048350 }
memory:
    address = { v32348 }
      value = { v32429 }
      flags = { size=4; read-only; clobbered }
    address = { v32442-0x4 }
      value = { v32344 }
      flags = { size=4 }
    address = { v32442-0x8 }
      value = { v32442-0x4 }
      flags = { size=4 }
    address = { v32442-0xc }
      value = { v32346 }
      flags = { size=4 }
    address = { v32442-0x10 }
      value = { 0x8048520 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v1260[32] }
    cx      = { defs={0x08048342,0x08048343} expr=(add[32] v1264[32] 4[32]) }
    dx      = { defs={} expr=v1262[32] }
    bx      = { defs={} expr=v1263[32] }
    sp      = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
    bp      = { defs={0x08048340} expr=0[32] }
    si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1389[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1390[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1391[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1392[8]))) }
    di      = { defs={} expr=v1267[32] }
    es      = { defs={} expr=v1268[16] }
    cs      = { defs={} expr=v1269[16] }
    ss      = { defs={} expr=v1270[16] }
    ds      = { defs={} expr=v1271[16] }
    fs      = { defs={} expr=v1272[16] }
    gs      = { defs={} expr=v1273[16] }
    cf      = { defs={0x08048345} expr=0[1] }
    ?1      = { defs={} expr=v1275[1] }
    pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]))))))) }
    ?3      = { defs={} expr=v1277[1] }
    af      = { defs={0x08048345} expr=v1469[1] }
    ?5      = { defs={} expr=v1279[1] }
    zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32])) }
    sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32])) }
    tf      = { defs={} expr=v1282[1] }
    if      = { defs={} expr=v1283[1] }
    df      = { defs={} expr=v1284[1] }
    of      = { defs={0x08048345} expr=0[1] }
    iopl0   = { defs={} expr=v1286[1] }
    iopl1   = { defs={} expr=v1287[1] }
    nt      = { defs={} expr=v1288[1] }
    ?15     = { defs={} expr=v1289[1] }
    rf      = { defs={} expr=v1290[1] }
    vm      = { defs={} expr=v1291[1] }
    ac      = { defs={} expr=v1292[1] }
    vif     = { defs={} expr=v1293[1] }
    vip     = { defs={} expr=v1294[1] }
    id      = { defs={} expr=v1295[1] }
    ?22     = { defs={} expr=v1296[1] }
    ?23     = { defs={} expr=v1297[1] }
    ?24     = { defs={} expr=v1298[1] }
    ?25     = { defs={} expr=v1299[1] }
    ?26     = { defs={} expr=v1300[1] }
    ?27     = { defs={} expr=v1301[1] }
    ?28     = { defs={} expr=v1302[1] }
    ?29     = { defs={} expr=v1303[1] }
    ?30     = { defs={} expr=v1304[1] }
    ?31     = { defs={} expr=v1305[1] }
    ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b} expr=0x08048350[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=-123[8] }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=32[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v1262[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v1262[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v1262[32]) }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v1262[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32])) }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v1260[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v1260[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v1260[32]) }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v1260[32]) }
      flags = { }
init mem:
    address = { defs={} expr=(add[32] v1264[32] 3[32]) }
      value = { defs={} expr=v1392[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1264[32] 2[32]) }
      value = { defs={} expr=v1391[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1264[32] 1[32]) }
      value = { defs={} expr=v1390[8] }
      flags = { rdonly }
    address = { defs={0x08048342} expr=v1264[32] }
      value = { defs={} expr=v1389[8] }
      flags = { rdonly }
null state
null state
0x8048350:push   0x080484b0<__libc_csu_init>
registers:
    ax      = { v32344 }
    cx      = { v32348+0x4 }
    dx      = { v32346 }
    bx      = { v32347 }
    sp      = { v32442-0x14 }
    bp      = { 0x0 }
    si      = { v32429 }
    di      = { v32351 }
    es      = { v32352 }
    cs      = { v32353 }
    ss      = { v32354 }
    ds      = { v32355 }
    fs      = { v32356 }
    gs      = { v32357 }
    cf      = { 0x0 }
    ?1      = { v32359 }
    pf      = { -v32472+0x1 }
    ?3      = { v32361 }
    af      = { v32480 }
    ?5      = { v32363 }
    zf      = { v32477 }
    sf      = { v32475 }
    tf      = { v32366 }
    if      = { v32367 }
    df      = { v32368 }
    of      = { 0x0 }
    iopl0   = { v32370 }
    iopl1   = { v32371 }
    nt      = { v32372 }
    ?15     = { v32373 }
    rf      = { v32374 }
    vm      = { v32375 }
    ac      = { v32376 }
    vif     = { v32377 }
    vip     = { v32378 }
    id      = { v32379 }
    ?22     = { v32380 }
    ?23     = { v32381 }
    ?24     = { v32382 }
    ?25     = { v32383 }
    ?26     = { v32384 }
    ?27     = { v32385 }
    ?28     = { v32386 }
    ?29     = { v32387 }
    ?30     = { v32388 }
    ?31     = { v32389 }
    ip      = { 0x8048355 }
memory:
    address = { v32348 }
      value = { v32429 }
      flags = { size=4; read-only; clobbered }
    address = { v32442-0x4 }
      value = { v32344 }
      flags = { size=4 }
    address = { v32442-0x8 }
      value = { v32442-0x4 }
      flags = { size=4 }
    address = { v32442-0xc }
      value = { v32346 }
      flags = { size=4 }
    address = { v32442-0x10 }
      value = { 0x8048520 }
      flags = { size=4 }
    address = { v32442-0x14 }
      value = { 0x80484b0 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v1260[32] }
    cx      = { defs={0x08048342,0x08048343} expr=(add[32] v1264[32] 4[32]) }
    dx      = { defs={} expr=v1262[32] }
    bx      = { defs={} expr=v1263[32] }
    sp      = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
    bp      = { defs={0x08048340} expr=0[32] }
    si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1389[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1390[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1391[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1392[8]))) }
    di      = { defs={} expr=v1267[32] }
    es      = { defs={} expr=v1268[16] }
    cs      = { defs={} expr=v1269[16] }
    ss      = { defs={} expr=v1270[16] }
    ds      = { defs={} expr=v1271[16] }
    fs      = { defs={} expr=v1272[16] }
    gs      = { defs={} expr=v1273[16] }
    cf      = { defs={0x08048345} expr=0[1] }
    ?1      = { defs={} expr=v1275[1] }
    pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]))))))) }
    ?3      = { defs={} expr=v1277[1] }
    af      = { defs={0x08048345} expr=v1469[1] }
    ?5      = { defs={} expr=v1279[1] }
    zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32])) }
    sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32])) }
    tf      = { defs={} expr=v1282[1] }
    if      = { defs={} expr=v1283[1] }
    df      = { defs={} expr=v1284[1] }
    of      = { defs={0x08048345} expr=0[1] }
    iopl0   = { defs={} expr=v1286[1] }
    iopl1   = { defs={} expr=v1287[1] }
    nt      = { defs={} expr=v1288[1] }
    ?15     = { defs={} expr=v1289[1] }
    rf      = { defs={} expr=v1290[1] }
    vm      = { defs={} expr=v1291[1] }
    ac      = { defs={} expr=v1292[1] }
    vif     = { defs={} expr=v1293[1] }
    vip     = { defs={} expr=v1294[1] }
    id      = { defs={} expr=v1295[1] }
    ?22     = { defs={} expr=v1296[1] }
    ?23     = { defs={} expr=v1297[1] }
    ?24     = { defs={} expr=v1298[1] }
    ?25     = { defs={} expr=v1299[1] }
    ?26     = { defs={} expr=v1300[1] }
    ?27     = { defs={} expr=v1301[1] }
    ?28     = { defs={} expr=v1302[1] }
    ?29     = { defs={} expr=v1303[1] }
    ?30     = { defs={} expr=v1304[1] }
    ?31     = { defs={} expr=v1305[1] }
    ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350} expr=0x08048355[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=-124[8] }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=-80[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=-123[8] }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=32[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v1262[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v1262[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v1262[32]) }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v1262[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32])) }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v1260[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v1260[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v1260[32]) }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v1260[32]) }
      flags = { }
init mem:
    address = { defs={} expr=(add[32] v1264[32] 3[32]) }
      value = { defs={} expr=v1392[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1264[32] 2[32]) }
      value = { defs={} expr=v1391[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1264[32] 1[32]) }
      value = { defs={} expr=v1390[8] }
      flags = { rdonly }
    address = { defs={0x08048342} expr=v1264[32] }
      value = { defs={} expr=v1389[8] }
      flags = { rdonly }
null state
null state
0x8048355:push   ecx
registers:
    ax      = { v32344 }
    cx      = { v32348+0x4 }
    dx      = { v32346 }
    bx      = { v32347 }
    sp      = { v32442-0x18 }
    bp      = { 0x0 }
    si      = { v32429 }
    di      = { v32351 }
    es      = { v32352 }
    cs      = { v32353 }
    ss      = { v32354 }
    ds      = { v32355 }
    fs      = { v32356 }
    gs      = { v32357 }
    cf      = { 0x0 }
    ?1      = { v32359 }
    pf      = { -v32472+0x1 }
    ?3      = { v32361 }
    af      = { v32480 }
    ?5      = { v32363 }
    zf      = { v32477 }
    sf      = { v32475 }
    tf      = { v32366 }
    if      = { v32367 }
    df      = { v32368 }
    of      = { 0x0 }
    iopl0   = { v32370 }
    iopl1   = { v32371 }
    nt      = { v32372 }
    ?15     = { v32373 }
    rf      = { v32374 }
    vm      = { v32375 }
    ac      = { v32376 }
    vif     = { v32377 }
    vip     = { v32378 }
    id      = { v32379 }
    ?22     = { v32380 }
    ?23     = { v32381 }
    ?24     = { v32382 }
    ?25     = { v32383 }
    ?26     = { v32384 }
    ?27     = { v32385 }
    ?28     = { v32386 }
    ?29     = { v32387 }
    ?30     = { v32388 }
    ?31     = { v32389 }
    ip      = { 0x8048356 }
memory:
    address = { v32348 }
      value = { v32429 }
      flags = { size=4; read-only; clobbered }
    address = { v32442-0x4 }
      value = { v32344 }
      flags = { size=4 }
    address = { v32442-0x8 }
      value = { v32442-0x4 }
      flags = { size=4 }
    address = { v32442-0xc }
      value = { v32346 }
      flags = { size=4 }
    address = { v32442-0x10 }
      value = { 0x8048520 }
      flags = { size=4 }
    address = { v32442-0x14 }
      value = { 0x80484b0 }
      flags = { size=4 }
    address = { v32442-0x18 }
      value = { v32348+0x4 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v1260[32] }
    cx      = { defs={0x08048342,0x08048343} expr=(add[32] v1264[32] 4[32]) }
    dx      = { defs={} expr=v1262[32] }
    bx      = { defs={} expr=v1263[32] }
    sp      = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
    bp      = { defs={0x08048340} expr=0[32] }
    si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1389[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1390[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1391[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1392[8]))) }
    di      = { defs={} expr=v1267[32] }
    es      = { defs={} expr=v1268[16] }
    cs      = { defs={} expr=v1269[16] }
    ss      = { defs={} expr=v1270[16] }
    ds      = { defs={} expr=v1271[16] }
    fs      = { defs={} expr=v1272[16] }
    gs      = { defs={} expr=v1273[16] }
    cf      = { defs={0x08048345} expr=0[1] }
    ?1      = { defs={} expr=v1275[1] }
    pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]))))))) }
    ?3      = { defs={} expr=v1277[1] }
    af      = { defs={0x08048345} expr=v1469[1] }
    ?5      = { defs={} expr=v1279[1] }
    zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32])) }
    sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32])) }
    tf      = { defs={} expr=v1282[1] }
    if      = { defs={} expr=v1283[1] }
    df      = { defs={} expr=v1284[1] }
    of      = { defs={0x08048345} expr=0[1] }
    iopl0   = { defs={} expr=v1286[1] }
    iopl1   = { defs={} expr=v1287[1] }
    nt      = { defs={} expr=v1288[1] }
    ?15     = { defs={} expr=v1289[1] }
    rf      = { defs={} expr=v1290[1] }
    vm      = { defs={} expr=v1291[1] }
    ac      = { defs={} expr=v1292[1] }
    vif     = { defs={} expr=v1293[1] }
    vip     = { defs={} expr=v1294[1] }
    id      = { defs={} expr=v1295[1] }
    ?22     = { defs={} expr=v1296[1] }
    ?23     = { defs={} expr=v1297[1] }
    ?24     = { defs={} expr=v1298[1] }
    ?25     = { defs={} expr=v1299[1] }
    ?26     = { defs={} expr=v1300[1] }
    ?27     = { defs={} expr=v1301[1] }
    ?28     = { defs={} expr=v1302[1] }
    ?29     = { defs={} expr=v1303[1] }
    ?30     = { defs={} expr=v1304[1] }
    ?31     = { defs={} expr=v1305[1] }
    ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355} expr=0x08048356[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] v1264[32] 4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] v1264[32] 4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] v1264[32] 4[32])) }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] v1264[32] 4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=-124[8] }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=-80[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=-123[8] }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=32[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v1262[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v1262[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v1262[32]) }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v1262[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32])) }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v1260[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v1260[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v1260[32]) }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v1260[32]) }
      flags = { }
init mem:
    address = { defs={} expr=(add[32] v1264[32] 3[32]) }
      value = { defs={} expr=v1392[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1264[32] 2[32]) }
      value = { defs={} expr=v1391[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1264[32] 1[32]) }
      value = { defs={} expr=v1390[8] }
      flags = { rdonly }
    address = { defs={0x08048342} expr=v1264[32] }
      value = { defs={} expr=v1389[8] }
      flags = { rdonly }
null state
null state
0x8048356:push   esi
registers:
    ax      = { v32344 }
    cx      = { v32348+0x4 }
    dx      = { v32346 }
    bx      = { v32347 }
    sp      = { v32442-0x1c }
    bp      = { 0x0 }
    si      = { v32429 }
    di      = { v32351 }
    es      = { v32352 }
    cs      = { v32353 }
    ss      = { v32354 }
    ds      = { v32355 }
    fs      = { v32356 }
    gs      = { v32357 }
    cf      = { 0x0 }
    ?1      = { v32359 }
    pf      = { -v32472+0x1 }
    ?3      = { v32361 }
    af      = { v32480 }
    ?5      = { v32363 }
    zf      = { v32477 }
    sf      = { v32475 }
    tf      = { v32366 }
    if      = { v32367 }
    df      = { v32368 }
    of      = { 0x0 }
    iopl0   = { v32370 }
    iopl1   = { v32371 }
    nt      = { v32372 }
    ?15     = { v32373 }
    rf      = { v32374 }
    vm      = { v32375 }
    ac      = { v32376 }
    vif     = { v32377 }
    vip     = { v32378 }
    id      = { v32379 }
    ?22     = { v32380 }
    ?23     = { v32381 }
    ?24     = { v32382 }
    ?25     = { v32383 }
    ?26     = { v32384 }
    ?27     = { v32385 }
    ?28     = { v32386 }
    ?29     = { v32387 }
    ?30     = { v32388 }
    ?31     = { v32389 }
    ip      = { 0x8048357 }
memory:
    address = { v32348 }
      value = { v32429 }
      flags = { size=4; read-only; clobbered }
    address = { v32442-0x4 }
      value = { v32344 }
      flags = { size=4 }
    address = { v32442-0x8 }
      value = { v32442-0x4 }
      flags = { size=4 }
    address = { v32442-0xc }
      value = { v32346 }
      flags = { size=4 }
    address = { v32442-0x10 }
      value = { 0x8048520 }
      flags = { size=4 }
    address = { v32442-0x14 }
      value = { 0x80484b0 }
      flags = { size=4 }
    address = { v32442-0x18 }
      value = { v32348+0x4 }
      flags = { size=4 }
    address = { v32442-0x1c }
      value = { v32429 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v1260[32] }
    cx      = { defs={0x08048342,0x08048343} expr=(add[32] v1264[32] 4[32]) }
    dx      = { defs={} expr=v1262[32] }
    bx      = { defs={} expr=v1263[32] }
    sp      = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
    bp      = { defs={0x08048340} expr=0[32] }
    si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1389[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1390[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1391[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1392[8]))) }
    di      = { defs={} expr=v1267[32] }
    es      = { defs={} expr=v1268[16] }
    cs      = { defs={} expr=v1269[16] }
    ss      = { defs={} expr=v1270[16] }
    ds      = { defs={} expr=v1271[16] }
    fs      = { defs={} expr=v1272[16] }
    gs      = { defs={} expr=v1273[16] }
    cf      = { defs={0x08048345} expr=0[1] }
    ?1      = { defs={} expr=v1275[1] }
    pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]))))))) }
    ?3      = { defs={} expr=v1277[1] }
    af      = { defs={0x08048345} expr=v1469[1] }
    ?5      = { defs={} expr=v1279[1] }
    zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32])) }
    sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32])) }
    tf      = { defs={} expr=v1282[1] }
    if      = { defs={} expr=v1283[1] }
    df      = { defs={} expr=v1284[1] }
    of      = { defs={0x08048345} expr=0[1] }
    iopl0   = { defs={} expr=v1286[1] }
    iopl1   = { defs={} expr=v1287[1] }
    nt      = { defs={} expr=v1288[1] }
    ?15     = { defs={} expr=v1289[1] }
    rf      = { defs={} expr=v1290[1] }
    vm      = { defs={} expr=v1291[1] }
    ac      = { defs={} expr=v1292[1] }
    vif     = { defs={} expr=v1293[1] }
    vip     = { defs={} expr=v1294[1] }
    id      = { defs={} expr=v1295[1] }
    ?22     = { defs={} expr=v1296[1] }
    ?23     = { defs={} expr=v1297[1] }
    ?24     = { defs={} expr=v1298[1] }
    ?25     = { defs={} expr=v1299[1] }
    ?26     = { defs={} expr=v1300[1] }
    ?27     = { defs={} expr=v1301[1] }
    ?28     = { defs={} expr=v1302[1] }
    ?29     = { defs={} expr=v1303[1] }
    ?30     = { defs={} expr=v1304[1] }
    ?31     = { defs={} expr=v1305[1] }
    ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356} expr=0x08048357[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1389[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1390[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1391[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1392[8])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1389[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1390[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1391[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1392[8])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1389[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1390[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1391[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1392[8])))) }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1389[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1390[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1391[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1392[8])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] v1264[32] 4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] v1264[32] 4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] v1264[32] 4[32])) }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] v1264[32] 4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=-124[8] }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=-80[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=-123[8] }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=32[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v1262[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v1262[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v1262[32]) }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v1262[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32])) }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v1260[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v1260[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v1260[32]) }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v1260[32]) }
      flags = { }
init mem:
    address = { defs={} expr=(add[32] v1264[32] 3[32]) }
      value = { defs={} expr=v1392[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1264[32] 2[32]) }
      value = { defs={} expr=v1391[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1264[32] 1[32]) }
      value = { defs={} expr=v1390[8] }
      flags = { rdonly }
    address = { defs={0x08048342} expr=v1264[32] }
      value = { defs={} expr=v1389[8] }
      flags = { rdonly }
null state
null state
0x8048357:push   0x08048410<main>
registers:
    ax      = { v32344 }
    cx      = { v32348+0x4 }
    dx      = { v32346 }
    bx      = { v32347 }
    sp      = { v32442-0x20 }
    bp      = { 0x0 }
    si      = { v32429 }
    di      = { v32351 }
    es      = { v32352 }
    cs      = { v32353 }
    ss      = { v32354 }
    ds      = { v32355 }
    fs      = { v32356 }
    gs      = { v32357 }
    cf      = { 0x0 }
    ?1      = { v32359 }
    pf      = { -v32472+0x1 }
    ?3      = { v32361 }
    af      = { v32480 }
    ?5      = { v32363 }
    zf      = { v32477 }
    sf      = { v32475 }
    tf      = { v32366 }
    if      = { v32367 }
    df      = { v32368 }
    of      = { 0x0 }
    iopl0   = { v32370 }
    iopl1   = { v32371 }
    nt      = { v32372 }
    ?15     = { v32373 }
    rf      = { v32374 }
    vm      = { v32375 }
    ac      = { v32376 }
    vif     = { v32377 }
    vip     = { v32378 }
    id      = { v32379 }
    ?22     = { v32380 }
    ?23     = { v32381 }
    ?24     = { v32382 }
    ?25     = { v32383 }
    ?26     = { v32384 }
    ?27     = { v32385 }
    ?28     = { v32386 }
    ?29     = { v32387 }
    ?30     = { v32388 }
    ?31     = { v32389 }
    ip      = { 0x804835c }
memory:
    address = { v32348 }
      value = { v32429 }
      flags = { size=4; read-only; clobbered }
    address = { v32442-0x4 }
      value = { v32344 }
      flags = { size=4 }
    address = { v32442-0x8 }
      value = { v32442-0x4 }
      flags = { size=4 }
    address = { v32442-0xc }
      value = { v32346 }
      flags = { size=4 }
    address = { v32442-0x10 }
      value = { 0x8048520 }
      flags = { size=4 }
    address = { v32442-0x14 }
      value = { 0x80484b0 }
      flags = { size=4 }
    address = { v32442-0x18 }
      value = { v32348+0x4 }
      flags = { size=4 }
    address = { v32442-0x1c }
      value = { v32429 }
      flags = { size=4 }
    address = { v32442-0x20 }
      value = { 0x8048410 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v1260[32] }
    cx      = { defs={0x08048342,0x08048343} expr=(add[32] v1264[32] 4[32]) }
    dx      = { defs={} expr=v1262[32] }
    bx      = { defs={} expr=v1263[32] }
    sp      = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
    bp      = { defs={0x08048340} expr=0[32] }
    si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1389[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1390[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1391[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1392[8]))) }
    di      = { defs={} expr=v1267[32] }
    es      = { defs={} expr=v1268[16] }
    cs      = { defs={} expr=v1269[16] }
    ss      = { defs={} expr=v1270[16] }
    ds      = { defs={} expr=v1271[16] }
    fs      = { defs={} expr=v1272[16] }
    gs      = { defs={} expr=v1273[16] }
    cf      = { defs={0x08048345} expr=0[1] }
    ?1      = { defs={} expr=v1275[1] }
    pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]))))))) }
    ?3      = { defs={} expr=v1277[1] }
    af      = { defs={0x08048345} expr=v1469[1] }
    ?5      = { defs={} expr=v1279[1] }
    zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32])) }
    sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32])) }
    tf      = { defs={} expr=v1282[1] }
    if      = { defs={} expr=v1283[1] }
    df      = { defs={} expr=v1284[1] }
    of      = { defs={0x08048345} expr=0[1] }
    iopl0   = { defs={} expr=v1286[1] }
    iopl1   = { defs={} expr=v1287[1] }
    nt      = { defs={} expr=v1288[1] }
    ?15     = { defs={} expr=v1289[1] }
    rf      = { defs={} expr=v1290[1] }
    vm      = { defs={} expr=v1291[1] }
    ac      = { defs={} expr=v1292[1] }
    vif     = { defs={} expr=v1293[1] }
    vip     = { defs={} expr=v1294[1] }
    id      = { defs={} expr=v1295[1] }
    ?22     = { defs={} expr=v1296[1] }
    ?23     = { defs={} expr=v1297[1] }
    ?24     = { defs={} expr=v1298[1] }
    ?25     = { defs={} expr=v1299[1] }
    ?26     = { defs={} expr=v1300[1] }
    ?27     = { defs={} expr=v1301[1] }
    ?28     = { defs={} expr=v1302[1] }
    ?29     = { defs={} expr=v1303[1] }
    ?30     = { defs={} expr=v1304[1] }
    ?31     = { defs={} expr=v1305[1] }
    ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357} expr=0x0804835c[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=-124[8] }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=16[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1389[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1390[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1391[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1392[8])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1389[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1390[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1391[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1392[8])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1389[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1390[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1391[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1392[8])))) }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1389[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1390[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1391[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1392[8])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] v1264[32] 4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] v1264[32] 4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] v1264[32] 4[32])) }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] v1264[32] 4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=-124[8] }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=-80[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=-123[8] }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=32[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v1262[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v1262[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v1262[32]) }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v1262[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32])) }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v1260[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v1260[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v1260[32]) }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v1260[32]) }
      flags = { }
init mem:
    address = { defs={} expr=(add[32] v1264[32] 3[32]) }
      value = { defs={} expr=v1392[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1264[32] 2[32]) }
      value = { defs={} expr=v1391[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1264[32] 1[32]) }
      value = { defs={} expr=v1390[8] }
      flags = { rdonly }
    address = { defs={0x08048342} expr=v1264[32] }
      value = { defs={} expr=v1389[8] }
      flags = { rdonly }
null state
null state
0x804835c:call   0x08048310<__libc_start_main@plt>
registers:
    ax      = { v32344 }
    cx      = { v32348+0x4 }
    dx      = { v32346 }
    bx      = { v32347 }
    sp      = { v32442-0x24 }
    bp      = { 0x0 }
    si      = { v32429 }
    di      = { v32351 }
    es      = { v32352 }
    cs      = { v32353 }
    ss      = { v32354 }
    ds      = { v32355 }
    fs      = { v32356 }
    gs      = { v32357 }
    cf      = { 0x0 }
    ?1      = { v32359 }
    pf      = { -v32472+0x1 }
    ?3      = { v32361 }
    af      = { v32480 }
    ?5      = { v32363 }
    zf      = { v32477 }
    sf      = { v32475 }
    tf      = { v32366 }
    if      = { v32367 }
    df      = { v32368 }
    of      = { 0x0 }
    iopl0   = { v32370 }
    iopl1   = { v32371 }
    nt      = { v32372 }
    ?15     = { v32373 }
    rf      = { v32374 }
    vm      = { v32375 }
    ac      = { v32376 }
    vif     = { v32377 }
    vip     = { v32378 }
    id      = { v32379 }
    ?22     = { v32380 }
    ?23     = { v32381 }
    ?24     = { v32382 }
    ?25     = { v32383 }
    ?26     = { v32384 }
    ?27     = { v32385 }
    ?28     = { v32386 }
    ?29     = { v32387 }
    ?30     = { v32388 }
    ?31     = { v32389 }
    ip      = { 0x8048310 }
memory:
    address = { v32348 }
      value = { v32429 }
      flags = { size=4; read-only; clobbered }
    address = { v32442-0x4 }
      value = { v32344 }
      flags = { size=4 }
    address = { v32442-0x8 }
      value = { v32442-0x4 }
      flags = { size=4 }
    address = { v32442-0xc }
      value = { v32346 }
      flags = { size=4 }
    address = { v32442-0x10 }
      value = { 0x8048520 }
      flags = { size=4 }
    address = { v32442-0x14 }
      value = { 0x80484b0 }
      flags = { size=4 }
    address = { v32442-0x18 }
      value = { v32348+0x4 }
      flags = { size=4 }
    address = { v32442-0x1c }
      value = { v32429 }
      flags = { size=4 }
    address = { v32442-0x20 }
      value = { 0x8048410 }
      flags = { size=4 }
    address = { v32442-0x24 }
      value = { 0x8048361 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v1260[32] }
    cx      = { defs={0x08048342,0x08048343} expr=(add[32] v1264[32] 4[32]) }
    dx      = { defs={} expr=v1262[32] }
    bx      = { defs={} expr=v1263[32] }
    sp      = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357,0x0804835c} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
    bp      = { defs={0x08048340} expr=0[32] }
    si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1389[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1390[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1391[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1392[8]))) }
    di      = { defs={} expr=v1267[32] }
    es      = { defs={} expr=v1268[16] }
    cs      = { defs={} expr=v1269[16] }
    ss      = { defs={} expr=v1270[16] }
    ds      = { defs={} expr=v1271[16] }
    fs      = { defs={} expr=v1272[16] }
    gs      = { defs={} expr=v1273[16] }
    cf      = { defs={0x08048345} expr=0[1] }
    ?1      = { defs={} expr=v1275[1] }
    pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]))))))) }
    ?3      = { defs={} expr=v1277[1] }
    af      = { defs={0x08048345} expr=v1469[1] }
    ?5      = { defs={} expr=v1279[1] }
    zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32])) }
    sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32])) }
    tf      = { defs={} expr=v1282[1] }
    if      = { defs={} expr=v1283[1] }
    df      = { defs={} expr=v1284[1] }
    of      = { defs={0x08048345} expr=0[1] }
    iopl0   = { defs={} expr=v1286[1] }
    iopl1   = { defs={} expr=v1287[1] }
    nt      = { defs={} expr=v1288[1] }
    ?15     = { defs={} expr=v1289[1] }
    rf      = { defs={} expr=v1290[1] }
    vm      = { defs={} expr=v1291[1] }
    ac      = { defs={} expr=v1292[1] }
    vif     = { defs={} expr=v1293[1] }
    vip     = { defs={} expr=v1294[1] }
    id      = { defs={} expr=v1295[1] }
    ?22     = { defs={} expr=v1296[1] }
    ?23     = { defs={} expr=v1297[1] }
    ?24     = { defs={} expr=v1298[1] }
    ?25     = { defs={} expr=v1299[1] }
    ?26     = { defs={} expr=v1300[1] }
    ?27     = { defs={} expr=v1301[1] }
    ?28     = { defs={} expr=v1302[1] }
    ?29     = { defs={} expr=v1303[1] }
    ?30     = { defs={} expr=v1304[1] }
    ?31     = { defs={} expr=v1305[1] }
    ip      = { defs={0x0804835c} expr=0x08048310[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=-125[8] }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357,0x0804835c} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=97[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=-124[8] }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=16[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1389[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1390[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1391[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1392[8])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1389[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1390[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1391[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1392[8])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1389[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1390[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1391[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1392[8])))) }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1389[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1390[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1391[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1392[8])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] v1264[32] 4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] v1264[32] 4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] v1264[32] 4[32])) }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] v1264[32] 4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=-124[8] }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=-80[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=-123[8] }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=32[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v1262[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v1262[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v1262[32]) }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v1262[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32])) }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v1260[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v1260[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v1260[32]) }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v1264[32] 4[32]) -16[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v1260[32]) }
      flags = { }
init mem:
    address = { defs={} expr=(add[32] v1264[32] 3[32]) }
      value = { defs={} expr=v1392[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1264[32] 2[32]) }
      value = { defs={} expr=v1391[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1264[32] 1[32]) }
      value = { defs={} expr=v1390[8] }
      flags = { rdonly }
    address = { defs={0x08048342} expr=v1264[32] }
      value = { defs={} expr=v1389[8] }
      flags = { rdonly }
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048361:hlt    
registers:
    ax      = { v32613 }
    cx      = { v32614 }
    dx      = { v32615 }
    bx      = { v32616 }
    sp      = { v32617 }
    bp      = { v32618 }
    si      = { v32619 }
    di      = { v32620 }
    es      = { v32621 }
    cs      = { v32622 }
    ss      = { v32623 }
    ds      = { v32624 }
    fs      = { v32625 }
    gs      = { v32626 }
    cf      = { v32627 }
    ?1      = { v32628 }
    pf      = { v32629 }
    ?3      = { v32630 }
    af      = { v32631 }
    ?5      = { v32632 }
    zf      = { v32633 }
    sf      = { v32634 }
    tf      = { v32635 }
    if      = { v32636 }
    df      = { v32637 }
    of      = { v32638 }
    iopl0   = { v32639 }
    iopl1   = { v32640 }
    nt      = { v32641 }
    ?15     = { v32642 }
    rf      = { v32643 }
    vm      = { v32644 }
    ac      = { v32645 }
    vif     = { v32646 }
    vip     = { v32647 }
    id      = { v32648 }
    ?22     = { v32649 }
    ?23     = { v32650 }
    ?24     = { v32651 }
    ?25     = { v32652 }
    ?26     = { v32653 }
    ?27     = { v32654 }
    ?28     = { v32655 }
    ?29     = { v32656 }
    ?30     = { v32657 }
    ?31     = { v32658 }
    ip      = { 0x8048361 }
memory:
registers:
    ax      = { defs={} expr=v1674[32] }
    cx      = { defs={} expr=v1675[32] }
    dx      = { defs={} expr=v1676[32] }
    bx      = { defs={} expr=v1677[32] }
    sp      = { defs={} expr=v1678[32] }
    bp      = { defs={} expr=v1679[32] }
    si      = { defs={} expr=v1680[32] }
    di      = { defs={} expr=v1681[32] }
    es      = { defs={} expr=v1682[16] }
    cs      = { defs={} expr=v1683[16] }
    ss      = { defs={} expr=v1684[16] }
    ds      = { defs={} expr=v1685[16] }
    fs      = { defs={} expr=v1686[16] }
    gs      = { defs={} expr=v1687[16] }
    cf      = { defs={} expr=v1688[1] }
    ?1      = { defs={} expr=v1689[1] }
    pf      = { defs={} expr=v1690[1] }
    ?3      = { defs={} expr=v1691[1] }
    af      = { defs={} expr=v1692[1] }
    ?5      = { defs={} expr=v1693[1] }
    zf      = { defs={} expr=v1694[1] }
    sf      = { defs={} expr=v1695[1] }
    tf      = { defs={} expr=v1696[1] }
    if      = { defs={} expr=v1697[1] }
    df      = { defs={} expr=v1698[1] }
    of      = { defs={} expr=v1699[1] }
    iopl0   = { defs={} expr=v1700[1] }
    iopl1   = { defs={} expr=v1701[1] }
    nt      = { defs={} expr=v1702[1] }
    ?15     = { defs={} expr=v1703[1] }
    rf      = { defs={} expr=v1704[1] }
    vm      = { defs={} expr=v1705[1] }
    ac      = { defs={} expr=v1706[1] }
    vif     = { defs={} expr=v1707[1] }
    vip     = { defs={} expr=v1708[1] }
    id      = { defs={} expr=v1709[1] }
    ?22     = { defs={} expr=v1710[1] }
    ?23     = { defs={} expr=v1711[1] }
    ?24     = { defs={} expr=v1712[1] }
    ?25     = { defs={} expr=v1713[1] }
    ?26     = { defs={} expr=v1714[1] }
    ?27     = { defs={} expr=v1715[1] }
    ?28     = { defs={} expr=v1716[1] }
    ?29     = { defs={} expr=v1717[1] }
    ?30     = { defs={} expr=v1718[1] }
    ?31     = { defs={} expr=v1719[1] }
    ip      = { defs={0x08048361} expr=0x08048361[32] }
memory:
init mem:
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048364:push   ebp
registers:
    ax      = { v32712 }
    cx      = { v32713 }
    dx      = { v32714 }
    bx      = { v32715 }
    sp      = { v32716-0x4 }
    bp      = { v32717 }
    si      = { v32718 }
    di      = { v32719 }
    es      = { v32720 }
    cs      = { v32721 }
    ss      = { v32722 }
    ds      = { v32723 }
    fs      = { v32724 }
    gs      = { v32725 }
    cf      = { v32726 }
    ?1      = { v32727 }
    pf      = { v32728 }
    ?3      = { v32729 }
    af      = { v32730 }
    ?5      = { v32731 }
    zf      = { v32732 }
    sf      = { v32733 }
    tf      = { v32734 }
    if      = { v32735 }
    df      = { v32736 }
    of      = { v32737 }
    iopl0   = { v32738 }
    iopl1   = { v32739 }
    nt      = { v32740 }
    ?15     = { v32741 }
    rf      = { v32742 }
    vm      = { v32743 }
    ac      = { v32744 }
    vif     = { v32745 }
    vip     = { v32746 }
    id      = { v32747 }
    ?22     = { v32748 }
    ?23     = { v32749 }
    ?24     = { v32750 }
    ?25     = { v32751 }
    ?26     = { v32752 }
    ?27     = { v32753 }
    ?28     = { v32754 }
    ?29     = { v32755 }
    ?30     = { v32756 }
    ?31     = { v32757 }
    ip      = { 0x8048365 }
memory:
    address = { v32716-0x4 }
      value = { v32717 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v1779[32] }
    cx      = { defs={} expr=v1780[32] }
    dx      = { defs={} expr=v1781[32] }
    bx      = { defs={} expr=v1782[32] }
    sp      = { defs={0x08048364} expr=(add[32] v1783[32] -4[32]) }
    bp      = { defs={} expr=v1784[32] }
    si      = { defs={} expr=v1785[32] }
    di      = { defs={} expr=v1786[32] }
    es      = { defs={} expr=v1787[16] }
    cs      = { defs={} expr=v1788[16] }
    ss      = { defs={} expr=v1789[16] }
    ds      = { defs={} expr=v1790[16] }
    fs      = { defs={} expr=v1791[16] }
    gs      = { defs={} expr=v1792[16] }
    cf      = { defs={} expr=v1793[1] }
    ?1      = { defs={} expr=v1794[1] }
    pf      = { defs={} expr=v1795[1] }
    ?3      = { defs={} expr=v1796[1] }
    af      = { defs={} expr=v1797[1] }
    ?5      = { defs={} expr=v1798[1] }
    zf      = { defs={} expr=v1799[1] }
    sf      = { defs={} expr=v1800[1] }
    tf      = { defs={} expr=v1801[1] }
    if      = { defs={} expr=v1802[1] }
    df      = { defs={} expr=v1803[1] }
    of      = { defs={} expr=v1804[1] }
    iopl0   = { defs={} expr=v1805[1] }
    iopl1   = { defs={} expr=v1806[1] }
    nt      = { defs={} expr=v1807[1] }
    ?15     = { defs={} expr=v1808[1] }
    rf      = { defs={} expr=v1809[1] }
    vm      = { defs={} expr=v1810[1] }
    ac      = { defs={} expr=v1811[1] }
    vif     = { defs={} expr=v1812[1] }
    vip     = { defs={} expr=v1813[1] }
    id      = { defs={} expr=v1814[1] }
    ?22     = { defs={} expr=v1815[1] }
    ?23     = { defs={} expr=v1816[1] }
    ?24     = { defs={} expr=v1817[1] }
    ?25     = { defs={} expr=v1818[1] }
    ?26     = { defs={} expr=v1819[1] }
    ?27     = { defs={} expr=v1820[1] }
    ?28     = { defs={} expr=v1821[1] }
    ?29     = { defs={} expr=v1822[1] }
    ?30     = { defs={} expr=v1823[1] }
    ?31     = { defs={} expr=v1824[1] }
    ip      = { defs={0x08048364} expr=0x08048365[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v1783[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v1784[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v1783[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v1784[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v1783[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v1784[32]) }
      flags = { }
    address = { defs={0x08048364} expr=(add[32] v1783[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v1784[32]) }
      flags = { }
init mem:
null state
null state
0x8048365:mov    ebp, esp
registers:
    ax      = { v32712 }
    cx      = { v32713 }
    dx      = { v32714 }
    bx      = { v32715 }
    sp      = { v32716-0x4 }
    bp      = { v32716-0x4 }
    si      = { v32718 }
    di      = { v32719 }
    es      = { v32720 }
    cs      = { v32721 }
    ss      = { v32722 }
    ds      = { v32723 }
    fs      = { v32724 }
    gs      = { v32725 }
    cf      = { v32726 }
    ?1      = { v32727 }
    pf      = { v32728 }
    ?3      = { v32729 }
    af      = { v32730 }
    ?5      = { v32731 }
    zf      = { v32732 }
    sf      = { v32733 }
    tf      = { v32734 }
    if      = { v32735 }
    df      = { v32736 }
    of      = { v32737 }
    iopl0   = { v32738 }
    iopl1   = { v32739 }
    nt      = { v32740 }
    ?15     = { v32741 }
    rf      = { v32742 }
    vm      = { v32743 }
    ac      = { v32744 }
    vif     = { v32745 }
    vip     = { v32746 }
    id      = { v32747 }
    ?22     = { v32748 }
    ?23     = { v32749 }
    ?24     = { v32750 }
    ?25     = { v32751 }
    ?26     = { v32752 }
    ?27     = { v32753 }
    ?28     = { v32754 }
    ?29     = { v32755 }
    ?30     = { v32756 }
    ?31     = { v32757 }
    ip      = { 0x8048367 }
memory:
    address = { v32716-0x4 }
      value = { v32717 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v1779[32] }
    cx      = { defs={} expr=v1780[32] }
    dx      = { defs={} expr=v1781[32] }
    bx      = { defs={} expr=v1782[32] }
    sp      = { defs={0x08048364} expr=(add[32] v1783[32] -4[32]) }
    bp      = { defs={0x08048364,0x08048365} expr=(add[32] v1783[32] -4[32]) }
    si      = { defs={} expr=v1785[32] }
    di      = { defs={} expr=v1786[32] }
    es      = { defs={} expr=v1787[16] }
    cs      = { defs={} expr=v1788[16] }
    ss      = { defs={} expr=v1789[16] }
    ds      = { defs={} expr=v1790[16] }
    fs      = { defs={} expr=v1791[16] }
    gs      = { defs={} expr=v1792[16] }
    cf      = { defs={} expr=v1793[1] }
    ?1      = { defs={} expr=v1794[1] }
    pf      = { defs={} expr=v1795[1] }
    ?3      = { defs={} expr=v1796[1] }
    af      = { defs={} expr=v1797[1] }
    ?5      = { defs={} expr=v1798[1] }
    zf      = { defs={} expr=v1799[1] }
    sf      = { defs={} expr=v1800[1] }
    tf      = { defs={} expr=v1801[1] }
    if      = { defs={} expr=v1802[1] }
    df      = { defs={} expr=v1803[1] }
    of      = { defs={} expr=v1804[1] }
    iopl0   = { defs={} expr=v1805[1] }
    iopl1   = { defs={} expr=v1806[1] }
    nt      = { defs={} expr=v1807[1] }
    ?15     = { defs={} expr=v1808[1] }
    rf      = { defs={} expr=v1809[1] }
    vm      = { defs={} expr=v1810[1] }
    ac      = { defs={} expr=v1811[1] }
    vif     = { defs={} expr=v1812[1] }
    vip     = { defs={} expr=v1813[1] }
    id      = { defs={} expr=v1814[1] }
    ?22     = { defs={} expr=v1815[1] }
    ?23     = { defs={} expr=v1816[1] }
    ?24     = { defs={} expr=v1817[1] }
    ?25     = { defs={} expr=v1818[1] }
    ?26     = { defs={} expr=v1819[1] }
    ?27     = { defs={} expr=v1820[1] }
    ?28     = { defs={} expr=v1821[1] }
    ?29     = { defs={} expr=v1822[1] }
    ?30     = { defs={} expr=v1823[1] }
    ?31     = { defs={} expr=v1824[1] }
    ip      = { defs={0x08048364,0x08048365} expr=0x08048367[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v1783[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v1784[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v1783[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v1784[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v1783[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v1784[32]) }
      flags = { }
    address = { defs={0x08048364} expr=(add[32] v1783[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v1784[32]) }
      flags = { }
init mem:
null state
null state
0x8048367:push   ebx
registers:
    ax      = { v32712 }
    cx      = { v32713 }
    dx      = { v32714 }
    bx      = { v32715 }
    sp      = { v32716-0x8 }
    bp      = { v32716-0x4 }
    si      = { v32718 }
    di      = { v32719 }
    es      = { v32720 }
    cs      = { v32721 }
    ss      = { v32722 }
    ds      = { v32723 }
    fs      = { v32724 }
    gs      = { v32725 }
    cf      = { v32726 }
    ?1      = { v32727 }
    pf      = { v32728 }
    ?3      = { v32729 }
    af      = { v32730 }
    ?5      = { v32731 }
    zf      = { v32732 }
    sf      = { v32733 }
    tf      = { v32734 }
    if      = { v32735 }
    df      = { v32736 }
    of      = { v32737 }
    iopl0   = { v32738 }
    iopl1   = { v32739 }
    nt      = { v32740 }
    ?15     = { v32741 }
    rf      = { v32742 }
    vm      = { v32743 }
    ac      = { v32744 }
    vif     = { v32745 }
    vip     = { v32746 }
    id      = { v32747 }
    ?22     = { v32748 }
    ?23     = { v32749 }
    ?24     = { v32750 }
    ?25     = { v32751 }
    ?26     = { v32752 }
    ?27     = { v32753 }
    ?28     = { v32754 }
    ?29     = { v32755 }
    ?30     = { v32756 }
    ?31     = { v32757 }
    ip      = { 0x8048368 }
memory:
    address = { v32716-0x4 }
      value = { v32717 }
      flags = { size=4 }
    address = { v32716-0x8 }
      value = { v32715 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v1779[32] }
    cx      = { defs={} expr=v1780[32] }
    dx      = { defs={} expr=v1781[32] }
    bx      = { defs={} expr=v1782[32] }
    sp      = { defs={0x08048364,0x08048367} expr=(add[32] (add[32] v1783[32] -4[32]) -4[32]) }
    bp      = { defs={0x08048364,0x08048365} expr=(add[32] v1783[32] -4[32]) }
    si      = { defs={} expr=v1785[32] }
    di      = { defs={} expr=v1786[32] }
    es      = { defs={} expr=v1787[16] }
    cs      = { defs={} expr=v1788[16] }
    ss      = { defs={} expr=v1789[16] }
    ds      = { defs={} expr=v1790[16] }
    fs      = { defs={} expr=v1791[16] }
    gs      = { defs={} expr=v1792[16] }
    cf      = { defs={} expr=v1793[1] }
    ?1      = { defs={} expr=v1794[1] }
    pf      = { defs={} expr=v1795[1] }
    ?3      = { defs={} expr=v1796[1] }
    af      = { defs={} expr=v1797[1] }
    ?5      = { defs={} expr=v1798[1] }
    zf      = { defs={} expr=v1799[1] }
    sf      = { defs={} expr=v1800[1] }
    tf      = { defs={} expr=v1801[1] }
    if      = { defs={} expr=v1802[1] }
    df      = { defs={} expr=v1803[1] }
    of      = { defs={} expr=v1804[1] }
    iopl0   = { defs={} expr=v1805[1] }
    iopl1   = { defs={} expr=v1806[1] }
    nt      = { defs={} expr=v1807[1] }
    ?15     = { defs={} expr=v1808[1] }
    rf      = { defs={} expr=v1809[1] }
    vm      = { defs={} expr=v1810[1] }
    ac      = { defs={} expr=v1811[1] }
    vif     = { defs={} expr=v1812[1] }
    vip     = { defs={} expr=v1813[1] }
    id      = { defs={} expr=v1814[1] }
    ?22     = { defs={} expr=v1815[1] }
    ?23     = { defs={} expr=v1816[1] }
    ?24     = { defs={} expr=v1817[1] }
    ?25     = { defs={} expr=v1818[1] }
    ?26     = { defs={} expr=v1819[1] }
    ?27     = { defs={} expr=v1820[1] }
    ?28     = { defs={} expr=v1821[1] }
    ?29     = { defs={} expr=v1822[1] }
    ?30     = { defs={} expr=v1823[1] }
    ?31     = { defs={} expr=v1824[1] }
    ip      = { defs={0x08048364,0x08048365,0x08048367} expr=0x08048368[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] v1783[32] -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v1782[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v1783[32] -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v1782[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v1783[32] -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v1782[32]) }
      flags = { }
    address = { defs={0x08048364,0x08048367} expr=(add[32] (add[32] v1783[32] -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v1782[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v1783[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v1784[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v1783[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v1784[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v1783[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v1784[32]) }
      flags = { }
    address = { defs={0x08048364} expr=(add[32] v1783[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v1784[32]) }
      flags = { }
init mem:
null state
null state
0x8048368:push   ecx
registers:
    ax      = { v32712 }
    cx      = { v32713 }
    dx      = { v32714 }
    bx      = { v32715 }
    sp      = { v32716-0xc }
    bp      = { v32716-0x4 }
    si      = { v32718 }
    di      = { v32719 }
    es      = { v32720 }
    cs      = { v32721 }
    ss      = { v32722 }
    ds      = { v32723 }
    fs      = { v32724 }
    gs      = { v32725 }
    cf      = { v32726 }
    ?1      = { v32727 }
    pf      = { v32728 }
    ?3      = { v32729 }
    af      = { v32730 }
    ?5      = { v32731 }
    zf      = { v32732 }
    sf      = { v32733 }
    tf      = { v32734 }
    if      = { v32735 }
    df      = { v32736 }
    of      = { v32737 }
    iopl0   = { v32738 }
    iopl1   = { v32739 }
    nt      = { v32740 }
    ?15     = { v32741 }
    rf      = { v32742 }
    vm      = { v32743 }
    ac      = { v32744 }
    vif     = { v32745 }
    vip     = { v32746 }
    id      = { v32747 }
    ?22     = { v32748 }
    ?23     = { v32749 }
    ?24     = { v32750 }
    ?25     = { v32751 }
    ?26     = { v32752 }
    ?27     = { v32753 }
    ?28     = { v32754 }
    ?29     = { v32755 }
    ?30     = { v32756 }
    ?31     = { v32757 }
    ip      = { 0x8048369 }
memory:
    address = { v32716-0x4 }
      value = { v32717 }
      flags = { size=4 }
    address = { v32716-0x8 }
      value = { v32715 }
      flags = { size=4 }
    address = { v32716-0xc }
      value = { v32713 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v1779[32] }
    cx      = { defs={} expr=v1780[32] }
    dx      = { defs={} expr=v1781[32] }
    bx      = { defs={} expr=v1782[32] }
    sp      = { defs={0x08048364,0x08048367,0x08048368} expr=(add[32] (add[32] (add[32] v1783[32] -4[32]) -4[32]) -4[32]) }
    bp      = { defs={0x08048364,0x08048365} expr=(add[32] v1783[32] -4[32]) }
    si      = { defs={} expr=v1785[32] }
    di      = { defs={} expr=v1786[32] }
    es      = { defs={} expr=v1787[16] }
    cs      = { defs={} expr=v1788[16] }
    ss      = { defs={} expr=v1789[16] }
    ds      = { defs={} expr=v1790[16] }
    fs      = { defs={} expr=v1791[16] }
    gs      = { defs={} expr=v1792[16] }
    cf      = { defs={} expr=v1793[1] }
    ?1      = { defs={} expr=v1794[1] }
    pf      = { defs={} expr=v1795[1] }
    ?3      = { defs={} expr=v1796[1] }
    af      = { defs={} expr=v1797[1] }
    ?5      = { defs={} expr=v1798[1] }
    zf      = { defs={} expr=v1799[1] }
    sf      = { defs={} expr=v1800[1] }
    tf      = { defs={} expr=v1801[1] }
    if      = { defs={} expr=v1802[1] }
    df      = { defs={} expr=v1803[1] }
    of      = { defs={} expr=v1804[1] }
    iopl0   = { defs={} expr=v1805[1] }
    iopl1   = { defs={} expr=v1806[1] }
    nt      = { defs={} expr=v1807[1] }
    ?15     = { defs={} expr=v1808[1] }
    rf      = { defs={} expr=v1809[1] }
    vm      = { defs={} expr=v1810[1] }
    ac      = { defs={} expr=v1811[1] }
    vif     = { defs={} expr=v1812[1] }
    vip     = { defs={} expr=v1813[1] }
    id      = { defs={} expr=v1814[1] }
    ?22     = { defs={} expr=v1815[1] }
    ?23     = { defs={} expr=v1816[1] }
    ?24     = { defs={} expr=v1817[1] }
    ?25     = { defs={} expr=v1818[1] }
    ?26     = { defs={} expr=v1819[1] }
    ?27     = { defs={} expr=v1820[1] }
    ?28     = { defs={} expr=v1821[1] }
    ?29     = { defs={} expr=v1822[1] }
    ?30     = { defs={} expr=v1823[1] }
    ?31     = { defs={} expr=v1824[1] }
    ip      = { defs={0x08048364,0x08048365,0x08048367,0x08048368} expr=0x08048369[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v1783[32] -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v1780[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v1783[32] -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v1780[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v1783[32] -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v1780[32]) }
      flags = { }
    address = { defs={0x08048364,0x08048367,0x08048368} expr=(add[32] (add[32] (add[32] v1783[32] -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v1780[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v1783[32] -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v1782[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v1783[32] -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v1782[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v1783[32] -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v1782[32]) }
      flags = { }
    address = { defs={0x08048364,0x08048367} expr=(add[32] (add[32] v1783[32] -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v1782[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v1783[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v1784[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v1783[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v1784[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v1783[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v1784[32]) }
      flags = { }
    address = { defs={0x08048364} expr=(add[32] v1783[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v1784[32]) }
      flags = { }
init mem:
null state
null state
0x8048369:call   0x0804836e<<Insn>>
registers:
    ax      = { v32712 }
    cx      = { v32713 }
    dx      = { v32714 }
    bx      = { v32715 }
    sp      = { v32716-0x10 }
    bp      = { v32716-0x4 }
    si      = { v32718 }
    di      = { v32719 }
    es      = { v32720 }
    cs      = { v32721 }
    ss      = { v32722 }
    ds      = { v32723 }
    fs      = { v32724 }
    gs      = { v32725 }
    cf      = { v32726 }
    ?1      = { v32727 }
    pf      = { v32728 }
    ?3      = { v32729 }
    af      = { v32730 }
    ?5      = { v32731 }
    zf      = { v32732 }
    sf      = { v32733 }
    tf      = { v32734 }
    if      = { v32735 }
    df      = { v32736 }
    of      = { v32737 }
    iopl0   = { v32738 }
    iopl1   = { v32739 }
    nt      = { v32740 }
    ?15     = { v32741 }
    rf      = { v32742 }
    vm      = { v32743 }
    ac      = { v32744 }
    vif     = { v32745 }
    vip     = { v32746 }
    id      = { v32747 }
    ?22     = { v32748 }
    ?23     = { v32749 }
    ?24     = { v32750 }
    ?25     = { v32751 }
    ?26     = { v32752 }
    ?27     = { v32753 }
    ?28     = { v32754 }
    ?29     = { v32755 }
    ?30     = { v32756 }
    ?31     = { v32757 }
    ip      = { 0x804836e }
memory:
    address = { v32716-0x4 }
      value = { v32717 }
      flags = { size=4 }
    address = { v32716-0x8 }
      value = { v32715 }
      flags = { size=4 }
    address = { v32716-0xc }
      value = { v32713 }
      flags = { size=4 }
    address = { v32716-0x10 }
      value = { 0x804836e }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v1779[32] }
    cx      = { defs={} expr=v1780[32] }
    dx      = { defs={} expr=v1781[32] }
    bx      = { defs={} expr=v1782[32] }
    sp      = { defs={0x08048364,0x08048367,0x08048368,0x08048369} expr=(add[32] (add[32] (add[32] (add[32] v1783[32] -4[32]) -4[32]) -4[32]) -4[32]) }
    bp      = { defs={0x08048364,0x08048365} expr=(add[32] v1783[32] -4[32]) }
    si      = { defs={} expr=v1785[32] }
    di      = { defs={} expr=v1786[32] }
    es      = { defs={} expr=v1787[16] }
    cs      = { defs={} expr=v1788[16] }
    ss      = { defs={} expr=v1789[16] }
    ds      = { defs={} expr=v1790[16] }
    fs      = { defs={} expr=v1791[16] }
    gs      = { defs={} expr=v1792[16] }
    cf      = { defs={} expr=v1793[1] }
    ?1      = { defs={} expr=v1794[1] }
    pf      = { defs={} expr=v1795[1] }
    ?3      = { defs={} expr=v1796[1] }
    af      = { defs={} expr=v1797[1] }
    ?5      = { defs={} expr=v1798[1] }
    zf      = { defs={} expr=v1799[1] }
    sf      = { defs={} expr=v1800[1] }
    tf      = { defs={} expr=v1801[1] }
    if      = { defs={} expr=v1802[1] }
    df      = { defs={} expr=v1803[1] }
    of      = { defs={} expr=v1804[1] }
    iopl0   = { defs={} expr=v1805[1] }
    iopl1   = { defs={} expr=v1806[1] }
    nt      = { defs={} expr=v1807[1] }
    ?15     = { defs={} expr=v1808[1] }
    rf      = { defs={} expr=v1809[1] }
    vm      = { defs={} expr=v1810[1] }
    ac      = { defs={} expr=v1811[1] }
    vif     = { defs={} expr=v1812[1] }
    vip     = { defs={} expr=v1813[1] }
    id      = { defs={} expr=v1814[1] }
    ?22     = { defs={} expr=v1815[1] }
    ?23     = { defs={} expr=v1816[1] }
    ?24     = { defs={} expr=v1817[1] }
    ?25     = { defs={} expr=v1818[1] }
    ?26     = { defs={} expr=v1819[1] }
    ?27     = { defs={} expr=v1820[1] }
    ?28     = { defs={} expr=v1821[1] }
    ?29     = { defs={} expr=v1822[1] }
    ?30     = { defs={} expr=v1823[1] }
    ?31     = { defs={} expr=v1824[1] }
    ip      = { defs={0x08048369} expr=0x0804836e[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v1783[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v1783[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v1783[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=-125[8] }
      flags = { }
    address = { defs={0x08048364,0x08048367,0x08048368,0x08048369} expr=(add[32] (add[32] (add[32] (add[32] v1783[32] -4[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=110[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v1783[32] -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v1780[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v1783[32] -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v1780[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v1783[32] -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v1780[32]) }
      flags = { }
    address = { defs={0x08048364,0x08048367,0x08048368} expr=(add[32] (add[32] (add[32] v1783[32] -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v1780[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v1783[32] -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v1782[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v1783[32] -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v1782[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v1783[32] -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v1782[32]) }
      flags = { }
    address = { defs={0x08048364,0x08048367} expr=(add[32] (add[32] v1783[32] -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v1782[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v1783[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v1784[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v1783[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v1784[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v1783[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v1784[32]) }
      flags = { }
    address = { defs={0x08048364} expr=(add[32] v1783[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v1784[32]) }
      flags = { }
init mem:
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804836e:pop    ebx
registers:
    ax      = { v32849 }
    cx      = { v32850 }
    dx      = { v32851 }
    bx      = { v32904 }
    sp      = { v32853+0x4 }
    bp      = { v32854 }
    si      = { v32855 }
    di      = { v32856 }
    es      = { v32857 }
    cs      = { v32858 }
    ss      = { v32859 }
    ds      = { v32860 }
    fs      = { v32861 }
    gs      = { v32862 }
    cf      = { v32863 }
    ?1      = { v32864 }
    pf      = { v32865 }
    ?3      = { v32866 }
    af      = { v32867 }
    ?5      = { v32868 }
    zf      = { v32869 }
    sf      = { v32870 }
    tf      = { v32871 }
    if      = { v32872 }
    df      = { v32873 }
    of      = { v32874 }
    iopl0   = { v32875 }
    iopl1   = { v32876 }
    nt      = { v32877 }
    ?15     = { v32878 }
    rf      = { v32879 }
    vm      = { v32880 }
    ac      = { v32881 }
    vif     = { v32882 }
    vip     = { v32883 }
    id      = { v32884 }
    ?22     = { v32885 }
    ?23     = { v32886 }
    ?24     = { v32887 }
    ?25     = { v32888 }
    ?26     = { v32889 }
    ?27     = { v32890 }
    ?28     = { v32891 }
    ?29     = { v32892 }
    ?30     = { v32893 }
    ?31     = { v32894 }
    ip      = { 0x804836f }
memory:
    address = { v32853 }
      value = { v32904 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={} expr=v1955[32] }
    cx      = { defs={} expr=v1956[32] }
    dx      = { defs={} expr=v1957[32] }
    bx      = { defs={0x0804836e} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2019[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2020[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2021[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2022[8]))) }
    sp      = { defs={0x0804836e} expr=(add[32] v1959[32] 4[32]) }
    bp      = { defs={} expr=v1960[32] }
    si      = { defs={} expr=v1961[32] }
    di      = { defs={} expr=v1962[32] }
    es      = { defs={} expr=v1963[16] }
    cs      = { defs={} expr=v1964[16] }
    ss      = { defs={} expr=v1965[16] }
    ds      = { defs={} expr=v1966[16] }
    fs      = { defs={} expr=v1967[16] }
    gs      = { defs={} expr=v1968[16] }
    cf      = { defs={} expr=v1969[1] }
    ?1      = { defs={} expr=v1970[1] }
    pf      = { defs={} expr=v1971[1] }
    ?3      = { defs={} expr=v1972[1] }
    af      = { defs={} expr=v1973[1] }
    ?5      = { defs={} expr=v1974[1] }
    zf      = { defs={} expr=v1975[1] }
    sf      = { defs={} expr=v1976[1] }
    tf      = { defs={} expr=v1977[1] }
    if      = { defs={} expr=v1978[1] }
    df      = { defs={} expr=v1979[1] }
    of      = { defs={} expr=v1980[1] }
    iopl0   = { defs={} expr=v1981[1] }
    iopl1   = { defs={} expr=v1982[1] }
    nt      = { defs={} expr=v1983[1] }
    ?15     = { defs={} expr=v1984[1] }
    rf      = { defs={} expr=v1985[1] }
    vm      = { defs={} expr=v1986[1] }
    ac      = { defs={} expr=v1987[1] }
    vif     = { defs={} expr=v1988[1] }
    vip     = { defs={} expr=v1989[1] }
    id      = { defs={} expr=v1990[1] }
    ?22     = { defs={} expr=v1991[1] }
    ?23     = { defs={} expr=v1992[1] }
    ?24     = { defs={} expr=v1993[1] }
    ?25     = { defs={} expr=v1994[1] }
    ?26     = { defs={} expr=v1995[1] }
    ?27     = { defs={} expr=v1996[1] }
    ?28     = { defs={} expr=v1997[1] }
    ?29     = { defs={} expr=v1998[1] }
    ?30     = { defs={} expr=v1999[1] }
    ?31     = { defs={} expr=v2000[1] }
    ip      = { defs={0x0804836e} expr=0x0804836f[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] v1959[32] 3[32]) }
      value = { defs={} expr=v2022[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1959[32] 2[32]) }
      value = { defs={} expr=v2021[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1959[32] 1[32]) }
      value = { defs={} expr=v2020[8] }
      flags = { rdonly }
    address = { defs={0x0804836e} expr=v1959[32] }
      value = { defs={} expr=v2019[8] }
      flags = { rdonly }
null state
null state
0x804836f:add    ebx, 0x0000135a
registers:
    ax      = { v32849 }
    cx      = { v32850 }
    dx      = { v32851 }
    bx      = { v32904+0x135a }
    sp      = { v32853+0x4 }
    bp      = { v32854 }
    si      = { v32855 }
    di      = { v32856 }
    es      = { v32857 }
    cs      = { v32858 }
    ss      = { v32859 }
    ds      = { v32860 }
    fs      = { v32861 }
    gs      = { v32862 }
    cf      = { v32953 }
    ?1      = { v32864 }
    pf      = { -v32944+0x1 }
    ?3      = { v32866 }
    af      = { v32951 }
    ?5      = { v32868 }
    zf      = { v32949 }
    sf      = { v32947 }
    tf      = { v32871 }
    if      = { v32872 }
    df      = { v32873 }
    of      = { v32959 }
    iopl0   = { v32875 }
    iopl1   = { v32876 }
    nt      = { v32877 }
    ?15     = { v32878 }
    rf      = { v32879 }
    vm      = { v32880 }
    ac      = { v32881 }
    vif     = { v32882 }
    vip     = { v32883 }
    id      = { v32884 }
    ?22     = { v32885 }
    ?23     = { v32886 }
    ?24     = { v32887 }
    ?25     = { v32888 }
    ?26     = { v32889 }
    ?27     = { v32890 }
    ?28     = { v32891 }
    ?29     = { v32892 }
    ?30     = { v32893 }
    ?31     = { v32894 }
    ip      = { 0x8048375 }
memory:
    address = { v32853 }
      value = { v32904 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={} expr=v1955[32] }
    cx      = { defs={} expr=v1956[32] }
    dx      = { defs={} expr=v1957[32] }
    bx      = { defs={0x0804836e,0x0804836f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2019[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2020[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2021[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2022[8]))) 4954[32]) }
    sp      = { defs={0x0804836e} expr=(add[32] v1959[32] 4[32]) }
    bp      = { defs={} expr=v1960[32] }
    si      = { defs={} expr=v1961[32] }
    di      = { defs={} expr=v1962[32] }
    es      = { defs={} expr=v1963[16] }
    cs      = { defs={} expr=v1964[16] }
    ss      = { defs={} expr=v1965[16] }
    ds      = { defs={} expr=v1966[16] }
    fs      = { defs={} expr=v1967[16] }
    gs      = { defs={} expr=v1968[16] }
    cf      = { defs={0x0804836e,0x0804836f} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2019[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2020[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2021[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2022[8])))) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2019[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2020[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2021[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2022[8])))) 4954[33]))))) }
    ?1      = { defs={} expr=v1970[1] }
    pf      = { defs={0x0804836e,0x0804836f} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2019[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2020[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2021[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2022[8]))) 4954[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2019[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2020[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2021[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2022[8]))) 4954[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2019[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2020[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2021[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2022[8]))) 4954[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2019[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2020[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2021[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2022[8]))) 4954[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2019[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2020[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2021[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2022[8]))) 4954[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2019[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2020[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2021[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2022[8]))) 4954[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2019[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2020[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2021[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2022[8]))) 4954[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2019[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2020[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2021[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2022[8]))) 4954[32]))))))) }
    ?3      = { defs={} expr=v1972[1] }
    af      = { defs={0x0804836e,0x0804836f} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2019[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2020[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2021[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2022[8])))) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2019[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2020[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2021[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2022[8])))) 4954[33]))))) }
    ?5      = { defs={} expr=v1974[1] }
    zf      = { defs={0x0804836e,0x0804836f} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2019[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2020[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2021[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2022[8]))) 4954[32])) }
    sf      = { defs={0x0804836e,0x0804836f} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2019[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2020[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2021[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2022[8]))) 4954[32])) }
    tf      = { defs={} expr=v1977[1] }
    if      = { defs={} expr=v1978[1] }
    df      = { defs={} expr=v1979[1] }
    of      = { defs={0x0804836e,0x0804836f} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2019[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2020[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2021[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2022[8])))) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2019[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2020[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2021[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2022[8])))) 4954[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2019[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2020[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2021[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2022[8])))) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2019[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2020[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2021[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2022[8])))) 4954[33])))))) }
    iopl0   = { defs={} expr=v1981[1] }
    iopl1   = { defs={} expr=v1982[1] }
    nt      = { defs={} expr=v1983[1] }
    ?15     = { defs={} expr=v1984[1] }
    rf      = { defs={} expr=v1985[1] }
    vm      = { defs={} expr=v1986[1] }
    ac      = { defs={} expr=v1987[1] }
    vif     = { defs={} expr=v1988[1] }
    vip     = { defs={} expr=v1989[1] }
    id      = { defs={} expr=v1990[1] }
    ?22     = { defs={} expr=v1991[1] }
    ?23     = { defs={} expr=v1992[1] }
    ?24     = { defs={} expr=v1993[1] }
    ?25     = { defs={} expr=v1994[1] }
    ?26     = { defs={} expr=v1995[1] }
    ?27     = { defs={} expr=v1996[1] }
    ?28     = { defs={} expr=v1997[1] }
    ?29     = { defs={} expr=v1998[1] }
    ?30     = { defs={} expr=v1999[1] }
    ?31     = { defs={} expr=v2000[1] }
    ip      = { defs={0x0804836e,0x0804836f} expr=0x08048375[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] v1959[32] 3[32]) }
      value = { defs={} expr=v2022[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1959[32] 2[32]) }
      value = { defs={} expr=v2021[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1959[32] 1[32]) }
      value = { defs={} expr=v2020[8] }
      flags = { rdonly }
    address = { defs={0x0804836e} expr=v1959[32] }
      value = { defs={} expr=v2019[8] }
      flags = { rdonly }
null state
null state
0x8048375:mov    edx, DWORD PTR ds:[ebx + 0xfffffffc<-0x00000004>]
registers:
    ax      = { v32849 }
    cx      = { v32850 }
    dx      = { v32969 }
    bx      = { v32904+0x135a }
    sp      = { v32853+0x4 }
    bp      = { v32854 }
    si      = { v32855 }
    di      = { v32856 }
    es      = { v32857 }
    cs      = { v32858 }
    ss      = { v32859 }
    ds      = { v32860 }
    fs      = { v32861 }
    gs      = { v32862 }
    cf      = { v32953 }
    ?1      = { v32864 }
    pf      = { -v32944+0x1 }
    ?3      = { v32866 }
    af      = { v32951 }
    ?5      = { v32868 }
    zf      = { v32949 }
    sf      = { v32947 }
    tf      = { v32871 }
    if      = { v32872 }
    df      = { v32873 }
    of      = { v32959 }
    iopl0   = { v32875 }
    iopl1   = { v32876 }
    nt      = { v32877 }
    ?15     = { v32878 }
    rf      = { v32879 }
    vm      = { v32880 }
    ac      = { v32881 }
    vif     = { v32882 }
    vip     = { v32883 }
    id      = { v32884 }
    ?22     = { v32885 }
    ?23     = { v32886 }
    ?24     = { v32887 }
    ?25     = { v32888 }
    ?26     = { v32889 }
    ?27     = { v32890 }
    ?28     = { v32891 }
    ?29     = { v32892 }
    ?30     = { v32893 }
    ?31     = { v32894 }
    ip      = { 0x804837b }
memory:
    address = { v32853 }
      value = { v32904 }
      flags = { size=4; read-only }
    address = { v32904+0x1356 }
      value = { v32969 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={} expr=v1955[32] }
    cx      = { defs={} expr=v1956[32] }
    dx      = { defs={0x08048375} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2127[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2128[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2129[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2130[8]))) }
    bx      = { defs={0x0804836e,0x0804836f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2019[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2020[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2021[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2022[8]))) 4954[32]) }
    sp      = { defs={0x0804836e} expr=(add[32] v1959[32] 4[32]) }
    bp      = { defs={} expr=v1960[32] }
    si      = { defs={} expr=v1961[32] }
    di      = { defs={} expr=v1962[32] }
    es      = { defs={} expr=v1963[16] }
    cs      = { defs={} expr=v1964[16] }
    ss      = { defs={} expr=v1965[16] }
    ds      = { defs={} expr=v1966[16] }
    fs      = { defs={} expr=v1967[16] }
    gs      = { defs={} expr=v1968[16] }
    cf      = { defs={0x0804836e,0x0804836f} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2019[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2020[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2021[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2022[8])))) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2019[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2020[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2021[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2022[8])))) 4954[33]))))) }
    ?1      = { defs={} expr=v1970[1] }
    pf      = { defs={0x0804836e,0x0804836f} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2019[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2020[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2021[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2022[8]))) 4954[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2019[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2020[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2021[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2022[8]))) 4954[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2019[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2020[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2021[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2022[8]))) 4954[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2019[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2020[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2021[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2022[8]))) 4954[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2019[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2020[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2021[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2022[8]))) 4954[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2019[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2020[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2021[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2022[8]))) 4954[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2019[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2020[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2021[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2022[8]))) 4954[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2019[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2020[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2021[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2022[8]))) 4954[32]))))))) }
    ?3      = { defs={} expr=v1972[1] }
    af      = { defs={0x0804836e,0x0804836f} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2019[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2020[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2021[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2022[8])))) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2019[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2020[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2021[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2022[8])))) 4954[33]))))) }
    ?5      = { defs={} expr=v1974[1] }
    zf      = { defs={0x0804836e,0x0804836f} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2019[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2020[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2021[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2022[8]))) 4954[32])) }
    sf      = { defs={0x0804836e,0x0804836f} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2019[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2020[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2021[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2022[8]))) 4954[32])) }
    tf      = { defs={} expr=v1977[1] }
    if      = { defs={} expr=v1978[1] }
    df      = { defs={} expr=v1979[1] }
    of      = { defs={0x0804836e,0x0804836f} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2019[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2020[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2021[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2022[8])))) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2019[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2020[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2021[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2022[8])))) 4954[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2019[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2020[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2021[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2022[8])))) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2019[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2020[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2021[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2022[8])))) 4954[33])))))) }
    iopl0   = { defs={} expr=v1981[1] }
    iopl1   = { defs={} expr=v1982[1] }
    nt      = { defs={} expr=v1983[1] }
    ?15     = { defs={} expr=v1984[1] }
    rf      = { defs={} expr=v1985[1] }
    vm      = { defs={} expr=v1986[1] }
    ac      = { defs={} expr=v1987[1] }
    vif     = { defs={} expr=v1988[1] }
    vip     = { defs={} expr=v1989[1] }
    id      = { defs={} expr=v1990[1] }
    ?22     = { defs={} expr=v1991[1] }
    ?23     = { defs={} expr=v1992[1] }
    ?24     = { defs={} expr=v1993[1] }
    ?25     = { defs={} expr=v1994[1] }
    ?26     = { defs={} expr=v1995[1] }
    ?27     = { defs={} expr=v1996[1] }
    ?28     = { defs={} expr=v1997[1] }
    ?29     = { defs={} expr=v1998[1] }
    ?30     = { defs={} expr=v1999[1] }
    ?31     = { defs={} expr=v2000[1] }
    ip      = { defs={0x0804836e,0x0804836f,0x08048375} expr=0x0804837b[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2019[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2020[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2021[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2022[8]))) 4954[32]) -4[32]) 3[32]) }
      value = { defs={} expr=v2130[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2019[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2020[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2021[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2022[8]))) 4954[32]) -4[32]) 2[32]) }
      value = { defs={} expr=v2129[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2019[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2020[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2021[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2022[8]))) 4954[32]) -4[32]) 1[32]) }
      value = { defs={} expr=v2128[8] }
      flags = { rdonly }
    address = { defs={0x0804836e,0x0804836f,0x08048375} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2019[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2020[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2021[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2022[8]))) 4954[32]) -4[32]) }
      value = { defs={} expr=v2127[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1959[32] 3[32]) }
      value = { defs={} expr=v2022[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1959[32] 2[32]) }
      value = { defs={} expr=v2021[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1959[32] 1[32]) }
      value = { defs={} expr=v2020[8] }
      flags = { rdonly }
    address = { defs={0x0804836e} expr=v1959[32] }
      value = { defs={} expr=v2019[8] }
      flags = { rdonly }
null state
null state
0x804837b:test   edx, edx
registers:
    ax      = { v32849 }
    cx      = { v32850 }
    dx      = { v32969 }
    bx      = { v32904+0x135a }
    sp      = { v32853+0x4 }
    bp      = { v32854 }
    si      = { v32855 }
    di      = { v32856 }
    es      = { v32857 }
    cs      = { v32858 }
    ss      = { v32859 }
    ds      = { v32860 }
    fs      = { v32861 }
    gs      = { v32862 }
    cf      = { 0x0 }
    ?1      = { v32864 }
    pf      = { -v33007+0x1 }
    ?3      = { v32866 }
    af      = { v33015 }
    ?5      = { v32868 }
    zf      = { v33012 }
    sf      = { v33010 }
    tf      = { v32871 }
    if      = { v32872 }
    df      = { v32873 }
    of      = { 0x0 }
    iopl0   = { v32875 }
    iopl1   = { v32876 }
    nt      = { v32877 }
    ?15     = { v32878 }
    rf      = { v32879 }
    vm      = { v32880 }
    ac      = { v32881 }
    vif     = { v32882 }
    vip     = { v32883 }
    id      = { v32884 }
    ?22     = { v32885 }
    ?23     = { v32886 }
    ?24     = { v32887 }
    ?25     = { v32888 }
    ?26     = { v32889 }
    ?27     = { v32890 }
    ?28     = { v32891 }
    ?29     = { v32892 }
    ?30     = { v32893 }
    ?31     = { v32894 }
    ip      = { 0x804837d }
memory:
    address = { v32853 }
      value = { v32904 }
      flags = { size=4; read-only }
    address = { v32904+0x1356 }
      value = { v32969 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={} expr=v1955[32] }
    cx      = { defs={} expr=v1956[32] }
    dx      = { defs={0x08048375} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2127[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2128[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2129[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2130[8]))) }
    bx      = { defs={0x0804836e,0x0804836f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2019[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2020[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2021[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2022[8]))) 4954[32]) }
    sp      = { defs={0x0804836e} expr=(add[32] v1959[32] 4[32]) }
    bp      = { defs={} expr=v1960[32] }
    si      = { defs={} expr=v1961[32] }
    di      = { defs={} expr=v1962[32] }
    es      = { defs={} expr=v1963[16] }
    cs      = { defs={} expr=v1964[16] }
    ss      = { defs={} expr=v1965[16] }
    ds      = { defs={} expr=v1966[16] }
    fs      = { defs={} expr=v1967[16] }
    gs      = { defs={} expr=v1968[16] }
    cf      = { defs={0x0804837b} expr=0[1] }
    ?1      = { defs={} expr=v1970[1] }
    pf      = { defs={0x08048375,0x0804837b} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2127[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2128[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2129[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2130[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2127[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2128[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2129[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2130[8])))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2127[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2128[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2129[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2130[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2127[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2128[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2129[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2130[8]))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2127[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2128[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2129[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2130[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2127[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2128[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2129[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2130[8])))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2127[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2128[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2129[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2130[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2127[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2128[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2129[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2130[8])))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2127[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2128[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2129[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2130[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2127[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2128[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2129[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2130[8])))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2127[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2128[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2129[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2130[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2127[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2128[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2129[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2130[8]))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2127[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2128[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2129[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2130[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2127[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2128[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2129[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2130[8])))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2127[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2128[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2129[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2130[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2127[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2128[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2129[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2130[8])))))))))) }
    ?3      = { defs={} expr=v1972[1] }
    af      = { defs={0x0804837b} expr=v2196[1] }
    ?5      = { defs={} expr=v1974[1] }
    zf      = { defs={0x08048375,0x0804837b} expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2127[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2128[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2129[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2130[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2127[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2128[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2129[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2130[8]))))) }
    sf      = { defs={0x08048375,0x0804837b} expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2127[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2128[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2129[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2130[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2127[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2128[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2129[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2130[8]))))) }
    tf      = { defs={} expr=v1977[1] }
    if      = { defs={} expr=v1978[1] }
    df      = { defs={} expr=v1979[1] }
    of      = { defs={0x0804837b} expr=0[1] }
    iopl0   = { defs={} expr=v1981[1] }
    iopl1   = { defs={} expr=v1982[1] }
    nt      = { defs={} expr=v1983[1] }
    ?15     = { defs={} expr=v1984[1] }
    rf      = { defs={} expr=v1985[1] }
    vm      = { defs={} expr=v1986[1] }
    ac      = { defs={} expr=v1987[1] }
    vif     = { defs={} expr=v1988[1] }
    vip     = { defs={} expr=v1989[1] }
    id      = { defs={} expr=v1990[1] }
    ?22     = { defs={} expr=v1991[1] }
    ?23     = { defs={} expr=v1992[1] }
    ?24     = { defs={} expr=v1993[1] }
    ?25     = { defs={} expr=v1994[1] }
    ?26     = { defs={} expr=v1995[1] }
    ?27     = { defs={} expr=v1996[1] }
    ?28     = { defs={} expr=v1997[1] }
    ?29     = { defs={} expr=v1998[1] }
    ?30     = { defs={} expr=v1999[1] }
    ?31     = { defs={} expr=v2000[1] }
    ip      = { defs={0x0804836e,0x0804836f,0x08048375,0x0804837b} expr=0x0804837d[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2019[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2020[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2021[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2022[8]))) 4954[32]) -4[32]) 3[32]) }
      value = { defs={} expr=v2130[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2019[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2020[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2021[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2022[8]))) 4954[32]) -4[32]) 2[32]) }
      value = { defs={} expr=v2129[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2019[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2020[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2021[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2022[8]))) 4954[32]) -4[32]) 1[32]) }
      value = { defs={} expr=v2128[8] }
      flags = { rdonly }
    address = { defs={0x0804836e,0x0804836f,0x08048375} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2019[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2020[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2021[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2022[8]))) 4954[32]) -4[32]) }
      value = { defs={} expr=v2127[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1959[32] 3[32]) }
      value = { defs={} expr=v2022[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1959[32] 2[32]) }
      value = { defs={} expr=v2021[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1959[32] 1[32]) }
      value = { defs={} expr=v2020[8] }
      flags = { rdonly }
    address = { defs={0x0804836e} expr=v1959[32] }
      value = { defs={} expr=v2019[8] }
      flags = { rdonly }
null state
null state
0x804837d:je     0x08048384<<Insn>>
registers:
    ax      = { v32849 }
    cx      = { v32850 }
    dx      = { v32969 }
    bx      = { v32904+0x135a }
    sp      = { v32853+0x4 }
    bp      = { v32854 }
    si      = { v32855 }
    di      = { v32856 }
    es      = { v32857 }
    cs      = { v32858 }
    ss      = { v32859 }
    ds      = { v32860 }
    fs      = { v32861 }
    gs      = { v32862 }
    cf      = { 0x0 }
    ?1      = { v32864 }
    pf      = { -v33007+0x1 }
    ?3      = { v32866 }
    af      = { v33015 }
    ?5      = { v32868 }
    zf      = { v33012 }
    sf      = { v33010 }
    tf      = { v32871 }
    if      = { v32872 }
    df      = { v32873 }
    of      = { 0x0 }
    iopl0   = { v32875 }
    iopl1   = { v32876 }
    nt      = { v32877 }
    ?15     = { v32878 }
    rf      = { v32879 }
    vm      = { v32880 }
    ac      = { v32881 }
    vif     = { v32882 }
    vip     = { v32883 }
    id      = { v32884 }
    ?22     = { v32885 }
    ?23     = { v32886 }
    ?24     = { v32887 }
    ?25     = { v32888 }
    ?26     = { v32889 }
    ?27     = { v32890 }
    ?28     = { v32891 }
    ?29     = { v32892 }
    ?30     = { v32893 }
    ?31     = { v32894 }
    ip      = { v33025 }
memory:
    address = { v32853 }
      value = { v32904 }
      flags = { size=4; read-only }
    address = { v32904+0x1356 }
      value = { v32969 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={} expr=v1955[32] }
    cx      = { defs={} expr=v1956[32] }
    dx      = { defs={0x08048375} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2127[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2128[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2129[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2130[8]))) }
    bx      = { defs={0x0804836e,0x0804836f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2019[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2020[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2021[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2022[8]))) 4954[32]) }
    sp      = { defs={0x0804836e} expr=(add[32] v1959[32] 4[32]) }
    bp      = { defs={} expr=v1960[32] }
    si      = { defs={} expr=v1961[32] }
    di      = { defs={} expr=v1962[32] }
    es      = { defs={} expr=v1963[16] }
    cs      = { defs={} expr=v1964[16] }
    ss      = { defs={} expr=v1965[16] }
    ds      = { defs={} expr=v1966[16] }
    fs      = { defs={} expr=v1967[16] }
    gs      = { defs={} expr=v1968[16] }
    cf      = { defs={0x0804837b} expr=0[1] }
    ?1      = { defs={} expr=v1970[1] }
    pf      = { defs={0x08048375,0x0804837b} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2127[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2128[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2129[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2130[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2127[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2128[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2129[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2130[8])))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2127[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2128[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2129[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2130[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2127[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2128[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2129[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2130[8]))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2127[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2128[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2129[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2130[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2127[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2128[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2129[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2130[8])))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2127[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2128[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2129[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2130[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2127[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2128[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2129[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2130[8])))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2127[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2128[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2129[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2130[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2127[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2128[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2129[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2130[8])))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2127[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2128[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2129[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2130[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2127[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2128[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2129[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2130[8]))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2127[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2128[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2129[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2130[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2127[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2128[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2129[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2130[8])))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2127[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2128[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2129[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2130[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2127[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2128[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2129[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2130[8])))))))))) }
    ?3      = { defs={} expr=v1972[1] }
    af      = { defs={0x0804837b} expr=v2196[1] }
    ?5      = { defs={} expr=v1974[1] }
    zf      = { defs={0x08048375,0x0804837b} expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2127[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2128[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2129[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2130[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2127[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2128[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2129[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2130[8]))))) }
    sf      = { defs={0x08048375,0x0804837b} expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2127[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2128[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2129[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2130[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2127[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2128[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2129[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2130[8]))))) }
    tf      = { defs={} expr=v1977[1] }
    if      = { defs={} expr=v1978[1] }
    df      = { defs={} expr=v1979[1] }
    of      = { defs={0x0804837b} expr=0[1] }
    iopl0   = { defs={} expr=v1981[1] }
    iopl1   = { defs={} expr=v1982[1] }
    nt      = { defs={} expr=v1983[1] }
    ?15     = { defs={} expr=v1984[1] }
    rf      = { defs={} expr=v1985[1] }
    vm      = { defs={} expr=v1986[1] }
    ac      = { defs={} expr=v1987[1] }
    vif     = { defs={} expr=v1988[1] }
    vip     = { defs={} expr=v1989[1] }
    id      = { defs={} expr=v1990[1] }
    ?22     = { defs={} expr=v1991[1] }
    ?23     = { defs={} expr=v1992[1] }
    ?24     = { defs={} expr=v1993[1] }
    ?25     = { defs={} expr=v1994[1] }
    ?26     = { defs={} expr=v1995[1] }
    ?27     = { defs={} expr=v1996[1] }
    ?28     = { defs={} expr=v1997[1] }
    ?29     = { defs={} expr=v1998[1] }
    ?30     = { defs={} expr=v1999[1] }
    ?31     = { defs={} expr=v2000[1] }
    ip      = { defs={0x0804836e,0x0804836f,0x08048375,0x0804837b,0x0804837d} expr=(ite[32] (zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2127[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2128[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2129[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2130[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2127[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2128[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2129[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2130[8]))))) 0x08048384[32] 0x0804837f[32]) }
memory:
init mem:
    address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2019[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2020[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2021[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2022[8]))) 4954[32]) -4[32]) 3[32]) }
      value = { defs={} expr=v2130[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2019[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2020[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2021[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2022[8]))) 4954[32]) -4[32]) 2[32]) }
      value = { defs={} expr=v2129[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2019[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2020[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2021[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2022[8]))) 4954[32]) -4[32]) 1[32]) }
      value = { defs={} expr=v2128[8] }
      flags = { rdonly }
    address = { defs={0x0804836e,0x0804836f,0x08048375} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2019[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2020[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2021[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2022[8]))) 4954[32]) -4[32]) }
      value = { defs={} expr=v2127[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1959[32] 3[32]) }
      value = { defs={} expr=v2022[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1959[32] 2[32]) }
      value = { defs={} expr=v2021[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1959[32] 1[32]) }
      value = { defs={} expr=v2020[8] }
      flags = { rdonly }
    address = { defs={0x0804836e} expr=v1959[32] }
      value = { defs={} expr=v2019[8] }
      flags = { rdonly }
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804837f:call   0x08048330<__gmon_start__@plt>
registers:
    ax      = { v33075 }
    cx      = { v33076 }
    dx      = { v33077 }
    bx      = { v33078 }
    sp      = { v33079-0x4 }
    bp      = { v33080 }
    si      = { v33081 }
    di      = { v33082 }
    es      = { v33083 }
    cs      = { v33084 }
    ss      = { v33085 }
    ds      = { v33086 }
    fs      = { v33087 }
    gs      = { v33088 }
    cf      = { v33089 }
    ?1      = { v33090 }
    pf      = { v33091 }
    ?3      = { v33092 }
    af      = { v33093 }
    ?5      = { v33094 }
    zf      = { v33095 }
    sf      = { v33096 }
    tf      = { v33097 }
    if      = { v33098 }
    df      = { v33099 }
    of      = { v33100 }
    iopl0   = { v33101 }
    iopl1   = { v33102 }
    nt      = { v33103 }
    ?15     = { v33104 }
    rf      = { v33105 }
    vm      = { v33106 }
    ac      = { v33107 }
    vif     = { v33108 }
    vip     = { v33109 }
    id      = { v33110 }
    ?22     = { v33111 }
    ?23     = { v33112 }
    ?24     = { v33113 }
    ?25     = { v33114 }
    ?26     = { v33115 }
    ?27     = { v33116 }
    ?28     = { v33117 }
    ?29     = { v33118 }
    ?30     = { v33119 }
    ?31     = { v33120 }
    ip      = { 0x8048330 }
memory:
    address = { v33079-0x4 }
      value = { 0x8048384 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v2266[32] }
    cx      = { defs={} expr=v2267[32] }
    dx      = { defs={} expr=v2268[32] }
    bx      = { defs={} expr=v2269[32] }
    sp      = { defs={0x0804837f} expr=(add[32] v2270[32] -4[32]) }
    bp      = { defs={} expr=v2271[32] }
    si      = { defs={} expr=v2272[32] }
    di      = { defs={} expr=v2273[32] }
    es      = { defs={} expr=v2274[16] }
    cs      = { defs={} expr=v2275[16] }
    ss      = { defs={} expr=v2276[16] }
    ds      = { defs={} expr=v2277[16] }
    fs      = { defs={} expr=v2278[16] }
    gs      = { defs={} expr=v2279[16] }
    cf      = { defs={} expr=v2280[1] }
    ?1      = { defs={} expr=v2281[1] }
    pf      = { defs={} expr=v2282[1] }
    ?3      = { defs={} expr=v2283[1] }
    af      = { defs={} expr=v2284[1] }
    ?5      = { defs={} expr=v2285[1] }
    zf      = { defs={} expr=v2286[1] }
    sf      = { defs={} expr=v2287[1] }
    tf      = { defs={} expr=v2288[1] }
    if      = { defs={} expr=v2289[1] }
    df      = { defs={} expr=v2290[1] }
    of      = { defs={} expr=v2291[1] }
    iopl0   = { defs={} expr=v2292[1] }
    iopl1   = { defs={} expr=v2293[1] }
    nt      = { defs={} expr=v2294[1] }
    ?15     = { defs={} expr=v2295[1] }
    rf      = { defs={} expr=v2296[1] }
    vm      = { defs={} expr=v2297[1] }
    ac      = { defs={} expr=v2298[1] }
    vif     = { defs={} expr=v2299[1] }
    vip     = { defs={} expr=v2300[1] }
    id      = { defs={} expr=v2301[1] }
    ?22     = { defs={} expr=v2302[1] }
    ?23     = { defs={} expr=v2303[1] }
    ?24     = { defs={} expr=v2304[1] }
    ?25     = { defs={} expr=v2305[1] }
    ?26     = { defs={} expr=v2306[1] }
    ?27     = { defs={} expr=v2307[1] }
    ?28     = { defs={} expr=v2308[1] }
    ?29     = { defs={} expr=v2309[1] }
    ?30     = { defs={} expr=v2310[1] }
    ?31     = { defs={} expr=v2311[1] }
    ip      = { defs={0x0804837f} expr=0x08048330[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v2270[32] -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v2270[32] -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v2270[32] -4[32]) 1[32]) }
      value = { defs={} expr=-125[8] }
      flags = { }
    address = { defs={0x0804837f} expr=(add[32] v2270[32] -4[32]) }
      value = { defs={} expr=-124[8] }
      flags = { }
init mem:
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048384:pop    eax
registers:
    ax      = { v33235 }
    cx      = { v33181 }
    dx      = { v33182 }
    bx      = { v33183 }
    sp      = { v33184+0x4 }
    bp      = { v33185 }
    si      = { v33186 }
    di      = { v33187 }
    es      = { v33188 }
    cs      = { v33189 }
    ss      = { v33190 }
    ds      = { v33191 }
    fs      = { v33192 }
    gs      = { v33193 }
    cf      = { v33194 }
    ?1      = { v33195 }
    pf      = { v33196 }
    ?3      = { v33197 }
    af      = { v33198 }
    ?5      = { v33199 }
    zf      = { v33200 }
    sf      = { v33201 }
    tf      = { v33202 }
    if      = { v33203 }
    df      = { v33204 }
    of      = { v33205 }
    iopl0   = { v33206 }
    iopl1   = { v33207 }
    nt      = { v33208 }
    ?15     = { v33209 }
    rf      = { v33210 }
    vm      = { v33211 }
    ac      = { v33212 }
    vif     = { v33213 }
    vip     = { v33214 }
    id      = { v33215 }
    ?22     = { v33216 }
    ?23     = { v33217 }
    ?24     = { v33218 }
    ?25     = { v33219 }
    ?26     = { v33220 }
    ?27     = { v33221 }
    ?28     = { v33222 }
    ?29     = { v33223 }
    ?30     = { v33224 }
    ?31     = { v33225 }
    ip      = { 0x8048385 }
memory:
    address = { v33184 }
      value = { v33235 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x08048384} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2444[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2445[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2446[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2447[8]))) }
    cx      = { defs={} expr=v2381[32] }
    dx      = { defs={} expr=v2382[32] }
    bx      = { defs={} expr=v2383[32] }
    sp      = { defs={0x08048384} expr=(add[32] v2384[32] 4[32]) }
    bp      = { defs={} expr=v2385[32] }
    si      = { defs={} expr=v2386[32] }
    di      = { defs={} expr=v2387[32] }
    es      = { defs={} expr=v2388[16] }
    cs      = { defs={} expr=v2389[16] }
    ss      = { defs={} expr=v2390[16] }
    ds      = { defs={} expr=v2391[16] }
    fs      = { defs={} expr=v2392[16] }
    gs      = { defs={} expr=v2393[16] }
    cf      = { defs={} expr=v2394[1] }
    ?1      = { defs={} expr=v2395[1] }
    pf      = { defs={} expr=v2396[1] }
    ?3      = { defs={} expr=v2397[1] }
    af      = { defs={} expr=v2398[1] }
    ?5      = { defs={} expr=v2399[1] }
    zf      = { defs={} expr=v2400[1] }
    sf      = { defs={} expr=v2401[1] }
    tf      = { defs={} expr=v2402[1] }
    if      = { defs={} expr=v2403[1] }
    df      = { defs={} expr=v2404[1] }
    of      = { defs={} expr=v2405[1] }
    iopl0   = { defs={} expr=v2406[1] }
    iopl1   = { defs={} expr=v2407[1] }
    nt      = { defs={} expr=v2408[1] }
    ?15     = { defs={} expr=v2409[1] }
    rf      = { defs={} expr=v2410[1] }
    vm      = { defs={} expr=v2411[1] }
    ac      = { defs={} expr=v2412[1] }
    vif     = { defs={} expr=v2413[1] }
    vip     = { defs={} expr=v2414[1] }
    id      = { defs={} expr=v2415[1] }
    ?22     = { defs={} expr=v2416[1] }
    ?23     = { defs={} expr=v2417[1] }
    ?24     = { defs={} expr=v2418[1] }
    ?25     = { defs={} expr=v2419[1] }
    ?26     = { defs={} expr=v2420[1] }
    ?27     = { defs={} expr=v2421[1] }
    ?28     = { defs={} expr=v2422[1] }
    ?29     = { defs={} expr=v2423[1] }
    ?30     = { defs={} expr=v2424[1] }
    ?31     = { defs={} expr=v2425[1] }
    ip      = { defs={0x08048384} expr=0x08048385[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] v2384[32] 3[32]) }
      value = { defs={} expr=v2447[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v2384[32] 2[32]) }
      value = { defs={} expr=v2446[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v2384[32] 1[32]) }
      value = { defs={} expr=v2445[8] }
      flags = { rdonly }
    address = { defs={0x08048384} expr=v2384[32] }
      value = { defs={} expr=v2444[8] }
      flags = { rdonly }
null state
null state
0x8048385:pop    ebx
registers:
    ax      = { v33235 }
    cx      = { v33181 }
    dx      = { v33182 }
    bx      = { v33245 }
    sp      = { v33184+0x8 }
    bp      = { v33185 }
    si      = { v33186 }
    di      = { v33187 }
    es      = { v33188 }
    cs      = { v33189 }
    ss      = { v33190 }
    ds      = { v33191 }
    fs      = { v33192 }
    gs      = { v33193 }
    cf      = { v33194 }
    ?1      = { v33195 }
    pf      = { v33196 }
    ?3      = { v33197 }
    af      = { v33198 }
    ?5      = { v33199 }
    zf      = { v33200 }
    sf      = { v33201 }
    tf      = { v33202 }
    if      = { v33203 }
    df      = { v33204 }
    of      = { v33205 }
    iopl0   = { v33206 }
    iopl1   = { v33207 }
    nt      = { v33208 }
    ?15     = { v33209 }
    rf      = { v33210 }
    vm      = { v33211 }
    ac      = { v33212 }
    vif     = { v33213 }
    vip     = { v33214 }
    id      = { v33215 }
    ?22     = { v33216 }
    ?23     = { v33217 }
    ?24     = { v33218 }
    ?25     = { v33219 }
    ?26     = { v33220 }
    ?27     = { v33221 }
    ?28     = { v33222 }
    ?29     = { v33223 }
    ?30     = { v33224 }
    ?31     = { v33225 }
    ip      = { 0x8048386 }
memory:
    address = { v33184 }
      value = { v33235 }
      flags = { size=4; read-only }
    address = { v33184+0x4 }
      value = { v33245 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x08048384} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2444[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2445[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2446[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2447[8]))) }
    cx      = { defs={} expr=v2381[32] }
    dx      = { defs={} expr=v2382[32] }
    bx      = { defs={0x08048385} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2471[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2472[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2473[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2474[8]))) }
    sp      = { defs={0x08048384,0x08048385} expr=(add[32] (add[32] v2384[32] 4[32]) 4[32]) }
    bp      = { defs={} expr=v2385[32] }
    si      = { defs={} expr=v2386[32] }
    di      = { defs={} expr=v2387[32] }
    es      = { defs={} expr=v2388[16] }
    cs      = { defs={} expr=v2389[16] }
    ss      = { defs={} expr=v2390[16] }
    ds      = { defs={} expr=v2391[16] }
    fs      = { defs={} expr=v2392[16] }
    gs      = { defs={} expr=v2393[16] }
    cf      = { defs={} expr=v2394[1] }
    ?1      = { defs={} expr=v2395[1] }
    pf      = { defs={} expr=v2396[1] }
    ?3      = { defs={} expr=v2397[1] }
    af      = { defs={} expr=v2398[1] }
    ?5      = { defs={} expr=v2399[1] }
    zf      = { defs={} expr=v2400[1] }
    sf      = { defs={} expr=v2401[1] }
    tf      = { defs={} expr=v2402[1] }
    if      = { defs={} expr=v2403[1] }
    df      = { defs={} expr=v2404[1] }
    of      = { defs={} expr=v2405[1] }
    iopl0   = { defs={} expr=v2406[1] }
    iopl1   = { defs={} expr=v2407[1] }
    nt      = { defs={} expr=v2408[1] }
    ?15     = { defs={} expr=v2409[1] }
    rf      = { defs={} expr=v2410[1] }
    vm      = { defs={} expr=v2411[1] }
    ac      = { defs={} expr=v2412[1] }
    vif     = { defs={} expr=v2413[1] }
    vip     = { defs={} expr=v2414[1] }
    id      = { defs={} expr=v2415[1] }
    ?22     = { defs={} expr=v2416[1] }
    ?23     = { defs={} expr=v2417[1] }
    ?24     = { defs={} expr=v2418[1] }
    ?25     = { defs={} expr=v2419[1] }
    ?26     = { defs={} expr=v2420[1] }
    ?27     = { defs={} expr=v2421[1] }
    ?28     = { defs={} expr=v2422[1] }
    ?29     = { defs={} expr=v2423[1] }
    ?30     = { defs={} expr=v2424[1] }
    ?31     = { defs={} expr=v2425[1] }
    ip      = { defs={0x08048384,0x08048385} expr=0x08048386[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] (add[32] v2384[32] 4[32]) 3[32]) }
      value = { defs={} expr=v2474[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v2384[32] 4[32]) 2[32]) }
      value = { defs={} expr=v2473[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v2384[32] 4[32]) 1[32]) }
      value = { defs={} expr=v2472[8] }
      flags = { rdonly }
    address = { defs={0x08048384,0x08048385} expr=(add[32] v2384[32] 4[32]) }
      value = { defs={} expr=v2471[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v2384[32] 3[32]) }
      value = { defs={} expr=v2447[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v2384[32] 2[32]) }
      value = { defs={} expr=v2446[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v2384[32] 1[32]) }
      value = { defs={} expr=v2445[8] }
      flags = { rdonly }
    address = { defs={0x08048384} expr=v2384[32] }
      value = { defs={} expr=v2444[8] }
      flags = { rdonly }
null state
null state
0x8048386:leave  
registers:
    ax      = { v33235 }
    cx      = { v33181 }
    dx      = { v33182 }
    bx      = { v33245 }
    sp      = { v33185+0x4 }
    bp      = { v33256 }
    si      = { v33186 }
    di      = { v33187 }
    es      = { v33188 }
    cs      = { v33189 }
    ss      = { v33190 }
    ds      = { v33191 }
    fs      = { v33192 }
    gs      = { v33193 }
    cf      = { v33194 }
    ?1      = { v33195 }
    pf      = { v33196 }
    ?3      = { v33197 }
    af      = { v33198 }
    ?5      = { v33199 }
    zf      = { v33200 }
    sf      = { v33201 }
    tf      = { v33202 }
    if      = { v33203 }
    df      = { v33204 }
    of      = { v33205 }
    iopl0   = { v33206 }
    iopl1   = { v33207 }
    nt      = { v33208 }
    ?15     = { v33209 }
    rf      = { v33210 }
    vm      = { v33211 }
    ac      = { v33212 }
    vif     = { v33213 }
    vip     = { v33214 }
    id      = { v33215 }
    ?22     = { v33216 }
    ?23     = { v33217 }
    ?24     = { v33218 }
    ?25     = { v33219 }
    ?26     = { v33220 }
    ?27     = { v33221 }
    ?28     = { v33222 }
    ?29     = { v33223 }
    ?30     = { v33224 }
    ?31     = { v33225 }
    ip      = { 0x8048387 }
memory:
    address = { v33184 }
      value = { v33235 }
      flags = { size=4; read-only }
    address = { v33184+0x4 }
      value = { v33245 }
      flags = { size=4; read-only }
    address = { v33185 }
      value = { v33256 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x08048384} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2444[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2445[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2446[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2447[8]))) }
    cx      = { defs={} expr=v2381[32] }
    dx      = { defs={} expr=v2382[32] }
    bx      = { defs={0x08048385} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2471[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2472[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2473[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2474[8]))) }
    sp      = { defs={0x08048386} expr=(add[32] v2385[32] 4[32]) }
    bp      = { defs={0x08048386} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2500[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2501[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2502[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2503[8]))) }
    si      = { defs={} expr=v2386[32] }
    di      = { defs={} expr=v2387[32] }
    es      = { defs={} expr=v2388[16] }
    cs      = { defs={} expr=v2389[16] }
    ss      = { defs={} expr=v2390[16] }
    ds      = { defs={} expr=v2391[16] }
    fs      = { defs={} expr=v2392[16] }
    gs      = { defs={} expr=v2393[16] }
    cf      = { defs={} expr=v2394[1] }
    ?1      = { defs={} expr=v2395[1] }
    pf      = { defs={} expr=v2396[1] }
    ?3      = { defs={} expr=v2397[1] }
    af      = { defs={} expr=v2398[1] }
    ?5      = { defs={} expr=v2399[1] }
    zf      = { defs={} expr=v2400[1] }
    sf      = { defs={} expr=v2401[1] }
    tf      = { defs={} expr=v2402[1] }
    if      = { defs={} expr=v2403[1] }
    df      = { defs={} expr=v2404[1] }
    of      = { defs={} expr=v2405[1] }
    iopl0   = { defs={} expr=v2406[1] }
    iopl1   = { defs={} expr=v2407[1] }
    nt      = { defs={} expr=v2408[1] }
    ?15     = { defs={} expr=v2409[1] }
    rf      = { defs={} expr=v2410[1] }
    vm      = { defs={} expr=v2411[1] }
    ac      = { defs={} expr=v2412[1] }
    vif     = { defs={} expr=v2413[1] }
    vip     = { defs={} expr=v2414[1] }
    id      = { defs={} expr=v2415[1] }
    ?22     = { defs={} expr=v2416[1] }
    ?23     = { defs={} expr=v2417[1] }
    ?24     = { defs={} expr=v2418[1] }
    ?25     = { defs={} expr=v2419[1] }
    ?26     = { defs={} expr=v2420[1] }
    ?27     = { defs={} expr=v2421[1] }
    ?28     = { defs={} expr=v2422[1] }
    ?29     = { defs={} expr=v2423[1] }
    ?30     = { defs={} expr=v2424[1] }
    ?31     = { defs={} expr=v2425[1] }
    ip      = { defs={0x08048384,0x08048385,0x08048386} expr=0x08048387[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] v2385[32] 3[32]) }
      value = { defs={} expr=v2503[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v2385[32] 2[32]) }
      value = { defs={} expr=v2502[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v2385[32] 1[32]) }
      value = { defs={} expr=v2501[8] }
      flags = { rdonly }
    address = { defs={0x08048386} expr=v2385[32] }
      value = { defs={} expr=v2500[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v2384[32] 4[32]) 3[32]) }
      value = { defs={} expr=v2474[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v2384[32] 4[32]) 2[32]) }
      value = { defs={} expr=v2473[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v2384[32] 4[32]) 1[32]) }
      value = { defs={} expr=v2472[8] }
      flags = { rdonly }
    address = { defs={0x08048384,0x08048385} expr=(add[32] v2384[32] 4[32]) }
      value = { defs={} expr=v2471[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v2384[32] 3[32]) }
      value = { defs={} expr=v2447[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v2384[32] 2[32]) }
      value = { defs={} expr=v2446[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v2384[32] 1[32]) }
      value = { defs={} expr=v2445[8] }
      flags = { rdonly }
    address = { defs={0x08048384} expr=v2384[32] }
      value = { defs={} expr=v2444[8] }
      flags = { rdonly }
null state
null state
0x8048387:ret    
registers:
    ax      = { v33235 }
    cx      = { v33181 }
    dx      = { v33182 }
    bx      = { v33245 }
    sp      = { v33185+0x8 }
    bp      = { v33256 }
    si      = { v33186 }
    di      = { v33187 }
    es      = { v33188 }
    cs      = { v33189 }
    ss      = { v33190 }
    ds      = { v33191 }
    fs      = { v33192 }
    gs      = { v33193 }
    cf      = { v33194 }
    ?1      = { v33195 }
    pf      = { v33196 }
    ?3      = { v33197 }
    af      = { v33198 }
    ?5      = { v33199 }
    zf      = { v33200 }
    sf      = { v33201 }
    tf      = { v33202 }
    if      = { v33203 }
    df      = { v33204 }
    of      = { v33205 }
    iopl0   = { v33206 }
    iopl1   = { v33207 }
    nt      = { v33208 }
    ?15     = { v33209 }
    rf      = { v33210 }
    vm      = { v33211 }
    ac      = { v33212 }
    vif     = { v33213 }
    vip     = { v33214 }
    id      = { v33215 }
    ?22     = { v33216 }
    ?23     = { v33217 }
    ?24     = { v33218 }
    ?25     = { v33219 }
    ?26     = { v33220 }
    ?27     = { v33221 }
    ?28     = { v33222 }
    ?29     = { v33223 }
    ?30     = { v33224 }
    ?31     = { v33225 }
    ip      = { v33268 }
memory:
    address = { v33184 }
      value = { v33235 }
      flags = { size=4; read-only }
    address = { v33184+0x4 }
      value = { v33245 }
      flags = { size=4; read-only }
    address = { v33185 }
      value = { v33256 }
      flags = { size=4; read-only }
    address = { v33185+0x4 }
      value = { v33268 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x08048384} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2444[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2445[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2446[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2447[8]))) }
    cx      = { defs={} expr=v2381[32] }
    dx      = { defs={} expr=v2382[32] }
    bx      = { defs={0x08048385} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2471[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2472[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2473[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2474[8]))) }
    sp      = { defs={0x08048386,0x08048387} expr=(add[32] (add[32] v2385[32] 4[32]) 4[32]) }
    bp      = { defs={0x08048386} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2500[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2501[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2502[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2503[8]))) }
    si      = { defs={} expr=v2386[32] }
    di      = { defs={} expr=v2387[32] }
    es      = { defs={} expr=v2388[16] }
    cs      = { defs={} expr=v2389[16] }
    ss      = { defs={} expr=v2390[16] }
    ds      = { defs={} expr=v2391[16] }
    fs      = { defs={} expr=v2392[16] }
    gs      = { defs={} expr=v2393[16] }
    cf      = { defs={} expr=v2394[1] }
    ?1      = { defs={} expr=v2395[1] }
    pf      = { defs={} expr=v2396[1] }
    ?3      = { defs={} expr=v2397[1] }
    af      = { defs={} expr=v2398[1] }
    ?5      = { defs={} expr=v2399[1] }
    zf      = { defs={} expr=v2400[1] }
    sf      = { defs={} expr=v2401[1] }
    tf      = { defs={} expr=v2402[1] }
    if      = { defs={} expr=v2403[1] }
    df      = { defs={} expr=v2404[1] }
    of      = { defs={} expr=v2405[1] }
    iopl0   = { defs={} expr=v2406[1] }
    iopl1   = { defs={} expr=v2407[1] }
    nt      = { defs={} expr=v2408[1] }
    ?15     = { defs={} expr=v2409[1] }
    rf      = { defs={} expr=v2410[1] }
    vm      = { defs={} expr=v2411[1] }
    ac      = { defs={} expr=v2412[1] }
    vif     = { defs={} expr=v2413[1] }
    vip     = { defs={} expr=v2414[1] }
    id      = { defs={} expr=v2415[1] }
    ?22     = { defs={} expr=v2416[1] }
    ?23     = { defs={} expr=v2417[1] }
    ?24     = { defs={} expr=v2418[1] }
    ?25     = { defs={} expr=v2419[1] }
    ?26     = { defs={} expr=v2420[1] }
    ?27     = { defs={} expr=v2421[1] }
    ?28     = { defs={} expr=v2422[1] }
    ?29     = { defs={} expr=v2423[1] }
    ?30     = { defs={} expr=v2424[1] }
    ?31     = { defs={} expr=v2425[1] }
    ip      = { defs={0x08048387} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2530[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2531[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2532[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2533[8]))) }
memory:
init mem:
    address = { defs={} expr=(add[32] (add[32] v2385[32] 4[32]) 3[32]) }
      value = { defs={} expr=v2533[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v2385[32] 4[32]) 2[32]) }
      value = { defs={} expr=v2532[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v2385[32] 4[32]) 1[32]) }
      value = { defs={} expr=v2531[8] }
      flags = { rdonly }
    address = { defs={0x08048386,0x08048387} expr=(add[32] v2385[32] 4[32]) }
      value = { defs={} expr=v2530[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v2385[32] 3[32]) }
      value = { defs={} expr=v2503[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v2385[32] 2[32]) }
      value = { defs={} expr=v2502[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v2385[32] 1[32]) }
      value = { defs={} expr=v2501[8] }
      flags = { rdonly }
    address = { defs={0x08048386} expr=v2385[32] }
      value = { defs={} expr=v2500[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v2384[32] 4[32]) 3[32]) }
      value = { defs={} expr=v2474[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v2384[32] 4[32]) 2[32]) }
      value = { defs={} expr=v2473[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v2384[32] 4[32]) 1[32]) }
      value = { defs={} expr=v2472[8] }
      flags = { rdonly }
    address = { defs={0x08048384,0x08048385} expr=(add[32] v2384[32] 4[32]) }
      value = { defs={} expr=v2471[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v2384[32] 3[32]) }
      value = { defs={} expr=v2447[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v2384[32] 2[32]) }
      value = { defs={} expr=v2446[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v2384[32] 1[32]) }
      value = { defs={} expr=v2445[8] }
      flags = { rdonly }
    address = { defs={0x08048384} expr=v2384[32] }
      value = { defs={} expr=v2444[8] }
      flags = { rdonly }
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048390:push   ebp
registers:
    ax      = { v33319 }
    cx      = { v33320 }
    dx      = { v33321 }
    bx      = { v33322 }
    sp      = { v33323-0x4 }
    bp      = { v33324 }
    si      = { v33325 }
    di      = { v33326 }
    es      = { v33327 }
    cs      = { v33328 }
    ss      = { v33329 }
    ds      = { v33330 }
    fs      = { v33331 }
    gs      = { v33332 }
    cf      = { v33333 }
    ?1      = { v33334 }
    pf      = { v33335 }
    ?3      = { v33336 }
    af      = { v33337 }
    ?5      = { v33338 }
    zf      = { v33339 }
    sf      = { v33340 }
    tf      = { v33341 }
    if      = { v33342 }
    df      = { v33343 }
    of      = { v33344 }
    iopl0   = { v33345 }
    iopl1   = { v33346 }
    nt      = { v33347 }
    ?15     = { v33348 }
    rf      = { v33349 }
    vm      = { v33350 }
    ac      = { v33351 }
    vif     = { v33352 }
    vip     = { v33353 }
    id      = { v33354 }
    ?22     = { v33355 }
    ?23     = { v33356 }
    ?24     = { v33357 }
    ?25     = { v33358 }
    ?26     = { v33359 }
    ?27     = { v33360 }
    ?28     = { v33361 }
    ?29     = { v33362 }
    ?30     = { v33363 }
    ?31     = { v33364 }
    ip      = { 0x8048391 }
memory:
    address = { v33323-0x4 }
      value = { v33324 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v2591[32] }
    cx      = { defs={} expr=v2592[32] }
    dx      = { defs={} expr=v2593[32] }
    bx      = { defs={} expr=v2594[32] }
    sp      = { defs={0x08048390} expr=(add[32] v2595[32] -4[32]) }
    bp      = { defs={} expr=v2596[32] }
    si      = { defs={} expr=v2597[32] }
    di      = { defs={} expr=v2598[32] }
    es      = { defs={} expr=v2599[16] }
    cs      = { defs={} expr=v2600[16] }
    ss      = { defs={} expr=v2601[16] }
    ds      = { defs={} expr=v2602[16] }
    fs      = { defs={} expr=v2603[16] }
    gs      = { defs={} expr=v2604[16] }
    cf      = { defs={} expr=v2605[1] }
    ?1      = { defs={} expr=v2606[1] }
    pf      = { defs={} expr=v2607[1] }
    ?3      = { defs={} expr=v2608[1] }
    af      = { defs={} expr=v2609[1] }
    ?5      = { defs={} expr=v2610[1] }
    zf      = { defs={} expr=v2611[1] }
    sf      = { defs={} expr=v2612[1] }
    tf      = { defs={} expr=v2613[1] }
    if      = { defs={} expr=v2614[1] }
    df      = { defs={} expr=v2615[1] }
    of      = { defs={} expr=v2616[1] }
    iopl0   = { defs={} expr=v2617[1] }
    iopl1   = { defs={} expr=v2618[1] }
    nt      = { defs={} expr=v2619[1] }
    ?15     = { defs={} expr=v2620[1] }
    rf      = { defs={} expr=v2621[1] }
    vm      = { defs={} expr=v2622[1] }
    ac      = { defs={} expr=v2623[1] }
    vif     = { defs={} expr=v2624[1] }
    vip     = { defs={} expr=v2625[1] }
    id      = { defs={} expr=v2626[1] }
    ?22     = { defs={} expr=v2627[1] }
    ?23     = { defs={} expr=v2628[1] }
    ?24     = { defs={} expr=v2629[1] }
    ?25     = { defs={} expr=v2630[1] }
    ?26     = { defs={} expr=v2631[1] }
    ?27     = { defs={} expr=v2632[1] }
    ?28     = { defs={} expr=v2633[1] }
    ?29     = { defs={} expr=v2634[1] }
    ?30     = { defs={} expr=v2635[1] }
    ?31     = { defs={} expr=v2636[1] }
    ip      = { defs={0x08048390} expr=0x08048391[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v2595[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v2596[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v2595[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v2596[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v2595[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v2596[32]) }
      flags = { }
    address = { defs={0x08048390} expr=(add[32] v2595[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v2596[32]) }
      flags = { }
init mem:
null state
null state
0x8048391:mov    ebp, esp
registers:
    ax      = { v33319 }
    cx      = { v33320 }
    dx      = { v33321 }
    bx      = { v33322 }
    sp      = { v33323-0x4 }
    bp      = { v33323-0x4 }
    si      = { v33325 }
    di      = { v33326 }
    es      = { v33327 }
    cs      = { v33328 }
    ss      = { v33329 }
    ds      = { v33330 }
    fs      = { v33331 }
    gs      = { v33332 }
    cf      = { v33333 }
    ?1      = { v33334 }
    pf      = { v33335 }
    ?3      = { v33336 }
    af      = { v33337 }
    ?5      = { v33338 }
    zf      = { v33339 }
    sf      = { v33340 }
    tf      = { v33341 }
    if      = { v33342 }
    df      = { v33343 }
    of      = { v33344 }
    iopl0   = { v33345 }
    iopl1   = { v33346 }
    nt      = { v33347 }
    ?15     = { v33348 }
    rf      = { v33349 }
    vm      = { v33350 }
    ac      = { v33351 }
    vif     = { v33352 }
    vip     = { v33353 }
    id      = { v33354 }
    ?22     = { v33355 }
    ?23     = { v33356 }
    ?24     = { v33357 }
    ?25     = { v33358 }
    ?26     = { v33359 }
    ?27     = { v33360 }
    ?28     = { v33361 }
    ?29     = { v33362 }
    ?30     = { v33363 }
    ?31     = { v33364 }
    ip      = { 0x8048393 }
memory:
    address = { v33323-0x4 }
      value = { v33324 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v2591[32] }
    cx      = { defs={} expr=v2592[32] }
    dx      = { defs={} expr=v2593[32] }
    bx      = { defs={} expr=v2594[32] }
    sp      = { defs={0x08048390} expr=(add[32] v2595[32] -4[32]) }
    bp      = { defs={0x08048390,0x08048391} expr=(add[32] v2595[32] -4[32]) }
    si      = { defs={} expr=v2597[32] }
    di      = { defs={} expr=v2598[32] }
    es      = { defs={} expr=v2599[16] }
    cs      = { defs={} expr=v2600[16] }
    ss      = { defs={} expr=v2601[16] }
    ds      = { defs={} expr=v2602[16] }
    fs      = { defs={} expr=v2603[16] }
    gs      = { defs={} expr=v2604[16] }
    cf      = { defs={} expr=v2605[1] }
    ?1      = { defs={} expr=v2606[1] }
    pf      = { defs={} expr=v2607[1] }
    ?3      = { defs={} expr=v2608[1] }
    af      = { defs={} expr=v2609[1] }
    ?5      = { defs={} expr=v2610[1] }
    zf      = { defs={} expr=v2611[1] }
    sf      = { defs={} expr=v2612[1] }
    tf      = { defs={} expr=v2613[1] }
    if      = { defs={} expr=v2614[1] }
    df      = { defs={} expr=v2615[1] }
    of      = { defs={} expr=v2616[1] }
    iopl0   = { defs={} expr=v2617[1] }
    iopl1   = { defs={} expr=v2618[1] }
    nt      = { defs={} expr=v2619[1] }
    ?15     = { defs={} expr=v2620[1] }
    rf      = { defs={} expr=v2621[1] }
    vm      = { defs={} expr=v2622[1] }
    ac      = { defs={} expr=v2623[1] }
    vif     = { defs={} expr=v2624[1] }
    vip     = { defs={} expr=v2625[1] }
    id      = { defs={} expr=v2626[1] }
    ?22     = { defs={} expr=v2627[1] }
    ?23     = { defs={} expr=v2628[1] }
    ?24     = { defs={} expr=v2629[1] }
    ?25     = { defs={} expr=v2630[1] }
    ?26     = { defs={} expr=v2631[1] }
    ?27     = { defs={} expr=v2632[1] }
    ?28     = { defs={} expr=v2633[1] }
    ?29     = { defs={} expr=v2634[1] }
    ?30     = { defs={} expr=v2635[1] }
    ?31     = { defs={} expr=v2636[1] }
    ip      = { defs={0x08048390,0x08048391} expr=0x08048393[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v2595[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v2596[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v2595[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v2596[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v2595[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v2596[32]) }
      flags = { }
    address = { defs={0x08048390} expr=(add[32] v2595[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v2596[32]) }
      flags = { }
init mem:
null state
null state
0x8048393:sub    esp, 0x08
registers:
    ax      = { v33319 }
    cx      = { v33320 }
    dx      = { v33321 }
    bx      = { v33322 }
    sp      = { v33323-0xc }
    bp      = { v33323-0x4 }
    si      = { v33325 }
    di      = { v33326 }
    es      = { v33327 }
    cs      = { v33328 }
    ss      = { v33329 }
    ds      = { v33330 }
    fs      = { v33331 }
    gs      = { v33332 }
    cf      = { -v33430+0x1 }
    ?1      = { v33334 }
    pf      = { -v33420+0x1 }
    ?3      = { v33336 }
    af      = { -v33427+0x1 }
    ?5      = { v33338 }
    zf      = { v33425 }
    sf      = { v33423 }
    tf      = { v33341 }
    if      = { v33342 }
    df      = { v33343 }
    of      = { v33437 }
    iopl0   = { v33345 }
    iopl1   = { v33346 }
    nt      = { v33347 }
    ?15     = { v33348 }
    rf      = { v33349 }
    vm      = { v33350 }
    ac      = { v33351 }
    vif     = { v33352 }
    vip     = { v33353 }
    id      = { v33354 }
    ?22     = { v33355 }
    ?23     = { v33356 }
    ?24     = { v33357 }
    ?25     = { v33358 }
    ?26     = { v33359 }
    ?27     = { v33360 }
    ?28     = { v33361 }
    ?29     = { v33362 }
    ?30     = { v33363 }
    ?31     = { v33364 }
    ip      = { 0x8048396 }
memory:
    address = { v33323-0x4 }
      value = { v33324 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v2591[32] }
    cx      = { defs={} expr=v2592[32] }
    dx      = { defs={} expr=v2593[32] }
    bx      = { defs={} expr=v2594[32] }
    sp      = { defs={0x08048390,0x08048393} expr=(add[32] (add[32] v2595[32] -4[32]) -8[32]) }
    bp      = { defs={0x08048390,0x08048391} expr=(add[32] v2595[32] -4[32]) }
    si      = { defs={} expr=v2597[32] }
    di      = { defs={} expr=v2598[32] }
    es      = { defs={} expr=v2599[16] }
    cs      = { defs={} expr=v2600[16] }
    ss      = { defs={} expr=v2601[16] }
    ds      = { defs={} expr=v2602[16] }
    fs      = { defs={} expr=v2603[16] }
    gs      = { defs={} expr=v2604[16] }
    cf      = { defs={0x08048390,0x08048393} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2595[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2595[32] -4[32])) 4294967288[33])))))) }
    ?1      = { defs={} expr=v2606[1] }
    pf      = { defs={0x08048390,0x08048393} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2595[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2595[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2595[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2595[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2595[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2595[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2595[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2595[32] -4[32]) -8[32]))))))) }
    ?3      = { defs={} expr=v2608[1] }
    af      = { defs={0x08048390,0x08048393} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2595[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2595[32] -4[32])) 4294967288[33])))))) }
    ?5      = { defs={} expr=v2610[1] }
    zf      = { defs={0x08048390,0x08048393} expr=(zerop[1] (add[32] (add[32] v2595[32] -4[32]) -8[32])) }
    sf      = { defs={0x08048390,0x08048393} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v2595[32] -4[32]) -8[32])) }
    tf      = { defs={} expr=v2613[1] }
    if      = { defs={} expr=v2614[1] }
    df      = { defs={} expr=v2615[1] }
    of      = { defs={0x08048390,0x08048393} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2595[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2595[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2595[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2595[32] -4[32])) 4294967288[33])))))) }
    iopl0   = { defs={} expr=v2617[1] }
    iopl1   = { defs={} expr=v2618[1] }
    nt      = { defs={} expr=v2619[1] }
    ?15     = { defs={} expr=v2620[1] }
    rf      = { defs={} expr=v2621[1] }
    vm      = { defs={} expr=v2622[1] }
    ac      = { defs={} expr=v2623[1] }
    vif     = { defs={} expr=v2624[1] }
    vip     = { defs={} expr=v2625[1] }
    id      = { defs={} expr=v2626[1] }
    ?22     = { defs={} expr=v2627[1] }
    ?23     = { defs={} expr=v2628[1] }
    ?24     = { defs={} expr=v2629[1] }
    ?25     = { defs={} expr=v2630[1] }
    ?26     = { defs={} expr=v2631[1] }
    ?27     = { defs={} expr=v2632[1] }
    ?28     = { defs={} expr=v2633[1] }
    ?29     = { defs={} expr=v2634[1] }
    ?30     = { defs={} expr=v2635[1] }
    ?31     = { defs={} expr=v2636[1] }
    ip      = { defs={0x08048390,0x08048391,0x08048393} expr=0x08048396[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v2595[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v2596[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v2595[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v2596[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v2595[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v2596[32]) }
      flags = { }
    address = { defs={0x08048390} expr=(add[32] v2595[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v2596[32]) }
      flags = { }
init mem:
null state
null state
0x8048396:cmp    BYTE PTR ds:[0x080496f4<.bss>], 0x00
registers:
    ax      = { v33319 }
    cx      = { v33320 }
    dx      = { v33321 }
    bx      = { v33322 }
    sp      = { v33323-0xc }
    bp      = { v33323-0x4 }
    si      = { v33325 }
    di      = { v33326 }
    es      = { v33327 }
    cs      = { v33328 }
    ss      = { v33329 }
    ds      = { v33330 }
    fs      = { v33331 }
    gs      = { v33332 }
    cf      = { -v33492+0x1 }
    ?1      = { v33334 }
    pf      = { -v33482+0x1 }
    ?3      = { v33336 }
    af      = { -v33489+0x1 }
    ?5      = { v33338 }
    zf      = { v33487 }
    sf      = { v33485 }
    tf      = { v33341 }
    if      = { v33342 }
    df      = { v33343 }
    of      = { v33499 }
    iopl0   = { v33345 }
    iopl1   = { v33346 }
    nt      = { v33347 }
    ?15     = { v33348 }
    rf      = { v33349 }
    vm      = { v33350 }
    ac      = { v33351 }
    vif     = { v33352 }
    vip     = { v33353 }
    id      = { v33354 }
    ?22     = { v33355 }
    ?23     = { v33356 }
    ?24     = { v33357 }
    ?25     = { v33358 }
    ?26     = { v33359 }
    ?27     = { v33360 }
    ?28     = { v33361 }
    ?29     = { v33362 }
    ?30     = { v33363 }
    ?31     = { v33364 }
    ip      = { 0x804839d }
memory:
    address = { v33323-0x4 }
      value = { v33324 }
      flags = { size=4 }
    address = { 0x80496f4 }
      value = { v33448 }
      flags = { size=1; read-only }
registers:
    ax      = { defs={} expr=v2591[32] }
    cx      = { defs={} expr=v2592[32] }
    dx      = { defs={} expr=v2593[32] }
    bx      = { defs={} expr=v2594[32] }
    sp      = { defs={0x08048390,0x08048393} expr=(add[32] (add[32] v2595[32] -4[32]) -8[32]) }
    bp      = { defs={0x08048390,0x08048391} expr=(add[32] v2595[32] -4[32]) }
    si      = { defs={} expr=v2597[32] }
    di      = { defs={} expr=v2598[32] }
    es      = { defs={} expr=v2599[16] }
    cs      = { defs={} expr=v2600[16] }
    ss      = { defs={} expr=v2601[16] }
    ds      = { defs={} expr=v2602[16] }
    fs      = { defs={} expr=v2603[16] }
    gs      = { defs={} expr=v2604[16] }
    cf      = { defs={0x08048396} expr=(invert[1] (extract[1] 7[32] 8[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] v2772[8]) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] v2772[8]) -256[9])))))) }
    ?1      = { defs={} expr=v2606[1] }
    pf      = { defs={0x08048396} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] v2772[8]) (extract[1] 1[32] 2[32] v2772[8])) (bv-xor[1] (extract[1] 2[32] 3[32] v2772[8]) (extract[1] 3[32] 4[32] v2772[8]))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] v2772[8]) (extract[1] 5[32] 6[32] v2772[8])) (bv-xor[1] (extract[1] 6[32] 7[32] v2772[8]) (extract[1] 7[32] 8[32] v2772[8]))))) }
    ?3      = { defs={} expr=v2608[1] }
    af      = { defs={0x08048396} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] v2772[8]) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] v2772[8]) -256[9])))))) }
    ?5      = { defs={} expr=v2610[1] }
    zf      = { defs={0x08048396} expr=(zerop[1] v2772[8]) }
    sf      = { defs={0x08048396} expr=(extract[1] 7[32] 8[32] v2772[8]) }
    tf      = { defs={} expr=v2613[1] }
    if      = { defs={} expr=v2614[1] }
    df      = { defs={} expr=v2615[1] }
    of      = { defs={0x08048396} expr=(bv-xor[1] (extract[1] 7[32] 8[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] v2772[8]) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] v2772[8]) -256[9]))))) (extract[1] 6[32] 7[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] v2772[8]) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] v2772[8]) -256[9])))))) }
    iopl0   = { defs={} expr=v2617[1] }
    iopl1   = { defs={} expr=v2618[1] }
    nt      = { defs={} expr=v2619[1] }
    ?15     = { defs={} expr=v2620[1] }
    rf      = { defs={} expr=v2621[1] }
    vm      = { defs={} expr=v2622[1] }
    ac      = { defs={} expr=v2623[1] }
    vif     = { defs={} expr=v2624[1] }
    vip     = { defs={} expr=v2625[1] }
    id      = { defs={} expr=v2626[1] }
    ?22     = { defs={} expr=v2627[1] }
    ?23     = { defs={} expr=v2628[1] }
    ?24     = { defs={} expr=v2629[1] }
    ?25     = { defs={} expr=v2630[1] }
    ?26     = { defs={} expr=v2631[1] }
    ?27     = { defs={} expr=v2632[1] }
    ?28     = { defs={} expr=v2633[1] }
    ?29     = { defs={} expr=v2634[1] }
    ?30     = { defs={} expr=v2635[1] }
    ?31     = { defs={} expr=v2636[1] }
    ip      = { defs={0x08048390,0x08048391,0x08048393,0x08048396} expr=0x0804839d[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v2595[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v2596[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v2595[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v2596[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v2595[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v2596[32]) }
      flags = { }
    address = { defs={0x08048390} expr=(add[32] v2595[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v2596[32]) }
      flags = { }
init mem:
    address = { defs={0x08048396} expr=0x080496f4[32] }
      value = { defs={} expr=v2772[8] }
      flags = { rdonly }
null state
null state
0x804839d:jne    0x080483cc<<Insn>>
registers:
    ax      = { v33319 }
    cx      = { v33320 }
    dx      = { v33321 }
    bx      = { v33322 }
    sp      = { v33323-0xc }
    bp      = { v33323-0x4 }
    si      = { v33325 }
    di      = { v33326 }
    es      = { v33327 }
    cs      = { v33328 }
    ss      = { v33329 }
    ds      = { v33330 }
    fs      = { v33331 }
    gs      = { v33332 }
    cf      = { -v33492+0x1 }
    ?1      = { v33334 }
    pf      = { -v33482+0x1 }
    ?3      = { v33336 }
    af      = { -v33489+0x1 }
    ?5      = { v33338 }
    zf      = { v33487 }
    sf      = { v33485 }
    tf      = { v33341 }
    if      = { v33342 }
    df      = { v33343 }
    of      = { v33499 }
    iopl0   = { v33345 }
    iopl1   = { v33346 }
    nt      = { v33347 }
    ?15     = { v33348 }
    rf      = { v33349 }
    vm      = { v33350 }
    ac      = { v33351 }
    vif     = { v33352 }
    vip     = { v33353 }
    id      = { v33354 }
    ?22     = { v33355 }
    ?23     = { v33356 }
    ?24     = { v33357 }
    ?25     = { v33358 }
    ?26     = { v33359 }
    ?27     = { v33360 }
    ?28     = { v33361 }
    ?29     = { v33362 }
    ?30     = { v33363 }
    ?31     = { v33364 }
    ip      = { v33509 }
memory:
    address = { v33323-0x4 }
      value = { v33324 }
      flags = { size=4 }
    address = { 0x80496f4 }
      value = { v33448 }
      flags = { size=1; read-only }
registers:
    ax      = { defs={} expr=v2591[32] }
    cx      = { defs={} expr=v2592[32] }
    dx      = { defs={} expr=v2593[32] }
    bx      = { defs={} expr=v2594[32] }
    sp      = { defs={0x08048390,0x08048393} expr=(add[32] (add[32] v2595[32] -4[32]) -8[32]) }
    bp      = { defs={0x08048390,0x08048391} expr=(add[32] v2595[32] -4[32]) }
    si      = { defs={} expr=v2597[32] }
    di      = { defs={} expr=v2598[32] }
    es      = { defs={} expr=v2599[16] }
    cs      = { defs={} expr=v2600[16] }
    ss      = { defs={} expr=v2601[16] }
    ds      = { defs={} expr=v2602[16] }
    fs      = { defs={} expr=v2603[16] }
    gs      = { defs={} expr=v2604[16] }
    cf      = { defs={0x08048396} expr=(invert[1] (extract[1] 7[32] 8[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] v2772[8]) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] v2772[8]) -256[9])))))) }
    ?1      = { defs={} expr=v2606[1] }
    pf      = { defs={0x08048396} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] v2772[8]) (extract[1] 1[32] 2[32] v2772[8])) (bv-xor[1] (extract[1] 2[32] 3[32] v2772[8]) (extract[1] 3[32] 4[32] v2772[8]))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] v2772[8]) (extract[1] 5[32] 6[32] v2772[8])) (bv-xor[1] (extract[1] 6[32] 7[32] v2772[8]) (extract[1] 7[32] 8[32] v2772[8]))))) }
    ?3      = { defs={} expr=v2608[1] }
    af      = { defs={0x08048396} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] v2772[8]) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] v2772[8]) -256[9])))))) }
    ?5      = { defs={} expr=v2610[1] }
    zf      = { defs={0x08048396} expr=(zerop[1] v2772[8]) }
    sf      = { defs={0x08048396} expr=(extract[1] 7[32] 8[32] v2772[8]) }
    tf      = { defs={} expr=v2613[1] }
    if      = { defs={} expr=v2614[1] }
    df      = { defs={} expr=v2615[1] }
    of      = { defs={0x08048396} expr=(bv-xor[1] (extract[1] 7[32] 8[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] v2772[8]) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] v2772[8]) -256[9]))))) (extract[1] 6[32] 7[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] v2772[8]) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] v2772[8]) -256[9])))))) }
    iopl0   = { defs={} expr=v2617[1] }
    iopl1   = { defs={} expr=v2618[1] }
    nt      = { defs={} expr=v2619[1] }
    ?15     = { defs={} expr=v2620[1] }
    rf      = { defs={} expr=v2621[1] }
    vm      = { defs={} expr=v2622[1] }
    ac      = { defs={} expr=v2623[1] }
    vif     = { defs={} expr=v2624[1] }
    vip     = { defs={} expr=v2625[1] }
    id      = { defs={} expr=v2626[1] }
    ?22     = { defs={} expr=v2627[1] }
    ?23     = { defs={} expr=v2628[1] }
    ?24     = { defs={} expr=v2629[1] }
    ?25     = { defs={} expr=v2630[1] }
    ?26     = { defs={} expr=v2631[1] }
    ?27     = { defs={} expr=v2632[1] }
    ?28     = { defs={} expr=v2633[1] }
    ?29     = { defs={} expr=v2634[1] }
    ?30     = { defs={} expr=v2635[1] }
    ?31     = { defs={} expr=v2636[1] }
    ip      = { defs={0x08048390,0x08048391,0x08048393,0x08048396,0x0804839d} expr=(ite[32] (invert[1] (zerop[1] v2772[8])) 0x080483cc[32] 0x0804839f[32]) }
memory:
    address = { defs={} expr=(add[32] (add[32] v2595[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v2596[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v2595[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v2596[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v2595[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v2596[32]) }
      flags = { }
    address = { defs={0x08048390} expr=(add[32] v2595[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v2596[32]) }
      flags = { }
init mem:
    address = { defs={0x08048396} expr=0x080496f4[32] }
      value = { defs={} expr=v2772[8] }
      flags = { rdonly }
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804839f:mov    eax, DWORD PTR ds:[0x080496f0<.data+8>]
registers:
    ax      = { v33612 }
    cx      = { v33560 }
    dx      = { v33561 }
    bx      = { v33562 }
    sp      = { v33563 }
    bp      = { v33564 }
    si      = { v33565 }
    di      = { v33566 }
    es      = { v33567 }
    cs      = { v33568 }
    ss      = { v33569 }
    ds      = { v33570 }
    fs      = { v33571 }
    gs      = { v33572 }
    cf      = { v33573 }
    ?1      = { v33574 }
    pf      = { v33575 }
    ?3      = { v33576 }
    af      = { v33577 }
    ?5      = { v33578 }
    zf      = { v33579 }
    sf      = { v33580 }
    tf      = { v33581 }
    if      = { v33582 }
    df      = { v33583 }
    of      = { v33584 }
    iopl0   = { v33585 }
    iopl1   = { v33586 }
    nt      = { v33587 }
    ?15     = { v33588 }
    rf      = { v33589 }
    vm      = { v33590 }
    ac      = { v33591 }
    vif     = { v33592 }
    vip     = { v33593 }
    id      = { v33594 }
    ?22     = { v33595 }
    ?23     = { v33596 }
    ?24     = { v33597 }
    ?25     = { v33598 }
    ?26     = { v33599 }
    ?27     = { v33600 }
    ?28     = { v33601 }
    ?29     = { v33602 }
    ?30     = { v33603 }
    ?31     = { v33604 }
    ip      = { 0x80483a4 }
memory:
    address = { 0x80496f0 }
      value = { v33612 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x0804839f} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2976[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2977[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2978[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2979[8]))) }
    cx      = { defs={} expr=v2918[32] }
    dx      = { defs={} expr=v2919[32] }
    bx      = { defs={} expr=v2920[32] }
    sp      = { defs={} expr=v2921[32] }
    bp      = { defs={} expr=v2922[32] }
    si      = { defs={} expr=v2923[32] }
    di      = { defs={} expr=v2924[32] }
    es      = { defs={} expr=v2925[16] }
    cs      = { defs={} expr=v2926[16] }
    ss      = { defs={} expr=v2927[16] }
    ds      = { defs={} expr=v2928[16] }
    fs      = { defs={} expr=v2929[16] }
    gs      = { defs={} expr=v2930[16] }
    cf      = { defs={} expr=v2931[1] }
    ?1      = { defs={} expr=v2932[1] }
    pf      = { defs={} expr=v2933[1] }
    ?3      = { defs={} expr=v2934[1] }
    af      = { defs={} expr=v2935[1] }
    ?5      = { defs={} expr=v2936[1] }
    zf      = { defs={} expr=v2937[1] }
    sf      = { defs={} expr=v2938[1] }
    tf      = { defs={} expr=v2939[1] }
    if      = { defs={} expr=v2940[1] }
    df      = { defs={} expr=v2941[1] }
    of      = { defs={} expr=v2942[1] }
    iopl0   = { defs={} expr=v2943[1] }
    iopl1   = { defs={} expr=v2944[1] }
    nt      = { defs={} expr=v2945[1] }
    ?15     = { defs={} expr=v2946[1] }
    rf      = { defs={} expr=v2947[1] }
    vm      = { defs={} expr=v2948[1] }
    ac      = { defs={} expr=v2949[1] }
    vif     = { defs={} expr=v2950[1] }
    vip     = { defs={} expr=v2951[1] }
    id      = { defs={} expr=v2952[1] }
    ?22     = { defs={} expr=v2953[1] }
    ?23     = { defs={} expr=v2954[1] }
    ?24     = { defs={} expr=v2955[1] }
    ?25     = { defs={} expr=v2956[1] }
    ?26     = { defs={} expr=v2957[1] }
    ?27     = { defs={} expr=v2958[1] }
    ?28     = { defs={} expr=v2959[1] }
    ?29     = { defs={} expr=v2960[1] }
    ?30     = { defs={} expr=v2961[1] }
    ?31     = { defs={} expr=v2962[1] }
    ip      = { defs={0x0804839f} expr=0x080483a4[32] }
memory:
init mem:
    address = { defs={} expr=0x080496f3[32] }
      value = { defs={} expr=v2979[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496f2[32] }
      value = { defs={} expr=v2978[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496f1[32] }
      value = { defs={} expr=v2977[8] }
      flags = { rdonly }
    address = { defs={0x0804839f} expr=0x080496f0[32] }
      value = { defs={} expr=v2976[8] }
      flags = { rdonly }
null state
null state
0x80483a4:mov    edx, DWORD PTR ds:[eax]
registers:
    ax      = { v33612 }
    cx      = { v33560 }
    dx      = { v33620 }
    bx      = { v33562 }
    sp      = { v33563 }
    bp      = { v33564 }
    si      = { v33565 }
    di      = { v33566 }
    es      = { v33567 }
    cs      = { v33568 }
    ss      = { v33569 }
    ds      = { v33570 }
    fs      = { v33571 }
    gs      = { v33572 }
    cf      = { v33573 }
    ?1      = { v33574 }
    pf      = { v33575 }
    ?3      = { v33576 }
    af      = { v33577 }
    ?5      = { v33578 }
    zf      = { v33579 }
    sf      = { v33580 }
    tf      = { v33581 }
    if      = { v33582 }
    df      = { v33583 }
    of      = { v33584 }
    iopl0   = { v33585 }
    iopl1   = { v33586 }
    nt      = { v33587 }
    ?15     = { v33588 }
    rf      = { v33589 }
    vm      = { v33590 }
    ac      = { v33591 }
    vif     = { v33592 }
    vip     = { v33593 }
    id      = { v33594 }
    ?22     = { v33595 }
    ?23     = { v33596 }
    ?24     = { v33597 }
    ?25     = { v33598 }
    ?26     = { v33599 }
    ?27     = { v33600 }
    ?28     = { v33601 }
    ?29     = { v33602 }
    ?30     = { v33603 }
    ?31     = { v33604 }
    ip      = { 0x80483a6 }
memory:
    address = { 0x80496f0 }
      value = { v33612 }
      flags = { size=4; read-only }
    address = { v33612 }
      value = { v33620 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x0804839f} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2976[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2977[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2978[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2979[8]))) }
    cx      = { defs={} expr=v2918[32] }
    dx      = { defs={0x080483a4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2999[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3000[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3001[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3002[8]))) }
    bx      = { defs={} expr=v2920[32] }
    sp      = { defs={} expr=v2921[32] }
    bp      = { defs={} expr=v2922[32] }
    si      = { defs={} expr=v2923[32] }
    di      = { defs={} expr=v2924[32] }
    es      = { defs={} expr=v2925[16] }
    cs      = { defs={} expr=v2926[16] }
    ss      = { defs={} expr=v2927[16] }
    ds      = { defs={} expr=v2928[16] }
    fs      = { defs={} expr=v2929[16] }
    gs      = { defs={} expr=v2930[16] }
    cf      = { defs={} expr=v2931[1] }
    ?1      = { defs={} expr=v2932[1] }
    pf      = { defs={} expr=v2933[1] }
    ?3      = { defs={} expr=v2934[1] }
    af      = { defs={} expr=v2935[1] }
    ?5      = { defs={} expr=v2936[1] }
    zf      = { defs={} expr=v2937[1] }
    sf      = { defs={} expr=v2938[1] }
    tf      = { defs={} expr=v2939[1] }
    if      = { defs={} expr=v2940[1] }
    df      = { defs={} expr=v2941[1] }
    of      = { defs={} expr=v2942[1] }
    iopl0   = { defs={} expr=v2943[1] }
    iopl1   = { defs={} expr=v2944[1] }
    nt      = { defs={} expr=v2945[1] }
    ?15     = { defs={} expr=v2946[1] }
    rf      = { defs={} expr=v2947[1] }
    vm      = { defs={} expr=v2948[1] }
    ac      = { defs={} expr=v2949[1] }
    vif     = { defs={} expr=v2950[1] }
    vip     = { defs={} expr=v2951[1] }
    id      = { defs={} expr=v2952[1] }
    ?22     = { defs={} expr=v2953[1] }
    ?23     = { defs={} expr=v2954[1] }
    ?24     = { defs={} expr=v2955[1] }
    ?25     = { defs={} expr=v2956[1] }
    ?26     = { defs={} expr=v2957[1] }
    ?27     = { defs={} expr=v2958[1] }
    ?28     = { defs={} expr=v2959[1] }
    ?29     = { defs={} expr=v2960[1] }
    ?30     = { defs={} expr=v2961[1] }
    ?31     = { defs={} expr=v2962[1] }
    ip      = { defs={0x0804839f,0x080483a4} expr=0x080483a6[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2976[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2977[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2978[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2979[8]))) 3[32]) }
      value = { defs={} expr=v3002[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2976[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2977[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2978[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2979[8]))) 2[32]) }
      value = { defs={} expr=v3001[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2976[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2977[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2978[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2979[8]))) 1[32]) }
      value = { defs={} expr=v3000[8] }
      flags = { rdonly }
    address = { defs={0x0804839f,0x080483a4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2976[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2977[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2978[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2979[8]))) }
      value = { defs={} expr=v2999[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496f3[32] }
      value = { defs={} expr=v2979[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496f2[32] }
      value = { defs={} expr=v2978[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496f1[32] }
      value = { defs={} expr=v2977[8] }
      flags = { rdonly }
    address = { defs={0x0804839f} expr=0x080496f0[32] }
      value = { defs={} expr=v2976[8] }
      flags = { rdonly }
null state
null state
0x80483a6:test   edx, edx
registers:
    ax      = { v33612 }
    cx      = { v33560 }
    dx      = { v33620 }
    bx      = { v33562 }
    sp      = { v33563 }
    bp      = { v33564 }
    si      = { v33565 }
    di      = { v33566 }
    es      = { v33567 }
    cs      = { v33568 }
    ss      = { v33569 }
    ds      = { v33570 }
    fs      = { v33571 }
    gs      = { v33572 }
    cf      = { 0x0 }
    ?1      = { v33574 }
    pf      = { -v33658+0x1 }
    ?3      = { v33576 }
    af      = { v33666 }
    ?5      = { v33578 }
    zf      = { v33663 }
    sf      = { v33661 }
    tf      = { v33581 }
    if      = { v33582 }
    df      = { v33583 }
    of      = { 0x0 }
    iopl0   = { v33585 }
    iopl1   = { v33586 }
    nt      = { v33587 }
    ?15     = { v33588 }
    rf      = { v33589 }
    vm      = { v33590 }
    ac      = { v33591 }
    vif     = { v33592 }
    vip     = { v33593 }
    id      = { v33594 }
    ?22     = { v33595 }
    ?23     = { v33596 }
    ?24     = { v33597 }
    ?25     = { v33598 }
    ?26     = { v33599 }
    ?27     = { v33600 }
    ?28     = { v33601 }
    ?29     = { v33602 }
    ?30     = { v33603 }
    ?31     = { v33604 }
    ip      = { 0x80483a8 }
memory:
    address = { 0x80496f0 }
      value = { v33612 }
      flags = { size=4; read-only }
    address = { v33612 }
      value = { v33620 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x0804839f} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2976[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2977[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2978[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2979[8]))) }
    cx      = { defs={} expr=v2918[32] }
    dx      = { defs={0x080483a4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2999[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3000[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3001[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3002[8]))) }
    bx      = { defs={} expr=v2920[32] }
    sp      = { defs={} expr=v2921[32] }
    bp      = { defs={} expr=v2922[32] }
    si      = { defs={} expr=v2923[32] }
    di      = { defs={} expr=v2924[32] }
    es      = { defs={} expr=v2925[16] }
    cs      = { defs={} expr=v2926[16] }
    ss      = { defs={} expr=v2927[16] }
    ds      = { defs={} expr=v2928[16] }
    fs      = { defs={} expr=v2929[16] }
    gs      = { defs={} expr=v2930[16] }
    cf      = { defs={0x080483a6} expr=0[1] }
    ?1      = { defs={} expr=v2932[1] }
    pf      = { defs={0x080483a4,0x080483a6} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2999[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3000[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3001[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3002[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2999[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3000[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3001[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3002[8])))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2999[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3000[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3001[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3002[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2999[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3000[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3001[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3002[8]))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2999[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3000[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3001[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3002[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2999[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3000[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3001[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3002[8])))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2999[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3000[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3001[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3002[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2999[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3000[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3001[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3002[8])))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2999[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3000[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3001[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3002[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2999[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3000[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3001[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3002[8])))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2999[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3000[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3001[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3002[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2999[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3000[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3001[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3002[8]))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2999[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3000[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3001[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3002[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2999[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3000[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3001[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3002[8])))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2999[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3000[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3001[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3002[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2999[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3000[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3001[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3002[8])))))))))) }
    ?3      = { defs={} expr=v2934[1] }
    af      = { defs={0x080483a6} expr=v3068[1] }
    ?5      = { defs={} expr=v2936[1] }
    zf      = { defs={0x080483a4,0x080483a6} expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2999[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3000[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3001[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3002[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2999[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3000[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3001[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3002[8]))))) }
    sf      = { defs={0x080483a4,0x080483a6} expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2999[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3000[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3001[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3002[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2999[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3000[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3001[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3002[8]))))) }
    tf      = { defs={} expr=v2939[1] }
    if      = { defs={} expr=v2940[1] }
    df      = { defs={} expr=v2941[1] }
    of      = { defs={0x080483a6} expr=0[1] }
    iopl0   = { defs={} expr=v2943[1] }
    iopl1   = { defs={} expr=v2944[1] }
    nt      = { defs={} expr=v2945[1] }
    ?15     = { defs={} expr=v2946[1] }
    rf      = { defs={} expr=v2947[1] }
    vm      = { defs={} expr=v2948[1] }
    ac      = { defs={} expr=v2949[1] }
    vif     = { defs={} expr=v2950[1] }
    vip     = { defs={} expr=v2951[1] }
    id      = { defs={} expr=v2952[1] }
    ?22     = { defs={} expr=v2953[1] }
    ?23     = { defs={} expr=v2954[1] }
    ?24     = { defs={} expr=v2955[1] }
    ?25     = { defs={} expr=v2956[1] }
    ?26     = { defs={} expr=v2957[1] }
    ?27     = { defs={} expr=v2958[1] }
    ?28     = { defs={} expr=v2959[1] }
    ?29     = { defs={} expr=v2960[1] }
    ?30     = { defs={} expr=v2961[1] }
    ?31     = { defs={} expr=v2962[1] }
    ip      = { defs={0x0804839f,0x080483a4,0x080483a6} expr=0x080483a8[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2976[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2977[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2978[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2979[8]))) 3[32]) }
      value = { defs={} expr=v3002[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2976[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2977[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2978[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2979[8]))) 2[32]) }
      value = { defs={} expr=v3001[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2976[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2977[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2978[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2979[8]))) 1[32]) }
      value = { defs={} expr=v3000[8] }
      flags = { rdonly }
    address = { defs={0x0804839f,0x080483a4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2976[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2977[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2978[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2979[8]))) }
      value = { defs={} expr=v2999[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496f3[32] }
      value = { defs={} expr=v2979[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496f2[32] }
      value = { defs={} expr=v2978[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496f1[32] }
      value = { defs={} expr=v2977[8] }
      flags = { rdonly }
    address = { defs={0x0804839f} expr=0x080496f0[32] }
      value = { defs={} expr=v2976[8] }
      flags = { rdonly }
null state
null state
0x80483a8:je     0x080483c5<<Insn>>
registers:
    ax      = { v33612 }
    cx      = { v33560 }
    dx      = { v33620 }
    bx      = { v33562 }
    sp      = { v33563 }
    bp      = { v33564 }
    si      = { v33565 }
    di      = { v33566 }
    es      = { v33567 }
    cs      = { v33568 }
    ss      = { v33569 }
    ds      = { v33570 }
    fs      = { v33571 }
    gs      = { v33572 }
    cf      = { 0x0 }
    ?1      = { v33574 }
    pf      = { -v33658+0x1 }
    ?3      = { v33576 }
    af      = { v33666 }
    ?5      = { v33578 }
    zf      = { v33663 }
    sf      = { v33661 }
    tf      = { v33581 }
    if      = { v33582 }
    df      = { v33583 }
    of      = { 0x0 }
    iopl0   = { v33585 }
    iopl1   = { v33586 }
    nt      = { v33587 }
    ?15     = { v33588 }
    rf      = { v33589 }
    vm      = { v33590 }
    ac      = { v33591 }
    vif     = { v33592 }
    vip     = { v33593 }
    id      = { v33594 }
    ?22     = { v33595 }
    ?23     = { v33596 }
    ?24     = { v33597 }
    ?25     = { v33598 }
    ?26     = { v33599 }
    ?27     = { v33600 }
    ?28     = { v33601 }
    ?29     = { v33602 }
    ?30     = { v33603 }
    ?31     = { v33604 }
    ip      = { v33676 }
memory:
    address = { 0x80496f0 }
      value = { v33612 }
      flags = { size=4; read-only }
    address = { v33612 }
      value = { v33620 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x0804839f} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2976[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2977[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2978[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2979[8]))) }
    cx      = { defs={} expr=v2918[32] }
    dx      = { defs={0x080483a4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2999[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3000[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3001[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3002[8]))) }
    bx      = { defs={} expr=v2920[32] }
    sp      = { defs={} expr=v2921[32] }
    bp      = { defs={} expr=v2922[32] }
    si      = { defs={} expr=v2923[32] }
    di      = { defs={} expr=v2924[32] }
    es      = { defs={} expr=v2925[16] }
    cs      = { defs={} expr=v2926[16] }
    ss      = { defs={} expr=v2927[16] }
    ds      = { defs={} expr=v2928[16] }
    fs      = { defs={} expr=v2929[16] }
    gs      = { defs={} expr=v2930[16] }
    cf      = { defs={0x080483a6} expr=0[1] }
    ?1      = { defs={} expr=v2932[1] }
    pf      = { defs={0x080483a4,0x080483a6} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2999[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3000[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3001[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3002[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2999[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3000[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3001[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3002[8])))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2999[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3000[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3001[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3002[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2999[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3000[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3001[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3002[8]))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2999[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3000[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3001[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3002[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2999[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3000[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3001[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3002[8])))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2999[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3000[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3001[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3002[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2999[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3000[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3001[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3002[8])))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2999[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3000[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3001[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3002[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2999[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3000[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3001[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3002[8])))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2999[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3000[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3001[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3002[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2999[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3000[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3001[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3002[8]))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2999[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3000[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3001[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3002[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2999[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3000[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3001[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3002[8])))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2999[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3000[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3001[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3002[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2999[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3000[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3001[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3002[8])))))))))) }
    ?3      = { defs={} expr=v2934[1] }
    af      = { defs={0x080483a6} expr=v3068[1] }
    ?5      = { defs={} expr=v2936[1] }
    zf      = { defs={0x080483a4,0x080483a6} expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2999[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3000[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3001[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3002[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2999[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3000[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3001[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3002[8]))))) }
    sf      = { defs={0x080483a4,0x080483a6} expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2999[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3000[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3001[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3002[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2999[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3000[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3001[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3002[8]))))) }
    tf      = { defs={} expr=v2939[1] }
    if      = { defs={} expr=v2940[1] }
    df      = { defs={} expr=v2941[1] }
    of      = { defs={0x080483a6} expr=0[1] }
    iopl0   = { defs={} expr=v2943[1] }
    iopl1   = { defs={} expr=v2944[1] }
    nt      = { defs={} expr=v2945[1] }
    ?15     = { defs={} expr=v2946[1] }
    rf      = { defs={} expr=v2947[1] }
    vm      = { defs={} expr=v2948[1] }
    ac      = { defs={} expr=v2949[1] }
    vif     = { defs={} expr=v2950[1] }
    vip     = { defs={} expr=v2951[1] }
    id      = { defs={} expr=v2952[1] }
    ?22     = { defs={} expr=v2953[1] }
    ?23     = { defs={} expr=v2954[1] }
    ?24     = { defs={} expr=v2955[1] }
    ?25     = { defs={} expr=v2956[1] }
    ?26     = { defs={} expr=v2957[1] }
    ?27     = { defs={} expr=v2958[1] }
    ?28     = { defs={} expr=v2959[1] }
    ?29     = { defs={} expr=v2960[1] }
    ?30     = { defs={} expr=v2961[1] }
    ?31     = { defs={} expr=v2962[1] }
    ip      = { defs={0x0804839f,0x080483a4,0x080483a6,0x080483a8} expr=(ite[32] (zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2999[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3000[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3001[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3002[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2999[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3000[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3001[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3002[8]))))) 0x080483c5[32] 0x080483aa[32]) }
memory:
init mem:
    address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2976[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2977[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2978[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2979[8]))) 3[32]) }
      value = { defs={} expr=v3002[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2976[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2977[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2978[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2979[8]))) 2[32]) }
      value = { defs={} expr=v3001[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2976[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2977[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2978[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2979[8]))) 1[32]) }
      value = { defs={} expr=v3000[8] }
      flags = { rdonly }
    address = { defs={0x0804839f,0x080483a4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2976[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2977[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2978[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2979[8]))) }
      value = { defs={} expr=v2999[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496f3[32] }
      value = { defs={} expr=v2979[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496f2[32] }
      value = { defs={} expr=v2978[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496f1[32] }
      value = { defs={} expr=v2977[8] }
      flags = { rdonly }
    address = { defs={0x0804839f} expr=0x080496f0[32] }
      value = { defs={} expr=v2976[8] }
      flags = { rdonly }
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483aa:lea    esi, [esi + 0x00000000]
registers:
    ax      = { v33726 }
    cx      = { v33727 }
    dx      = { v33728 }
    bx      = { v33729 }
    sp      = { v33730 }
    bp      = { v33731 }
    si      = { v33732 }
    di      = { v33733 }
    es      = { v33734 }
    cs      = { v33735 }
    ss      = { v33736 }
    ds      = { v33737 }
    fs      = { v33738 }
    gs      = { v33739 }
    cf      = { v33740 }
    ?1      = { v33741 }
    pf      = { v33742 }
    ?3      = { v33743 }
    af      = { v33744 }
    ?5      = { v33745 }
    zf      = { v33746 }
    sf      = { v33747 }
    tf      = { v33748 }
    if      = { v33749 }
    df      = { v33750 }
    of      = { v33751 }
    iopl0   = { v33752 }
    iopl1   = { v33753 }
    nt      = { v33754 }
    ?15     = { v33755 }
    rf      = { v33756 }
    vm      = { v33757 }
    ac      = { v33758 }
    vif     = { v33759 }
    vip     = { v33760 }
    id      = { v33761 }
    ?22     = { v33762 }
    ?23     = { v33763 }
    ?24     = { v33764 }
    ?25     = { v33765 }
    ?26     = { v33766 }
    ?27     = { v33767 }
    ?28     = { v33768 }
    ?29     = { v33769 }
    ?30     = { v33770 }
    ?31     = { v33771 }
    ip      = { 0x80483b0 }
memory:
registers:
    ax      = { defs={} expr=v3138[32] }
    cx      = { defs={} expr=v3139[32] }
    dx      = { defs={} expr=v3140[32] }
    bx      = { defs={} expr=v3141[32] }
    sp      = { defs={} expr=v3142[32] }
    bp      = { defs={} expr=v3143[32] }
    si      = { defs={0x080483aa} expr=v3144[32] }
    di      = { defs={} expr=v3145[32] }
    es      = { defs={} expr=v3146[16] }
    cs      = { defs={} expr=v3147[16] }
    ss      = { defs={} expr=v3148[16] }
    ds      = { defs={} expr=v3149[16] }
    fs      = { defs={} expr=v3150[16] }
    gs      = { defs={} expr=v3151[16] }
    cf      = { defs={} expr=v3152[1] }
    ?1      = { defs={} expr=v3153[1] }
    pf      = { defs={} expr=v3154[1] }
    ?3      = { defs={} expr=v3155[1] }
    af      = { defs={} expr=v3156[1] }
    ?5      = { defs={} expr=v3157[1] }
    zf      = { defs={} expr=v3158[1] }
    sf      = { defs={} expr=v3159[1] }
    tf      = { defs={} expr=v3160[1] }
    if      = { defs={} expr=v3161[1] }
    df      = { defs={} expr=v3162[1] }
    of      = { defs={} expr=v3163[1] }
    iopl0   = { defs={} expr=v3164[1] }
    iopl1   = { defs={} expr=v3165[1] }
    nt      = { defs={} expr=v3166[1] }
    ?15     = { defs={} expr=v3167[1] }
    rf      = { defs={} expr=v3168[1] }
    vm      = { defs={} expr=v3169[1] }
    ac      = { defs={} expr=v3170[1] }
    vif     = { defs={} expr=v3171[1] }
    vip     = { defs={} expr=v3172[1] }
    id      = { defs={} expr=v3173[1] }
    ?22     = { defs={} expr=v3174[1] }
    ?23     = { defs={} expr=v3175[1] }
    ?24     = { defs={} expr=v3176[1] }
    ?25     = { defs={} expr=v3177[1] }
    ?26     = { defs={} expr=v3178[1] }
    ?27     = { defs={} expr=v3179[1] }
    ?28     = { defs={} expr=v3180[1] }
    ?29     = { defs={} expr=v3181[1] }
    ?30     = { defs={} expr=v3182[1] }
    ?31     = { defs={} expr=v3183[1] }
    ip      = { defs={0x080483aa} expr=0x080483b0[32] }
memory:
init mem:
null state
null state
0x80483b0:add    eax, 0x04
registers:
    ax      = { v33726+0x4 }
    cx      = { v33727 }
    dx      = { v33728 }
    bx      = { v33729 }
    sp      = { v33730 }
    bp      = { v33731 }
    si      = { v33732 }
    di      = { v33733 }
    es      = { v33734 }
    cs      = { v33735 }
    ss      = { v33736 }
    ds      = { v33737 }
    fs      = { v33738 }
    gs      = { v33739 }
    cf      = { v33827 }
    ?1      = { v33741 }
    pf      = { -v33818+0x1 }
    ?3      = { v33743 }
    af      = { v33825 }
    ?5      = { v33745 }
    zf      = { v33823 }
    sf      = { v33821 }
    tf      = { v33748 }
    if      = { v33749 }
    df      = { v33750 }
    of      = { v33833 }
    iopl0   = { v33752 }
    iopl1   = { v33753 }
    nt      = { v33754 }
    ?15     = { v33755 }
    rf      = { v33756 }
    vm      = { v33757 }
    ac      = { v33758 }
    vif     = { v33759 }
    vip     = { v33760 }
    id      = { v33761 }
    ?22     = { v33762 }
    ?23     = { v33763 }
    ?24     = { v33764 }
    ?25     = { v33765 }
    ?26     = { v33766 }
    ?27     = { v33767 }
    ?28     = { v33768 }
    ?29     = { v33769 }
    ?30     = { v33770 }
    ?31     = { v33771 }
    ip      = { 0x80483b3 }
memory:
registers:
    ax      = { defs={0x080483b0} expr=(add[32] v3138[32] 4[32]) }
    cx      = { defs={} expr=v3139[32] }
    dx      = { defs={} expr=v3140[32] }
    bx      = { defs={} expr=v3141[32] }
    sp      = { defs={} expr=v3142[32] }
    bp      = { defs={} expr=v3143[32] }
    si      = { defs={0x080483aa} expr=v3144[32] }
    di      = { defs={} expr=v3145[32] }
    es      = { defs={} expr=v3146[16] }
    cs      = { defs={} expr=v3147[16] }
    ss      = { defs={} expr=v3148[16] }
    ds      = { defs={} expr=v3149[16] }
    fs      = { defs={} expr=v3150[16] }
    gs      = { defs={} expr=v3151[16] }
    cf      = { defs={0x080483b0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3138[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v3138[32]) 4[33]))))) }
    ?1      = { defs={} expr=v3153[1] }
    pf      = { defs={0x080483b0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v3138[32] 4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v3138[32] 4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v3138[32] 4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v3138[32] 4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v3138[32] 4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v3138[32] 4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v3138[32] 4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v3138[32] 4[32]))))))) }
    ?3      = { defs={} expr=v3155[1] }
    af      = { defs={0x080483b0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3138[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v3138[32]) 4[33]))))) }
    ?5      = { defs={} expr=v3157[1] }
    zf      = { defs={0x080483b0} expr=(zerop[1] (add[32] v3138[32] 4[32])) }
    sf      = { defs={0x080483b0} expr=(extract[1] 31[32] 32[32] (add[32] v3138[32] 4[32])) }
    tf      = { defs={} expr=v3160[1] }
    if      = { defs={} expr=v3161[1] }
    df      = { defs={} expr=v3162[1] }
    of      = { defs={0x080483b0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3138[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v3138[32]) 4[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3138[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v3138[32]) 4[33])))))) }
    iopl0   = { defs={} expr=v3164[1] }
    iopl1   = { defs={} expr=v3165[1] }
    nt      = { defs={} expr=v3166[1] }
    ?15     = { defs={} expr=v3167[1] }
    rf      = { defs={} expr=v3168[1] }
    vm      = { defs={} expr=v3169[1] }
    ac      = { defs={} expr=v3170[1] }
    vif     = { defs={} expr=v3171[1] }
    vip     = { defs={} expr=v3172[1] }
    id      = { defs={} expr=v3173[1] }
    ?22     = { defs={} expr=v3174[1] }
    ?23     = { defs={} expr=v3175[1] }
    ?24     = { defs={} expr=v3176[1] }
    ?25     = { defs={} expr=v3177[1] }
    ?26     = { defs={} expr=v3178[1] }
    ?27     = { defs={} expr=v3179[1] }
    ?28     = { defs={} expr=v3180[1] }
    ?29     = { defs={} expr=v3181[1] }
    ?30     = { defs={} expr=v3182[1] }
    ?31     = { defs={} expr=v3183[1] }
    ip      = { defs={0x080483aa,0x080483b0} expr=0x080483b3[32] }
memory:
init mem:
null state
null state
0x80483b3:mov    DWORD PTR ds:[0x080496f0<.data+8>], eax
registers:
    ax      = { v33726+0x4 }
    cx      = { v33727 }
    dx      = { v33728 }
    bx      = { v33729 }
    sp      = { v33730 }
    bp      = { v33731 }
    si      = { v33732 }
    di      = { v33733 }
    es      = { v33734 }
    cs      = { v33735 }
    ss      = { v33736 }
    ds      = { v33737 }
    fs      = { v33738 }
    gs      = { v33739 }
    cf      = { v33827 }
    ?1      = { v33741 }
    pf      = { -v33818+0x1 }
    ?3      = { v33743 }
    af      = { v33825 }
    ?5      = { v33745 }
    zf      = { v33823 }
    sf      = { v33821 }
    tf      = { v33748 }
    if      = { v33749 }
    df      = { v33750 }
    of      = { v33833 }
    iopl0   = { v33752 }
    iopl1   = { v33753 }
    nt      = { v33754 }
    ?15     = { v33755 }
    rf      = { v33756 }
    vm      = { v33757 }
    ac      = { v33758 }
    vif     = { v33759 }
    vip     = { v33760 }
    id      = { v33761 }
    ?22     = { v33762 }
    ?23     = { v33763 }
    ?24     = { v33764 }
    ?25     = { v33765 }
    ?26     = { v33766 }
    ?27     = { v33767 }
    ?28     = { v33768 }
    ?29     = { v33769 }
    ?30     = { v33770 }
    ?31     = { v33771 }
    ip      = { 0x80483b8 }
memory:
    address = { 0x80496f0 }
      value = { v33726+0x4 }
      flags = { size=4 }
registers:
    ax      = { defs={0x080483b0} expr=(add[32] v3138[32] 4[32]) }
    cx      = { defs={} expr=v3139[32] }
    dx      = { defs={} expr=v3140[32] }
    bx      = { defs={} expr=v3141[32] }
    sp      = { defs={} expr=v3142[32] }
    bp      = { defs={} expr=v3143[32] }
    si      = { defs={0x080483aa} expr=v3144[32] }
    di      = { defs={} expr=v3145[32] }
    es      = { defs={} expr=v3146[16] }
    cs      = { defs={} expr=v3147[16] }
    ss      = { defs={} expr=v3148[16] }
    ds      = { defs={} expr=v3149[16] }
    fs      = { defs={} expr=v3150[16] }
    gs      = { defs={} expr=v3151[16] }
    cf      = { defs={0x080483b0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3138[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v3138[32]) 4[33]))))) }
    ?1      = { defs={} expr=v3153[1] }
    pf      = { defs={0x080483b0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v3138[32] 4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v3138[32] 4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v3138[32] 4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v3138[32] 4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v3138[32] 4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v3138[32] 4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v3138[32] 4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v3138[32] 4[32]))))))) }
    ?3      = { defs={} expr=v3155[1] }
    af      = { defs={0x080483b0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3138[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v3138[32]) 4[33]))))) }
    ?5      = { defs={} expr=v3157[1] }
    zf      = { defs={0x080483b0} expr=(zerop[1] (add[32] v3138[32] 4[32])) }
    sf      = { defs={0x080483b0} expr=(extract[1] 31[32] 32[32] (add[32] v3138[32] 4[32])) }
    tf      = { defs={} expr=v3160[1] }
    if      = { defs={} expr=v3161[1] }
    df      = { defs={} expr=v3162[1] }
    of      = { defs={0x080483b0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3138[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v3138[32]) 4[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3138[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v3138[32]) 4[33])))))) }
    iopl0   = { defs={} expr=v3164[1] }
    iopl1   = { defs={} expr=v3165[1] }
    nt      = { defs={} expr=v3166[1] }
    ?15     = { defs={} expr=v3167[1] }
    rf      = { defs={} expr=v3168[1] }
    vm      = { defs={} expr=v3169[1] }
    ac      = { defs={} expr=v3170[1] }
    vif     = { defs={} expr=v3171[1] }
    vip     = { defs={} expr=v3172[1] }
    id      = { defs={} expr=v3173[1] }
    ?22     = { defs={} expr=v3174[1] }
    ?23     = { defs={} expr=v3175[1] }
    ?24     = { defs={} expr=v3176[1] }
    ?25     = { defs={} expr=v3177[1] }
    ?26     = { defs={} expr=v3178[1] }
    ?27     = { defs={} expr=v3179[1] }
    ?28     = { defs={} expr=v3180[1] }
    ?29     = { defs={} expr=v3181[1] }
    ?30     = { defs={} expr=v3182[1] }
    ?31     = { defs={} expr=v3183[1] }
    ip      = { defs={0x080483aa,0x080483b0,0x080483b3} expr=0x080483b8[32] }
memory:
    address = { defs={} expr=0x080496f3[32] }
      value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] v3138[32] 4[32])) }
      flags = { }
    address = { defs={} expr=0x080496f2[32] }
      value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] v3138[32] 4[32])) }
      flags = { }
    address = { defs={} expr=0x080496f1[32] }
      value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] v3138[32] 4[32])) }
      flags = { }
    address = { defs={0x080483b3} expr=0x080496f0[32] }
      value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] v3138[32] 4[32])) }
      flags = { }
init mem:
null state
null state
0x80483b8:call   edx
registers:
    ax      = { v33726+0x4 }
    cx      = { v33727 }
    dx      = { v33728 }
    bx      = { v33729 }
    sp      = { v33730-0x4 }
    bp      = { v33731 }
    si      = { v33732 }
    di      = { v33733 }
    es      = { v33734 }
    cs      = { v33735 }
    ss      = { v33736 }
    ds      = { v33737 }
    fs      = { v33738 }
    gs      = { v33739 }
    cf      = { v33827 }
    ?1      = { v33741 }
    pf      = { -v33818+0x1 }
    ?3      = { v33743 }
    af      = { v33825 }
    ?5      = { v33745 }
    zf      = { v33823 }
    sf      = { v33821 }
    tf      = { v33748 }
    if      = { v33749 }
    df      = { v33750 }
    of      = { v33833 }
    iopl0   = { v33752 }
    iopl1   = { v33753 }
    nt      = { v33754 }
    ?15     = { v33755 }
    rf      = { v33756 }
    vm      = { v33757 }
    ac      = { v33758 }
    vif     = { v33759 }
    vip     = { v33760 }
    id      = { v33761 }
    ?22     = { v33762 }
    ?23     = { v33763 }
    ?24     = { v33764 }
    ?25     = { v33765 }
    ?26     = { v33766 }
    ?27     = { v33767 }
    ?28     = { v33768 }
    ?29     = { v33769 }
    ?30     = { v33770 }
    ?31     = { v33771 }
    ip      = { v33728 }
memory:
    address = { 0x80496f0 }
      value = { v33726+0x4 }
      flags = { size=4; clobbered }
    address = { v33730-0x4 }
      value = { 0x80483ba }
      flags = { size=4 }
registers:
    ax      = { defs={0x080483b0} expr=(add[32] v3138[32] 4[32]) }
    cx      = { defs={} expr=v3139[32] }
    dx      = { defs={} expr=v3140[32] }
    bx      = { defs={} expr=v3141[32] }
    sp      = { defs={0x080483b8} expr=(add[32] v3142[32] -4[32]) }
    bp      = { defs={} expr=v3143[32] }
    si      = { defs={0x080483aa} expr=v3144[32] }
    di      = { defs={} expr=v3145[32] }
    es      = { defs={} expr=v3146[16] }
    cs      = { defs={} expr=v3147[16] }
    ss      = { defs={} expr=v3148[16] }
    ds      = { defs={} expr=v3149[16] }
    fs      = { defs={} expr=v3150[16] }
    gs      = { defs={} expr=v3151[16] }
    cf      = { defs={0x080483b0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3138[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v3138[32]) 4[33]))))) }
    ?1      = { defs={} expr=v3153[1] }
    pf      = { defs={0x080483b0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v3138[32] 4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v3138[32] 4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v3138[32] 4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v3138[32] 4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v3138[32] 4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v3138[32] 4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v3138[32] 4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v3138[32] 4[32]))))))) }
    ?3      = { defs={} expr=v3155[1] }
    af      = { defs={0x080483b0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3138[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v3138[32]) 4[33]))))) }
    ?5      = { defs={} expr=v3157[1] }
    zf      = { defs={0x080483b0} expr=(zerop[1] (add[32] v3138[32] 4[32])) }
    sf      = { defs={0x080483b0} expr=(extract[1] 31[32] 32[32] (add[32] v3138[32] 4[32])) }
    tf      = { defs={} expr=v3160[1] }
    if      = { defs={} expr=v3161[1] }
    df      = { defs={} expr=v3162[1] }
    of      = { defs={0x080483b0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3138[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v3138[32]) 4[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3138[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v3138[32]) 4[33])))))) }
    iopl0   = { defs={} expr=v3164[1] }
    iopl1   = { defs={} expr=v3165[1] }
    nt      = { defs={} expr=v3166[1] }
    ?15     = { defs={} expr=v3167[1] }
    rf      = { defs={} expr=v3168[1] }
    vm      = { defs={} expr=v3169[1] }
    ac      = { defs={} expr=v3170[1] }
    vif     = { defs={} expr=v3171[1] }
    vip     = { defs={} expr=v3172[1] }
    id      = { defs={} expr=v3173[1] }
    ?22     = { defs={} expr=v3174[1] }
    ?23     = { defs={} expr=v3175[1] }
    ?24     = { defs={} expr=v3176[1] }
    ?25     = { defs={} expr=v3177[1] }
    ?26     = { defs={} expr=v3178[1] }
    ?27     = { defs={} expr=v3179[1] }
    ?28     = { defs={} expr=v3180[1] }
    ?29     = { defs={} expr=v3181[1] }
    ?30     = { defs={} expr=v3182[1] }
    ?31     = { defs={} expr=v3183[1] }
    ip      = { defs={0x080483b8} expr=v3140[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v3142[32] -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v3142[32] -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v3142[32] -4[32]) 1[32]) }
      value = { defs={} expr=-125[8] }
      flags = { }
    address = { defs={0x080483b8} expr=(add[32] v3142[32] -4[32]) }
      value = { defs={} expr=-70[8] }
      flags = { }
    address = { defs={} expr=0x080496f3[32] }
      value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] v3138[32] 4[32])) }
      flags = { }
    address = { defs={} expr=0x080496f2[32] }
      value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] v3138[32] 4[32])) }
      flags = { }
    address = { defs={} expr=0x080496f1[32] }
      value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] v3138[32] 4[32])) }
      flags = { }
    address = { defs={0x080483b3} expr=0x080496f0[32] }
      value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] v3138[32] 4[32])) }
      flags = { }
init mem:
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483ba:mov    eax, DWORD PTR ds:[0x080496f0<.data+8>]
registers:
    ax      = { v33953 }
    cx      = { v33901 }
    dx      = { v33902 }
    bx      = { v33903 }
    sp      = { v33904 }
    bp      = { v33905 }
    si      = { v33906 }
    di      = { v33907 }
    es      = { v33908 }
    cs      = { v33909 }
    ss      = { v33910 }
    ds      = { v33911 }
    fs      = { v33912 }
    gs      = { v33913 }
    cf      = { v33914 }
    ?1      = { v33915 }
    pf      = { v33916 }
    ?3      = { v33917 }
    af      = { v33918 }
    ?5      = { v33919 }
    zf      = { v33920 }
    sf      = { v33921 }
    tf      = { v33922 }
    if      = { v33923 }
    df      = { v33924 }
    of      = { v33925 }
    iopl0   = { v33926 }
    iopl1   = { v33927 }
    nt      = { v33928 }
    ?15     = { v33929 }
    rf      = { v33930 }
    vm      = { v33931 }
    ac      = { v33932 }
    vif     = { v33933 }
    vip     = { v33934 }
    id      = { v33935 }
    ?22     = { v33936 }
    ?23     = { v33937 }
    ?24     = { v33938 }
    ?25     = { v33939 }
    ?26     = { v33940 }
    ?27     = { v33941 }
    ?28     = { v33942 }
    ?29     = { v33943 }
    ?30     = { v33944 }
    ?31     = { v33945 }
    ip      = { 0x80483bf }
memory:
    address = { 0x80496f0 }
      value = { v33953 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x080483ba} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3420[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3421[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3422[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3423[8]))) }
    cx      = { defs={} expr=v3362[32] }
    dx      = { defs={} expr=v3363[32] }
    bx      = { defs={} expr=v3364[32] }
    sp      = { defs={} expr=v3365[32] }
    bp      = { defs={} expr=v3366[32] }
    si      = { defs={} expr=v3367[32] }
    di      = { defs={} expr=v3368[32] }
    es      = { defs={} expr=v3369[16] }
    cs      = { defs={} expr=v3370[16] }
    ss      = { defs={} expr=v3371[16] }
    ds      = { defs={} expr=v3372[16] }
    fs      = { defs={} expr=v3373[16] }
    gs      = { defs={} expr=v3374[16] }
    cf      = { defs={} expr=v3375[1] }
    ?1      = { defs={} expr=v3376[1] }
    pf      = { defs={} expr=v3377[1] }
    ?3      = { defs={} expr=v3378[1] }
    af      = { defs={} expr=v3379[1] }
    ?5      = { defs={} expr=v3380[1] }
    zf      = { defs={} expr=v3381[1] }
    sf      = { defs={} expr=v3382[1] }
    tf      = { defs={} expr=v3383[1] }
    if      = { defs={} expr=v3384[1] }
    df      = { defs={} expr=v3385[1] }
    of      = { defs={} expr=v3386[1] }
    iopl0   = { defs={} expr=v3387[1] }
    iopl1   = { defs={} expr=v3388[1] }
    nt      = { defs={} expr=v3389[1] }
    ?15     = { defs={} expr=v3390[1] }
    rf      = { defs={} expr=v3391[1] }
    vm      = { defs={} expr=v3392[1] }
    ac      = { defs={} expr=v3393[1] }
    vif     = { defs={} expr=v3394[1] }
    vip     = { defs={} expr=v3395[1] }
    id      = { defs={} expr=v3396[1] }
    ?22     = { defs={} expr=v3397[1] }
    ?23     = { defs={} expr=v3398[1] }
    ?24     = { defs={} expr=v3399[1] }
    ?25     = { defs={} expr=v3400[1] }
    ?26     = { defs={} expr=v3401[1] }
    ?27     = { defs={} expr=v3402[1] }
    ?28     = { defs={} expr=v3403[1] }
    ?29     = { defs={} expr=v3404[1] }
    ?30     = { defs={} expr=v3405[1] }
    ?31     = { defs={} expr=v3406[1] }
    ip      = { defs={0x080483ba} expr=0x080483bf[32] }
memory:
init mem:
    address = { defs={} expr=0x080496f3[32] }
      value = { defs={} expr=v3423[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496f2[32] }
      value = { defs={} expr=v3422[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496f1[32] }
      value = { defs={} expr=v3421[8] }
      flags = { rdonly }
    address = { defs={0x080483ba} expr=0x080496f0[32] }
      value = { defs={} expr=v3420[8] }
      flags = { rdonly }
null state
null state
0x80483bf:mov    edx, DWORD PTR ds:[eax]
registers:
    ax      = { v33953 }
    cx      = { v33901 }
    dx      = { v33961 }
    bx      = { v33903 }
    sp      = { v33904 }
    bp      = { v33905 }
    si      = { v33906 }
    di      = { v33907 }
    es      = { v33908 }
    cs      = { v33909 }
    ss      = { v33910 }
    ds      = { v33911 }
    fs      = { v33912 }
    gs      = { v33913 }
    cf      = { v33914 }
    ?1      = { v33915 }
    pf      = { v33916 }
    ?3      = { v33917 }
    af      = { v33918 }
    ?5      = { v33919 }
    zf      = { v33920 }
    sf      = { v33921 }
    tf      = { v33922 }
    if      = { v33923 }
    df      = { v33924 }
    of      = { v33925 }
    iopl0   = { v33926 }
    iopl1   = { v33927 }
    nt      = { v33928 }
    ?15     = { v33929 }
    rf      = { v33930 }
    vm      = { v33931 }
    ac      = { v33932 }
    vif     = { v33933 }
    vip     = { v33934 }
    id      = { v33935 }
    ?22     = { v33936 }
    ?23     = { v33937 }
    ?24     = { v33938 }
    ?25     = { v33939 }
    ?26     = { v33940 }
    ?27     = { v33941 }
    ?28     = { v33942 }
    ?29     = { v33943 }
    ?30     = { v33944 }
    ?31     = { v33945 }
    ip      = { 0x80483c1 }
memory:
    address = { 0x80496f0 }
      value = { v33953 }
      flags = { size=4; read-only }
    address = { v33953 }
      value = { v33961 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x080483ba} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3420[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3421[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3422[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3423[8]))) }
    cx      = { defs={} expr=v3362[32] }
    dx      = { defs={0x080483bf} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3443[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3444[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3445[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3446[8]))) }
    bx      = { defs={} expr=v3364[32] }
    sp      = { defs={} expr=v3365[32] }
    bp      = { defs={} expr=v3366[32] }
    si      = { defs={} expr=v3367[32] }
    di      = { defs={} expr=v3368[32] }
    es      = { defs={} expr=v3369[16] }
    cs      = { defs={} expr=v3370[16] }
    ss      = { defs={} expr=v3371[16] }
    ds      = { defs={} expr=v3372[16] }
    fs      = { defs={} expr=v3373[16] }
    gs      = { defs={} expr=v3374[16] }
    cf      = { defs={} expr=v3375[1] }
    ?1      = { defs={} expr=v3376[1] }
    pf      = { defs={} expr=v3377[1] }
    ?3      = { defs={} expr=v3378[1] }
    af      = { defs={} expr=v3379[1] }
    ?5      = { defs={} expr=v3380[1] }
    zf      = { defs={} expr=v3381[1] }
    sf      = { defs={} expr=v3382[1] }
    tf      = { defs={} expr=v3383[1] }
    if      = { defs={} expr=v3384[1] }
    df      = { defs={} expr=v3385[1] }
    of      = { defs={} expr=v3386[1] }
    iopl0   = { defs={} expr=v3387[1] }
    iopl1   = { defs={} expr=v3388[1] }
    nt      = { defs={} expr=v3389[1] }
    ?15     = { defs={} expr=v3390[1] }
    rf      = { defs={} expr=v3391[1] }
    vm      = { defs={} expr=v3392[1] }
    ac      = { defs={} expr=v3393[1] }
    vif     = { defs={} expr=v3394[1] }
    vip     = { defs={} expr=v3395[1] }
    id      = { defs={} expr=v3396[1] }
    ?22     = { defs={} expr=v3397[1] }
    ?23     = { defs={} expr=v3398[1] }
    ?24     = { defs={} expr=v3399[1] }
    ?25     = { defs={} expr=v3400[1] }
    ?26     = { defs={} expr=v3401[1] }
    ?27     = { defs={} expr=v3402[1] }
    ?28     = { defs={} expr=v3403[1] }
    ?29     = { defs={} expr=v3404[1] }
    ?30     = { defs={} expr=v3405[1] }
    ?31     = { defs={} expr=v3406[1] }
    ip      = { defs={0x080483ba,0x080483bf} expr=0x080483c1[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3420[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3421[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3422[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3423[8]))) 3[32]) }
      value = { defs={} expr=v3446[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3420[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3421[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3422[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3423[8]))) 2[32]) }
      value = { defs={} expr=v3445[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3420[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3421[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3422[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3423[8]))) 1[32]) }
      value = { defs={} expr=v3444[8] }
      flags = { rdonly }
    address = { defs={0x080483ba,0x080483bf} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3420[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3421[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3422[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3423[8]))) }
      value = { defs={} expr=v3443[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496f3[32] }
      value = { defs={} expr=v3423[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496f2[32] }
      value = { defs={} expr=v3422[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496f1[32] }
      value = { defs={} expr=v3421[8] }
      flags = { rdonly }
    address = { defs={0x080483ba} expr=0x080496f0[32] }
      value = { defs={} expr=v3420[8] }
      flags = { rdonly }
null state
null state
0x80483c1:test   edx, edx
registers:
    ax      = { v33953 }
    cx      = { v33901 }
    dx      = { v33961 }
    bx      = { v33903 }
    sp      = { v33904 }
    bp      = { v33905 }
    si      = { v33906 }
    di      = { v33907 }
    es      = { v33908 }
    cs      = { v33909 }
    ss      = { v33910 }
    ds      = { v33911 }
    fs      = { v33912 }
    gs      = { v33913 }
    cf      = { 0x0 }
    ?1      = { v33915 }
    pf      = { -v33999+0x1 }
    ?3      = { v33917 }
    af      = { v34007 }
    ?5      = { v33919 }
    zf      = { v34004 }
    sf      = { v34002 }
    tf      = { v33922 }
    if      = { v33923 }
    df      = { v33924 }
    of      = { 0x0 }
    iopl0   = { v33926 }
    iopl1   = { v33927 }
    nt      = { v33928 }
    ?15     = { v33929 }
    rf      = { v33930 }
    vm      = { v33931 }
    ac      = { v33932 }
    vif     = { v33933 }
    vip     = { v33934 }
    id      = { v33935 }
    ?22     = { v33936 }
    ?23     = { v33937 }
    ?24     = { v33938 }
    ?25     = { v33939 }
    ?26     = { v33940 }
    ?27     = { v33941 }
    ?28     = { v33942 }
    ?29     = { v33943 }
    ?30     = { v33944 }
    ?31     = { v33945 }
    ip      = { 0x80483c3 }
memory:
    address = { 0x80496f0 }
      value = { v33953 }
      flags = { size=4; read-only }
    address = { v33953 }
      value = { v33961 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x080483ba} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3420[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3421[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3422[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3423[8]))) }
    cx      = { defs={} expr=v3362[32] }
    dx      = { defs={0x080483bf} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3443[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3444[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3445[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3446[8]))) }
    bx      = { defs={} expr=v3364[32] }
    sp      = { defs={} expr=v3365[32] }
    bp      = { defs={} expr=v3366[32] }
    si      = { defs={} expr=v3367[32] }
    di      = { defs={} expr=v3368[32] }
    es      = { defs={} expr=v3369[16] }
    cs      = { defs={} expr=v3370[16] }
    ss      = { defs={} expr=v3371[16] }
    ds      = { defs={} expr=v3372[16] }
    fs      = { defs={} expr=v3373[16] }
    gs      = { defs={} expr=v3374[16] }
    cf      = { defs={0x080483c1} expr=0[1] }
    ?1      = { defs={} expr=v3376[1] }
    pf      = { defs={0x080483bf,0x080483c1} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3443[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3444[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3445[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3446[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3443[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3444[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3445[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3446[8])))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3443[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3444[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3445[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3446[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3443[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3444[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3445[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3446[8]))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3443[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3444[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3445[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3446[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3443[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3444[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3445[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3446[8])))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3443[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3444[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3445[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3446[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3443[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3444[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3445[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3446[8])))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3443[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3444[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3445[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3446[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3443[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3444[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3445[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3446[8])))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3443[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3444[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3445[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3446[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3443[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3444[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3445[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3446[8]))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3443[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3444[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3445[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3446[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3443[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3444[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3445[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3446[8])))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3443[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3444[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3445[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3446[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3443[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3444[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3445[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3446[8])))))))))) }
    ?3      = { defs={} expr=v3378[1] }
    af      = { defs={0x080483c1} expr=v3512[1] }
    ?5      = { defs={} expr=v3380[1] }
    zf      = { defs={0x080483bf,0x080483c1} expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3443[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3444[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3445[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3446[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3443[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3444[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3445[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3446[8]))))) }
    sf      = { defs={0x080483bf,0x080483c1} expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3443[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3444[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3445[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3446[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3443[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3444[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3445[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3446[8]))))) }
    tf      = { defs={} expr=v3383[1] }
    if      = { defs={} expr=v3384[1] }
    df      = { defs={} expr=v3385[1] }
    of      = { defs={0x080483c1} expr=0[1] }
    iopl0   = { defs={} expr=v3387[1] }
    iopl1   = { defs={} expr=v3388[1] }
    nt      = { defs={} expr=v3389[1] }
    ?15     = { defs={} expr=v3390[1] }
    rf      = { defs={} expr=v3391[1] }
    vm      = { defs={} expr=v3392[1] }
    ac      = { defs={} expr=v3393[1] }
    vif     = { defs={} expr=v3394[1] }
    vip     = { defs={} expr=v3395[1] }
    id      = { defs={} expr=v3396[1] }
    ?22     = { defs={} expr=v3397[1] }
    ?23     = { defs={} expr=v3398[1] }
    ?24     = { defs={} expr=v3399[1] }
    ?25     = { defs={} expr=v3400[1] }
    ?26     = { defs={} expr=v3401[1] }
    ?27     = { defs={} expr=v3402[1] }
    ?28     = { defs={} expr=v3403[1] }
    ?29     = { defs={} expr=v3404[1] }
    ?30     = { defs={} expr=v3405[1] }
    ?31     = { defs={} expr=v3406[1] }
    ip      = { defs={0x080483ba,0x080483bf,0x080483c1} expr=0x080483c3[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3420[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3421[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3422[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3423[8]))) 3[32]) }
      value = { defs={} expr=v3446[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3420[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3421[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3422[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3423[8]))) 2[32]) }
      value = { defs={} expr=v3445[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3420[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3421[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3422[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3423[8]))) 1[32]) }
      value = { defs={} expr=v3444[8] }
      flags = { rdonly }
    address = { defs={0x080483ba,0x080483bf} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3420[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3421[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3422[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3423[8]))) }
      value = { defs={} expr=v3443[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496f3[32] }
      value = { defs={} expr=v3423[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496f2[32] }
      value = { defs={} expr=v3422[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496f1[32] }
      value = { defs={} expr=v3421[8] }
      flags = { rdonly }
    address = { defs={0x080483ba} expr=0x080496f0[32] }
      value = { defs={} expr=v3420[8] }
      flags = { rdonly }
null state
null state
0x80483c3:jne    0x080483b0<<Insn>>
registers:
    ax      = { v33953 }
    cx      = { v33901 }
    dx      = { v33961 }
    bx      = { v33903 }
    sp      = { v33904 }
    bp      = { v33905 }
    si      = { v33906 }
    di      = { v33907 }
    es      = { v33908 }
    cs      = { v33909 }
    ss      = { v33910 }
    ds      = { v33911 }
    fs      = { v33912 }
    gs      = { v33913 }
    cf      = { 0x0 }
    ?1      = { v33915 }
    pf      = { -v33999+0x1 }
    ?3      = { v33917 }
    af      = { v34007 }
    ?5      = { v33919 }
    zf      = { v34004 }
    sf      = { v34002 }
    tf      = { v33922 }
    if      = { v33923 }
    df      = { v33924 }
    of      = { 0x0 }
    iopl0   = { v33926 }
    iopl1   = { v33927 }
    nt      = { v33928 }
    ?15     = { v33929 }
    rf      = { v33930 }
    vm      = { v33931 }
    ac      = { v33932 }
    vif     = { v33933 }
    vip     = { v33934 }
    id      = { v33935 }
    ?22     = { v33936 }
    ?23     = { v33937 }
    ?24     = { v33938 }
    ?25     = { v33939 }
    ?26     = { v33940 }
    ?27     = { v33941 }
    ?28     = { v33942 }
    ?29     = { v33943 }
    ?30     = { v33944 }
    ?31     = { v33945 }
    ip      = { v34018 }
memory:
    address = { 0x80496f0 }
      value = { v33953 }
      flags = { size=4; read-only }
    address = { v33953 }
      value = { v33961 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x080483ba} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3420[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3421[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3422[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3423[8]))) }
    cx      = { defs={} expr=v3362[32] }
    dx      = { defs={0x080483bf} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3443[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3444[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3445[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3446[8]))) }
    bx      = { defs={} expr=v3364[32] }
    sp      = { defs={} expr=v3365[32] }
    bp      = { defs={} expr=v3366[32] }
    si      = { defs={} expr=v3367[32] }
    di      = { defs={} expr=v3368[32] }
    es      = { defs={} expr=v3369[16] }
    cs      = { defs={} expr=v3370[16] }
    ss      = { defs={} expr=v3371[16] }
    ds      = { defs={} expr=v3372[16] }
    fs      = { defs={} expr=v3373[16] }
    gs      = { defs={} expr=v3374[16] }
    cf      = { defs={0x080483c1} expr=0[1] }
    ?1      = { defs={} expr=v3376[1] }
    pf      = { defs={0x080483bf,0x080483c1} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3443[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3444[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3445[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3446[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3443[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3444[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3445[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3446[8])))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3443[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3444[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3445[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3446[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3443[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3444[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3445[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3446[8]))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3443[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3444[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3445[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3446[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3443[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3444[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3445[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3446[8])))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3443[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3444[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3445[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3446[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3443[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3444[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3445[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3446[8])))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3443[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3444[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3445[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3446[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3443[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3444[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3445[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3446[8])))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3443[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3444[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3445[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3446[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3443[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3444[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3445[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3446[8]))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3443[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3444[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3445[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3446[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3443[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3444[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3445[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3446[8])))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3443[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3444[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3445[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3446[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3443[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3444[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3445[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3446[8])))))))))) }
    ?3      = { defs={} expr=v3378[1] }
    af      = { defs={0x080483c1} expr=v3512[1] }
    ?5      = { defs={} expr=v3380[1] }
    zf      = { defs={0x080483bf,0x080483c1} expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3443[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3444[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3445[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3446[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3443[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3444[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3445[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3446[8]))))) }
    sf      = { defs={0x080483bf,0x080483c1} expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3443[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3444[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3445[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3446[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3443[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3444[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3445[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3446[8]))))) }
    tf      = { defs={} expr=v3383[1] }
    if      = { defs={} expr=v3384[1] }
    df      = { defs={} expr=v3385[1] }
    of      = { defs={0x080483c1} expr=0[1] }
    iopl0   = { defs={} expr=v3387[1] }
    iopl1   = { defs={} expr=v3388[1] }
    nt      = { defs={} expr=v3389[1] }
    ?15     = { defs={} expr=v3390[1] }
    rf      = { defs={} expr=v3391[1] }
    vm      = { defs={} expr=v3392[1] }
    ac      = { defs={} expr=v3393[1] }
    vif     = { defs={} expr=v3394[1] }
    vip     = { defs={} expr=v3395[1] }
    id      = { defs={} expr=v3396[1] }
    ?22     = { defs={} expr=v3397[1] }
    ?23     = { defs={} expr=v3398[1] }
    ?24     = { defs={} expr=v3399[1] }
    ?25     = { defs={} expr=v3400[1] }
    ?26     = { defs={} expr=v3401[1] }
    ?27     = { defs={} expr=v3402[1] }
    ?28     = { defs={} expr=v3403[1] }
    ?29     = { defs={} expr=v3404[1] }
    ?30     = { defs={} expr=v3405[1] }
    ?31     = { defs={} expr=v3406[1] }
    ip      = { defs={0x080483ba,0x080483bf,0x080483c1,0x080483c3} expr=(ite[32] (invert[1] (zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3443[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3444[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3445[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3446[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3443[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3444[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3445[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3446[8])))))) 0x080483b0[32] 0x080483c5[32]) }
memory:
init mem:
    address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3420[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3421[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3422[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3423[8]))) 3[32]) }
      value = { defs={} expr=v3446[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3420[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3421[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3422[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3423[8]))) 2[32]) }
      value = { defs={} expr=v3445[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3420[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3421[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3422[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3423[8]))) 1[32]) }
      value = { defs={} expr=v3444[8] }
      flags = { rdonly }
    address = { defs={0x080483ba,0x080483bf} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3420[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3421[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3422[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3423[8]))) }
      value = { defs={} expr=v3443[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496f3[32] }
      value = { defs={} expr=v3423[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496f2[32] }
      value = { defs={} expr=v3422[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496f1[32] }
      value = { defs={} expr=v3421[8] }
      flags = { rdonly }
    address = { defs={0x080483ba} expr=0x080496f0[32] }
      value = { defs={} expr=v3420[8] }
      flags = { rdonly }
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483c5:mov    BYTE PTR ds:[0x080496f4<.bss>], 0x01
registers:
    ax      = { v34068 }
    cx      = { v34069 }
    dx      = { v34070 }
    bx      = { v34071 }
    sp      = { v34072 }
    bp      = { v34073 }
    si      = { v34074 }
    di      = { v34075 }
    es      = { v34076 }
    cs      = { v34077 }
    ss      = { v34078 }
    ds      = { v34079 }
    fs      = { v34080 }
    gs      = { v34081 }
    cf      = { v34082 }
    ?1      = { v34083 }
    pf      = { v34084 }
    ?3      = { v34085 }
    af      = { v34086 }
    ?5      = { v34087 }
    zf      = { v34088 }
    sf      = { v34089 }
    tf      = { v34090 }
    if      = { v34091 }
    df      = { v34092 }
    of      = { v34093 }
    iopl0   = { v34094 }
    iopl1   = { v34095 }
    nt      = { v34096 }
    ?15     = { v34097 }
    rf      = { v34098 }
    vm      = { v34099 }
    ac      = { v34100 }
    vif     = { v34101 }
    vip     = { v34102 }
    id      = { v34103 }
    ?22     = { v34104 }
    ?23     = { v34105 }
    ?24     = { v34106 }
    ?25     = { v34107 }
    ?26     = { v34108 }
    ?27     = { v34109 }
    ?28     = { v34110 }
    ?29     = { v34111 }
    ?30     = { v34112 }
    ?31     = { v34113 }
    ip      = { 0x80483cc }
memory:
    address = { 0x80496f4 }
      value = { 0x1 }
      flags = { size=1 }
registers:
    ax      = { defs={} expr=v3584[32] }
    cx      = { defs={} expr=v3585[32] }
    dx      = { defs={} expr=v3586[32] }
    bx      = { defs={} expr=v3587[32] }
    sp      = { defs={} expr=v3588[32] }
    bp      = { defs={} expr=v3589[32] }
    si      = { defs={} expr=v3590[32] }
    di      = { defs={} expr=v3591[32] }
    es      = { defs={} expr=v3592[16] }
    cs      = { defs={} expr=v3593[16] }
    ss      = { defs={} expr=v3594[16] }
    ds      = { defs={} expr=v3595[16] }
    fs      = { defs={} expr=v3596[16] }
    gs      = { defs={} expr=v3597[16] }
    cf      = { defs={} expr=v3598[1] }
    ?1      = { defs={} expr=v3599[1] }
    pf      = { defs={} expr=v3600[1] }
    ?3      = { defs={} expr=v3601[1] }
    af      = { defs={} expr=v3602[1] }
    ?5      = { defs={} expr=v3603[1] }
    zf      = { defs={} expr=v3604[1] }
    sf      = { defs={} expr=v3605[1] }
    tf      = { defs={} expr=v3606[1] }
    if      = { defs={} expr=v3607[1] }
    df      = { defs={} expr=v3608[1] }
    of      = { defs={} expr=v3609[1] }
    iopl0   = { defs={} expr=v3610[1] }
    iopl1   = { defs={} expr=v3611[1] }
    nt      = { defs={} expr=v3612[1] }
    ?15     = { defs={} expr=v3613[1] }
    rf      = { defs={} expr=v3614[1] }
    vm      = { defs={} expr=v3615[1] }
    ac      = { defs={} expr=v3616[1] }
    vif     = { defs={} expr=v3617[1] }
    vip     = { defs={} expr=v3618[1] }
    id      = { defs={} expr=v3619[1] }
    ?22     = { defs={} expr=v3620[1] }
    ?23     = { defs={} expr=v3621[1] }
    ?24     = { defs={} expr=v3622[1] }
    ?25     = { defs={} expr=v3623[1] }
    ?26     = { defs={} expr=v3624[1] }
    ?27     = { defs={} expr=v3625[1] }
    ?28     = { defs={} expr=v3626[1] }
    ?29     = { defs={} expr=v3627[1] }
    ?30     = { defs={} expr=v3628[1] }
    ?31     = { defs={} expr=v3629[1] }
    ip      = { defs={0x080483c5} expr=0x080483cc[32] }
memory:
    address = { defs={0x080483c5} expr=0x080496f4[32] }
      value = { defs={} expr=1[8] }
      flags = { }
init mem:
null state
null state
0x80483cc:leave  
registers:
    ax      = { v34068 }
    cx      = { v34069 }
    dx      = { v34070 }
    bx      = { v34071 }
    sp      = { v34073+0x4 }
    bp      = { v34131 }
    si      = { v34074 }
    di      = { v34075 }
    es      = { v34076 }
    cs      = { v34077 }
    ss      = { v34078 }
    ds      = { v34079 }
    fs      = { v34080 }
    gs      = { v34081 }
    cf      = { v34082 }
    ?1      = { v34083 }
    pf      = { v34084 }
    ?3      = { v34085 }
    af      = { v34086 }
    ?5      = { v34087 }
    zf      = { v34088 }
    sf      = { v34089 }
    tf      = { v34090 }
    if      = { v34091 }
    df      = { v34092 }
    of      = { v34093 }
    iopl0   = { v34094 }
    iopl1   = { v34095 }
    nt      = { v34096 }
    ?15     = { v34097 }
    rf      = { v34098 }
    vm      = { v34099 }
    ac      = { v34100 }
    vif     = { v34101 }
    vip     = { v34102 }
    id      = { v34103 }
    ?22     = { v34104 }
    ?23     = { v34105 }
    ?24     = { v34106 }
    ?25     = { v34107 }
    ?26     = { v34108 }
    ?27     = { v34109 }
    ?28     = { v34110 }
    ?29     = { v34111 }
    ?30     = { v34112 }
    ?31     = { v34113 }
    ip      = { 0x80483cd }
memory:
    address = { 0x80496f4 }
      value = { 0x1 }
      flags = { size=1 }
    address = { v34073 }
      value = { v34131 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={} expr=v3584[32] }
    cx      = { defs={} expr=v3585[32] }
    dx      = { defs={} expr=v3586[32] }
    bx      = { defs={} expr=v3587[32] }
    sp      = { defs={0x080483cc} expr=(add[32] v3589[32] 4[32]) }
    bp      = { defs={0x080483cc} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3661[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3662[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3663[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3664[8]))) }
    si      = { defs={} expr=v3590[32] }
    di      = { defs={} expr=v3591[32] }
    es      = { defs={} expr=v3592[16] }
    cs      = { defs={} expr=v3593[16] }
    ss      = { defs={} expr=v3594[16] }
    ds      = { defs={} expr=v3595[16] }
    fs      = { defs={} expr=v3596[16] }
    gs      = { defs={} expr=v3597[16] }
    cf      = { defs={} expr=v3598[1] }
    ?1      = { defs={} expr=v3599[1] }
    pf      = { defs={} expr=v3600[1] }
    ?3      = { defs={} expr=v3601[1] }
    af      = { defs={} expr=v3602[1] }
    ?5      = { defs={} expr=v3603[1] }
    zf      = { defs={} expr=v3604[1] }
    sf      = { defs={} expr=v3605[1] }
    tf      = { defs={} expr=v3606[1] }
    if      = { defs={} expr=v3607[1] }
    df      = { defs={} expr=v3608[1] }
    of      = { defs={} expr=v3609[1] }
    iopl0   = { defs={} expr=v3610[1] }
    iopl1   = { defs={} expr=v3611[1] }
    nt      = { defs={} expr=v3612[1] }
    ?15     = { defs={} expr=v3613[1] }
    rf      = { defs={} expr=v3614[1] }
    vm      = { defs={} expr=v3615[1] }
    ac      = { defs={} expr=v3616[1] }
    vif     = { defs={} expr=v3617[1] }
    vip     = { defs={} expr=v3618[1] }
    id      = { defs={} expr=v3619[1] }
    ?22     = { defs={} expr=v3620[1] }
    ?23     = { defs={} expr=v3621[1] }
    ?24     = { defs={} expr=v3622[1] }
    ?25     = { defs={} expr=v3623[1] }
    ?26     = { defs={} expr=v3624[1] }
    ?27     = { defs={} expr=v3625[1] }
    ?28     = { defs={} expr=v3626[1] }
    ?29     = { defs={} expr=v3627[1] }
    ?30     = { defs={} expr=v3628[1] }
    ?31     = { defs={} expr=v3629[1] }
    ip      = { defs={0x080483c5,0x080483cc} expr=0x080483cd[32] }
memory:
    address = { defs={0x080483c5} expr=0x080496f4[32] }
      value = { defs={} expr=1[8] }
      flags = { }
init mem:
    address = { defs={} expr=(add[32] v3589[32] 3[32]) }
      value = { defs={} expr=v3664[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v3589[32] 2[32]) }
      value = { defs={} expr=v3663[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v3589[32] 1[32]) }
      value = { defs={} expr=v3662[8] }
      flags = { rdonly }
    address = { defs={0x080483cc} expr=v3589[32] }
      value = { defs={} expr=v3661[8] }
      flags = { rdonly }
null state
null state
0x80483cd:ret    
registers:
    ax      = { v34068 }
    cx      = { v34069 }
    dx      = { v34070 }
    bx      = { v34071 }
    sp      = { v34073+0x8 }
    bp      = { v34131 }
    si      = { v34074 }
    di      = { v34075 }
    es      = { v34076 }
    cs      = { v34077 }
    ss      = { v34078 }
    ds      = { v34079 }
    fs      = { v34080 }
    gs      = { v34081 }
    cf      = { v34082 }
    ?1      = { v34083 }
    pf      = { v34084 }
    ?3      = { v34085 }
    af      = { v34086 }
    ?5      = { v34087 }
    zf      = { v34088 }
    sf      = { v34089 }
    tf      = { v34090 }
    if      = { v34091 }
    df      = { v34092 }
    of      = { v34093 }
    iopl0   = { v34094 }
    iopl1   = { v34095 }
    nt      = { v34096 }
    ?15     = { v34097 }
    rf      = { v34098 }
    vm      = { v34099 }
    ac      = { v34100 }
    vif     = { v34101 }
    vip     = { v34102 }
    id      = { v34103 }
    ?22     = { v34104 }
    ?23     = { v34105 }
    ?24     = { v34106 }
    ?25     = { v34107 }
    ?26     = { v34108 }
    ?27     = { v34109 }
    ?28     = { v34110 }
    ?29     = { v34111 }
    ?30     = { v34112 }
    ?31     = { v34113 }
    ip      = { v34143 }
memory:
    address = { 0x80496f4 }
      value = { 0x1 }
      flags = { size=1 }
    address = { v34073 }
      value = { v34131 }
      flags = { size=4; read-only }
    address = { v34073+0x4 }
      value = { v34143 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={} expr=v3584[32] }
    cx      = { defs={} expr=v3585[32] }
    dx      = { defs={} expr=v3586[32] }
    bx      = { defs={} expr=v3587[32] }
    sp      = { defs={0x080483cc,0x080483cd} expr=(add[32] (add[32] v3589[32] 4[32]) 4[32]) }
    bp      = { defs={0x080483cc} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3661[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3662[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3663[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3664[8]))) }
    si      = { defs={} expr=v3590[32] }
    di      = { defs={} expr=v3591[32] }
    es      = { defs={} expr=v3592[16] }
    cs      = { defs={} expr=v3593[16] }
    ss      = { defs={} expr=v3594[16] }
    ds      = { defs={} expr=v3595[16] }
    fs      = { defs={} expr=v3596[16] }
    gs      = { defs={} expr=v3597[16] }
    cf      = { defs={} expr=v3598[1] }
    ?1      = { defs={} expr=v3599[1] }
    pf      = { defs={} expr=v3600[1] }
    ?3      = { defs={} expr=v3601[1] }
    af      = { defs={} expr=v3602[1] }
    ?5      = { defs={} expr=v3603[1] }
    zf      = { defs={} expr=v3604[1] }
    sf      = { defs={} expr=v3605[1] }
    tf      = { defs={} expr=v3606[1] }
    if      = { defs={} expr=v3607[1] }
    df      = { defs={} expr=v3608[1] }
    of      = { defs={} expr=v3609[1] }
    iopl0   = { defs={} expr=v3610[1] }
    iopl1   = { defs={} expr=v3611[1] }
    nt      = { defs={} expr=v3612[1] }
    ?15     = { defs={} expr=v3613[1] }
    rf      = { defs={} expr=v3614[1] }
    vm      = { defs={} expr=v3615[1] }
    ac      = { defs={} expr=v3616[1] }
    vif     = { defs={} expr=v3617[1] }
    vip     = { defs={} expr=v3618[1] }
    id      = { defs={} expr=v3619[1] }
    ?22     = { defs={} expr=v3620[1] }
    ?23     = { defs={} expr=v3621[1] }
    ?24     = { defs={} expr=v3622[1] }
    ?25     = { defs={} expr=v3623[1] }
    ?26     = { defs={} expr=v3624[1] }
    ?27     = { defs={} expr=v3625[1] }
    ?28     = { defs={} expr=v3626[1] }
    ?29     = { defs={} expr=v3627[1] }
    ?30     = { defs={} expr=v3628[1] }
    ?31     = { defs={} expr=v3629[1] }
    ip      = { defs={0x080483cd} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3691[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3692[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3693[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3694[8]))) }
memory:
    address = { defs={0x080483c5} expr=0x080496f4[32] }
      value = { defs={} expr=1[8] }
      flags = { }
init mem:
    address = { defs={} expr=(add[32] (add[32] v3589[32] 4[32]) 3[32]) }
      value = { defs={} expr=v3694[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v3589[32] 4[32]) 2[32]) }
      value = { defs={} expr=v3693[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v3589[32] 4[32]) 1[32]) }
      value = { defs={} expr=v3692[8] }
      flags = { rdonly }
    address = { defs={0x080483cc,0x080483cd} expr=(add[32] v3589[32] 4[32]) }
      value = { defs={} expr=v3691[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v3589[32] 3[32]) }
      value = { defs={} expr=v3664[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v3589[32] 2[32]) }
      value = { defs={} expr=v3663[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v3589[32] 1[32]) }
      value = { defs={} expr=v3662[8] }
      flags = { rdonly }
    address = { defs={0x080483cc} expr=v3589[32] }
      value = { defs={} expr=v3661[8] }
      flags = { rdonly }
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483d0:push   ebp
registers:
    ax      = { v34194 }
    cx      = { v34195 }
    dx      = { v34196 }
    bx      = { v34197 }
    sp      = { v34198-0x4 }
    bp      = { v34199 }
    si      = { v34200 }
    di      = { v34201 }
    es      = { v34202 }
    cs      = { v34203 }
    ss      = { v34204 }
    ds      = { v34205 }
    fs      = { v34206 }
    gs      = { v34207 }
    cf      = { v34208 }
    ?1      = { v34209 }
    pf      = { v34210 }
    ?3      = { v34211 }
    af      = { v34212 }
    ?5      = { v34213 }
    zf      = { v34214 }
    sf      = { v34215 }
    tf      = { v34216 }
    if      = { v34217 }
    df      = { v34218 }
    of      = { v34219 }
    iopl0   = { v34220 }
    iopl1   = { v34221 }
    nt      = { v34222 }
    ?15     = { v34223 }
    rf      = { v34224 }
    vm      = { v34225 }
    ac      = { v34226 }
    vif     = { v34227 }
    vip     = { v34228 }
    id      = { v34229 }
    ?22     = { v34230 }
    ?23     = { v34231 }
    ?24     = { v34232 }
    ?25     = { v34233 }
    ?26     = { v34234 }
    ?27     = { v34235 }
    ?28     = { v34236 }
    ?29     = { v34237 }
    ?30     = { v34238 }
    ?31     = { v34239 }
    ip      = { 0x80483d1 }
memory:
    address = { v34198-0x4 }
      value = { v34199 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v3752[32] }
    cx      = { defs={} expr=v3753[32] }
    dx      = { defs={} expr=v3754[32] }
    bx      = { defs={} expr=v3755[32] }
    sp      = { defs={0x080483d0} expr=(add[32] v3756[32] -4[32]) }
    bp      = { defs={} expr=v3757[32] }
    si      = { defs={} expr=v3758[32] }
    di      = { defs={} expr=v3759[32] }
    es      = { defs={} expr=v3760[16] }
    cs      = { defs={} expr=v3761[16] }
    ss      = { defs={} expr=v3762[16] }
    ds      = { defs={} expr=v3763[16] }
    fs      = { defs={} expr=v3764[16] }
    gs      = { defs={} expr=v3765[16] }
    cf      = { defs={} expr=v3766[1] }
    ?1      = { defs={} expr=v3767[1] }
    pf      = { defs={} expr=v3768[1] }
    ?3      = { defs={} expr=v3769[1] }
    af      = { defs={} expr=v3770[1] }
    ?5      = { defs={} expr=v3771[1] }
    zf      = { defs={} expr=v3772[1] }
    sf      = { defs={} expr=v3773[1] }
    tf      = { defs={} expr=v3774[1] }
    if      = { defs={} expr=v3775[1] }
    df      = { defs={} expr=v3776[1] }
    of      = { defs={} expr=v3777[1] }
    iopl0   = { defs={} expr=v3778[1] }
    iopl1   = { defs={} expr=v3779[1] }
    nt      = { defs={} expr=v3780[1] }
    ?15     = { defs={} expr=v3781[1] }
    rf      = { defs={} expr=v3782[1] }
    vm      = { defs={} expr=v3783[1] }
    ac      = { defs={} expr=v3784[1] }
    vif     = { defs={} expr=v3785[1] }
    vip     = { defs={} expr=v3786[1] }
    id      = { defs={} expr=v3787[1] }
    ?22     = { defs={} expr=v3788[1] }
    ?23     = { defs={} expr=v3789[1] }
    ?24     = { defs={} expr=v3790[1] }
    ?25     = { defs={} expr=v3791[1] }
    ?26     = { defs={} expr=v3792[1] }
    ?27     = { defs={} expr=v3793[1] }
    ?28     = { defs={} expr=v3794[1] }
    ?29     = { defs={} expr=v3795[1] }
    ?30     = { defs={} expr=v3796[1] }
    ?31     = { defs={} expr=v3797[1] }
    ip      = { defs={0x080483d0} expr=0x080483d1[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v3756[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v3757[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v3756[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v3757[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v3756[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v3757[32]) }
      flags = { }
    address = { defs={0x080483d0} expr=(add[32] v3756[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v3757[32]) }
      flags = { }
init mem:
null state
null state
0x80483d1:mov    ebp, esp
registers:
    ax      = { v34194 }
    cx      = { v34195 }
    dx      = { v34196 }
    bx      = { v34197 }
    sp      = { v34198-0x4 }
    bp      = { v34198-0x4 }
    si      = { v34200 }
    di      = { v34201 }
    es      = { v34202 }
    cs      = { v34203 }
    ss      = { v34204 }
    ds      = { v34205 }
    fs      = { v34206 }
    gs      = { v34207 }
    cf      = { v34208 }
    ?1      = { v34209 }
    pf      = { v34210 }
    ?3      = { v34211 }
    af      = { v34212 }
    ?5      = { v34213 }
    zf      = { v34214 }
    sf      = { v34215 }
    tf      = { v34216 }
    if      = { v34217 }
    df      = { v34218 }
    of      = { v34219 }
    iopl0   = { v34220 }
    iopl1   = { v34221 }
    nt      = { v34222 }
    ?15     = { v34223 }
    rf      = { v34224 }
    vm      = { v34225 }
    ac      = { v34226 }
    vif     = { v34227 }
    vip     = { v34228 }
    id      = { v34229 }
    ?22     = { v34230 }
    ?23     = { v34231 }
    ?24     = { v34232 }
    ?25     = { v34233 }
    ?26     = { v34234 }
    ?27     = { v34235 }
    ?28     = { v34236 }
    ?29     = { v34237 }
    ?30     = { v34238 }
    ?31     = { v34239 }
    ip      = { 0x80483d3 }
memory:
    address = { v34198-0x4 }
      value = { v34199 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v3752[32] }
    cx      = { defs={} expr=v3753[32] }
    dx      = { defs={} expr=v3754[32] }
    bx      = { defs={} expr=v3755[32] }
    sp      = { defs={0x080483d0} expr=(add[32] v3756[32] -4[32]) }
    bp      = { defs={0x080483d0,0x080483d1} expr=(add[32] v3756[32] -4[32]) }
    si      = { defs={} expr=v3758[32] }
    di      = { defs={} expr=v3759[32] }
    es      = { defs={} expr=v3760[16] }
    cs      = { defs={} expr=v3761[16] }
    ss      = { defs={} expr=v3762[16] }
    ds      = { defs={} expr=v3763[16] }
    fs      = { defs={} expr=v3764[16] }
    gs      = { defs={} expr=v3765[16] }
    cf      = { defs={} expr=v3766[1] }
    ?1      = { defs={} expr=v3767[1] }
    pf      = { defs={} expr=v3768[1] }
    ?3      = { defs={} expr=v3769[1] }
    af      = { defs={} expr=v3770[1] }
    ?5      = { defs={} expr=v3771[1] }
    zf      = { defs={} expr=v3772[1] }
    sf      = { defs={} expr=v3773[1] }
    tf      = { defs={} expr=v3774[1] }
    if      = { defs={} expr=v3775[1] }
    df      = { defs={} expr=v3776[1] }
    of      = { defs={} expr=v3777[1] }
    iopl0   = { defs={} expr=v3778[1] }
    iopl1   = { defs={} expr=v3779[1] }
    nt      = { defs={} expr=v3780[1] }
    ?15     = { defs={} expr=v3781[1] }
    rf      = { defs={} expr=v3782[1] }
    vm      = { defs={} expr=v3783[1] }
    ac      = { defs={} expr=v3784[1] }
    vif     = { defs={} expr=v3785[1] }
    vip     = { defs={} expr=v3786[1] }
    id      = { defs={} expr=v3787[1] }
    ?22     = { defs={} expr=v3788[1] }
    ?23     = { defs={} expr=v3789[1] }
    ?24     = { defs={} expr=v3790[1] }
    ?25     = { defs={} expr=v3791[1] }
    ?26     = { defs={} expr=v3792[1] }
    ?27     = { defs={} expr=v3793[1] }
    ?28     = { defs={} expr=v3794[1] }
    ?29     = { defs={} expr=v3795[1] }
    ?30     = { defs={} expr=v3796[1] }
    ?31     = { defs={} expr=v3797[1] }
    ip      = { defs={0x080483d0,0x080483d1} expr=0x080483d3[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v3756[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v3757[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v3756[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v3757[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v3756[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v3757[32]) }
      flags = { }
    address = { defs={0x080483d0} expr=(add[32] v3756[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v3757[32]) }
      flags = { }
init mem:
null state
null state
0x80483d3:sub    esp, 0x08
registers:
    ax      = { v34194 }
    cx      = { v34195 }
    dx      = { v34196 }
    bx      = { v34197 }
    sp      = { v34198-0xc }
    bp      = { v34198-0x4 }
    si      = { v34200 }
    di      = { v34201 }
    es      = { v34202 }
    cs      = { v34203 }
    ss      = { v34204 }
    ds      = { v34205 }
    fs      = { v34206 }
    gs      = { v34207 }
    cf      = { -v34305+0x1 }
    ?1      = { v34209 }
    pf      = { -v34295+0x1 }
    ?3      = { v34211 }
    af      = { -v34302+0x1 }
    ?5      = { v34213 }
    zf      = { v34300 }
    sf      = { v34298 }
    tf      = { v34216 }
    if      = { v34217 }
    df      = { v34218 }
    of      = { v34312 }
    iopl0   = { v34220 }
    iopl1   = { v34221 }
    nt      = { v34222 }
    ?15     = { v34223 }
    rf      = { v34224 }
    vm      = { v34225 }
    ac      = { v34226 }
    vif     = { v34227 }
    vip     = { v34228 }
    id      = { v34229 }
    ?22     = { v34230 }
    ?23     = { v34231 }
    ?24     = { v34232 }
    ?25     = { v34233 }
    ?26     = { v34234 }
    ?27     = { v34235 }
    ?28     = { v34236 }
    ?29     = { v34237 }
    ?30     = { v34238 }
    ?31     = { v34239 }
    ip      = { 0x80483d6 }
memory:
    address = { v34198-0x4 }
      value = { v34199 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v3752[32] }
    cx      = { defs={} expr=v3753[32] }
    dx      = { defs={} expr=v3754[32] }
    bx      = { defs={} expr=v3755[32] }
    sp      = { defs={0x080483d0,0x080483d3} expr=(add[32] (add[32] v3756[32] -4[32]) -8[32]) }
    bp      = { defs={0x080483d0,0x080483d1} expr=(add[32] v3756[32] -4[32]) }
    si      = { defs={} expr=v3758[32] }
    di      = { defs={} expr=v3759[32] }
    es      = { defs={} expr=v3760[16] }
    cs      = { defs={} expr=v3761[16] }
    ss      = { defs={} expr=v3762[16] }
    ds      = { defs={} expr=v3763[16] }
    fs      = { defs={} expr=v3764[16] }
    gs      = { defs={} expr=v3765[16] }
    cf      = { defs={0x080483d0,0x080483d3} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3756[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3756[32] -4[32])) 4294967288[33])))))) }
    ?1      = { defs={} expr=v3767[1] }
    pf      = { defs={0x080483d0,0x080483d3} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3756[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3756[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3756[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3756[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3756[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3756[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3756[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3756[32] -4[32]) -8[32]))))))) }
    ?3      = { defs={} expr=v3769[1] }
    af      = { defs={0x080483d0,0x080483d3} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3756[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3756[32] -4[32])) 4294967288[33])))))) }
    ?5      = { defs={} expr=v3771[1] }
    zf      = { defs={0x080483d0,0x080483d3} expr=(zerop[1] (add[32] (add[32] v3756[32] -4[32]) -8[32])) }
    sf      = { defs={0x080483d0,0x080483d3} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v3756[32] -4[32]) -8[32])) }
    tf      = { defs={} expr=v3774[1] }
    if      = { defs={} expr=v3775[1] }
    df      = { defs={} expr=v3776[1] }
    of      = { defs={0x080483d0,0x080483d3} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3756[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3756[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3756[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3756[32] -4[32])) 4294967288[33])))))) }
    iopl0   = { defs={} expr=v3778[1] }
    iopl1   = { defs={} expr=v3779[1] }
    nt      = { defs={} expr=v3780[1] }
    ?15     = { defs={} expr=v3781[1] }
    rf      = { defs={} expr=v3782[1] }
    vm      = { defs={} expr=v3783[1] }
    ac      = { defs={} expr=v3784[1] }
    vif     = { defs={} expr=v3785[1] }
    vip     = { defs={} expr=v3786[1] }
    id      = { defs={} expr=v3787[1] }
    ?22     = { defs={} expr=v3788[1] }
    ?23     = { defs={} expr=v3789[1] }
    ?24     = { defs={} expr=v3790[1] }
    ?25     = { defs={} expr=v3791[1] }
    ?26     = { defs={} expr=v3792[1] }
    ?27     = { defs={} expr=v3793[1] }
    ?28     = { defs={} expr=v3794[1] }
    ?29     = { defs={} expr=v3795[1] }
    ?30     = { defs={} expr=v3796[1] }
    ?31     = { defs={} expr=v3797[1] }
    ip      = { defs={0x080483d0,0x080483d1,0x080483d3} expr=0x080483d6[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v3756[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v3757[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v3756[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v3757[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v3756[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v3757[32]) }
      flags = { }
    address = { defs={0x080483d0} expr=(add[32] v3756[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v3757[32]) }
      flags = { }
init mem:
null state
null state
0x80483d6:mov    eax, DWORD PTR ds:[0x080495f8<.jcr>]
registers:
    ax      = { v34320 }
    cx      = { v34195 }
    dx      = { v34196 }
    bx      = { v34197 }
    sp      = { v34198-0xc }
    bp      = { v34198-0x4 }
    si      = { v34200 }
    di      = { v34201 }
    es      = { v34202 }
    cs      = { v34203 }
    ss      = { v34204 }
    ds      = { v34205 }
    fs      = { v34206 }
    gs      = { v34207 }
    cf      = { -v34305+0x1 }
    ?1      = { v34209 }
    pf      = { -v34295+0x1 }
    ?3      = { v34211 }
    af      = { -v34302+0x1 }
    ?5      = { v34213 }
    zf      = { v34300 }
    sf      = { v34298 }
    tf      = { v34216 }
    if      = { v34217 }
    df      = { v34218 }
    of      = { v34312 }
    iopl0   = { v34220 }
    iopl1   = { v34221 }
    nt      = { v34222 }
    ?15     = { v34223 }
    rf      = { v34224 }
    vm      = { v34225 }
    ac      = { v34226 }
    vif     = { v34227 }
    vip     = { v34228 }
    id      = { v34229 }
    ?22     = { v34230 }
    ?23     = { v34231 }
    ?24     = { v34232 }
    ?25     = { v34233 }
    ?26     = { v34234 }
    ?27     = { v34235 }
    ?28     = { v34236 }
    ?29     = { v34237 }
    ?30     = { v34238 }
    ?31     = { v34239 }
    ip      = { 0x80483db }
memory:
    address = { v34198-0x4 }
      value = { v34199 }
      flags = { size=4 }
    address = { 0x80495f8 }
      value = { v34320 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x080483d6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3929[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3930[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3931[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3932[8]))) }
    cx      = { defs={} expr=v3753[32] }
    dx      = { defs={} expr=v3754[32] }
    bx      = { defs={} expr=v3755[32] }
    sp      = { defs={0x080483d0,0x080483d3} expr=(add[32] (add[32] v3756[32] -4[32]) -8[32]) }
    bp      = { defs={0x080483d0,0x080483d1} expr=(add[32] v3756[32] -4[32]) }
    si      = { defs={} expr=v3758[32] }
    di      = { defs={} expr=v3759[32] }
    es      = { defs={} expr=v3760[16] }
    cs      = { defs={} expr=v3761[16] }
    ss      = { defs={} expr=v3762[16] }
    ds      = { defs={} expr=v3763[16] }
    fs      = { defs={} expr=v3764[16] }
    gs      = { defs={} expr=v3765[16] }
    cf      = { defs={0x080483d0,0x080483d3} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3756[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3756[32] -4[32])) 4294967288[33])))))) }
    ?1      = { defs={} expr=v3767[1] }
    pf      = { defs={0x080483d0,0x080483d3} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3756[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3756[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3756[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3756[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3756[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3756[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3756[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3756[32] -4[32]) -8[32]))))))) }
    ?3      = { defs={} expr=v3769[1] }
    af      = { defs={0x080483d0,0x080483d3} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3756[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3756[32] -4[32])) 4294967288[33])))))) }
    ?5      = { defs={} expr=v3771[1] }
    zf      = { defs={0x080483d0,0x080483d3} expr=(zerop[1] (add[32] (add[32] v3756[32] -4[32]) -8[32])) }
    sf      = { defs={0x080483d0,0x080483d3} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v3756[32] -4[32]) -8[32])) }
    tf      = { defs={} expr=v3774[1] }
    if      = { defs={} expr=v3775[1] }
    df      = { defs={} expr=v3776[1] }
    of      = { defs={0x080483d0,0x080483d3} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3756[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3756[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3756[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3756[32] -4[32])) 4294967288[33])))))) }
    iopl0   = { defs={} expr=v3778[1] }
    iopl1   = { defs={} expr=v3779[1] }
    nt      = { defs={} expr=v3780[1] }
    ?15     = { defs={} expr=v3781[1] }
    rf      = { defs={} expr=v3782[1] }
    vm      = { defs={} expr=v3783[1] }
    ac      = { defs={} expr=v3784[1] }
    vif     = { defs={} expr=v3785[1] }
    vip     = { defs={} expr=v3786[1] }
    id      = { defs={} expr=v3787[1] }
    ?22     = { defs={} expr=v3788[1] }
    ?23     = { defs={} expr=v3789[1] }
    ?24     = { defs={} expr=v3790[1] }
    ?25     = { defs={} expr=v3791[1] }
    ?26     = { defs={} expr=v3792[1] }
    ?27     = { defs={} expr=v3793[1] }
    ?28     = { defs={} expr=v3794[1] }
    ?29     = { defs={} expr=v3795[1] }
    ?30     = { defs={} expr=v3796[1] }
    ?31     = { defs={} expr=v3797[1] }
    ip      = { defs={0x080483d0,0x080483d1,0x080483d3,0x080483d6} expr=0x080483db[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v3756[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v3757[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v3756[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v3757[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v3756[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v3757[32]) }
      flags = { }
    address = { defs={0x080483d0} expr=(add[32] v3756[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v3757[32]) }
      flags = { }
init mem:
    address = { defs={} expr=0x080495fb[32] }
      value = { defs={} expr=v3932[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080495fa[32] }
      value = { defs={} expr=v3931[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080495f9[32] }
      value = { defs={} expr=v3930[8] }
      flags = { rdonly }
    address = { defs={0x080483d6} expr=0x080495f8[32] }
      value = { defs={} expr=v3929[8] }
      flags = { rdonly }
null state
null state
0x80483db:test   eax, eax
registers:
    ax      = { v34320 }
    cx      = { v34195 }
    dx      = { v34196 }
    bx      = { v34197 }
    sp      = { v34198-0xc }
    bp      = { v34198-0x4 }
    si      = { v34200 }
    di      = { v34201 }
    es      = { v34202 }
    cs      = { v34203 }
    ss      = { v34204 }
    ds      = { v34205 }
    fs      = { v34206 }
    gs      = { v34207 }
    cf      = { 0x0 }
    ?1      = { v34209 }
    pf      = { -v34358+0x1 }
    ?3      = { v34211 }
    af      = { v34366 }
    ?5      = { v34213 }
    zf      = { v34363 }
    sf      = { v34361 }
    tf      = { v34216 }
    if      = { v34217 }
    df      = { v34218 }
    of      = { 0x0 }
    iopl0   = { v34220 }
    iopl1   = { v34221 }
    nt      = { v34222 }
    ?15     = { v34223 }
    rf      = { v34224 }
    vm      = { v34225 }
    ac      = { v34226 }
    vif     = { v34227 }
    vip     = { v34228 }
    id      = { v34229 }
    ?22     = { v34230 }
    ?23     = { v34231 }
    ?24     = { v34232 }
    ?25     = { v34233 }
    ?26     = { v34234 }
    ?27     = { v34235 }
    ?28     = { v34236 }
    ?29     = { v34237 }
    ?30     = { v34238 }
    ?31     = { v34239 }
    ip      = { 0x80483dd }
memory:
    address = { v34198-0x4 }
      value = { v34199 }
      flags = { size=4 }
    address = { 0x80495f8 }
      value = { v34320 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x080483d6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3929[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3930[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3931[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3932[8]))) }
    cx      = { defs={} expr=v3753[32] }
    dx      = { defs={} expr=v3754[32] }
    bx      = { defs={} expr=v3755[32] }
    sp      = { defs={0x080483d0,0x080483d3} expr=(add[32] (add[32] v3756[32] -4[32]) -8[32]) }
    bp      = { defs={0x080483d0,0x080483d1} expr=(add[32] v3756[32] -4[32]) }
    si      = { defs={} expr=v3758[32] }
    di      = { defs={} expr=v3759[32] }
    es      = { defs={} expr=v3760[16] }
    cs      = { defs={} expr=v3761[16] }
    ss      = { defs={} expr=v3762[16] }
    ds      = { defs={} expr=v3763[16] }
    fs      = { defs={} expr=v3764[16] }
    gs      = { defs={} expr=v3765[16] }
    cf      = { defs={0x080483db} expr=0[1] }
    ?1      = { defs={} expr=v3767[1] }
    pf      = { defs={0x080483d6,0x080483db} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3929[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3930[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3931[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3932[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3929[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3930[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3931[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3932[8])))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3929[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3930[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3931[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3932[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3929[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3930[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3931[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3932[8]))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3929[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3930[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3931[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3932[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3929[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3930[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3931[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3932[8])))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3929[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3930[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3931[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3932[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3929[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3930[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3931[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3932[8])))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3929[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3930[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3931[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3932[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3929[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3930[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3931[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3932[8])))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3929[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3930[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3931[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3932[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3929[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3930[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3931[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3932[8]))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3929[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3930[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3931[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3932[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3929[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3930[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3931[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3932[8])))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3929[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3930[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3931[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3932[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3929[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3930[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3931[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3932[8])))))))))) }
    ?3      = { defs={} expr=v3769[1] }
    af      = { defs={0x080483db} expr=v3998[1] }
    ?5      = { defs={} expr=v3771[1] }
    zf      = { defs={0x080483d6,0x080483db} expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3929[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3930[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3931[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3932[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3929[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3930[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3931[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3932[8]))))) }
    sf      = { defs={0x080483d6,0x080483db} expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3929[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3930[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3931[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3932[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3929[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3930[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3931[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3932[8]))))) }
    tf      = { defs={} expr=v3774[1] }
    if      = { defs={} expr=v3775[1] }
    df      = { defs={} expr=v3776[1] }
    of      = { defs={0x080483db} expr=0[1] }
    iopl0   = { defs={} expr=v3778[1] }
    iopl1   = { defs={} expr=v3779[1] }
    nt      = { defs={} expr=v3780[1] }
    ?15     = { defs={} expr=v3781[1] }
    rf      = { defs={} expr=v3782[1] }
    vm      = { defs={} expr=v3783[1] }
    ac      = { defs={} expr=v3784[1] }
    vif     = { defs={} expr=v3785[1] }
    vip     = { defs={} expr=v3786[1] }
    id      = { defs={} expr=v3787[1] }
    ?22     = { defs={} expr=v3788[1] }
    ?23     = { defs={} expr=v3789[1] }
    ?24     = { defs={} expr=v3790[1] }
    ?25     = { defs={} expr=v3791[1] }
    ?26     = { defs={} expr=v3792[1] }
    ?27     = { defs={} expr=v3793[1] }
    ?28     = { defs={} expr=v3794[1] }
    ?29     = { defs={} expr=v3795[1] }
    ?30     = { defs={} expr=v3796[1] }
    ?31     = { defs={} expr=v3797[1] }
    ip      = { defs={0x080483d0,0x080483d1,0x080483d3,0x080483d6,0x080483db} expr=0x080483dd[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v3756[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v3757[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v3756[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v3757[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v3756[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v3757[32]) }
      flags = { }
    address = { defs={0x080483d0} expr=(add[32] v3756[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v3757[32]) }
      flags = { }
init mem:
    address = { defs={} expr=0x080495fb[32] }
      value = { defs={} expr=v3932[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080495fa[32] }
      value = { defs={} expr=v3931[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080495f9[32] }
      value = { defs={} expr=v3930[8] }
      flags = { rdonly }
    address = { defs={0x080483d6} expr=0x080495f8[32] }
      value = { defs={} expr=v3929[8] }
      flags = { rdonly }
null state
null state
0x80483dd:je     0x08048400<<Insn>>
registers:
    ax      = { v34320 }
    cx      = { v34195 }
    dx      = { v34196 }
    bx      = { v34197 }
    sp      = { v34198-0xc }
    bp      = { v34198-0x4 }
    si      = { v34200 }
    di      = { v34201 }
    es      = { v34202 }
    cs      = { v34203 }
    ss      = { v34204 }
    ds      = { v34205 }
    fs      = { v34206 }
    gs      = { v34207 }
    cf      = { 0x0 }
    ?1      = { v34209 }
    pf      = { -v34358+0x1 }
    ?3      = { v34211 }
    af      = { v34366 }
    ?5      = { v34213 }
    zf      = { v34363 }
    sf      = { v34361 }
    tf      = { v34216 }
    if      = { v34217 }
    df      = { v34218 }
    of      = { 0x0 }
    iopl0   = { v34220 }
    iopl1   = { v34221 }
    nt      = { v34222 }
    ?15     = { v34223 }
    rf      = { v34224 }
    vm      = { v34225 }
    ac      = { v34226 }
    vif     = { v34227 }
    vip     = { v34228 }
    id      = { v34229 }
    ?22     = { v34230 }
    ?23     = { v34231 }
    ?24     = { v34232 }
    ?25     = { v34233 }
    ?26     = { v34234 }
    ?27     = { v34235 }
    ?28     = { v34236 }
    ?29     = { v34237 }
    ?30     = { v34238 }
    ?31     = { v34239 }
    ip      = { v34376 }
memory:
    address = { v34198-0x4 }
      value = { v34199 }
      flags = { size=4 }
    address = { 0x80495f8 }
      value = { v34320 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x080483d6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3929[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3930[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3931[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3932[8]))) }
    cx      = { defs={} expr=v3753[32] }
    dx      = { defs={} expr=v3754[32] }
    bx      = { defs={} expr=v3755[32] }
    sp      = { defs={0x080483d0,0x080483d3} expr=(add[32] (add[32] v3756[32] -4[32]) -8[32]) }
    bp      = { defs={0x080483d0,0x080483d1} expr=(add[32] v3756[32] -4[32]) }
    si      = { defs={} expr=v3758[32] }
    di      = { defs={} expr=v3759[32] }
    es      = { defs={} expr=v3760[16] }
    cs      = { defs={} expr=v3761[16] }
    ss      = { defs={} expr=v3762[16] }
    ds      = { defs={} expr=v3763[16] }
    fs      = { defs={} expr=v3764[16] }
    gs      = { defs={} expr=v3765[16] }
    cf      = { defs={0x080483db} expr=0[1] }
    ?1      = { defs={} expr=v3767[1] }
    pf      = { defs={0x080483d6,0x080483db} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3929[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3930[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3931[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3932[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3929[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3930[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3931[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3932[8])))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3929[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3930[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3931[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3932[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3929[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3930[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3931[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3932[8]))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3929[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3930[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3931[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3932[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3929[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3930[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3931[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3932[8])))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3929[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3930[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3931[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3932[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3929[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3930[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3931[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3932[8])))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3929[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3930[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3931[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3932[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3929[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3930[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3931[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3932[8])))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3929[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3930[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3931[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3932[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3929[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3930[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3931[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3932[8]))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3929[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3930[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3931[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3932[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3929[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3930[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3931[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3932[8])))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3929[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3930[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3931[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3932[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3929[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3930[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3931[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3932[8])))))))))) }
    ?3      = { defs={} expr=v3769[1] }
    af      = { defs={0x080483db} expr=v3998[1] }
    ?5      = { defs={} expr=v3771[1] }
    zf      = { defs={0x080483d6,0x080483db} expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3929[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3930[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3931[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3932[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3929[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3930[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3931[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3932[8]))))) }
    sf      = { defs={0x080483d6,0x080483db} expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3929[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3930[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3931[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3932[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3929[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3930[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3931[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3932[8]))))) }
    tf      = { defs={} expr=v3774[1] }
    if      = { defs={} expr=v3775[1] }
    df      = { defs={} expr=v3776[1] }
    of      = { defs={0x080483db} expr=0[1] }
    iopl0   = { defs={} expr=v3778[1] }
    iopl1   = { defs={} expr=v3779[1] }
    nt      = { defs={} expr=v3780[1] }
    ?15     = { defs={} expr=v3781[1] }
    rf      = { defs={} expr=v3782[1] }
    vm      = { defs={} expr=v3783[1] }
    ac      = { defs={} expr=v3784[1] }
    vif     = { defs={} expr=v3785[1] }
    vip     = { defs={} expr=v3786[1] }
    id      = { defs={} expr=v3787[1] }
    ?22     = { defs={} expr=v3788[1] }
    ?23     = { defs={} expr=v3789[1] }
    ?24     = { defs={} expr=v3790[1] }
    ?25     = { defs={} expr=v3791[1] }
    ?26     = { defs={} expr=v3792[1] }
    ?27     = { defs={} expr=v3793[1] }
    ?28     = { defs={} expr=v3794[1] }
    ?29     = { defs={} expr=v3795[1] }
    ?30     = { defs={} expr=v3796[1] }
    ?31     = { defs={} expr=v3797[1] }
    ip      = { defs={0x080483d0,0x080483d1,0x080483d3,0x080483d6,0x080483db,0x080483dd} expr=(ite[32] (zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3929[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3930[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3931[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3932[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3929[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3930[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3931[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3932[8]))))) 0x08048400[32] 0x080483df[32]) }
memory:
    address = { defs={} expr=(add[32] (add[32] v3756[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v3757[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v3756[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v3757[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v3756[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v3757[32]) }
      flags = { }
    address = { defs={0x080483d0} expr=(add[32] v3756[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v3757[32]) }
      flags = { }
init mem:
    address = { defs={} expr=0x080495fb[32] }
      value = { defs={} expr=v3932[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080495fa[32] }
      value = { defs={} expr=v3931[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080495f9[32] }
      value = { defs={} expr=v3930[8] }
      flags = { rdonly }
    address = { defs={0x080483d6} expr=0x080495f8[32] }
      value = { defs={} expr=v3929[8] }
      flags = { rdonly }
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483df:mov    eax, 0x00000000
registers:
    ax      = { 0x0 }
    cx      = { v34427 }
    dx      = { v34428 }
    bx      = { v34429 }
    sp      = { v34430 }
    bp      = { v34431 }
    si      = { v34432 }
    di      = { v34433 }
    es      = { v34434 }
    cs      = { v34435 }
    ss      = { v34436 }
    ds      = { v34437 }
    fs      = { v34438 }
    gs      = { v34439 }
    cf      = { v34440 }
    ?1      = { v34441 }
    pf      = { v34442 }
    ?3      = { v34443 }
    af      = { v34444 }
    ?5      = { v34445 }
    zf      = { v34446 }
    sf      = { v34447 }
    tf      = { v34448 }
    if      = { v34449 }
    df      = { v34450 }
    of      = { v34451 }
    iopl0   = { v34452 }
    iopl1   = { v34453 }
    nt      = { v34454 }
    ?15     = { v34455 }
    rf      = { v34456 }
    vm      = { v34457 }
    ac      = { v34458 }
    vif     = { v34459 }
    vip     = { v34460 }
    id      = { v34461 }
    ?22     = { v34462 }
    ?23     = { v34463 }
    ?24     = { v34464 }
    ?25     = { v34465 }
    ?26     = { v34466 }
    ?27     = { v34467 }
    ?28     = { v34468 }
    ?29     = { v34469 }
    ?30     = { v34470 }
    ?31     = { v34471 }
    ip      = { 0x80483e4 }
memory:
registers:
    ax      = { defs={0x080483df} expr=0[32] }
    cx      = { defs={} expr=v4069[32] }
    dx      = { defs={} expr=v4070[32] }
    bx      = { defs={} expr=v4071[32] }
    sp      = { defs={} expr=v4072[32] }
    bp      = { defs={} expr=v4073[32] }
    si      = { defs={} expr=v4074[32] }
    di      = { defs={} expr=v4075[32] }
    es      = { defs={} expr=v4076[16] }
    cs      = { defs={} expr=v4077[16] }
    ss      = { defs={} expr=v4078[16] }
    ds      = { defs={} expr=v4079[16] }
    fs      = { defs={} expr=v4080[16] }
    gs      = { defs={} expr=v4081[16] }
    cf      = { defs={} expr=v4082[1] }
    ?1      = { defs={} expr=v4083[1] }
    pf      = { defs={} expr=v4084[1] }
    ?3      = { defs={} expr=v4085[1] }
    af      = { defs={} expr=v4086[1] }
    ?5      = { defs={} expr=v4087[1] }
    zf      = { defs={} expr=v4088[1] }
    sf      = { defs={} expr=v4089[1] }
    tf      = { defs={} expr=v4090[1] }
    if      = { defs={} expr=v4091[1] }
    df      = { defs={} expr=v4092[1] }
    of      = { defs={} expr=v4093[1] }
    iopl0   = { defs={} expr=v4094[1] }
    iopl1   = { defs={} expr=v4095[1] }
    nt      = { defs={} expr=v4096[1] }
    ?15     = { defs={} expr=v4097[1] }
    rf      = { defs={} expr=v4098[1] }
    vm      = { defs={} expr=v4099[1] }
    ac      = { defs={} expr=v4100[1] }
    vif     = { defs={} expr=v4101[1] }
    vip     = { defs={} expr=v4102[1] }
    id      = { defs={} expr=v4103[1] }
    ?22     = { defs={} expr=v4104[1] }
    ?23     = { defs={} expr=v4105[1] }
    ?24     = { defs={} expr=v4106[1] }
    ?25     = { defs={} expr=v4107[1] }
    ?26     = { defs={} expr=v4108[1] }
    ?27     = { defs={} expr=v4109[1] }
    ?28     = { defs={} expr=v4110[1] }
    ?29     = { defs={} expr=v4111[1] }
    ?30     = { defs={} expr=v4112[1] }
    ?31     = { defs={} expr=v4113[1] }
    ip      = { defs={0x080483df} expr=0x080483e4[32] }
memory:
init mem:
null state
null state
0x80483e4:test   eax, eax
registers:
    ax      = { 0x0 }
    cx      = { v34427 }
    dx      = { v34428 }
    bx      = { v34429 }
    sp      = { v34430 }
    bp      = { v34431 }
    si      = { v34432 }
    di      = { v34433 }
    es      = { v34434 }
    cs      = { v34435 }
    ss      = { v34436 }
    ds      = { v34437 }
    fs      = { v34438 }
    gs      = { v34439 }
    cf      = { 0x0 }
    ?1      = { v34441 }
    pf      = { 0x1 }
    ?3      = { v34443 }
    af      = { v34505 }
    ?5      = { v34445 }
    zf      = { 0x1 }
    sf      = { 0x0 }
    tf      = { v34448 }
    if      = { v34449 }
    df      = { v34450 }
    of      = { 0x0 }
    iopl0   = { v34452 }
    iopl1   = { v34453 }
    nt      = { v34454 }
    ?15     = { v34455 }
    rf      = { v34456 }
    vm      = { v34457 }
    ac      = { v34458 }
    vif     = { v34459 }
    vip     = { v34460 }
    id      = { v34461 }
    ?22     = { v34462 }
    ?23     = { v34463 }
    ?24     = { v34464 }
    ?25     = { v34465 }
    ?26     = { v34466 }
    ?27     = { v34467 }
    ?28     = { v34468 }
    ?29     = { v34469 }
    ?30     = { v34470 }
    ?31     = { v34471 }
    ip      = { 0x80483e6 }
memory:
registers:
    ax      = { defs={0x080483df} expr=0[32] }
    cx      = { defs={} expr=v4069[32] }
    dx      = { defs={} expr=v4070[32] }
    bx      = { defs={} expr=v4071[32] }
    sp      = { defs={} expr=v4072[32] }
    bp      = { defs={} expr=v4073[32] }
    si      = { defs={} expr=v4074[32] }
    di      = { defs={} expr=v4075[32] }
    es      = { defs={} expr=v4076[16] }
    cs      = { defs={} expr=v4077[16] }
    ss      = { defs={} expr=v4078[16] }
    ds      = { defs={} expr=v4079[16] }
    fs      = { defs={} expr=v4080[16] }
    gs      = { defs={} expr=v4081[16] }
    cf      = { defs={0x080483e4} expr=0[1] }
    ?1      = { defs={} expr=v4083[1] }
    pf      = { defs={0x080483df,0x080483e4} expr=1[1] }
    ?3      = { defs={} expr=v4085[1] }
    af      = { defs={0x080483e4} expr=v4184[1] }
    ?5      = { defs={} expr=v4087[1] }
    zf      = { defs={0x080483df,0x080483e4} expr=1[1] }
    sf      = { defs={0x080483df,0x080483e4} expr=0[1] }
    tf      = { defs={} expr=v4090[1] }
    if      = { defs={} expr=v4091[1] }
    df      = { defs={} expr=v4092[1] }
    of      = { defs={0x080483e4} expr=0[1] }
    iopl0   = { defs={} expr=v4094[1] }
    iopl1   = { defs={} expr=v4095[1] }
    nt      = { defs={} expr=v4096[1] }
    ?15     = { defs={} expr=v4097[1] }
    rf      = { defs={} expr=v4098[1] }
    vm      = { defs={} expr=v4099[1] }
    ac      = { defs={} expr=v4100[1] }
    vif     = { defs={} expr=v4101[1] }
    vip     = { defs={} expr=v4102[1] }
    id      = { defs={} expr=v4103[1] }
    ?22     = { defs={} expr=v4104[1] }
    ?23     = { defs={} expr=v4105[1] }
    ?24     = { defs={} expr=v4106[1] }
    ?25     = { defs={} expr=v4107[1] }
    ?26     = { defs={} expr=v4108[1] }
    ?27     = { defs={} expr=v4109[1] }
    ?28     = { defs={} expr=v4110[1] }
    ?29     = { defs={} expr=v4111[1] }
    ?30     = { defs={} expr=v4112[1] }
    ?31     = { defs={} expr=v4113[1] }
    ip      = { defs={0x080483df,0x080483e4} expr=0x080483e6[32] }
memory:
init mem:
null state
null state
0x80483e6:je     0x08048400<<Insn>>
registers:
    ax      = { 0x0 }
    cx      = { v34427 }
    dx      = { v34428 }
    bx      = { v34429 }
    sp      = { v34430 }
    bp      = { v34431 }
    si      = { v34432 }
    di      = { v34433 }
    es      = { v34434 }
    cs      = { v34435 }
    ss      = { v34436 }
    ds      = { v34437 }
    fs      = { v34438 }
    gs      = { v34439 }
    cf      = { 0x0 }
    ?1      = { v34441 }
    pf      = { 0x1 }
    ?3      = { v34443 }
    af      = { v34505 }
    ?5      = { v34445 }
    zf      = { 0x1 }
    sf      = { 0x0 }
    tf      = { v34448 }
    if      = { v34449 }
    df      = { v34450 }
    of      = { 0x0 }
    iopl0   = { v34452 }
    iopl1   = { v34453 }
    nt      = { v34454 }
    ?15     = { v34455 }
    rf      = { v34456 }
    vm      = { v34457 }
    ac      = { v34458 }
    vif     = { v34459 }
    vip     = { v34460 }
    id      = { v34461 }
    ?22     = { v34462 }
    ?23     = { v34463 }
    ?24     = { v34464 }
    ?25     = { v34465 }
    ?26     = { v34466 }
    ?27     = { v34467 }
    ?28     = { v34468 }
    ?29     = { v34469 }
    ?30     = { v34470 }
    ?31     = { v34471 }
    ip      = { 0x8048400 }
memory:
registers:
    ax      = { defs={0x080483df} expr=0[32] }
    cx      = { defs={} expr=v4069[32] }
    dx      = { defs={} expr=v4070[32] }
    bx      = { defs={} expr=v4071[32] }
    sp      = { defs={} expr=v4072[32] }
    bp      = { defs={} expr=v4073[32] }
    si      = { defs={} expr=v4074[32] }
    di      = { defs={} expr=v4075[32] }
    es      = { defs={} expr=v4076[16] }
    cs      = { defs={} expr=v4077[16] }
    ss      = { defs={} expr=v4078[16] }
    ds      = { defs={} expr=v4079[16] }
    fs      = { defs={} expr=v4080[16] }
    gs      = { defs={} expr=v4081[16] }
    cf      = { defs={0x080483e4} expr=0[1] }
    ?1      = { defs={} expr=v4083[1] }
    pf      = { defs={0x080483df,0x080483e4} expr=1[1] }
    ?3      = { defs={} expr=v4085[1] }
    af      = { defs={0x080483e4} expr=v4184[1] }
    ?5      = { defs={} expr=v4087[1] }
    zf      = { defs={0x080483df,0x080483e4} expr=1[1] }
    sf      = { defs={0x080483df,0x080483e4} expr=0[1] }
    tf      = { defs={} expr=v4090[1] }
    if      = { defs={} expr=v4091[1] }
    df      = { defs={} expr=v4092[1] }
    of      = { defs={0x080483e4} expr=0[1] }
    iopl0   = { defs={} expr=v4094[1] }
    iopl1   = { defs={} expr=v4095[1] }
    nt      = { defs={} expr=v4096[1] }
    ?15     = { defs={} expr=v4097[1] }
    rf      = { defs={} expr=v4098[1] }
    vm      = { defs={} expr=v4099[1] }
    ac      = { defs={} expr=v4100[1] }
    vif     = { defs={} expr=v4101[1] }
    vip     = { defs={} expr=v4102[1] }
    id      = { defs={} expr=v4103[1] }
    ?22     = { defs={} expr=v4104[1] }
    ?23     = { defs={} expr=v4105[1] }
    ?24     = { defs={} expr=v4106[1] }
    ?25     = { defs={} expr=v4107[1] }
    ?26     = { defs={} expr=v4108[1] }
    ?27     = { defs={} expr=v4109[1] }
    ?28     = { defs={} expr=v4110[1] }
    ?29     = { defs={} expr=v4111[1] }
    ?30     = { defs={} expr=v4112[1] }
    ?31     = { defs={} expr=v4113[1] }
    ip      = { defs={0x080483df,0x080483e4,0x080483e6} expr=0x08048400[32] }
memory:
init mem:
null state
null state
0x8048400:mov    esp, ebp
registers:
    ax      = { 0x0 }
    cx      = { v34427 }
    dx      = { v34428 }
    bx      = { v34429 }
    sp      = { v34431 }
    bp      = { v34431 }
    si      = { v34432 }
    di      = { v34433 }
    es      = { v34434 }
    cs      = { v34435 }
    ss      = { v34436 }
    ds      = { v34437 }
    fs      = { v34438 }
    gs      = { v34439 }
    cf      = { 0x0 }
    ?1      = { v34441 }
    pf      = { 0x1 }
    ?3      = { v34443 }
    af      = { v34505 }
    ?5      = { v34445 }
    zf      = { 0x1 }
    sf      = { 0x0 }
    tf      = { v34448 }
    if      = { v34449 }
    df      = { v34450 }
    of      = { 0x0 }
    iopl0   = { v34452 }
    iopl1   = { v34453 }
    nt      = { v34454 }
    ?15     = { v34455 }
    rf      = { v34456 }
    vm      = { v34457 }
    ac      = { v34458 }
    vif     = { v34459 }
    vip     = { v34460 }
    id      = { v34461 }
    ?22     = { v34462 }
    ?23     = { v34463 }
    ?24     = { v34464 }
    ?25     = { v34465 }
    ?26     = { v34466 }
    ?27     = { v34467 }
    ?28     = { v34468 }
    ?29     = { v34469 }
    ?30     = { v34470 }
    ?31     = { v34471 }
    ip      = { 0x8048402 }
memory:
registers:
    ax      = { defs={0x080483df} expr=0[32] }
    cx      = { defs={} expr=v4069[32] }
    dx      = { defs={} expr=v4070[32] }
    bx      = { defs={} expr=v4071[32] }
    sp      = { defs={0x08048400} expr=v4073[32] }
    bp      = { defs={} expr=v4073[32] }
    si      = { defs={} expr=v4074[32] }
    di      = { defs={} expr=v4075[32] }
    es      = { defs={} expr=v4076[16] }
    cs      = { defs={} expr=v4077[16] }
    ss      = { defs={} expr=v4078[16] }
    ds      = { defs={} expr=v4079[16] }
    fs      = { defs={} expr=v4080[16] }
    gs      = { defs={} expr=v4081[16] }
    cf      = { defs={0x080483e4} expr=0[1] }
    ?1      = { defs={} expr=v4083[1] }
    pf      = { defs={0x080483df,0x080483e4} expr=1[1] }
    ?3      = { defs={} expr=v4085[1] }
    af      = { defs={0x080483e4} expr=v4184[1] }
    ?5      = { defs={} expr=v4087[1] }
    zf      = { defs={0x080483df,0x080483e4} expr=1[1] }
    sf      = { defs={0x080483df,0x080483e4} expr=0[1] }
    tf      = { defs={} expr=v4090[1] }
    if      = { defs={} expr=v4091[1] }
    df      = { defs={} expr=v4092[1] }
    of      = { defs={0x080483e4} expr=0[1] }
    iopl0   = { defs={} expr=v4094[1] }
    iopl1   = { defs={} expr=v4095[1] }
    nt      = { defs={} expr=v4096[1] }
    ?15     = { defs={} expr=v4097[1] }
    rf      = { defs={} expr=v4098[1] }
    vm      = { defs={} expr=v4099[1] }
    ac      = { defs={} expr=v4100[1] }
    vif     = { defs={} expr=v4101[1] }
    vip     = { defs={} expr=v4102[1] }
    id      = { defs={} expr=v4103[1] }
    ?22     = { defs={} expr=v4104[1] }
    ?23     = { defs={} expr=v4105[1] }
    ?24     = { defs={} expr=v4106[1] }
    ?25     = { defs={} expr=v4107[1] }
    ?26     = { defs={} expr=v4108[1] }
    ?27     = { defs={} expr=v4109[1] }
    ?28     = { defs={} expr=v4110[1] }
    ?29     = { defs={} expr=v4111[1] }
    ?30     = { defs={} expr=v4112[1] }
    ?31     = { defs={} expr=v4113[1] }
    ip      = { defs={0x080483df,0x080483e4,0x080483e6,0x08048400} expr=0x08048402[32] }
memory:
init mem:
null state
null state
0x8048402:pop    ebp
registers:
    ax      = { 0x0 }
    cx      = { v34427 }
    dx      = { v34428 }
    bx      = { v34429 }
    sp      = { v34431+0x4 }
    bp      = { v34529 }
    si      = { v34432 }
    di      = { v34433 }
    es      = { v34434 }
    cs      = { v34435 }
    ss      = { v34436 }
    ds      = { v34437 }
    fs      = { v34438 }
    gs      = { v34439 }
    cf      = { 0x0 }
    ?1      = { v34441 }
    pf      = { 0x1 }
    ?3      = { v34443 }
    af      = { v34505 }
    ?5      = { v34445 }
    zf      = { 0x1 }
    sf      = { 0x0 }
    tf      = { v34448 }
    if      = { v34449 }
    df      = { v34450 }
    of      = { 0x0 }
    iopl0   = { v34452 }
    iopl1   = { v34453 }
    nt      = { v34454 }
    ?15     = { v34455 }
    rf      = { v34456 }
    vm      = { v34457 }
    ac      = { v34458 }
    vif     = { v34459 }
    vip     = { v34460 }
    id      = { v34461 }
    ?22     = { v34462 }
    ?23     = { v34463 }
    ?24     = { v34464 }
    ?25     = { v34465 }
    ?26     = { v34466 }
    ?27     = { v34467 }
    ?28     = { v34468 }
    ?29     = { v34469 }
    ?30     = { v34470 }
    ?31     = { v34471 }
    ip      = { 0x8048403 }
memory:
    address = { v34431 }
      value = { v34529 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x080483df} expr=0[32] }
    cx      = { defs={} expr=v4069[32] }
    dx      = { defs={} expr=v4070[32] }
    bx      = { defs={} expr=v4071[32] }
    sp      = { defs={0x08048400,0x08048402} expr=(add[32] v4073[32] 4[32]) }
    bp      = { defs={0x08048402} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4233[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4234[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4235[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4236[8]))) }
    si      = { defs={} expr=v4074[32] }
    di      = { defs={} expr=v4075[32] }
    es      = { defs={} expr=v4076[16] }
    cs      = { defs={} expr=v4077[16] }
    ss      = { defs={} expr=v4078[16] }
    ds      = { defs={} expr=v4079[16] }
    fs      = { defs={} expr=v4080[16] }
    gs      = { defs={} expr=v4081[16] }
    cf      = { defs={0x080483e4} expr=0[1] }
    ?1      = { defs={} expr=v4083[1] }
    pf      = { defs={0x080483df,0x080483e4} expr=1[1] }
    ?3      = { defs={} expr=v4085[1] }
    af      = { defs={0x080483e4} expr=v4184[1] }
    ?5      = { defs={} expr=v4087[1] }
    zf      = { defs={0x080483df,0x080483e4} expr=1[1] }
    sf      = { defs={0x080483df,0x080483e4} expr=0[1] }
    tf      = { defs={} expr=v4090[1] }
    if      = { defs={} expr=v4091[1] }
    df      = { defs={} expr=v4092[1] }
    of      = { defs={0x080483e4} expr=0[1] }
    iopl0   = { defs={} expr=v4094[1] }
    iopl1   = { defs={} expr=v4095[1] }
    nt      = { defs={} expr=v4096[1] }
    ?15     = { defs={} expr=v4097[1] }
    rf      = { defs={} expr=v4098[1] }
    vm      = { defs={} expr=v4099[1] }
    ac      = { defs={} expr=v4100[1] }
    vif     = { defs={} expr=v4101[1] }
    vip     = { defs={} expr=v4102[1] }
    id      = { defs={} expr=v4103[1] }
    ?22     = { defs={} expr=v4104[1] }
    ?23     = { defs={} expr=v4105[1] }
    ?24     = { defs={} expr=v4106[1] }
    ?25     = { defs={} expr=v4107[1] }
    ?26     = { defs={} expr=v4108[1] }
    ?27     = { defs={} expr=v4109[1] }
    ?28     = { defs={} expr=v4110[1] }
    ?29     = { defs={} expr=v4111[1] }
    ?30     = { defs={} expr=v4112[1] }
    ?31     = { defs={} expr=v4113[1] }
    ip      = { defs={0x080483df,0x080483e4,0x080483e6,0x08048400,0x08048402} expr=0x08048403[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] v4073[32] 3[32]) }
      value = { defs={} expr=v4236[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v4073[32] 2[32]) }
      value = { defs={} expr=v4235[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v4073[32] 1[32]) }
      value = { defs={} expr=v4234[8] }
      flags = { rdonly }
    address = { defs={0x08048400,0x08048402} expr=v4073[32] }
      value = { defs={} expr=v4233[8] }
      flags = { rdonly }
null state
null state
0x8048403:ret    
registers:
    ax      = { 0x0 }
    cx      = { v34427 }
    dx      = { v34428 }
    bx      = { v34429 }
    sp      = { v34431+0x8 }
    bp      = { v34529 }
    si      = { v34432 }
    di      = { v34433 }
    es      = { v34434 }
    cs      = { v34435 }
    ss      = { v34436 }
    ds      = { v34437 }
    fs      = { v34438 }
    gs      = { v34439 }
    cf      = { 0x0 }
    ?1      = { v34441 }
    pf      = { 0x1 }
    ?3      = { v34443 }
    af      = { v34505 }
    ?5      = { v34445 }
    zf      = { 0x1 }
    sf      = { 0x0 }
    tf      = { v34448 }
    if      = { v34449 }
    df      = { v34450 }
    of      = { 0x0 }
    iopl0   = { v34452 }
    iopl1   = { v34453 }
    nt      = { v34454 }
    ?15     = { v34455 }
    rf      = { v34456 }
    vm      = { v34457 }
    ac      = { v34458 }
    vif     = { v34459 }
    vip     = { v34460 }
    id      = { v34461 }
    ?22     = { v34462 }
    ?23     = { v34463 }
    ?24     = { v34464 }
    ?25     = { v34465 }
    ?26     = { v34466 }
    ?27     = { v34467 }
    ?28     = { v34468 }
    ?29     = { v34469 }
    ?30     = { v34470 }
    ?31     = { v34471 }
    ip      = { v34541 }
memory:
    address = { v34431 }
      value = { v34529 }
      flags = { size=4; read-only }
    address = { v34431+0x4 }
      value = { v34541 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x080483df} expr=0[32] }
    cx      = { defs={} expr=v4069[32] }
    dx      = { defs={} expr=v4070[32] }
    bx      = { defs={} expr=v4071[32] }
    sp      = { defs={0x08048400,0x08048402,0x08048403} expr=(add[32] (add[32] v4073[32] 4[32]) 4[32]) }
    bp      = { defs={0x08048402} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4233[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4234[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4235[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4236[8]))) }
    si      = { defs={} expr=v4074[32] }
    di      = { defs={} expr=v4075[32] }
    es      = { defs={} expr=v4076[16] }
    cs      = { defs={} expr=v4077[16] }
    ss      = { defs={} expr=v4078[16] }
    ds      = { defs={} expr=v4079[16] }
    fs      = { defs={} expr=v4080[16] }
    gs      = { defs={} expr=v4081[16] }
    cf      = { defs={0x080483e4} expr=0[1] }
    ?1      = { defs={} expr=v4083[1] }
    pf      = { defs={0x080483df,0x080483e4} expr=1[1] }
    ?3      = { defs={} expr=v4085[1] }
    af      = { defs={0x080483e4} expr=v4184[1] }
    ?5      = { defs={} expr=v4087[1] }
    zf      = { defs={0x080483df,0x080483e4} expr=1[1] }
    sf      = { defs={0x080483df,0x080483e4} expr=0[1] }
    tf      = { defs={} expr=v4090[1] }
    if      = { defs={} expr=v4091[1] }
    df      = { defs={} expr=v4092[1] }
    of      = { defs={0x080483e4} expr=0[1] }
    iopl0   = { defs={} expr=v4094[1] }
    iopl1   = { defs={} expr=v4095[1] }
    nt      = { defs={} expr=v4096[1] }
    ?15     = { defs={} expr=v4097[1] }
    rf      = { defs={} expr=v4098[1] }
    vm      = { defs={} expr=v4099[1] }
    ac      = { defs={} expr=v4100[1] }
    vif     = { defs={} expr=v4101[1] }
    vip     = { defs={} expr=v4102[1] }
    id      = { defs={} expr=v4103[1] }
    ?22     = { defs={} expr=v4104[1] }
    ?23     = { defs={} expr=v4105[1] }
    ?24     = { defs={} expr=v4106[1] }
    ?25     = { defs={} expr=v4107[1] }
    ?26     = { defs={} expr=v4108[1] }
    ?27     = { defs={} expr=v4109[1] }
    ?28     = { defs={} expr=v4110[1] }
    ?29     = { defs={} expr=v4111[1] }
    ?30     = { defs={} expr=v4112[1] }
    ?31     = { defs={} expr=v4113[1] }
    ip      = { defs={0x08048403} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4262[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4263[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4264[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4265[8]))) }
memory:
init mem:
    address = { defs={} expr=(add[32] (add[32] v4073[32] 4[32]) 3[32]) }
      value = { defs={} expr=v4265[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v4073[32] 4[32]) 2[32]) }
      value = { defs={} expr=v4264[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v4073[32] 4[32]) 1[32]) }
      value = { defs={} expr=v4263[8] }
      flags = { rdonly }
    address = { defs={0x08048400,0x08048402,0x08048403} expr=(add[32] v4073[32] 4[32]) }
      value = { defs={} expr=v4262[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v4073[32] 3[32]) }
      value = { defs={} expr=v4236[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v4073[32] 2[32]) }
      value = { defs={} expr=v4235[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v4073[32] 1[32]) }
      value = { defs={} expr=v4234[8] }
      flags = { rdonly }
    address = { defs={0x08048400,0x08048402} expr=v4073[32] }
      value = { defs={} expr=v4233[8] }
      flags = { rdonly }
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483e8:mov    DWORD PTR ss:[esp], 0x080495f8<.jcr>
registers:
    ax      = { v34592 }
    cx      = { v34593 }
    dx      = { v34594 }
    bx      = { v34595 }
    sp      = { v34596 }
    bp      = { v34597 }
    si      = { v34598 }
    di      = { v34599 }
    es      = { v34600 }
    cs      = { v34601 }
    ss      = { v34602 }
    ds      = { v34603 }
    fs      = { v34604 }
    gs      = { v34605 }
    cf      = { v34606 }
    ?1      = { v34607 }
    pf      = { v34608 }
    ?3      = { v34609 }
    af      = { v34610 }
    ?5      = { v34611 }
    zf      = { v34612 }
    sf      = { v34613 }
    tf      = { v34614 }
    if      = { v34615 }
    df      = { v34616 }
    of      = { v34617 }
    iopl0   = { v34618 }
    iopl1   = { v34619 }
    nt      = { v34620 }
    ?15     = { v34621 }
    rf      = { v34622 }
    vm      = { v34623 }
    ac      = { v34624 }
    vif     = { v34625 }
    vip     = { v34626 }
    id      = { v34627 }
    ?22     = { v34628 }
    ?23     = { v34629 }
    ?24     = { v34630 }
    ?25     = { v34631 }
    ?26     = { v34632 }
    ?27     = { v34633 }
    ?28     = { v34634 }
    ?29     = { v34635 }
    ?30     = { v34636 }
    ?31     = { v34637 }
    ip      = { 0x80483ef }
memory:
    address = { v34596 }
      value = { 0x80495f8 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v4323[32] }
    cx      = { defs={} expr=v4324[32] }
    dx      = { defs={} expr=v4325[32] }
    bx      = { defs={} expr=v4326[32] }
    sp      = { defs={} expr=v4327[32] }
    bp      = { defs={} expr=v4328[32] }
    si      = { defs={} expr=v4329[32] }
    di      = { defs={} expr=v4330[32] }
    es      = { defs={} expr=v4331[16] }
    cs      = { defs={} expr=v4332[16] }
    ss      = { defs={} expr=v4333[16] }
    ds      = { defs={} expr=v4334[16] }
    fs      = { defs={} expr=v4335[16] }
    gs      = { defs={} expr=v4336[16] }
    cf      = { defs={} expr=v4337[1] }
    ?1      = { defs={} expr=v4338[1] }
    pf      = { defs={} expr=v4339[1] }
    ?3      = { defs={} expr=v4340[1] }
    af      = { defs={} expr=v4341[1] }
    ?5      = { defs={} expr=v4342[1] }
    zf      = { defs={} expr=v4343[1] }
    sf      = { defs={} expr=v4344[1] }
    tf      = { defs={} expr=v4345[1] }
    if      = { defs={} expr=v4346[1] }
    df      = { defs={} expr=v4347[1] }
    of      = { defs={} expr=v4348[1] }
    iopl0   = { defs={} expr=v4349[1] }
    iopl1   = { defs={} expr=v4350[1] }
    nt      = { defs={} expr=v4351[1] }
    ?15     = { defs={} expr=v4352[1] }
    rf      = { defs={} expr=v4353[1] }
    vm      = { defs={} expr=v4354[1] }
    ac      = { defs={} expr=v4355[1] }
    vif     = { defs={} expr=v4356[1] }
    vip     = { defs={} expr=v4357[1] }
    id      = { defs={} expr=v4358[1] }
    ?22     = { defs={} expr=v4359[1] }
    ?23     = { defs={} expr=v4360[1] }
    ?24     = { defs={} expr=v4361[1] }
    ?25     = { defs={} expr=v4362[1] }
    ?26     = { defs={} expr=v4363[1] }
    ?27     = { defs={} expr=v4364[1] }
    ?28     = { defs={} expr=v4365[1] }
    ?29     = { defs={} expr=v4366[1] }
    ?30     = { defs={} expr=v4367[1] }
    ?31     = { defs={} expr=v4368[1] }
    ip      = { defs={0x080483e8} expr=0x080483ef[32] }
memory:
    address = { defs={} expr=(add[32] v4327[32] 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] v4327[32] 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] v4327[32] 1[32]) }
      value = { defs={} expr=-107[8] }
      flags = { }
    address = { defs={0x080483e8} expr=v4327[32] }
      value = { defs={} expr=-8[8] }
      flags = { }
init mem:
null state
null state
0x80483ef:call   0x00000000
registers:
    ax      = { v34592 }
    cx      = { v34593 }
    dx      = { v34594 }
    bx      = { v34595 }
    sp      = { v34596-0x4 }
    bp      = { v34597 }
    si      = { v34598 }
    di      = { v34599 }
    es      = { v34600 }
    cs      = { v34601 }
    ss      = { v34602 }
    ds      = { v34603 }
    fs      = { v34604 }
    gs      = { v34605 }
    cf      = { v34606 }
    ?1      = { v34607 }
    pf      = { v34608 }
    ?3      = { v34609 }
    af      = { v34610 }
    ?5      = { v34611 }
    zf      = { v34612 }
    sf      = { v34613 }
    tf      = { v34614 }
    if      = { v34615 }
    df      = { v34616 }
    of      = { v34617 }
    iopl0   = { v34618 }
    iopl1   = { v34619 }
    nt      = { v34620 }
    ?15     = { v34621 }
    rf      = { v34622 }
    vm      = { v34623 }
    ac      = { v34624 }
    vif     = { v34625 }
    vip     = { v34626 }
    id      = { v34627 }
    ?22     = { v34628 }
    ?23     = { v34629 }
    ?24     = { v34630 }
    ?25     = { v34631 }
    ?26     = { v34632 }
    ?27     = { v34633 }
    ?28     = { v34634 }
    ?29     = { v34635 }
    ?30     = { v34636 }
    ?31     = { v34637 }
    ip      = { 0x0 }
memory:
    address = { v34596 }
      value = { 0x80495f8 }
      flags = { size=4 }
    address = { v34596-0x4 }
      value = { 0x80483f4 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v4323[32] }
    cx      = { defs={} expr=v4324[32] }
    dx      = { defs={} expr=v4325[32] }
    bx      = { defs={} expr=v4326[32] }
    sp      = { defs={0x080483ef} expr=(add[32] v4327[32] -4[32]) }
    bp      = { defs={} expr=v4328[32] }
    si      = { defs={} expr=v4329[32] }
    di      = { defs={} expr=v4330[32] }
    es      = { defs={} expr=v4331[16] }
    cs      = { defs={} expr=v4332[16] }
    ss      = { defs={} expr=v4333[16] }
    ds      = { defs={} expr=v4334[16] }
    fs      = { defs={} expr=v4335[16] }
    gs      = { defs={} expr=v4336[16] }
    cf      = { defs={} expr=v4337[1] }
    ?1      = { defs={} expr=v4338[1] }
    pf      = { defs={} expr=v4339[1] }
    ?3      = { defs={} expr=v4340[1] }
    af      = { defs={} expr=v4341[1] }
    ?5      = { defs={} expr=v4342[1] }
    zf      = { defs={} expr=v4343[1] }
    sf      = { defs={} expr=v4344[1] }
    tf      = { defs={} expr=v4345[1] }
    if      = { defs={} expr=v4346[1] }
    df      = { defs={} expr=v4347[1] }
    of      = { defs={} expr=v4348[1] }
    iopl0   = { defs={} expr=v4349[1] }
    iopl1   = { defs={} expr=v4350[1] }
    nt      = { defs={} expr=v4351[1] }
    ?15     = { defs={} expr=v4352[1] }
    rf      = { defs={} expr=v4353[1] }
    vm      = { defs={} expr=v4354[1] }
    ac      = { defs={} expr=v4355[1] }
    vif     = { defs={} expr=v4356[1] }
    vip     = { defs={} expr=v4357[1] }
    id      = { defs={} expr=v4358[1] }
    ?22     = { defs={} expr=v4359[1] }
    ?23     = { defs={} expr=v4360[1] }
    ?24     = { defs={} expr=v4361[1] }
    ?25     = { defs={} expr=v4362[1] }
    ?26     = { defs={} expr=v4363[1] }
    ?27     = { defs={} expr=v4364[1] }
    ?28     = { defs={} expr=v4365[1] }
    ?29     = { defs={} expr=v4366[1] }
    ?30     = { defs={} expr=v4367[1] }
    ?31     = { defs={} expr=v4368[1] }
    ip      = { defs={0x080483ef} expr=0[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v4327[32] -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4327[32] -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4327[32] -4[32]) 1[32]) }
      value = { defs={} expr=-125[8] }
      flags = { }
    address = { defs={0x080483ef} expr=(add[32] v4327[32] -4[32]) }
      value = { defs={} expr=-12[8] }
      flags = { }
    address = { defs={} expr=(add[32] v4327[32] 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] v4327[32] 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] v4327[32] 1[32]) }
      value = { defs={} expr=-107[8] }
      flags = { }
    address = { defs={0x080483e8} expr=v4327[32] }
      value = { defs={} expr=-8[8] }
      flags = { }
init mem:
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483f4:lea    esi, [esi + 0x00000000]
registers:
    ax      = { v34704 }
    cx      = { v34705 }
    dx      = { v34706 }
    bx      = { v34707 }
    sp      = { v34708 }
    bp      = { v34709 }
    si      = { v34710 }
    di      = { v34711 }
    es      = { v34712 }
    cs      = { v34713 }
    ss      = { v34714 }
    ds      = { v34715 }
    fs      = { v34716 }
    gs      = { v34717 }
    cf      = { v34718 }
    ?1      = { v34719 }
    pf      = { v34720 }
    ?3      = { v34721 }
    af      = { v34722 }
    ?5      = { v34723 }
    zf      = { v34724 }
    sf      = { v34725 }
    tf      = { v34726 }
    if      = { v34727 }
    df      = { v34728 }
    of      = { v34729 }
    iopl0   = { v34730 }
    iopl1   = { v34731 }
    nt      = { v34732 }
    ?15     = { v34733 }
    rf      = { v34734 }
    vm      = { v34735 }
    ac      = { v34736 }
    vif     = { v34737 }
    vip     = { v34738 }
    id      = { v34739 }
    ?22     = { v34740 }
    ?23     = { v34741 }
    ?24     = { v34742 }
    ?25     = { v34743 }
    ?26     = { v34744 }
    ?27     = { v34745 }
    ?28     = { v34746 }
    ?29     = { v34747 }
    ?30     = { v34748 }
    ?31     = { v34749 }
    ip      = { 0x80483fa }
memory:
registers:
    ax      = { defs={} expr=v4449[32] }
    cx      = { defs={} expr=v4450[32] }
    dx      = { defs={} expr=v4451[32] }
    bx      = { defs={} expr=v4452[32] }
    sp      = { defs={} expr=v4453[32] }
    bp      = { defs={} expr=v4454[32] }
    si      = { defs={0x080483f4} expr=v4455[32] }
    di      = { defs={} expr=v4456[32] }
    es      = { defs={} expr=v4457[16] }
    cs      = { defs={} expr=v4458[16] }
    ss      = { defs={} expr=v4459[16] }
    ds      = { defs={} expr=v4460[16] }
    fs      = { defs={} expr=v4461[16] }
    gs      = { defs={} expr=v4462[16] }
    cf      = { defs={} expr=v4463[1] }
    ?1      = { defs={} expr=v4464[1] }
    pf      = { defs={} expr=v4465[1] }
    ?3      = { defs={} expr=v4466[1] }
    af      = { defs={} expr=v4467[1] }
    ?5      = { defs={} expr=v4468[1] }
    zf      = { defs={} expr=v4469[1] }
    sf      = { defs={} expr=v4470[1] }
    tf      = { defs={} expr=v4471[1] }
    if      = { defs={} expr=v4472[1] }
    df      = { defs={} expr=v4473[1] }
    of      = { defs={} expr=v4474[1] }
    iopl0   = { defs={} expr=v4475[1] }
    iopl1   = { defs={} expr=v4476[1] }
    nt      = { defs={} expr=v4477[1] }
    ?15     = { defs={} expr=v4478[1] }
    rf      = { defs={} expr=v4479[1] }
    vm      = { defs={} expr=v4480[1] }
    ac      = { defs={} expr=v4481[1] }
    vif     = { defs={} expr=v4482[1] }
    vip     = { defs={} expr=v4483[1] }
    id      = { defs={} expr=v4484[1] }
    ?22     = { defs={} expr=v4485[1] }
    ?23     = { defs={} expr=v4486[1] }
    ?24     = { defs={} expr=v4487[1] }
    ?25     = { defs={} expr=v4488[1] }
    ?26     = { defs={} expr=v4489[1] }
    ?27     = { defs={} expr=v4490[1] }
    ?28     = { defs={} expr=v4491[1] }
    ?29     = { defs={} expr=v4492[1] }
    ?30     = { defs={} expr=v4493[1] }
    ?31     = { defs={} expr=v4494[1] }
    ip      = { defs={0x080483f4} expr=0x080483fa[32] }
memory:
init mem:
null state
null state
0x80483fa:lea    edi, [edi + 0x00000000]
registers:
    ax      = { v34704 }
    cx      = { v34705 }
    dx      = { v34706 }
    bx      = { v34707 }
    sp      = { v34708 }
    bp      = { v34709 }
    si      = { v34710 }
    di      = { v34711 }
    es      = { v34712 }
    cs      = { v34713 }
    ss      = { v34714 }
    ds      = { v34715 }
    fs      = { v34716 }
    gs      = { v34717 }
    cf      = { v34718 }
    ?1      = { v34719 }
    pf      = { v34720 }
    ?3      = { v34721 }
    af      = { v34722 }
    ?5      = { v34723 }
    zf      = { v34724 }
    sf      = { v34725 }
    tf      = { v34726 }
    if      = { v34727 }
    df      = { v34728 }
    of      = { v34729 }
    iopl0   = { v34730 }
    iopl1   = { v34731 }
    nt      = { v34732 }
    ?15     = { v34733 }
    rf      = { v34734 }
    vm      = { v34735 }
    ac      = { v34736 }
    vif     = { v34737 }
    vip     = { v34738 }
    id      = { v34739 }
    ?22     = { v34740 }
    ?23     = { v34741 }
    ?24     = { v34742 }
    ?25     = { v34743 }
    ?26     = { v34744 }
    ?27     = { v34745 }
    ?28     = { v34746 }
    ?29     = { v34747 }
    ?30     = { v34748 }
    ?31     = { v34749 }
    ip      = { 0x8048400 }
memory:
registers:
    ax      = { defs={} expr=v4449[32] }
    cx      = { defs={} expr=v4450[32] }
    dx      = { defs={} expr=v4451[32] }
    bx      = { defs={} expr=v4452[32] }
    sp      = { defs={} expr=v4453[32] }
    bp      = { defs={} expr=v4454[32] }
    si      = { defs={0x080483f4} expr=v4455[32] }
    di      = { defs={0x080483fa} expr=v4456[32] }
    es      = { defs={} expr=v4457[16] }
    cs      = { defs={} expr=v4458[16] }
    ss      = { defs={} expr=v4459[16] }
    ds      = { defs={} expr=v4460[16] }
    fs      = { defs={} expr=v4461[16] }
    gs      = { defs={} expr=v4462[16] }
    cf      = { defs={} expr=v4463[1] }
    ?1      = { defs={} expr=v4464[1] }
    pf      = { defs={} expr=v4465[1] }
    ?3      = { defs={} expr=v4466[1] }
    af      = { defs={} expr=v4467[1] }
    ?5      = { defs={} expr=v4468[1] }
    zf      = { defs={} expr=v4469[1] }
    sf      = { defs={} expr=v4470[1] }
    tf      = { defs={} expr=v4471[1] }
    if      = { defs={} expr=v4472[1] }
    df      = { defs={} expr=v4473[1] }
    of      = { defs={} expr=v4474[1] }
    iopl0   = { defs={} expr=v4475[1] }
    iopl1   = { defs={} expr=v4476[1] }
    nt      = { defs={} expr=v4477[1] }
    ?15     = { defs={} expr=v4478[1] }
    rf      = { defs={} expr=v4479[1] }
    vm      = { defs={} expr=v4480[1] }
    ac      = { defs={} expr=v4481[1] }
    vif     = { defs={} expr=v4482[1] }
    vip     = { defs={} expr=v4483[1] }
    id      = { defs={} expr=v4484[1] }
    ?22     = { defs={} expr=v4485[1] }
    ?23     = { defs={} expr=v4486[1] }
    ?24     = { defs={} expr=v4487[1] }
    ?25     = { defs={} expr=v4488[1] }
    ?26     = { defs={} expr=v4489[1] }
    ?27     = { defs={} expr=v4490[1] }
    ?28     = { defs={} expr=v4491[1] }
    ?29     = { defs={} expr=v4492[1] }
    ?30     = { defs={} expr=v4493[1] }
    ?31     = { defs={} expr=v4494[1] }
    ip      = { defs={0x080483f4,0x080483fa} expr=0x08048400[32] }
memory:
init mem:
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048410:push   ebp
registers:
    ax      = { v34813 }
    cx      = { v34814 }
    dx      = { v34815 }
    bx      = { v34816 }
    sp      = { v34817-0x4 }
    bp      = { v34818 }
    si      = { v34819 }
    di      = { v34820 }
    es      = { v34821 }
    cs      = { v34822 }
    ss      = { v34823 }
    ds      = { v34824 }
    fs      = { v34825 }
    gs      = { v34826 }
    cf      = { v34827 }
    ?1      = { v34828 }
    pf      = { v34829 }
    ?3      = { v34830 }
    af      = { v34831 }
    ?5      = { v34832 }
    zf      = { v34833 }
    sf      = { v34834 }
    tf      = { v34835 }
    if      = { v34836 }
    df      = { v34837 }
    of      = { v34838 }
    iopl0   = { v34839 }
    iopl1   = { v34840 }
    nt      = { v34841 }
    ?15     = { v34842 }
    rf      = { v34843 }
    vm      = { v34844 }
    ac      = { v34845 }
    vif     = { v34846 }
    vip     = { v34847 }
    id      = { v34848 }
    ?22     = { v34849 }
    ?23     = { v34850 }
    ?24     = { v34851 }
    ?25     = { v34852 }
    ?26     = { v34853 }
    ?27     = { v34854 }
    ?28     = { v34855 }
    ?29     = { v34856 }
    ?30     = { v34857 }
    ?31     = { v34858 }
    ip      = { 0x8048411 }
memory:
    address = { v34817-0x4 }
      value = { v34818 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v4573[32] }
    cx      = { defs={} expr=v4574[32] }
    dx      = { defs={} expr=v4575[32] }
    bx      = { defs={} expr=v4576[32] }
    sp      = { defs={0x08048410} expr=(add[32] v4577[32] -4[32]) }
    bp      = { defs={} expr=v4578[32] }
    si      = { defs={} expr=v4579[32] }
    di      = { defs={} expr=v4580[32] }
    es      = { defs={} expr=v4581[16] }
    cs      = { defs={} expr=v4582[16] }
    ss      = { defs={} expr=v4583[16] }
    ds      = { defs={} expr=v4584[16] }
    fs      = { defs={} expr=v4585[16] }
    gs      = { defs={} expr=v4586[16] }
    cf      = { defs={} expr=v4587[1] }
    ?1      = { defs={} expr=v4588[1] }
    pf      = { defs={} expr=v4589[1] }
    ?3      = { defs={} expr=v4590[1] }
    af      = { defs={} expr=v4591[1] }
    ?5      = { defs={} expr=v4592[1] }
    zf      = { defs={} expr=v4593[1] }
    sf      = { defs={} expr=v4594[1] }
    tf      = { defs={} expr=v4595[1] }
    if      = { defs={} expr=v4596[1] }
    df      = { defs={} expr=v4597[1] }
    of      = { defs={} expr=v4598[1] }
    iopl0   = { defs={} expr=v4599[1] }
    iopl1   = { defs={} expr=v4600[1] }
    nt      = { defs={} expr=v4601[1] }
    ?15     = { defs={} expr=v4602[1] }
    rf      = { defs={} expr=v4603[1] }
    vm      = { defs={} expr=v4604[1] }
    ac      = { defs={} expr=v4605[1] }
    vif     = { defs={} expr=v4606[1] }
    vip     = { defs={} expr=v4607[1] }
    id      = { defs={} expr=v4608[1] }
    ?22     = { defs={} expr=v4609[1] }
    ?23     = { defs={} expr=v4610[1] }
    ?24     = { defs={} expr=v4611[1] }
    ?25     = { defs={} expr=v4612[1] }
    ?26     = { defs={} expr=v4613[1] }
    ?27     = { defs={} expr=v4614[1] }
    ?28     = { defs={} expr=v4615[1] }
    ?29     = { defs={} expr=v4616[1] }
    ?30     = { defs={} expr=v4617[1] }
    ?31     = { defs={} expr=v4618[1] }
    ip      = { defs={0x08048410} expr=0x08048411[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v4577[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v4578[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4577[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v4578[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4577[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v4578[32]) }
      flags = { }
    address = { defs={0x08048410} expr=(add[32] v4577[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v4578[32]) }
      flags = { }
init mem:
null state
null state
0x8048411:mov    edx, 0x08048480<handler>
registers:
    ax      = { v34813 }
    cx      = { v34814 }
    dx      = { 0x8048480 }
    bx      = { v34816 }
    sp      = { v34817-0x4 }
    bp      = { v34818 }
    si      = { v34819 }
    di      = { v34820 }
    es      = { v34821 }
    cs      = { v34822 }
    ss      = { v34823 }
    ds      = { v34824 }
    fs      = { v34825 }
    gs      = { v34826 }
    cf      = { v34827 }
    ?1      = { v34828 }
    pf      = { v34829 }
    ?3      = { v34830 }
    af      = { v34831 }
    ?5      = { v34832 }
    zf      = { v34833 }
    sf      = { v34834 }
    tf      = { v34835 }
    if      = { v34836 }
    df      = { v34837 }
    of      = { v34838 }
    iopl0   = { v34839 }
    iopl1   = { v34840 }
    nt      = { v34841 }
    ?15     = { v34842 }
    rf      = { v34843 }
    vm      = { v34844 }
    ac      = { v34845 }
    vif     = { v34846 }
    vip     = { v34847 }
    id      = { v34848 }
    ?22     = { v34849 }
    ?23     = { v34850 }
    ?24     = { v34851 }
    ?25     = { v34852 }
    ?26     = { v34853 }
    ?27     = { v34854 }
    ?28     = { v34855 }
    ?29     = { v34856 }
    ?30     = { v34857 }
    ?31     = { v34858 }
    ip      = { 0x8048416 }
memory:
    address = { v34817-0x4 }
      value = { v34818 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v4573[32] }
    cx      = { defs={} expr=v4574[32] }
    dx      = { defs={0x08048411} expr=0x08048480[32] }
    bx      = { defs={} expr=v4576[32] }
    sp      = { defs={0x08048410} expr=(add[32] v4577[32] -4[32]) }
    bp      = { defs={} expr=v4578[32] }
    si      = { defs={} expr=v4579[32] }
    di      = { defs={} expr=v4580[32] }
    es      = { defs={} expr=v4581[16] }
    cs      = { defs={} expr=v4582[16] }
    ss      = { defs={} expr=v4583[16] }
    ds      = { defs={} expr=v4584[16] }
    fs      = { defs={} expr=v4585[16] }
    gs      = { defs={} expr=v4586[16] }
    cf      = { defs={} expr=v4587[1] }
    ?1      = { defs={} expr=v4588[1] }
    pf      = { defs={} expr=v4589[1] }
    ?3      = { defs={} expr=v4590[1] }
    af      = { defs={} expr=v4591[1] }
    ?5      = { defs={} expr=v4592[1] }
    zf      = { defs={} expr=v4593[1] }
    sf      = { defs={} expr=v4594[1] }
    tf      = { defs={} expr=v4595[1] }
    if      = { defs={} expr=v4596[1] }
    df      = { defs={} expr=v4597[1] }
    of      = { defs={} expr=v4598[1] }
    iopl0   = { defs={} expr=v4599[1] }
    iopl1   = { defs={} expr=v4600[1] }
    nt      = { defs={} expr=v4601[1] }
    ?15     = { defs={} expr=v4602[1] }
    rf      = { defs={} expr=v4603[1] }
    vm      = { defs={} expr=v4604[1] }
    ac      = { defs={} expr=v4605[1] }
    vif     = { defs={} expr=v4606[1] }
    vip     = { defs={} expr=v4607[1] }
    id      = { defs={} expr=v4608[1] }
    ?22     = { defs={} expr=v4609[1] }
    ?23     = { defs={} expr=v4610[1] }
    ?24     = { defs={} expr=v4611[1] }
    ?25     = { defs={} expr=v4612[1] }
    ?26     = { defs={} expr=v4613[1] }
    ?27     = { defs={} expr=v4614[1] }
    ?28     = { defs={} expr=v4615[1] }
    ?29     = { defs={} expr=v4616[1] }
    ?30     = { defs={} expr=v4617[1] }
    ?31     = { defs={} expr=v4618[1] }
    ip      = { defs={0x08048410,0x08048411} expr=0x08048416[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v4577[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v4578[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4577[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v4578[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4577[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v4578[32]) }
      flags = { }
    address = { defs={0x08048410} expr=(add[32] v4577[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v4578[32]) }
      flags = { }
init mem:
null state
null state
0x8048416:mov    ebp, esp
registers:
    ax      = { v34813 }
    cx      = { v34814 }
    dx      = { 0x8048480 }
    bx      = { v34816 }
    sp      = { v34817-0x4 }
    bp      = { v34817-0x4 }
    si      = { v34819 }
    di      = { v34820 }
    es      = { v34821 }
    cs      = { v34822 }
    ss      = { v34823 }
    ds      = { v34824 }
    fs      = { v34825 }
    gs      = { v34826 }
    cf      = { v34827 }
    ?1      = { v34828 }
    pf      = { v34829 }
    ?3      = { v34830 }
    af      = { v34831 }
    ?5      = { v34832 }
    zf      = { v34833 }
    sf      = { v34834 }
    tf      = { v34835 }
    if      = { v34836 }
    df      = { v34837 }
    of      = { v34838 }
    iopl0   = { v34839 }
    iopl1   = { v34840 }
    nt      = { v34841 }
    ?15     = { v34842 }
    rf      = { v34843 }
    vm      = { v34844 }
    ac      = { v34845 }
    vif     = { v34846 }
    vip     = { v34847 }
    id      = { v34848 }
    ?22     = { v34849 }
    ?23     = { v34850 }
    ?24     = { v34851 }
    ?25     = { v34852 }
    ?26     = { v34853 }
    ?27     = { v34854 }
    ?28     = { v34855 }
    ?29     = { v34856 }
    ?30     = { v34857 }
    ?31     = { v34858 }
    ip      = { 0x8048418 }
memory:
    address = { v34817-0x4 }
      value = { v34818 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v4573[32] }
    cx      = { defs={} expr=v4574[32] }
    dx      = { defs={0x08048411} expr=0x08048480[32] }
    bx      = { defs={} expr=v4576[32] }
    sp      = { defs={0x08048410} expr=(add[32] v4577[32] -4[32]) }
    bp      = { defs={0x08048410,0x08048416} expr=(add[32] v4577[32] -4[32]) }
    si      = { defs={} expr=v4579[32] }
    di      = { defs={} expr=v4580[32] }
    es      = { defs={} expr=v4581[16] }
    cs      = { defs={} expr=v4582[16] }
    ss      = { defs={} expr=v4583[16] }
    ds      = { defs={} expr=v4584[16] }
    fs      = { defs={} expr=v4585[16] }
    gs      = { defs={} expr=v4586[16] }
    cf      = { defs={} expr=v4587[1] }
    ?1      = { defs={} expr=v4588[1] }
    pf      = { defs={} expr=v4589[1] }
    ?3      = { defs={} expr=v4590[1] }
    af      = { defs={} expr=v4591[1] }
    ?5      = { defs={} expr=v4592[1] }
    zf      = { defs={} expr=v4593[1] }
    sf      = { defs={} expr=v4594[1] }
    tf      = { defs={} expr=v4595[1] }
    if      = { defs={} expr=v4596[1] }
    df      = { defs={} expr=v4597[1] }
    of      = { defs={} expr=v4598[1] }
    iopl0   = { defs={} expr=v4599[1] }
    iopl1   = { defs={} expr=v4600[1] }
    nt      = { defs={} expr=v4601[1] }
    ?15     = { defs={} expr=v4602[1] }
    rf      = { defs={} expr=v4603[1] }
    vm      = { defs={} expr=v4604[1] }
    ac      = { defs={} expr=v4605[1] }
    vif     = { defs={} expr=v4606[1] }
    vip     = { defs={} expr=v4607[1] }
    id      = { defs={} expr=v4608[1] }
    ?22     = { defs={} expr=v4609[1] }
    ?23     = { defs={} expr=v4610[1] }
    ?24     = { defs={} expr=v4611[1] }
    ?25     = { defs={} expr=v4612[1] }
    ?26     = { defs={} expr=v4613[1] }
    ?27     = { defs={} expr=v4614[1] }
    ?28     = { defs={} expr=v4615[1] }
    ?29     = { defs={} expr=v4616[1] }
    ?30     = { defs={} expr=v4617[1] }
    ?31     = { defs={} expr=v4618[1] }
    ip      = { defs={0x08048410,0x08048411,0x08048416} expr=0x08048418[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v4577[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v4578[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4577[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v4578[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4577[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v4578[32]) }
      flags = { }
    address = { defs={0x08048410} expr=(add[32] v4577[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v4578[32]) }
      flags = { }
init mem:
null state
null state
0x8048418:sub    esp, 0x08
registers:
    ax      = { v34813 }
    cx      = { v34814 }
    dx      = { 0x8048480 }
    bx      = { v34816 }
    sp      = { v34817-0xc }
    bp      = { v34817-0x4 }
    si      = { v34819 }
    di      = { v34820 }
    es      = { v34821 }
    cs      = { v34822 }
    ss      = { v34823 }
    ds      = { v34824 }
    fs      = { v34825 }
    gs      = { v34826 }
    cf      = { -v34929+0x1 }
    ?1      = { v34828 }
    pf      = { -v34919+0x1 }
    ?3      = { v34830 }
    af      = { -v34926+0x1 }
    ?5      = { v34832 }
    zf      = { v34924 }
    sf      = { v34922 }
    tf      = { v34835 }
    if      = { v34836 }
    df      = { v34837 }
    of      = { v34936 }
    iopl0   = { v34839 }
    iopl1   = { v34840 }
    nt      = { v34841 }
    ?15     = { v34842 }
    rf      = { v34843 }
    vm      = { v34844 }
    ac      = { v34845 }
    vif     = { v34846 }
    vip     = { v34847 }
    id      = { v34848 }
    ?22     = { v34849 }
    ?23     = { v34850 }
    ?24     = { v34851 }
    ?25     = { v34852 }
    ?26     = { v34853 }
    ?27     = { v34854 }
    ?28     = { v34855 }
    ?29     = { v34856 }
    ?30     = { v34857 }
    ?31     = { v34858 }
    ip      = { 0x804841b }
memory:
    address = { v34817-0x4 }
      value = { v34818 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v4573[32] }
    cx      = { defs={} expr=v4574[32] }
    dx      = { defs={0x08048411} expr=0x08048480[32] }
    bx      = { defs={} expr=v4576[32] }
    sp      = { defs={0x08048410,0x08048418} expr=(add[32] (add[32] v4577[32] -4[32]) -8[32]) }
    bp      = { defs={0x08048410,0x08048416} expr=(add[32] v4577[32] -4[32]) }
    si      = { defs={} expr=v4579[32] }
    di      = { defs={} expr=v4580[32] }
    es      = { defs={} expr=v4581[16] }
    cs      = { defs={} expr=v4582[16] }
    ss      = { defs={} expr=v4583[16] }
    ds      = { defs={} expr=v4584[16] }
    fs      = { defs={} expr=v4585[16] }
    gs      = { defs={} expr=v4586[16] }
    cf      = { defs={0x08048410,0x08048418} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4577[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4577[32] -4[32])) 4294967288[33])))))) }
    ?1      = { defs={} expr=v4588[1] }
    pf      = { defs={0x08048410,0x08048418} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4577[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4577[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]))))))) }
    ?3      = { defs={} expr=v4590[1] }
    af      = { defs={0x08048410,0x08048418} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4577[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4577[32] -4[32])) 4294967288[33])))))) }
    ?5      = { defs={} expr=v4592[1] }
    zf      = { defs={0x08048410,0x08048418} expr=(zerop[1] (add[32] (add[32] v4577[32] -4[32]) -8[32])) }
    sf      = { defs={0x08048410,0x08048418} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v4577[32] -4[32]) -8[32])) }
    tf      = { defs={} expr=v4595[1] }
    if      = { defs={} expr=v4596[1] }
    df      = { defs={} expr=v4597[1] }
    of      = { defs={0x08048410,0x08048418} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4577[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4577[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4577[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4577[32] -4[32])) 4294967288[33])))))) }
    iopl0   = { defs={} expr=v4599[1] }
    iopl1   = { defs={} expr=v4600[1] }
    nt      = { defs={} expr=v4601[1] }
    ?15     = { defs={} expr=v4602[1] }
    rf      = { defs={} expr=v4603[1] }
    vm      = { defs={} expr=v4604[1] }
    ac      = { defs={} expr=v4605[1] }
    vif     = { defs={} expr=v4606[1] }
    vip     = { defs={} expr=v4607[1] }
    id      = { defs={} expr=v4608[1] }
    ?22     = { defs={} expr=v4609[1] }
    ?23     = { defs={} expr=v4610[1] }
    ?24     = { defs={} expr=v4611[1] }
    ?25     = { defs={} expr=v4612[1] }
    ?26     = { defs={} expr=v4613[1] }
    ?27     = { defs={} expr=v4614[1] }
    ?28     = { defs={} expr=v4615[1] }
    ?29     = { defs={} expr=v4616[1] }
    ?30     = { defs={} expr=v4617[1] }
    ?31     = { defs={} expr=v4618[1] }
    ip      = { defs={0x08048410,0x08048411,0x08048416,0x08048418} expr=0x0804841b[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v4577[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v4578[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4577[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v4578[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4577[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v4578[32]) }
      flags = { }
    address = { defs={0x08048410} expr=(add[32] v4577[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v4578[32]) }
      flags = { }
init mem:
null state
null state
0x804841b:and    esp, 0xf0<-0x10>
registers:
    ax      = { v34813 }
    cx      = { v34814 }
    dx      = { 0x8048480 }
    bx      = { v34816 }
    sp      = { v34944 }
    bp      = { v34817-0x4 }
    si      = { v34819 }
    di      = { v34820 }
    es      = { v34821 }
    cs      = { v34822 }
    ss      = { v34823 }
    ds      = { v34824 }
    fs      = { v34825 }
    gs      = { v34826 }
    cf      = { 0x0 }
    ?1      = { v34828 }
    pf      = { -v34974+0x1 }
    ?3      = { v34830 }
    af      = { v34982 }
    ?5      = { v34832 }
    zf      = { v34979 }
    sf      = { v34977 }
    tf      = { v34835 }
    if      = { v34836 }
    df      = { v34837 }
    of      = { 0x0 }
    iopl0   = { v34839 }
    iopl1   = { v34840 }
    nt      = { v34841 }
    ?15     = { v34842 }
    rf      = { v34843 }
    vm      = { v34844 }
    ac      = { v34845 }
    vif     = { v34846 }
    vip     = { v34847 }
    id      = { v34848 }
    ?22     = { v34849 }
    ?23     = { v34850 }
    ?24     = { v34851 }
    ?25     = { v34852 }
    ?26     = { v34853 }
    ?27     = { v34854 }
    ?28     = { v34855 }
    ?29     = { v34856 }
    ?30     = { v34857 }
    ?31     = { v34858 }
    ip      = { 0x804841e }
memory:
    address = { v34817-0x4 }
      value = { v34818 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v4573[32] }
    cx      = { defs={} expr=v4574[32] }
    dx      = { defs={0x08048411} expr=0x08048480[32] }
    bx      = { defs={} expr=v4576[32] }
    sp      = { defs={0x08048410,0x08048418,0x0804841b} expr=(bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32]) }
    bp      = { defs={0x08048410,0x08048416} expr=(add[32] v4577[32] -4[32]) }
    si      = { defs={} expr=v4579[32] }
    di      = { defs={} expr=v4580[32] }
    es      = { defs={} expr=v4581[16] }
    cs      = { defs={} expr=v4582[16] }
    ss      = { defs={} expr=v4583[16] }
    ds      = { defs={} expr=v4584[16] }
    fs      = { defs={} expr=v4585[16] }
    gs      = { defs={} expr=v4586[16] }
    cf      = { defs={0x0804841b} expr=0[1] }
    ?1      = { defs={} expr=v4588[1] }
    pf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32]))))))) }
    ?3      = { defs={} expr=v4590[1] }
    af      = { defs={0x0804841b} expr=v4807[1] }
    ?5      = { defs={} expr=v4592[1] }
    zf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(zerop[1] (bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32])) }
    sf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32])) }
    tf      = { defs={} expr=v4595[1] }
    if      = { defs={} expr=v4596[1] }
    df      = { defs={} expr=v4597[1] }
    of      = { defs={0x0804841b} expr=0[1] }
    iopl0   = { defs={} expr=v4599[1] }
    iopl1   = { defs={} expr=v4600[1] }
    nt      = { defs={} expr=v4601[1] }
    ?15     = { defs={} expr=v4602[1] }
    rf      = { defs={} expr=v4603[1] }
    vm      = { defs={} expr=v4604[1] }
    ac      = { defs={} expr=v4605[1] }
    vif     = { defs={} expr=v4606[1] }
    vip     = { defs={} expr=v4607[1] }
    id      = { defs={} expr=v4608[1] }
    ?22     = { defs={} expr=v4609[1] }
    ?23     = { defs={} expr=v4610[1] }
    ?24     = { defs={} expr=v4611[1] }
    ?25     = { defs={} expr=v4612[1] }
    ?26     = { defs={} expr=v4613[1] }
    ?27     = { defs={} expr=v4614[1] }
    ?28     = { defs={} expr=v4615[1] }
    ?29     = { defs={} expr=v4616[1] }
    ?30     = { defs={} expr=v4617[1] }
    ?31     = { defs={} expr=v4618[1] }
    ip      = { defs={0x08048410,0x08048411,0x08048416,0x08048418,0x0804841b} expr=0x0804841e[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v4577[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v4578[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4577[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v4578[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4577[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v4578[32]) }
      flags = { }
    address = { defs={0x08048410} expr=(add[32] v4577[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v4578[32]) }
      flags = { }
init mem:
null state
null state
0x804841e:mov    DWORD PTR ss:[esp + 0x04], edx
registers:
    ax      = { v34813 }
    cx      = { v34814 }
    dx      = { 0x8048480 }
    bx      = { v34816 }
    sp      = { v34944 }
    bp      = { v34817-0x4 }
    si      = { v34819 }
    di      = { v34820 }
    es      = { v34821 }
    cs      = { v34822 }
    ss      = { v34823 }
    ds      = { v34824 }
    fs      = { v34825 }
    gs      = { v34826 }
    cf      = { 0x0 }
    ?1      = { v34828 }
    pf      = { -v34974+0x1 }
    ?3      = { v34830 }
    af      = { v34982 }
    ?5      = { v34832 }
    zf      = { v34979 }
    sf      = { v34977 }
    tf      = { v34835 }
    if      = { v34836 }
    df      = { v34837 }
    of      = { 0x0 }
    iopl0   = { v34839 }
    iopl1   = { v34840 }
    nt      = { v34841 }
    ?15     = { v34842 }
    rf      = { v34843 }
    vm      = { v34844 }
    ac      = { v34845 }
    vif     = { v34846 }
    vip     = { v34847 }
    id      = { v34848 }
    ?22     = { v34849 }
    ?23     = { v34850 }
    ?24     = { v34851 }
    ?25     = { v34852 }
    ?26     = { v34853 }
    ?27     = { v34854 }
    ?28     = { v34855 }
    ?29     = { v34856 }
    ?30     = { v34857 }
    ?31     = { v34858 }
    ip      = { 0x8048422 }
memory:
    address = { v34817-0x4 }
      value = { v34818 }
      flags = { size=4; clobbered }
    address = { v34944+0x4 }
      value = { 0x8048480 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v4573[32] }
    cx      = { defs={} expr=v4574[32] }
    dx      = { defs={0x08048411} expr=0x08048480[32] }
    bx      = { defs={} expr=v4576[32] }
    sp      = { defs={0x08048410,0x08048418,0x0804841b} expr=(bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32]) }
    bp      = { defs={0x08048410,0x08048416} expr=(add[32] v4577[32] -4[32]) }
    si      = { defs={} expr=v4579[32] }
    di      = { defs={} expr=v4580[32] }
    es      = { defs={} expr=v4581[16] }
    cs      = { defs={} expr=v4582[16] }
    ss      = { defs={} expr=v4583[16] }
    ds      = { defs={} expr=v4584[16] }
    fs      = { defs={} expr=v4585[16] }
    gs      = { defs={} expr=v4586[16] }
    cf      = { defs={0x0804841b} expr=0[1] }
    ?1      = { defs={} expr=v4588[1] }
    pf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32]))))))) }
    ?3      = { defs={} expr=v4590[1] }
    af      = { defs={0x0804841b} expr=v4807[1] }
    ?5      = { defs={} expr=v4592[1] }
    zf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(zerop[1] (bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32])) }
    sf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32])) }
    tf      = { defs={} expr=v4595[1] }
    if      = { defs={} expr=v4596[1] }
    df      = { defs={} expr=v4597[1] }
    of      = { defs={0x0804841b} expr=0[1] }
    iopl0   = { defs={} expr=v4599[1] }
    iopl1   = { defs={} expr=v4600[1] }
    nt      = { defs={} expr=v4601[1] }
    ?15     = { defs={} expr=v4602[1] }
    rf      = { defs={} expr=v4603[1] }
    vm      = { defs={} expr=v4604[1] }
    ac      = { defs={} expr=v4605[1] }
    vif     = { defs={} expr=v4606[1] }
    vip     = { defs={} expr=v4607[1] }
    id      = { defs={} expr=v4608[1] }
    ?22     = { defs={} expr=v4609[1] }
    ?23     = { defs={} expr=v4610[1] }
    ?24     = { defs={} expr=v4611[1] }
    ?25     = { defs={} expr=v4612[1] }
    ?26     = { defs={} expr=v4613[1] }
    ?27     = { defs={} expr=v4614[1] }
    ?28     = { defs={} expr=v4615[1] }
    ?29     = { defs={} expr=v4616[1] }
    ?30     = { defs={} expr=v4617[1] }
    ?31     = { defs={} expr=v4618[1] }
    ip      = { defs={0x08048410,0x08048411,0x08048416,0x08048418,0x0804841b,0x0804841e} expr=0x08048422[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32]) 4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32]) 4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32]) 4[32]) 1[32]) }
      value = { defs={} expr=-124[8] }
      flags = { }
    address = { defs={0x08048410,0x08048418,0x0804841b,0x0804841e} expr=(add[32] (bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32]) 4[32]) }
      value = { defs={} expr=-128[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4577[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v4578[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4577[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v4578[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4577[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v4578[32]) }
      flags = { }
    address = { defs={0x08048410} expr=(add[32] v4577[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v4578[32]) }
      flags = { }
init mem:
null state
null state
0x8048422:mov    DWORD PTR ss:[esp], 0x0000000a
registers:
    ax      = { v34813 }
    cx      = { v34814 }
    dx      = { 0x8048480 }
    bx      = { v34816 }
    sp      = { v34944 }
    bp      = { v34817-0x4 }
    si      = { v34819 }
    di      = { v34820 }
    es      = { v34821 }
    cs      = { v34822 }
    ss      = { v34823 }
    ds      = { v34824 }
    fs      = { v34825 }
    gs      = { v34826 }
    cf      = { 0x0 }
    ?1      = { v34828 }
    pf      = { -v34974+0x1 }
    ?3      = { v34830 }
    af      = { v34982 }
    ?5      = { v34832 }
    zf      = { v34979 }
    sf      = { v34977 }
    tf      = { v34835 }
    if      = { v34836 }
    df      = { v34837 }
    of      = { 0x0 }
    iopl0   = { v34839 }
    iopl1   = { v34840 }
    nt      = { v34841 }
    ?15     = { v34842 }
    rf      = { v34843 }
    vm      = { v34844 }
    ac      = { v34845 }
    vif     = { v34846 }
    vip     = { v34847 }
    id      = { v34848 }
    ?22     = { v34849 }
    ?23     = { v34850 }
    ?24     = { v34851 }
    ?25     = { v34852 }
    ?26     = { v34853 }
    ?27     = { v34854 }
    ?28     = { v34855 }
    ?29     = { v34856 }
    ?30     = { v34857 }
    ?31     = { v34858 }
    ip      = { 0x8048429 }
memory:
    address = { v34817-0x4 }
      value = { v34818 }
      flags = { size=4; clobbered }
    address = { v34944+0x4 }
      value = { 0x8048480 }
      flags = { size=4 }
    address = { v34944 }
      value = { 0xa }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v4573[32] }
    cx      = { defs={} expr=v4574[32] }
    dx      = { defs={0x08048411} expr=0x08048480[32] }
    bx      = { defs={} expr=v4576[32] }
    sp      = { defs={0x08048410,0x08048418,0x0804841b} expr=(bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32]) }
    bp      = { defs={0x08048410,0x08048416} expr=(add[32] v4577[32] -4[32]) }
    si      = { defs={} expr=v4579[32] }
    di      = { defs={} expr=v4580[32] }
    es      = { defs={} expr=v4581[16] }
    cs      = { defs={} expr=v4582[16] }
    ss      = { defs={} expr=v4583[16] }
    ds      = { defs={} expr=v4584[16] }
    fs      = { defs={} expr=v4585[16] }
    gs      = { defs={} expr=v4586[16] }
    cf      = { defs={0x0804841b} expr=0[1] }
    ?1      = { defs={} expr=v4588[1] }
    pf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32]))))))) }
    ?3      = { defs={} expr=v4590[1] }
    af      = { defs={0x0804841b} expr=v4807[1] }
    ?5      = { defs={} expr=v4592[1] }
    zf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(zerop[1] (bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32])) }
    sf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32])) }
    tf      = { defs={} expr=v4595[1] }
    if      = { defs={} expr=v4596[1] }
    df      = { defs={} expr=v4597[1] }
    of      = { defs={0x0804841b} expr=0[1] }
    iopl0   = { defs={} expr=v4599[1] }
    iopl1   = { defs={} expr=v4600[1] }
    nt      = { defs={} expr=v4601[1] }
    ?15     = { defs={} expr=v4602[1] }
    rf      = { defs={} expr=v4603[1] }
    vm      = { defs={} expr=v4604[1] }
    ac      = { defs={} expr=v4605[1] }
    vif     = { defs={} expr=v4606[1] }
    vip     = { defs={} expr=v4607[1] }
    id      = { defs={} expr=v4608[1] }
    ?22     = { defs={} expr=v4609[1] }
    ?23     = { defs={} expr=v4610[1] }
    ?24     = { defs={} expr=v4611[1] }
    ?25     = { defs={} expr=v4612[1] }
    ?26     = { defs={} expr=v4613[1] }
    ?27     = { defs={} expr=v4614[1] }
    ?28     = { defs={} expr=v4615[1] }
    ?29     = { defs={} expr=v4616[1] }
    ?30     = { defs={} expr=v4617[1] }
    ?31     = { defs={} expr=v4618[1] }
    ip      = { defs={0x08048410,0x08048411,0x08048416,0x08048418,0x0804841b,0x0804841e,0x08048422} expr=0x08048429[32] }
memory:
    address = { defs={} expr=(add[32] (bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32]) 3[32]) }
      value = { defs={} expr=0[8] }
      flags = { }
    address = { defs={} expr=(add[32] (bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32]) 2[32]) }
      value = { defs={} expr=0[8] }
      flags = { }
    address = { defs={} expr=(add[32] (bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32]) 1[32]) }
      value = { defs={} expr=0[8] }
      flags = { }
    address = { defs={0x08048410,0x08048418,0x0804841b,0x08048422} expr=(bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32]) }
      value = { defs={} expr=10[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32]) 4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32]) 4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32]) 4[32]) 1[32]) }
      value = { defs={} expr=-124[8] }
      flags = { }
    address = { defs={0x08048410,0x08048418,0x0804841b,0x0804841e} expr=(add[32] (bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32]) 4[32]) }
      value = { defs={} expr=-128[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4577[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v4578[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4577[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v4578[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4577[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v4578[32]) }
      flags = { }
    address = { defs={0x08048410} expr=(add[32] v4577[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v4578[32]) }
      flags = { }
init mem:
null state
null state
0x8048429:call   0x080482f0<signal@plt>
registers:
    ax      = { v34813 }
    cx      = { v34814 }
    dx      = { 0x8048480 }
    bx      = { v34816 }
    sp      = { v34944-0x4 }
    bp      = { v34817-0x4 }
    si      = { v34819 }
    di      = { v34820 }
    es      = { v34821 }
    cs      = { v34822 }
    ss      = { v34823 }
    ds      = { v34824 }
    fs      = { v34825 }
    gs      = { v34826 }
    cf      = { 0x0 }
    ?1      = { v34828 }
    pf      = { -v34974+0x1 }
    ?3      = { v34830 }
    af      = { v34982 }
    ?5      = { v34832 }
    zf      = { v34979 }
    sf      = { v34977 }
    tf      = { v34835 }
    if      = { v34836 }
    df      = { v34837 }
    of      = { 0x0 }
    iopl0   = { v34839 }
    iopl1   = { v34840 }
    nt      = { v34841 }
    ?15     = { v34842 }
    rf      = { v34843 }
    vm      = { v34844 }
    ac      = { v34845 }
    vif     = { v34846 }
    vip     = { v34847 }
    id      = { v34848 }
    ?22     = { v34849 }
    ?23     = { v34850 }
    ?24     = { v34851 }
    ?25     = { v34852 }
    ?26     = { v34853 }
    ?27     = { v34854 }
    ?28     = { v34855 }
    ?29     = { v34856 }
    ?30     = { v34857 }
    ?31     = { v34858 }
    ip      = { 0x80482f0 }
memory:
    address = { v34817-0x4 }
      value = { v34818 }
      flags = { size=4; clobbered }
    address = { v34944+0x4 }
      value = { 0x8048480 }
      flags = { size=4 }
    address = { v34944 }
      value = { 0xa }
      flags = { size=4 }
    address = { v34944-0x4 }
      value = { 0x804842e }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v4573[32] }
    cx      = { defs={} expr=v4574[32] }
    dx      = { defs={0x08048411} expr=0x08048480[32] }
    bx      = { defs={} expr=v4576[32] }
    sp      = { defs={0x08048410,0x08048418,0x0804841b,0x08048429} expr=(add[32] (bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32]) -4[32]) }
    bp      = { defs={0x08048410,0x08048416} expr=(add[32] v4577[32] -4[32]) }
    si      = { defs={} expr=v4579[32] }
    di      = { defs={} expr=v4580[32] }
    es      = { defs={} expr=v4581[16] }
    cs      = { defs={} expr=v4582[16] }
    ss      = { defs={} expr=v4583[16] }
    ds      = { defs={} expr=v4584[16] }
    fs      = { defs={} expr=v4585[16] }
    gs      = { defs={} expr=v4586[16] }
    cf      = { defs={0x0804841b} expr=0[1] }
    ?1      = { defs={} expr=v4588[1] }
    pf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32]))))))) }
    ?3      = { defs={} expr=v4590[1] }
    af      = { defs={0x0804841b} expr=v4807[1] }
    ?5      = { defs={} expr=v4592[1] }
    zf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(zerop[1] (bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32])) }
    sf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32])) }
    tf      = { defs={} expr=v4595[1] }
    if      = { defs={} expr=v4596[1] }
    df      = { defs={} expr=v4597[1] }
    of      = { defs={0x0804841b} expr=0[1] }
    iopl0   = { defs={} expr=v4599[1] }
    iopl1   = { defs={} expr=v4600[1] }
    nt      = { defs={} expr=v4601[1] }
    ?15     = { defs={} expr=v4602[1] }
    rf      = { defs={} expr=v4603[1] }
    vm      = { defs={} expr=v4604[1] }
    ac      = { defs={} expr=v4605[1] }
    vif     = { defs={} expr=v4606[1] }
    vip     = { defs={} expr=v4607[1] }
    id      = { defs={} expr=v4608[1] }
    ?22     = { defs={} expr=v4609[1] }
    ?23     = { defs={} expr=v4610[1] }
    ?24     = { defs={} expr=v4611[1] }
    ?25     = { defs={} expr=v4612[1] }
    ?26     = { defs={} expr=v4613[1] }
    ?27     = { defs={} expr=v4614[1] }
    ?28     = { defs={} expr=v4615[1] }
    ?29     = { defs={} expr=v4616[1] }
    ?30     = { defs={} expr=v4617[1] }
    ?31     = { defs={} expr=v4618[1] }
    ip      = { defs={0x08048429} expr=0x080482f0[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32]) -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32]) -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32]) -4[32]) 1[32]) }
      value = { defs={} expr=-124[8] }
      flags = { }
    address = { defs={0x08048410,0x08048418,0x0804841b,0x08048429} expr=(add[32] (bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32]) -4[32]) }
      value = { defs={} expr=46[8] }
      flags = { }
    address = { defs={} expr=(add[32] (bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32]) 3[32]) }
      value = { defs={} expr=0[8] }
      flags = { }
    address = { defs={} expr=(add[32] (bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32]) 2[32]) }
      value = { defs={} expr=0[8] }
      flags = { }
    address = { defs={} expr=(add[32] (bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32]) 1[32]) }
      value = { defs={} expr=0[8] }
      flags = { }
    address = { defs={0x08048410,0x08048418,0x0804841b,0x08048422} expr=(bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32]) }
      value = { defs={} expr=10[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32]) 4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32]) 4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32]) 4[32]) 1[32]) }
      value = { defs={} expr=-124[8] }
      flags = { }
    address = { defs={0x08048410,0x08048418,0x0804841b,0x0804841e} expr=(add[32] (bv-and[32] (add[32] (add[32] v4577[32] -4[32]) -8[32]) -16[32]) 4[32]) }
      value = { defs={} expr=-128[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4577[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v4578[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4577[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v4578[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4577[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v4578[32]) }
      flags = { }
    address = { defs={0x08048410} expr=(add[32] v4577[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v4578[32]) }
      flags = { }
init mem:
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804842e:mov    esp, ebp
registers:
    ax      = { v35059 }
    cx      = { v35060 }
    dx      = { v35061 }
    bx      = { v35062 }
    sp      = { v35064 }
    bp      = { v35064 }
    si      = { v35065 }
    di      = { v35066 }
    es      = { v35067 }
    cs      = { v35068 }
    ss      = { v35069 }
    ds      = { v35070 }
    fs      = { v35071 }
    gs      = { v35072 }
    cf      = { v35073 }
    ?1      = { v35074 }
    pf      = { v35075 }
    ?3      = { v35076 }
    af      = { v35077 }
    ?5      = { v35078 }
    zf      = { v35079 }
    sf      = { v35080 }
    tf      = { v35081 }
    if      = { v35082 }
    df      = { v35083 }
    of      = { v35084 }
    iopl0   = { v35085 }
    iopl1   = { v35086 }
    nt      = { v35087 }
    ?15     = { v35088 }
    rf      = { v35089 }
    vm      = { v35090 }
    ac      = { v35091 }
    vif     = { v35092 }
    vip     = { v35093 }
    id      = { v35094 }
    ?22     = { v35095 }
    ?23     = { v35096 }
    ?24     = { v35097 }
    ?25     = { v35098 }
    ?26     = { v35099 }
    ?27     = { v35100 }
    ?28     = { v35101 }
    ?29     = { v35102 }
    ?30     = { v35103 }
    ?31     = { v35104 }
    ip      = { 0x8048430 }
memory:
registers:
    ax      = { defs={} expr=v4907[32] }
    cx      = { defs={} expr=v4908[32] }
    dx      = { defs={} expr=v4909[32] }
    bx      = { defs={} expr=v4910[32] }
    sp      = { defs={0x0804842e} expr=v4912[32] }
    bp      = { defs={} expr=v4912[32] }
    si      = { defs={} expr=v4913[32] }
    di      = { defs={} expr=v4914[32] }
    es      = { defs={} expr=v4915[16] }
    cs      = { defs={} expr=v4916[16] }
    ss      = { defs={} expr=v4917[16] }
    ds      = { defs={} expr=v4918[16] }
    fs      = { defs={} expr=v4919[16] }
    gs      = { defs={} expr=v4920[16] }
    cf      = { defs={} expr=v4921[1] }
    ?1      = { defs={} expr=v4922[1] }
    pf      = { defs={} expr=v4923[1] }
    ?3      = { defs={} expr=v4924[1] }
    af      = { defs={} expr=v4925[1] }
    ?5      = { defs={} expr=v4926[1] }
    zf      = { defs={} expr=v4927[1] }
    sf      = { defs={} expr=v4928[1] }
    tf      = { defs={} expr=v4929[1] }
    if      = { defs={} expr=v4930[1] }
    df      = { defs={} expr=v4931[1] }
    of      = { defs={} expr=v4932[1] }
    iopl0   = { defs={} expr=v4933[1] }
    iopl1   = { defs={} expr=v4934[1] }
    nt      = { defs={} expr=v4935[1] }
    ?15     = { defs={} expr=v4936[1] }
    rf      = { defs={} expr=v4937[1] }
    vm      = { defs={} expr=v4938[1] }
    ac      = { defs={} expr=v4939[1] }
    vif     = { defs={} expr=v4940[1] }
    vip     = { defs={} expr=v4941[1] }
    id      = { defs={} expr=v4942[1] }
    ?22     = { defs={} expr=v4943[1] }
    ?23     = { defs={} expr=v4944[1] }
    ?24     = { defs={} expr=v4945[1] }
    ?25     = { defs={} expr=v4946[1] }
    ?26     = { defs={} expr=v4947[1] }
    ?27     = { defs={} expr=v4948[1] }
    ?28     = { defs={} expr=v4949[1] }
    ?29     = { defs={} expr=v4950[1] }
    ?30     = { defs={} expr=v4951[1] }
    ?31     = { defs={} expr=v4952[1] }
    ip      = { defs={0x0804842e} expr=0x08048430[32] }
memory:
init mem:
null state
null state
0x8048430:xor    eax, eax
registers:
    ax      = { 0x0 }
    cx      = { v35060 }
    dx      = { v35061 }
    bx      = { v35062 }
    sp      = { v35064 }
    bp      = { v35064 }
    si      = { v35065 }
    di      = { v35066 }
    es      = { v35067 }
    cs      = { v35068 }
    ss      = { v35069 }
    ds      = { v35070 }
    fs      = { v35071 }
    gs      = { v35072 }
    cf      = { 0x0 }
    ?1      = { v35074 }
    pf      = { 0x1 }
    ?3      = { v35076 }
    af      = { v35138 }
    ?5      = { v35078 }
    zf      = { 0x1 }
    sf      = { 0x0 }
    tf      = { v35081 }
    if      = { v35082 }
    df      = { v35083 }
    of      = { 0x0 }
    iopl0   = { v35085 }
    iopl1   = { v35086 }
    nt      = { v35087 }
    ?15     = { v35088 }
    rf      = { v35089 }
    vm      = { v35090 }
    ac      = { v35091 }
    vif     = { v35092 }
    vip     = { v35093 }
    id      = { v35094 }
    ?22     = { v35095 }
    ?23     = { v35096 }
    ?24     = { v35097 }
    ?25     = { v35098 }
    ?26     = { v35099 }
    ?27     = { v35100 }
    ?28     = { v35101 }
    ?29     = { v35102 }
    ?30     = { v35103 }
    ?31     = { v35104 }
    ip      = { 0x8048432 }
memory:
registers:
    ax      = { defs={0x08048430} expr=0[32] }
    cx      = { defs={} expr=v4908[32] }
    dx      = { defs={} expr=v4909[32] }
    bx      = { defs={} expr=v4910[32] }
    sp      = { defs={0x0804842e} expr=v4912[32] }
    bp      = { defs={} expr=v4912[32] }
    si      = { defs={} expr=v4913[32] }
    di      = { defs={} expr=v4914[32] }
    es      = { defs={} expr=v4915[16] }
    cs      = { defs={} expr=v4916[16] }
    ss      = { defs={} expr=v4917[16] }
    ds      = { defs={} expr=v4918[16] }
    fs      = { defs={} expr=v4919[16] }
    gs      = { defs={} expr=v4920[16] }
    cf      = { defs={0x08048430} expr=0[1] }
    ?1      = { defs={} expr=v4922[1] }
    pf      = { defs={0x08048430} expr=1[1] }
    ?3      = { defs={} expr=v4924[1] }
    af      = { defs={0x08048430} expr=v5025[1] }
    ?5      = { defs={} expr=v4926[1] }
    zf      = { defs={0x08048430} expr=1[1] }
    sf      = { defs={0x08048430} expr=0[1] }
    tf      = { defs={} expr=v4929[1] }
    if      = { defs={} expr=v4930[1] }
    df      = { defs={} expr=v4931[1] }
    of      = { defs={0x08048430} expr=0[1] }
    iopl0   = { defs={} expr=v4933[1] }
    iopl1   = { defs={} expr=v4934[1] }
    nt      = { defs={} expr=v4935[1] }
    ?15     = { defs={} expr=v4936[1] }
    rf      = { defs={} expr=v4937[1] }
    vm      = { defs={} expr=v4938[1] }
    ac      = { defs={} expr=v4939[1] }
    vif     = { defs={} expr=v4940[1] }
    vip     = { defs={} expr=v4941[1] }
    id      = { defs={} expr=v4942[1] }
    ?22     = { defs={} expr=v4943[1] }
    ?23     = { defs={} expr=v4944[1] }
    ?24     = { defs={} expr=v4945[1] }
    ?25     = { defs={} expr=v4946[1] }
    ?26     = { defs={} expr=v4947[1] }
    ?27     = { defs={} expr=v4948[1] }
    ?28     = { defs={} expr=v4949[1] }
    ?29     = { defs={} expr=v4950[1] }
    ?30     = { defs={} expr=v4951[1] }
    ?31     = { defs={} expr=v4952[1] }
    ip      = { defs={0x0804842e,0x08048430} expr=0x08048432[32] }
memory:
init mem:
null state
null state
0x8048432:pop    ebp
registers:
    ax      = { 0x0 }
    cx      = { v35060 }
    dx      = { v35061 }
    bx      = { v35062 }
    sp      = { v35064+0x4 }
    bp      = { v35149 }
    si      = { v35065 }
    di      = { v35066 }
    es      = { v35067 }
    cs      = { v35068 }
    ss      = { v35069 }
    ds      = { v35070 }
    fs      = { v35071 }
    gs      = { v35072 }
    cf      = { 0x0 }
    ?1      = { v35074 }
    pf      = { 0x1 }
    ?3      = { v35076 }
    af      = { v35138 }
    ?5      = { v35078 }
    zf      = { 0x1 }
    sf      = { 0x0 }
    tf      = { v35081 }
    if      = { v35082 }
    df      = { v35083 }
    of      = { 0x0 }
    iopl0   = { v35085 }
    iopl1   = { v35086 }
    nt      = { v35087 }
    ?15     = { v35088 }
    rf      = { v35089 }
    vm      = { v35090 }
    ac      = { v35091 }
    vif     = { v35092 }
    vip     = { v35093 }
    id      = { v35094 }
    ?22     = { v35095 }
    ?23     = { v35096 }
    ?24     = { v35097 }
    ?25     = { v35098 }
    ?26     = { v35099 }
    ?27     = { v35100 }
    ?28     = { v35101 }
    ?29     = { v35102 }
    ?30     = { v35103 }
    ?31     = { v35104 }
    ip      = { 0x8048433 }
memory:
    address = { v35064 }
      value = { v35149 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x08048430} expr=0[32] }
    cx      = { defs={} expr=v4908[32] }
    dx      = { defs={} expr=v4909[32] }
    bx      = { defs={} expr=v4910[32] }
    sp      = { defs={0x0804842e,0x08048432} expr=(add[32] v4912[32] 4[32]) }
    bp      = { defs={0x08048432} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5047[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5048[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5049[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5050[8]))) }
    si      = { defs={} expr=v4913[32] }
    di      = { defs={} expr=v4914[32] }
    es      = { defs={} expr=v4915[16] }
    cs      = { defs={} expr=v4916[16] }
    ss      = { defs={} expr=v4917[16] }
    ds      = { defs={} expr=v4918[16] }
    fs      = { defs={} expr=v4919[16] }
    gs      = { defs={} expr=v4920[16] }
    cf      = { defs={0x08048430} expr=0[1] }
    ?1      = { defs={} expr=v4922[1] }
    pf      = { defs={0x08048430} expr=1[1] }
    ?3      = { defs={} expr=v4924[1] }
    af      = { defs={0x08048430} expr=v5025[1] }
    ?5      = { defs={} expr=v4926[1] }
    zf      = { defs={0x08048430} expr=1[1] }
    sf      = { defs={0x08048430} expr=0[1] }
    tf      = { defs={} expr=v4929[1] }
    if      = { defs={} expr=v4930[1] }
    df      = { defs={} expr=v4931[1] }
    of      = { defs={0x08048430} expr=0[1] }
    iopl0   = { defs={} expr=v4933[1] }
    iopl1   = { defs={} expr=v4934[1] }
    nt      = { defs={} expr=v4935[1] }
    ?15     = { defs={} expr=v4936[1] }
    rf      = { defs={} expr=v4937[1] }
    vm      = { defs={} expr=v4938[1] }
    ac      = { defs={} expr=v4939[1] }
    vif     = { defs={} expr=v4940[1] }
    vip     = { defs={} expr=v4941[1] }
    id      = { defs={} expr=v4942[1] }
    ?22     = { defs={} expr=v4943[1] }
    ?23     = { defs={} expr=v4944[1] }
    ?24     = { defs={} expr=v4945[1] }
    ?25     = { defs={} expr=v4946[1] }
    ?26     = { defs={} expr=v4947[1] }
    ?27     = { defs={} expr=v4948[1] }
    ?28     = { defs={} expr=v4949[1] }
    ?29     = { defs={} expr=v4950[1] }
    ?30     = { defs={} expr=v4951[1] }
    ?31     = { defs={} expr=v4952[1] }
    ip      = { defs={0x0804842e,0x08048430,0x08048432} expr=0x08048433[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] v4912[32] 3[32]) }
      value = { defs={} expr=v5050[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v4912[32] 2[32]) }
      value = { defs={} expr=v5049[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v4912[32] 1[32]) }
      value = { defs={} expr=v5048[8] }
      flags = { rdonly }
    address = { defs={0x0804842e,0x08048432} expr=v4912[32] }
      value = { defs={} expr=v5047[8] }
      flags = { rdonly }
null state
null state
0x8048433:ret    
registers:
    ax      = { 0x0 }
    cx      = { v35060 }
    dx      = { v35061 }
    bx      = { v35062 }
    sp      = { v35064+0x8 }
    bp      = { v35149 }
    si      = { v35065 }
    di      = { v35066 }
    es      = { v35067 }
    cs      = { v35068 }
    ss      = { v35069 }
    ds      = { v35070 }
    fs      = { v35071 }
    gs      = { v35072 }
    cf      = { 0x0 }
    ?1      = { v35074 }
    pf      = { 0x1 }
    ?3      = { v35076 }
    af      = { v35138 }
    ?5      = { v35078 }
    zf      = { 0x1 }
    sf      = { 0x0 }
    tf      = { v35081 }
    if      = { v35082 }
    df      = { v35083 }
    of      = { 0x0 }
    iopl0   = { v35085 }
    iopl1   = { v35086 }
    nt      = { v35087 }
    ?15     = { v35088 }
    rf      = { v35089 }
    vm      = { v35090 }
    ac      = { v35091 }
    vif     = { v35092 }
    vip     = { v35093 }
    id      = { v35094 }
    ?22     = { v35095 }
    ?23     = { v35096 }
    ?24     = { v35097 }
    ?25     = { v35098 }
    ?26     = { v35099 }
    ?27     = { v35100 }
    ?28     = { v35101 }
    ?29     = { v35102 }
    ?30     = { v35103 }
    ?31     = { v35104 }
    ip      = { v35161 }
memory:
    address = { v35064 }
      value = { v35149 }
      flags = { size=4; read-only }
    address = { v35064+0x4 }
      value = { v35161 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x08048430} expr=0[32] }
    cx      = { defs={} expr=v4908[32] }
    dx      = { defs={} expr=v4909[32] }
    bx      = { defs={} expr=v4910[32] }
    sp      = { defs={0x0804842e,0x08048432,0x08048433} expr=(add[32] (add[32] v4912[32] 4[32]) 4[32]) }
    bp      = { defs={0x08048432} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5047[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5048[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5049[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5050[8]))) }
    si      = { defs={} expr=v4913[32] }
    di      = { defs={} expr=v4914[32] }
    es      = { defs={} expr=v4915[16] }
    cs      = { defs={} expr=v4916[16] }
    ss      = { defs={} expr=v4917[16] }
    ds      = { defs={} expr=v4918[16] }
    fs      = { defs={} expr=v4919[16] }
    gs      = { defs={} expr=v4920[16] }
    cf      = { defs={0x08048430} expr=0[1] }
    ?1      = { defs={} expr=v4922[1] }
    pf      = { defs={0x08048430} expr=1[1] }
    ?3      = { defs={} expr=v4924[1] }
    af      = { defs={0x08048430} expr=v5025[1] }
    ?5      = { defs={} expr=v4926[1] }
    zf      = { defs={0x08048430} expr=1[1] }
    sf      = { defs={0x08048430} expr=0[1] }
    tf      = { defs={} expr=v4929[1] }
    if      = { defs={} expr=v4930[1] }
    df      = { defs={} expr=v4931[1] }
    of      = { defs={0x08048430} expr=0[1] }
    iopl0   = { defs={} expr=v4933[1] }
    iopl1   = { defs={} expr=v4934[1] }
    nt      = { defs={} expr=v4935[1] }
    ?15     = { defs={} expr=v4936[1] }
    rf      = { defs={} expr=v4937[1] }
    vm      = { defs={} expr=v4938[1] }
    ac      = { defs={} expr=v4939[1] }
    vif     = { defs={} expr=v4940[1] }
    vip     = { defs={} expr=v4941[1] }
    id      = { defs={} expr=v4942[1] }
    ?22     = { defs={} expr=v4943[1] }
    ?23     = { defs={} expr=v4944[1] }
    ?24     = { defs={} expr=v4945[1] }
    ?25     = { defs={} expr=v4946[1] }
    ?26     = { defs={} expr=v4947[1] }
    ?27     = { defs={} expr=v4948[1] }
    ?28     = { defs={} expr=v4949[1] }
    ?29     = { defs={} expr=v4950[1] }
    ?30     = { defs={} expr=v4951[1] }
    ?31     = { defs={} expr=v4952[1] }
    ip      = { defs={0x08048433} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5076[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5077[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5078[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5079[8]))) }
memory:
init mem:
    address = { defs={} expr=(add[32] (add[32] v4912[32] 4[32]) 3[32]) }
      value = { defs={} expr=v5079[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v4912[32] 4[32]) 2[32]) }
      value = { defs={} expr=v5078[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v4912[32] 4[32]) 1[32]) }
      value = { defs={} expr=v5077[8] }
      flags = { rdonly }
    address = { defs={0x0804842e,0x08048432,0x08048433} expr=(add[32] v4912[32] 4[32]) }
      value = { defs={} expr=v5076[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v4912[32] 3[32]) }
      value = { defs={} expr=v5050[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v4912[32] 2[32]) }
      value = { defs={} expr=v5049[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v4912[32] 1[32]) }
      value = { defs={} expr=v5048[8] }
      flags = { rdonly }
    address = { defs={0x0804842e,0x08048432} expr=v4912[32] }
      value = { defs={} expr=v5047[8] }
      flags = { rdonly }
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048440:push   ebp
registers:
    ax      = { v35212 }
    cx      = { v35213 }
    dx      = { v35214 }
    bx      = { v35215 }
    sp      = { v35216-0x4 }
    bp      = { v35217 }
    si      = { v35218 }
    di      = { v35219 }
    es      = { v35220 }
    cs      = { v35221 }
    ss      = { v35222 }
    ds      = { v35223 }
    fs      = { v35224 }
    gs      = { v35225 }
    cf      = { v35226 }
    ?1      = { v35227 }
    pf      = { v35228 }
    ?3      = { v35229 }
    af      = { v35230 }
    ?5      = { v35231 }
    zf      = { v35232 }
    sf      = { v35233 }
    tf      = { v35234 }
    if      = { v35235 }
    df      = { v35236 }
    of      = { v35237 }
    iopl0   = { v35238 }
    iopl1   = { v35239 }
    nt      = { v35240 }
    ?15     = { v35241 }
    rf      = { v35242 }
    vm      = { v35243 }
    ac      = { v35244 }
    vif     = { v35245 }
    vip     = { v35246 }
    id      = { v35247 }
    ?22     = { v35248 }
    ?23     = { v35249 }
    ?24     = { v35250 }
    ?25     = { v35251 }
    ?26     = { v35252 }
    ?27     = { v35253 }
    ?28     = { v35254 }
    ?29     = { v35255 }
    ?30     = { v35256 }
    ?31     = { v35257 }
    ip      = { 0x8048441 }
memory:
    address = { v35216-0x4 }
      value = { v35217 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v5137[32] }
    cx      = { defs={} expr=v5138[32] }
    dx      = { defs={} expr=v5139[32] }
    bx      = { defs={} expr=v5140[32] }
    sp      = { defs={0x08048440} expr=(add[32] v5141[32] -4[32]) }
    bp      = { defs={} expr=v5142[32] }
    si      = { defs={} expr=v5143[32] }
    di      = { defs={} expr=v5144[32] }
    es      = { defs={} expr=v5145[16] }
    cs      = { defs={} expr=v5146[16] }
    ss      = { defs={} expr=v5147[16] }
    ds      = { defs={} expr=v5148[16] }
    fs      = { defs={} expr=v5149[16] }
    gs      = { defs={} expr=v5150[16] }
    cf      = { defs={} expr=v5151[1] }
    ?1      = { defs={} expr=v5152[1] }
    pf      = { defs={} expr=v5153[1] }
    ?3      = { defs={} expr=v5154[1] }
    af      = { defs={} expr=v5155[1] }
    ?5      = { defs={} expr=v5156[1] }
    zf      = { defs={} expr=v5157[1] }
    sf      = { defs={} expr=v5158[1] }
    tf      = { defs={} expr=v5159[1] }
    if      = { defs={} expr=v5160[1] }
    df      = { defs={} expr=v5161[1] }
    of      = { defs={} expr=v5162[1] }
    iopl0   = { defs={} expr=v5163[1] }
    iopl1   = { defs={} expr=v5164[1] }
    nt      = { defs={} expr=v5165[1] }
    ?15     = { defs={} expr=v5166[1] }
    rf      = { defs={} expr=v5167[1] }
    vm      = { defs={} expr=v5168[1] }
    ac      = { defs={} expr=v5169[1] }
    vif     = { defs={} expr=v5170[1] }
    vip     = { defs={} expr=v5171[1] }
    id      = { defs={} expr=v5172[1] }
    ?22     = { defs={} expr=v5173[1] }
    ?23     = { defs={} expr=v5174[1] }
    ?24     = { defs={} expr=v5175[1] }
    ?25     = { defs={} expr=v5176[1] }
    ?26     = { defs={} expr=v5177[1] }
    ?27     = { defs={} expr=v5178[1] }
    ?28     = { defs={} expr=v5179[1] }
    ?29     = { defs={} expr=v5180[1] }
    ?30     = { defs={} expr=v5181[1] }
    ?31     = { defs={} expr=v5182[1] }
    ip      = { defs={0x08048440} expr=0x08048441[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v5141[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v5142[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5141[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v5142[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5141[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v5142[32]) }
      flags = { }
    address = { defs={0x08048440} expr=(add[32] v5141[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v5142[32]) }
      flags = { }
init mem:
null state
null state
0x8048441:mov    ebp, esp
registers:
    ax      = { v35212 }
    cx      = { v35213 }
    dx      = { v35214 }
    bx      = { v35215 }
    sp      = { v35216-0x4 }
    bp      = { v35216-0x4 }
    si      = { v35218 }
    di      = { v35219 }
    es      = { v35220 }
    cs      = { v35221 }
    ss      = { v35222 }
    ds      = { v35223 }
    fs      = { v35224 }
    gs      = { v35225 }
    cf      = { v35226 }
    ?1      = { v35227 }
    pf      = { v35228 }
    ?3      = { v35229 }
    af      = { v35230 }
    ?5      = { v35231 }
    zf      = { v35232 }
    sf      = { v35233 }
    tf      = { v35234 }
    if      = { v35235 }
    df      = { v35236 }
    of      = { v35237 }
    iopl0   = { v35238 }
    iopl1   = { v35239 }
    nt      = { v35240 }
    ?15     = { v35241 }
    rf      = { v35242 }
    vm      = { v35243 }
    ac      = { v35244 }
    vif     = { v35245 }
    vip     = { v35246 }
    id      = { v35247 }
    ?22     = { v35248 }
    ?23     = { v35249 }
    ?24     = { v35250 }
    ?25     = { v35251 }
    ?26     = { v35252 }
    ?27     = { v35253 }
    ?28     = { v35254 }
    ?29     = { v35255 }
    ?30     = { v35256 }
    ?31     = { v35257 }
    ip      = { 0x8048443 }
memory:
    address = { v35216-0x4 }
      value = { v35217 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v5137[32] }
    cx      = { defs={} expr=v5138[32] }
    dx      = { defs={} expr=v5139[32] }
    bx      = { defs={} expr=v5140[32] }
    sp      = { defs={0x08048440} expr=(add[32] v5141[32] -4[32]) }
    bp      = { defs={0x08048440,0x08048441} expr=(add[32] v5141[32] -4[32]) }
    si      = { defs={} expr=v5143[32] }
    di      = { defs={} expr=v5144[32] }
    es      = { defs={} expr=v5145[16] }
    cs      = { defs={} expr=v5146[16] }
    ss      = { defs={} expr=v5147[16] }
    ds      = { defs={} expr=v5148[16] }
    fs      = { defs={} expr=v5149[16] }
    gs      = { defs={} expr=v5150[16] }
    cf      = { defs={} expr=v5151[1] }
    ?1      = { defs={} expr=v5152[1] }
    pf      = { defs={} expr=v5153[1] }
    ?3      = { defs={} expr=v5154[1] }
    af      = { defs={} expr=v5155[1] }
    ?5      = { defs={} expr=v5156[1] }
    zf      = { defs={} expr=v5157[1] }
    sf      = { defs={} expr=v5158[1] }
    tf      = { defs={} expr=v5159[1] }
    if      = { defs={} expr=v5160[1] }
    df      = { defs={} expr=v5161[1] }
    of      = { defs={} expr=v5162[1] }
    iopl0   = { defs={} expr=v5163[1] }
    iopl1   = { defs={} expr=v5164[1] }
    nt      = { defs={} expr=v5165[1] }
    ?15     = { defs={} expr=v5166[1] }
    rf      = { defs={} expr=v5167[1] }
    vm      = { defs={} expr=v5168[1] }
    ac      = { defs={} expr=v5169[1] }
    vif     = { defs={} expr=v5170[1] }
    vip     = { defs={} expr=v5171[1] }
    id      = { defs={} expr=v5172[1] }
    ?22     = { defs={} expr=v5173[1] }
    ?23     = { defs={} expr=v5174[1] }
    ?24     = { defs={} expr=v5175[1] }
    ?25     = { defs={} expr=v5176[1] }
    ?26     = { defs={} expr=v5177[1] }
    ?27     = { defs={} expr=v5178[1] }
    ?28     = { defs={} expr=v5179[1] }
    ?29     = { defs={} expr=v5180[1] }
    ?30     = { defs={} expr=v5181[1] }
    ?31     = { defs={} expr=v5182[1] }
    ip      = { defs={0x08048440,0x08048441} expr=0x08048443[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v5141[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v5142[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5141[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v5142[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5141[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v5142[32]) }
      flags = { }
    address = { defs={0x08048440} expr=(add[32] v5141[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v5142[32]) }
      flags = { }
init mem:
null state
null state
0x8048443:sub    esp, 0x08
registers:
    ax      = { v35212 }
    cx      = { v35213 }
    dx      = { v35214 }
    bx      = { v35215 }
    sp      = { v35216-0xc }
    bp      = { v35216-0x4 }
    si      = { v35218 }
    di      = { v35219 }
    es      = { v35220 }
    cs      = { v35221 }
    ss      = { v35222 }
    ds      = { v35223 }
    fs      = { v35224 }
    gs      = { v35225 }
    cf      = { -v35323+0x1 }
    ?1      = { v35227 }
    pf      = { -v35313+0x1 }
    ?3      = { v35229 }
    af      = { -v35320+0x1 }
    ?5      = { v35231 }
    zf      = { v35318 }
    sf      = { v35316 }
    tf      = { v35234 }
    if      = { v35235 }
    df      = { v35236 }
    of      = { v35330 }
    iopl0   = { v35238 }
    iopl1   = { v35239 }
    nt      = { v35240 }
    ?15     = { v35241 }
    rf      = { v35242 }
    vm      = { v35243 }
    ac      = { v35244 }
    vif     = { v35245 }
    vip     = { v35246 }
    id      = { v35247 }
    ?22     = { v35248 }
    ?23     = { v35249 }
    ?24     = { v35250 }
    ?25     = { v35251 }
    ?26     = { v35252 }
    ?27     = { v35253 }
    ?28     = { v35254 }
    ?29     = { v35255 }
    ?30     = { v35256 }
    ?31     = { v35257 }
    ip      = { 0x8048446 }
memory:
    address = { v35216-0x4 }
      value = { v35217 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v5137[32] }
    cx      = { defs={} expr=v5138[32] }
    dx      = { defs={} expr=v5139[32] }
    bx      = { defs={} expr=v5140[32] }
    sp      = { defs={0x08048440,0x08048443} expr=(add[32] (add[32] v5141[32] -4[32]) -8[32]) }
    bp      = { defs={0x08048440,0x08048441} expr=(add[32] v5141[32] -4[32]) }
    si      = { defs={} expr=v5143[32] }
    di      = { defs={} expr=v5144[32] }
    es      = { defs={} expr=v5145[16] }
    cs      = { defs={} expr=v5146[16] }
    ss      = { defs={} expr=v5147[16] }
    ds      = { defs={} expr=v5148[16] }
    fs      = { defs={} expr=v5149[16] }
    gs      = { defs={} expr=v5150[16] }
    cf      = { defs={0x08048440,0x08048443} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v5141[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v5141[32] -4[32])) 4294967288[33])))))) }
    ?1      = { defs={} expr=v5152[1] }
    pf      = { defs={0x08048440,0x08048443} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5141[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5141[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5141[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5141[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5141[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5141[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5141[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5141[32] -4[32]) -8[32]))))))) }
    ?3      = { defs={} expr=v5154[1] }
    af      = { defs={0x08048440,0x08048443} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v5141[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v5141[32] -4[32])) 4294967288[33])))))) }
    ?5      = { defs={} expr=v5156[1] }
    zf      = { defs={0x08048440,0x08048443} expr=(zerop[1] (add[32] (add[32] v5141[32] -4[32]) -8[32])) }
    sf      = { defs={0x08048440,0x08048443} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v5141[32] -4[32]) -8[32])) }
    tf      = { defs={} expr=v5159[1] }
    if      = { defs={} expr=v5160[1] }
    df      = { defs={} expr=v5161[1] }
    of      = { defs={0x08048440,0x08048443} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v5141[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v5141[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v5141[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v5141[32] -4[32])) 4294967288[33])))))) }
    iopl0   = { defs={} expr=v5163[1] }
    iopl1   = { defs={} expr=v5164[1] }
    nt      = { defs={} expr=v5165[1] }
    ?15     = { defs={} expr=v5166[1] }
    rf      = { defs={} expr=v5167[1] }
    vm      = { defs={} expr=v5168[1] }
    ac      = { defs={} expr=v5169[1] }
    vif     = { defs={} expr=v5170[1] }
    vip     = { defs={} expr=v5171[1] }
    id      = { defs={} expr=v5172[1] }
    ?22     = { defs={} expr=v5173[1] }
    ?23     = { defs={} expr=v5174[1] }
    ?24     = { defs={} expr=v5175[1] }
    ?25     = { defs={} expr=v5176[1] }
    ?26     = { defs={} expr=v5177[1] }
    ?27     = { defs={} expr=v5178[1] }
    ?28     = { defs={} expr=v5179[1] }
    ?29     = { defs={} expr=v5180[1] }
    ?30     = { defs={} expr=v5181[1] }
    ?31     = { defs={} expr=v5182[1] }
    ip      = { defs={0x08048440,0x08048441,0x08048443} expr=0x08048446[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v5141[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v5142[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5141[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v5142[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5141[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v5142[32]) }
      flags = { }
    address = { defs={0x08048440} expr=(add[32] v5141[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v5142[32]) }
      flags = { }
init mem:
null state
null state
0x8048446:mov    DWORD PTR ss:[esp], 0x080485d4<<StaticData@0x080485ca>+0x0a>
registers:
    ax      = { v35212 }
    cx      = { v35213 }
    dx      = { v35214 }
    bx      = { v35215 }
    sp      = { v35216-0xc }
    bp      = { v35216-0x4 }
    si      = { v35218 }
    di      = { v35219 }
    es      = { v35220 }
    cs      = { v35221 }
    ss      = { v35222 }
    ds      = { v35223 }
    fs      = { v35224 }
    gs      = { v35225 }
    cf      = { -v35323+0x1 }
    ?1      = { v35227 }
    pf      = { -v35313+0x1 }
    ?3      = { v35229 }
    af      = { -v35320+0x1 }
    ?5      = { v35231 }
    zf      = { v35318 }
    sf      = { v35316 }
    tf      = { v35234 }
    if      = { v35235 }
    df      = { v35236 }
    of      = { v35330 }
    iopl0   = { v35238 }
    iopl1   = { v35239 }
    nt      = { v35240 }
    ?15     = { v35241 }
    rf      = { v35242 }
    vm      = { v35243 }
    ac      = { v35244 }
    vif     = { v35245 }
    vip     = { v35246 }
    id      = { v35247 }
    ?22     = { v35248 }
    ?23     = { v35249 }
    ?24     = { v35250 }
    ?25     = { v35251 }
    ?26     = { v35252 }
    ?27     = { v35253 }
    ?28     = { v35254 }
    ?29     = { v35255 }
    ?30     = { v35256 }
    ?31     = { v35257 }
    ip      = { 0x804844d }
memory:
    address = { v35216-0x4 }
      value = { v35217 }
      flags = { size=4 }
    address = { v35216-0xc }
      value = { 0x80485d4 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v5137[32] }
    cx      = { defs={} expr=v5138[32] }
    dx      = { defs={} expr=v5139[32] }
    bx      = { defs={} expr=v5140[32] }
    sp      = { defs={0x08048440,0x08048443} expr=(add[32] (add[32] v5141[32] -4[32]) -8[32]) }
    bp      = { defs={0x08048440,0x08048441} expr=(add[32] v5141[32] -4[32]) }
    si      = { defs={} expr=v5143[32] }
    di      = { defs={} expr=v5144[32] }
    es      = { defs={} expr=v5145[16] }
    cs      = { defs={} expr=v5146[16] }
    ss      = { defs={} expr=v5147[16] }
    ds      = { defs={} expr=v5148[16] }
    fs      = { defs={} expr=v5149[16] }
    gs      = { defs={} expr=v5150[16] }
    cf      = { defs={0x08048440,0x08048443} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v5141[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v5141[32] -4[32])) 4294967288[33])))))) }
    ?1      = { defs={} expr=v5152[1] }
    pf      = { defs={0x08048440,0x08048443} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5141[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5141[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5141[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5141[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5141[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5141[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5141[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5141[32] -4[32]) -8[32]))))))) }
    ?3      = { defs={} expr=v5154[1] }
    af      = { defs={0x08048440,0x08048443} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v5141[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v5141[32] -4[32])) 4294967288[33])))))) }
    ?5      = { defs={} expr=v5156[1] }
    zf      = { defs={0x08048440,0x08048443} expr=(zerop[1] (add[32] (add[32] v5141[32] -4[32]) -8[32])) }
    sf      = { defs={0x08048440,0x08048443} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v5141[32] -4[32]) -8[32])) }
    tf      = { defs={} expr=v5159[1] }
    if      = { defs={} expr=v5160[1] }
    df      = { defs={} expr=v5161[1] }
    of      = { defs={0x08048440,0x08048443} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v5141[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v5141[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v5141[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v5141[32] -4[32])) 4294967288[33])))))) }
    iopl0   = { defs={} expr=v5163[1] }
    iopl1   = { defs={} expr=v5164[1] }
    nt      = { defs={} expr=v5165[1] }
    ?15     = { defs={} expr=v5166[1] }
    rf      = { defs={} expr=v5167[1] }
    vm      = { defs={} expr=v5168[1] }
    ac      = { defs={} expr=v5169[1] }
    vif     = { defs={} expr=v5170[1] }
    vip     = { defs={} expr=v5171[1] }
    id      = { defs={} expr=v5172[1] }
    ?22     = { defs={} expr=v5173[1] }
    ?23     = { defs={} expr=v5174[1] }
    ?24     = { defs={} expr=v5175[1] }
    ?25     = { defs={} expr=v5176[1] }
    ?26     = { defs={} expr=v5177[1] }
    ?27     = { defs={} expr=v5178[1] }
    ?28     = { defs={} expr=v5179[1] }
    ?29     = { defs={} expr=v5180[1] }
    ?30     = { defs={} expr=v5181[1] }
    ?31     = { defs={} expr=v5182[1] }
    ip      = { defs={0x08048440,0x08048441,0x08048443,0x08048446} expr=0x0804844d[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] v5141[32] -4[32]) -8[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v5141[32] -4[32]) -8[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v5141[32] -4[32]) -8[32]) 1[32]) }
      value = { defs={} expr=-123[8] }
      flags = { }
    address = { defs={0x08048440,0x08048443,0x08048446} expr=(add[32] (add[32] v5141[32] -4[32]) -8[32]) }
      value = { defs={} expr=-44[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5141[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v5142[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5141[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v5142[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5141[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v5142[32]) }
      flags = { }
    address = { defs={0x08048440} expr=(add[32] v5141[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v5142[32]) }
      flags = { }
init mem:
null state
null state
0x804844d:call   0x08048300<puts@plt>
registers:
    ax      = { v35212 }
    cx      = { v35213 }
    dx      = { v35214 }
    bx      = { v35215 }
    sp      = { v35216-0x10 }
    bp      = { v35216-0x4 }
    si      = { v35218 }
    di      = { v35219 }
    es      = { v35220 }
    cs      = { v35221 }
    ss      = { v35222 }
    ds      = { v35223 }
    fs      = { v35224 }
    gs      = { v35225 }
    cf      = { -v35323+0x1 }
    ?1      = { v35227 }
    pf      = { -v35313+0x1 }
    ?3      = { v35229 }
    af      = { -v35320+0x1 }
    ?5      = { v35231 }
    zf      = { v35318 }
    sf      = { v35316 }
    tf      = { v35234 }
    if      = { v35235 }
    df      = { v35236 }
    of      = { v35330 }
    iopl0   = { v35238 }
    iopl1   = { v35239 }
    nt      = { v35240 }
    ?15     = { v35241 }
    rf      = { v35242 }
    vm      = { v35243 }
    ac      = { v35244 }
    vif     = { v35245 }
    vip     = { v35246 }
    id      = { v35247 }
    ?22     = { v35248 }
    ?23     = { v35249 }
    ?24     = { v35250 }
    ?25     = { v35251 }
    ?26     = { v35252 }
    ?27     = { v35253 }
    ?28     = { v35254 }
    ?29     = { v35255 }
    ?30     = { v35256 }
    ?31     = { v35257 }
    ip      = { 0x8048300 }
memory:
    address = { v35216-0x4 }
      value = { v35217 }
      flags = { size=4 }
    address = { v35216-0xc }
      value = { 0x80485d4 }
      flags = { size=4 }
    address = { v35216-0x10 }
      value = { 0x8048452 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v5137[32] }
    cx      = { defs={} expr=v5138[32] }
    dx      = { defs={} expr=v5139[32] }
    bx      = { defs={} expr=v5140[32] }
    sp      = { defs={0x08048440,0x08048443,0x0804844d} expr=(add[32] (add[32] (add[32] v5141[32] -4[32]) -8[32]) -4[32]) }
    bp      = { defs={0x08048440,0x08048441} expr=(add[32] v5141[32] -4[32]) }
    si      = { defs={} expr=v5143[32] }
    di      = { defs={} expr=v5144[32] }
    es      = { defs={} expr=v5145[16] }
    cs      = { defs={} expr=v5146[16] }
    ss      = { defs={} expr=v5147[16] }
    ds      = { defs={} expr=v5148[16] }
    fs      = { defs={} expr=v5149[16] }
    gs      = { defs={} expr=v5150[16] }
    cf      = { defs={0x08048440,0x08048443} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v5141[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v5141[32] -4[32])) 4294967288[33])))))) }
    ?1      = { defs={} expr=v5152[1] }
    pf      = { defs={0x08048440,0x08048443} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5141[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5141[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5141[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5141[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5141[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5141[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5141[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5141[32] -4[32]) -8[32]))))))) }
    ?3      = { defs={} expr=v5154[1] }
    af      = { defs={0x08048440,0x08048443} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v5141[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v5141[32] -4[32])) 4294967288[33])))))) }
    ?5      = { defs={} expr=v5156[1] }
    zf      = { defs={0x08048440,0x08048443} expr=(zerop[1] (add[32] (add[32] v5141[32] -4[32]) -8[32])) }
    sf      = { defs={0x08048440,0x08048443} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v5141[32] -4[32]) -8[32])) }
    tf      = { defs={} expr=v5159[1] }
    if      = { defs={} expr=v5160[1] }
    df      = { defs={} expr=v5161[1] }
    of      = { defs={0x08048440,0x08048443} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v5141[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v5141[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v5141[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v5141[32] -4[32])) 4294967288[33])))))) }
    iopl0   = { defs={} expr=v5163[1] }
    iopl1   = { defs={} expr=v5164[1] }
    nt      = { defs={} expr=v5165[1] }
    ?15     = { defs={} expr=v5166[1] }
    rf      = { defs={} expr=v5167[1] }
    vm      = { defs={} expr=v5168[1] }
    ac      = { defs={} expr=v5169[1] }
    vif     = { defs={} expr=v5170[1] }
    vip     = { defs={} expr=v5171[1] }
    id      = { defs={} expr=v5172[1] }
    ?22     = { defs={} expr=v5173[1] }
    ?23     = { defs={} expr=v5174[1] }
    ?24     = { defs={} expr=v5175[1] }
    ?25     = { defs={} expr=v5176[1] }
    ?26     = { defs={} expr=v5177[1] }
    ?27     = { defs={} expr=v5178[1] }
    ?28     = { defs={} expr=v5179[1] }
    ?29     = { defs={} expr=v5180[1] }
    ?30     = { defs={} expr=v5181[1] }
    ?31     = { defs={} expr=v5182[1] }
    ip      = { defs={0x0804844d} expr=0x08048300[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5141[32] -4[32]) -8[32]) -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5141[32] -4[32]) -8[32]) -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5141[32] -4[32]) -8[32]) -4[32]) 1[32]) }
      value = { defs={} expr=-124[8] }
      flags = { }
    address = { defs={0x08048440,0x08048443,0x0804844d} expr=(add[32] (add[32] (add[32] v5141[32] -4[32]) -8[32]) -4[32]) }
      value = { defs={} expr=82[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v5141[32] -4[32]) -8[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v5141[32] -4[32]) -8[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v5141[32] -4[32]) -8[32]) 1[32]) }
      value = { defs={} expr=-123[8] }
      flags = { }
    address = { defs={0x08048440,0x08048443,0x08048446} expr=(add[32] (add[32] v5141[32] -4[32]) -8[32]) }
      value = { defs={} expr=-44[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5141[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v5142[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5141[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v5142[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5141[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v5142[32]) }
      flags = { }
    address = { defs={0x08048440} expr=(add[32] v5141[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v5142[32]) }
      flags = { }
init mem:
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048452:mov    esp, ebp
registers:
    ax      = { v35397 }
    cx      = { v35398 }
    dx      = { v35399 }
    bx      = { v35400 }
    sp      = { v35402 }
    bp      = { v35402 }
    si      = { v35403 }
    di      = { v35404 }
    es      = { v35405 }
    cs      = { v35406 }
    ss      = { v35407 }
    ds      = { v35408 }
    fs      = { v35409 }
    gs      = { v35410 }
    cf      = { v35411 }
    ?1      = { v35412 }
    pf      = { v35413 }
    ?3      = { v35414 }
    af      = { v35415 }
    ?5      = { v35416 }
    zf      = { v35417 }
    sf      = { v35418 }
    tf      = { v35419 }
    if      = { v35420 }
    df      = { v35421 }
    of      = { v35422 }
    iopl0   = { v35423 }
    iopl1   = { v35424 }
    nt      = { v35425 }
    ?15     = { v35426 }
    rf      = { v35427 }
    vm      = { v35428 }
    ac      = { v35429 }
    vif     = { v35430 }
    vip     = { v35431 }
    id      = { v35432 }
    ?22     = { v35433 }
    ?23     = { v35434 }
    ?24     = { v35435 }
    ?25     = { v35436 }
    ?26     = { v35437 }
    ?27     = { v35438 }
    ?28     = { v35439 }
    ?29     = { v35440 }
    ?30     = { v35441 }
    ?31     = { v35442 }
    ip      = { 0x8048454 }
memory:
registers:
    ax      = { defs={} expr=v5381[32] }
    cx      = { defs={} expr=v5382[32] }
    dx      = { defs={} expr=v5383[32] }
    bx      = { defs={} expr=v5384[32] }
    sp      = { defs={0x08048452} expr=v5386[32] }
    bp      = { defs={} expr=v5386[32] }
    si      = { defs={} expr=v5387[32] }
    di      = { defs={} expr=v5388[32] }
    es      = { defs={} expr=v5389[16] }
    cs      = { defs={} expr=v5390[16] }
    ss      = { defs={} expr=v5391[16] }
    ds      = { defs={} expr=v5392[16] }
    fs      = { defs={} expr=v5393[16] }
    gs      = { defs={} expr=v5394[16] }
    cf      = { defs={} expr=v5395[1] }
    ?1      = { defs={} expr=v5396[1] }
    pf      = { defs={} expr=v5397[1] }
    ?3      = { defs={} expr=v5398[1] }
    af      = { defs={} expr=v5399[1] }
    ?5      = { defs={} expr=v5400[1] }
    zf      = { defs={} expr=v5401[1] }
    sf      = { defs={} expr=v5402[1] }
    tf      = { defs={} expr=v5403[1] }
    if      = { defs={} expr=v5404[1] }
    df      = { defs={} expr=v5405[1] }
    of      = { defs={} expr=v5406[1] }
    iopl0   = { defs={} expr=v5407[1] }
    iopl1   = { defs={} expr=v5408[1] }
    nt      = { defs={} expr=v5409[1] }
    ?15     = { defs={} expr=v5410[1] }
    rf      = { defs={} expr=v5411[1] }
    vm      = { defs={} expr=v5412[1] }
    ac      = { defs={} expr=v5413[1] }
    vif     = { defs={} expr=v5414[1] }
    vip     = { defs={} expr=v5415[1] }
    id      = { defs={} expr=v5416[1] }
    ?22     = { defs={} expr=v5417[1] }
    ?23     = { defs={} expr=v5418[1] }
    ?24     = { defs={} expr=v5419[1] }
    ?25     = { defs={} expr=v5420[1] }
    ?26     = { defs={} expr=v5421[1] }
    ?27     = { defs={} expr=v5422[1] }
    ?28     = { defs={} expr=v5423[1] }
    ?29     = { defs={} expr=v5424[1] }
    ?30     = { defs={} expr=v5425[1] }
    ?31     = { defs={} expr=v5426[1] }
    ip      = { defs={0x08048452} expr=0x08048454[32] }
memory:
init mem:
null state
null state
0x8048454:pop    ebp
registers:
    ax      = { v35397 }
    cx      = { v35398 }
    dx      = { v35399 }
    bx      = { v35400 }
    sp      = { v35402+0x4 }
    bp      = { v35457 }
    si      = { v35403 }
    di      = { v35404 }
    es      = { v35405 }
    cs      = { v35406 }
    ss      = { v35407 }
    ds      = { v35408 }
    fs      = { v35409 }
    gs      = { v35410 }
    cf      = { v35411 }
    ?1      = { v35412 }
    pf      = { v35413 }
    ?3      = { v35414 }
    af      = { v35415 }
    ?5      = { v35416 }
    zf      = { v35417 }
    sf      = { v35418 }
    tf      = { v35419 }
    if      = { v35420 }
    df      = { v35421 }
    of      = { v35422 }
    iopl0   = { v35423 }
    iopl1   = { v35424 }
    nt      = { v35425 }
    ?15     = { v35426 }
    rf      = { v35427 }
    vm      = { v35428 }
    ac      = { v35429 }
    vif     = { v35430 }
    vip     = { v35431 }
    id      = { v35432 }
    ?22     = { v35433 }
    ?23     = { v35434 }
    ?24     = { v35435 }
    ?25     = { v35436 }
    ?26     = { v35437 }
    ?27     = { v35438 }
    ?28     = { v35439 }
    ?29     = { v35440 }
    ?30     = { v35441 }
    ?31     = { v35442 }
    ip      = { 0x8048455 }
memory:
    address = { v35402 }
      value = { v35457 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={} expr=v5381[32] }
    cx      = { defs={} expr=v5382[32] }
    dx      = { defs={} expr=v5383[32] }
    bx      = { defs={} expr=v5384[32] }
    sp      = { defs={0x08048452,0x08048454} expr=(add[32] v5386[32] 4[32]) }
    bp      = { defs={0x08048454} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5456[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5457[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5458[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5459[8]))) }
    si      = { defs={} expr=v5387[32] }
    di      = { defs={} expr=v5388[32] }
    es      = { defs={} expr=v5389[16] }
    cs      = { defs={} expr=v5390[16] }
    ss      = { defs={} expr=v5391[16] }
    ds      = { defs={} expr=v5392[16] }
    fs      = { defs={} expr=v5393[16] }
    gs      = { defs={} expr=v5394[16] }
    cf      = { defs={} expr=v5395[1] }
    ?1      = { defs={} expr=v5396[1] }
    pf      = { defs={} expr=v5397[1] }
    ?3      = { defs={} expr=v5398[1] }
    af      = { defs={} expr=v5399[1] }
    ?5      = { defs={} expr=v5400[1] }
    zf      = { defs={} expr=v5401[1] }
    sf      = { defs={} expr=v5402[1] }
    tf      = { defs={} expr=v5403[1] }
    if      = { defs={} expr=v5404[1] }
    df      = { defs={} expr=v5405[1] }
    of      = { defs={} expr=v5406[1] }
    iopl0   = { defs={} expr=v5407[1] }
    iopl1   = { defs={} expr=v5408[1] }
    nt      = { defs={} expr=v5409[1] }
    ?15     = { defs={} expr=v5410[1] }
    rf      = { defs={} expr=v5411[1] }
    vm      = { defs={} expr=v5412[1] }
    ac      = { defs={} expr=v5413[1] }
    vif     = { defs={} expr=v5414[1] }
    vip     = { defs={} expr=v5415[1] }
    id      = { defs={} expr=v5416[1] }
    ?22     = { defs={} expr=v5417[1] }
    ?23     = { defs={} expr=v5418[1] }
    ?24     = { defs={} expr=v5419[1] }
    ?25     = { defs={} expr=v5420[1] }
    ?26     = { defs={} expr=v5421[1] }
    ?27     = { defs={} expr=v5422[1] }
    ?28     = { defs={} expr=v5423[1] }
    ?29     = { defs={} expr=v5424[1] }
    ?30     = { defs={} expr=v5425[1] }
    ?31     = { defs={} expr=v5426[1] }
    ip      = { defs={0x08048452,0x08048454} expr=0x08048455[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] v5386[32] 3[32]) }
      value = { defs={} expr=v5459[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v5386[32] 2[32]) }
      value = { defs={} expr=v5458[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v5386[32] 1[32]) }
      value = { defs={} expr=v5457[8] }
      flags = { rdonly }
    address = { defs={0x08048452,0x08048454} expr=v5386[32] }
      value = { defs={} expr=v5456[8] }
      flags = { rdonly }
null state
null state
0x8048455:ret    
registers:
    ax      = { v35397 }
    cx      = { v35398 }
    dx      = { v35399 }
    bx      = { v35400 }
    sp      = { v35402+0x8 }
    bp      = { v35457 }
    si      = { v35403 }
    di      = { v35404 }
    es      = { v35405 }
    cs      = { v35406 }
    ss      = { v35407 }
    ds      = { v35408 }
    fs      = { v35409 }
    gs      = { v35410 }
    cf      = { v35411 }
    ?1      = { v35412 }
    pf      = { v35413 }
    ?3      = { v35414 }
    af      = { v35415 }
    ?5      = { v35416 }
    zf      = { v35417 }
    sf      = { v35418 }
    tf      = { v35419 }
    if      = { v35420 }
    df      = { v35421 }
    of      = { v35422 }
    iopl0   = { v35423 }
    iopl1   = { v35424 }
    nt      = { v35425 }
    ?15     = { v35426 }
    rf      = { v35427 }
    vm      = { v35428 }
    ac      = { v35429 }
    vif     = { v35430 }
    vip     = { v35431 }
    id      = { v35432 }
    ?22     = { v35433 }
    ?23     = { v35434 }
    ?24     = { v35435 }
    ?25     = { v35436 }
    ?26     = { v35437 }
    ?27     = { v35438 }
    ?28     = { v35439 }
    ?29     = { v35440 }
    ?30     = { v35441 }
    ?31     = { v35442 }
    ip      = { v35469 }
memory:
    address = { v35402 }
      value = { v35457 }
      flags = { size=4; read-only }
    address = { v35402+0x4 }
      value = { v35469 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={} expr=v5381[32] }
    cx      = { defs={} expr=v5382[32] }
    dx      = { defs={} expr=v5383[32] }
    bx      = { defs={} expr=v5384[32] }
    sp      = { defs={0x08048452,0x08048454,0x08048455} expr=(add[32] (add[32] v5386[32] 4[32]) 4[32]) }
    bp      = { defs={0x08048454} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5456[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5457[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5458[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5459[8]))) }
    si      = { defs={} expr=v5387[32] }
    di      = { defs={} expr=v5388[32] }
    es      = { defs={} expr=v5389[16] }
    cs      = { defs={} expr=v5390[16] }
    ss      = { defs={} expr=v5391[16] }
    ds      = { defs={} expr=v5392[16] }
    fs      = { defs={} expr=v5393[16] }
    gs      = { defs={} expr=v5394[16] }
    cf      = { defs={} expr=v5395[1] }
    ?1      = { defs={} expr=v5396[1] }
    pf      = { defs={} expr=v5397[1] }
    ?3      = { defs={} expr=v5398[1] }
    af      = { defs={} expr=v5399[1] }
    ?5      = { defs={} expr=v5400[1] }
    zf      = { defs={} expr=v5401[1] }
    sf      = { defs={} expr=v5402[1] }
    tf      = { defs={} expr=v5403[1] }
    if      = { defs={} expr=v5404[1] }
    df      = { defs={} expr=v5405[1] }
    of      = { defs={} expr=v5406[1] }
    iopl0   = { defs={} expr=v5407[1] }
    iopl1   = { defs={} expr=v5408[1] }
    nt      = { defs={} expr=v5409[1] }
    ?15     = { defs={} expr=v5410[1] }
    rf      = { defs={} expr=v5411[1] }
    vm      = { defs={} expr=v5412[1] }
    ac      = { defs={} expr=v5413[1] }
    vif     = { defs={} expr=v5414[1] }
    vip     = { defs={} expr=v5415[1] }
    id      = { defs={} expr=v5416[1] }
    ?22     = { defs={} expr=v5417[1] }
    ?23     = { defs={} expr=v5418[1] }
    ?24     = { defs={} expr=v5419[1] }
    ?25     = { defs={} expr=v5420[1] }
    ?26     = { defs={} expr=v5421[1] }
    ?27     = { defs={} expr=v5422[1] }
    ?28     = { defs={} expr=v5423[1] }
    ?29     = { defs={} expr=v5424[1] }
    ?30     = { defs={} expr=v5425[1] }
    ?31     = { defs={} expr=v5426[1] }
    ip      = { defs={0x08048455} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5485[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5486[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5487[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5488[8]))) }
memory:
init mem:
    address = { defs={} expr=(add[32] (add[32] v5386[32] 4[32]) 3[32]) }
      value = { defs={} expr=v5488[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v5386[32] 4[32]) 2[32]) }
      value = { defs={} expr=v5487[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v5386[32] 4[32]) 1[32]) }
      value = { defs={} expr=v5486[8] }
      flags = { rdonly }
    address = { defs={0x08048452,0x08048454,0x08048455} expr=(add[32] v5386[32] 4[32]) }
      value = { defs={} expr=v5485[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v5386[32] 3[32]) }
      value = { defs={} expr=v5459[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v5386[32] 2[32]) }
      value = { defs={} expr=v5458[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v5386[32] 1[32]) }
      value = { defs={} expr=v5457[8] }
      flags = { rdonly }
    address = { defs={0x08048452,0x08048454} expr=v5386[32] }
      value = { defs={} expr=v5456[8] }
      flags = { rdonly }
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048460:push   ebp
registers:
    ax      = { v35520 }
    cx      = { v35521 }
    dx      = { v35522 }
    bx      = { v35523 }
    sp      = { v35524-0x4 }
    bp      = { v35525 }
    si      = { v35526 }
    di      = { v35527 }
    es      = { v35528 }
    cs      = { v35529 }
    ss      = { v35530 }
    ds      = { v35531 }
    fs      = { v35532 }
    gs      = { v35533 }
    cf      = { v35534 }
    ?1      = { v35535 }
    pf      = { v35536 }
    ?3      = { v35537 }
    af      = { v35538 }
    ?5      = { v35539 }
    zf      = { v35540 }
    sf      = { v35541 }
    tf      = { v35542 }
    if      = { v35543 }
    df      = { v35544 }
    of      = { v35545 }
    iopl0   = { v35546 }
    iopl1   = { v35547 }
    nt      = { v35548 }
    ?15     = { v35549 }
    rf      = { v35550 }
    vm      = { v35551 }
    ac      = { v35552 }
    vif     = { v35553 }
    vip     = { v35554 }
    id      = { v35555 }
    ?22     = { v35556 }
    ?23     = { v35557 }
    ?24     = { v35558 }
    ?25     = { v35559 }
    ?26     = { v35560 }
    ?27     = { v35561 }
    ?28     = { v35562 }
    ?29     = { v35563 }
    ?30     = { v35564 }
    ?31     = { v35565 }
    ip      = { 0x8048461 }
memory:
    address = { v35524-0x4 }
      value = { v35525 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v5546[32] }
    cx      = { defs={} expr=v5547[32] }
    dx      = { defs={} expr=v5548[32] }
    bx      = { defs={} expr=v5549[32] }
    sp      = { defs={0x08048460} expr=(add[32] v5550[32] -4[32]) }
    bp      = { defs={} expr=v5551[32] }
    si      = { defs={} expr=v5552[32] }
    di      = { defs={} expr=v5553[32] }
    es      = { defs={} expr=v5554[16] }
    cs      = { defs={} expr=v5555[16] }
    ss      = { defs={} expr=v5556[16] }
    ds      = { defs={} expr=v5557[16] }
    fs      = { defs={} expr=v5558[16] }
    gs      = { defs={} expr=v5559[16] }
    cf      = { defs={} expr=v5560[1] }
    ?1      = { defs={} expr=v5561[1] }
    pf      = { defs={} expr=v5562[1] }
    ?3      = { defs={} expr=v5563[1] }
    af      = { defs={} expr=v5564[1] }
    ?5      = { defs={} expr=v5565[1] }
    zf      = { defs={} expr=v5566[1] }
    sf      = { defs={} expr=v5567[1] }
    tf      = { defs={} expr=v5568[1] }
    if      = { defs={} expr=v5569[1] }
    df      = { defs={} expr=v5570[1] }
    of      = { defs={} expr=v5571[1] }
    iopl0   = { defs={} expr=v5572[1] }
    iopl1   = { defs={} expr=v5573[1] }
    nt      = { defs={} expr=v5574[1] }
    ?15     = { defs={} expr=v5575[1] }
    rf      = { defs={} expr=v5576[1] }
    vm      = { defs={} expr=v5577[1] }
    ac      = { defs={} expr=v5578[1] }
    vif     = { defs={} expr=v5579[1] }
    vip     = { defs={} expr=v5580[1] }
    id      = { defs={} expr=v5581[1] }
    ?22     = { defs={} expr=v5582[1] }
    ?23     = { defs={} expr=v5583[1] }
    ?24     = { defs={} expr=v5584[1] }
    ?25     = { defs={} expr=v5585[1] }
    ?26     = { defs={} expr=v5586[1] }
    ?27     = { defs={} expr=v5587[1] }
    ?28     = { defs={} expr=v5588[1] }
    ?29     = { defs={} expr=v5589[1] }
    ?30     = { defs={} expr=v5590[1] }
    ?31     = { defs={} expr=v5591[1] }
    ip      = { defs={0x08048460} expr=0x08048461[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v5550[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v5551[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5550[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v5551[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5550[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v5551[32]) }
      flags = { }
    address = { defs={0x08048460} expr=(add[32] v5550[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v5551[32]) }
      flags = { }
init mem:
null state
null state
0x8048461:mov    ebp, esp
registers:
    ax      = { v35520 }
    cx      = { v35521 }
    dx      = { v35522 }
    bx      = { v35523 }
    sp      = { v35524-0x4 }
    bp      = { v35524-0x4 }
    si      = { v35526 }
    di      = { v35527 }
    es      = { v35528 }
    cs      = { v35529 }
    ss      = { v35530 }
    ds      = { v35531 }
    fs      = { v35532 }
    gs      = { v35533 }
    cf      = { v35534 }
    ?1      = { v35535 }
    pf      = { v35536 }
    ?3      = { v35537 }
    af      = { v35538 }
    ?5      = { v35539 }
    zf      = { v35540 }
    sf      = { v35541 }
    tf      = { v35542 }
    if      = { v35543 }
    df      = { v35544 }
    of      = { v35545 }
    iopl0   = { v35546 }
    iopl1   = { v35547 }
    nt      = { v35548 }
    ?15     = { v35549 }
    rf      = { v35550 }
    vm      = { v35551 }
    ac      = { v35552 }
    vif     = { v35553 }
    vip     = { v35554 }
    id      = { v35555 }
    ?22     = { v35556 }
    ?23     = { v35557 }
    ?24     = { v35558 }
    ?25     = { v35559 }
    ?26     = { v35560 }
    ?27     = { v35561 }
    ?28     = { v35562 }
    ?29     = { v35563 }
    ?30     = { v35564 }
    ?31     = { v35565 }
    ip      = { 0x8048463 }
memory:
    address = { v35524-0x4 }
      value = { v35525 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v5546[32] }
    cx      = { defs={} expr=v5547[32] }
    dx      = { defs={} expr=v5548[32] }
    bx      = { defs={} expr=v5549[32] }
    sp      = { defs={0x08048460} expr=(add[32] v5550[32] -4[32]) }
    bp      = { defs={0x08048460,0x08048461} expr=(add[32] v5550[32] -4[32]) }
    si      = { defs={} expr=v5552[32] }
    di      = { defs={} expr=v5553[32] }
    es      = { defs={} expr=v5554[16] }
    cs      = { defs={} expr=v5555[16] }
    ss      = { defs={} expr=v5556[16] }
    ds      = { defs={} expr=v5557[16] }
    fs      = { defs={} expr=v5558[16] }
    gs      = { defs={} expr=v5559[16] }
    cf      = { defs={} expr=v5560[1] }
    ?1      = { defs={} expr=v5561[1] }
    pf      = { defs={} expr=v5562[1] }
    ?3      = { defs={} expr=v5563[1] }
    af      = { defs={} expr=v5564[1] }
    ?5      = { defs={} expr=v5565[1] }
    zf      = { defs={} expr=v5566[1] }
    sf      = { defs={} expr=v5567[1] }
    tf      = { defs={} expr=v5568[1] }
    if      = { defs={} expr=v5569[1] }
    df      = { defs={} expr=v5570[1] }
    of      = { defs={} expr=v5571[1] }
    iopl0   = { defs={} expr=v5572[1] }
    iopl1   = { defs={} expr=v5573[1] }
    nt      = { defs={} expr=v5574[1] }
    ?15     = { defs={} expr=v5575[1] }
    rf      = { defs={} expr=v5576[1] }
    vm      = { defs={} expr=v5577[1] }
    ac      = { defs={} expr=v5578[1] }
    vif     = { defs={} expr=v5579[1] }
    vip     = { defs={} expr=v5580[1] }
    id      = { defs={} expr=v5581[1] }
    ?22     = { defs={} expr=v5582[1] }
    ?23     = { defs={} expr=v5583[1] }
    ?24     = { defs={} expr=v5584[1] }
    ?25     = { defs={} expr=v5585[1] }
    ?26     = { defs={} expr=v5586[1] }
    ?27     = { defs={} expr=v5587[1] }
    ?28     = { defs={} expr=v5588[1] }
    ?29     = { defs={} expr=v5589[1] }
    ?30     = { defs={} expr=v5590[1] }
    ?31     = { defs={} expr=v5591[1] }
    ip      = { defs={0x08048460,0x08048461} expr=0x08048463[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v5550[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v5551[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5550[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v5551[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5550[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v5551[32]) }
      flags = { }
    address = { defs={0x08048460} expr=(add[32] v5550[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v5551[32]) }
      flags = { }
init mem:
null state
null state
0x8048463:sub    esp, 0x08
registers:
    ax      = { v35520 }
    cx      = { v35521 }
    dx      = { v35522 }
    bx      = { v35523 }
    sp      = { v35524-0xc }
    bp      = { v35524-0x4 }
    si      = { v35526 }
    di      = { v35527 }
    es      = { v35528 }
    cs      = { v35529 }
    ss      = { v35530 }
    ds      = { v35531 }
    fs      = { v35532 }
    gs      = { v35533 }
    cf      = { -v35631+0x1 }
    ?1      = { v35535 }
    pf      = { -v35621+0x1 }
    ?3      = { v35537 }
    af      = { -v35628+0x1 }
    ?5      = { v35539 }
    zf      = { v35626 }
    sf      = { v35624 }
    tf      = { v35542 }
    if      = { v35543 }
    df      = { v35544 }
    of      = { v35638 }
    iopl0   = { v35546 }
    iopl1   = { v35547 }
    nt      = { v35548 }
    ?15     = { v35549 }
    rf      = { v35550 }
    vm      = { v35551 }
    ac      = { v35552 }
    vif     = { v35553 }
    vip     = { v35554 }
    id      = { v35555 }
    ?22     = { v35556 }
    ?23     = { v35557 }
    ?24     = { v35558 }
    ?25     = { v35559 }
    ?26     = { v35560 }
    ?27     = { v35561 }
    ?28     = { v35562 }
    ?29     = { v35563 }
    ?30     = { v35564 }
    ?31     = { v35565 }
    ip      = { 0x8048466 }
memory:
    address = { v35524-0x4 }
      value = { v35525 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v5546[32] }
    cx      = { defs={} expr=v5547[32] }
    dx      = { defs={} expr=v5548[32] }
    bx      = { defs={} expr=v5549[32] }
    sp      = { defs={0x08048460,0x08048463} expr=(add[32] (add[32] v5550[32] -4[32]) -8[32]) }
    bp      = { defs={0x08048460,0x08048461} expr=(add[32] v5550[32] -4[32]) }
    si      = { defs={} expr=v5552[32] }
    di      = { defs={} expr=v5553[32] }
    es      = { defs={} expr=v5554[16] }
    cs      = { defs={} expr=v5555[16] }
    ss      = { defs={} expr=v5556[16] }
    ds      = { defs={} expr=v5557[16] }
    fs      = { defs={} expr=v5558[16] }
    gs      = { defs={} expr=v5559[16] }
    cf      = { defs={0x08048460,0x08048463} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v5550[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v5550[32] -4[32])) 4294967288[33])))))) }
    ?1      = { defs={} expr=v5561[1] }
    pf      = { defs={0x08048460,0x08048463} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5550[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5550[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5550[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5550[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5550[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5550[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5550[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5550[32] -4[32]) -8[32]))))))) }
    ?3      = { defs={} expr=v5563[1] }
    af      = { defs={0x08048460,0x08048463} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v5550[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v5550[32] -4[32])) 4294967288[33])))))) }
    ?5      = { defs={} expr=v5565[1] }
    zf      = { defs={0x08048460,0x08048463} expr=(zerop[1] (add[32] (add[32] v5550[32] -4[32]) -8[32])) }
    sf      = { defs={0x08048460,0x08048463} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v5550[32] -4[32]) -8[32])) }
    tf      = { defs={} expr=v5568[1] }
    if      = { defs={} expr=v5569[1] }
    df      = { defs={} expr=v5570[1] }
    of      = { defs={0x08048460,0x08048463} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v5550[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v5550[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v5550[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v5550[32] -4[32])) 4294967288[33])))))) }
    iopl0   = { defs={} expr=v5572[1] }
    iopl1   = { defs={} expr=v5573[1] }
    nt      = { defs={} expr=v5574[1] }
    ?15     = { defs={} expr=v5575[1] }
    rf      = { defs={} expr=v5576[1] }
    vm      = { defs={} expr=v5577[1] }
    ac      = { defs={} expr=v5578[1] }
    vif     = { defs={} expr=v5579[1] }
    vip     = { defs={} expr=v5580[1] }
    id      = { defs={} expr=v5581[1] }
    ?22     = { defs={} expr=v5582[1] }
    ?23     = { defs={} expr=v5583[1] }
    ?24     = { defs={} expr=v5584[1] }
    ?25     = { defs={} expr=v5585[1] }
    ?26     = { defs={} expr=v5586[1] }
    ?27     = { defs={} expr=v5587[1] }
    ?28     = { defs={} expr=v5588[1] }
    ?29     = { defs={} expr=v5589[1] }
    ?30     = { defs={} expr=v5590[1] }
    ?31     = { defs={} expr=v5591[1] }
    ip      = { defs={0x08048460,0x08048461,0x08048463} expr=0x08048466[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v5550[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v5551[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5550[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v5551[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5550[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v5551[32]) }
      flags = { }
    address = { defs={0x08048460} expr=(add[32] v5550[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v5551[32]) }
      flags = { }
init mem:
null state
null state
0x8048466:mov    DWORD PTR ss:[esp], 0x080485d4<<StaticData@0x080485ca>+0x0a>
registers:
    ax      = { v35520 }
    cx      = { v35521 }
    dx      = { v35522 }
    bx      = { v35523 }
    sp      = { v35524-0xc }
    bp      = { v35524-0x4 }
    si      = { v35526 }
    di      = { v35527 }
    es      = { v35528 }
    cs      = { v35529 }
    ss      = { v35530 }
    ds      = { v35531 }
    fs      = { v35532 }
    gs      = { v35533 }
    cf      = { -v35631+0x1 }
    ?1      = { v35535 }
    pf      = { -v35621+0x1 }
    ?3      = { v35537 }
    af      = { -v35628+0x1 }
    ?5      = { v35539 }
    zf      = { v35626 }
    sf      = { v35624 }
    tf      = { v35542 }
    if      = { v35543 }
    df      = { v35544 }
    of      = { v35638 }
    iopl0   = { v35546 }
    iopl1   = { v35547 }
    nt      = { v35548 }
    ?15     = { v35549 }
    rf      = { v35550 }
    vm      = { v35551 }
    ac      = { v35552 }
    vif     = { v35553 }
    vip     = { v35554 }
    id      = { v35555 }
    ?22     = { v35556 }
    ?23     = { v35557 }
    ?24     = { v35558 }
    ?25     = { v35559 }
    ?26     = { v35560 }
    ?27     = { v35561 }
    ?28     = { v35562 }
    ?29     = { v35563 }
    ?30     = { v35564 }
    ?31     = { v35565 }
    ip      = { 0x804846d }
memory:
    address = { v35524-0x4 }
      value = { v35525 }
      flags = { size=4 }
    address = { v35524-0xc }
      value = { 0x80485d4 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v5546[32] }
    cx      = { defs={} expr=v5547[32] }
    dx      = { defs={} expr=v5548[32] }
    bx      = { defs={} expr=v5549[32] }
    sp      = { defs={0x08048460,0x08048463} expr=(add[32] (add[32] v5550[32] -4[32]) -8[32]) }
    bp      = { defs={0x08048460,0x08048461} expr=(add[32] v5550[32] -4[32]) }
    si      = { defs={} expr=v5552[32] }
    di      = { defs={} expr=v5553[32] }
    es      = { defs={} expr=v5554[16] }
    cs      = { defs={} expr=v5555[16] }
    ss      = { defs={} expr=v5556[16] }
    ds      = { defs={} expr=v5557[16] }
    fs      = { defs={} expr=v5558[16] }
    gs      = { defs={} expr=v5559[16] }
    cf      = { defs={0x08048460,0x08048463} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v5550[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v5550[32] -4[32])) 4294967288[33])))))) }
    ?1      = { defs={} expr=v5561[1] }
    pf      = { defs={0x08048460,0x08048463} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5550[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5550[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5550[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5550[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5550[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5550[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5550[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5550[32] -4[32]) -8[32]))))))) }
    ?3      = { defs={} expr=v5563[1] }
    af      = { defs={0x08048460,0x08048463} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v5550[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v5550[32] -4[32])) 4294967288[33])))))) }
    ?5      = { defs={} expr=v5565[1] }
    zf      = { defs={0x08048460,0x08048463} expr=(zerop[1] (add[32] (add[32] v5550[32] -4[32]) -8[32])) }
    sf      = { defs={0x08048460,0x08048463} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v5550[32] -4[32]) -8[32])) }
    tf      = { defs={} expr=v5568[1] }
    if      = { defs={} expr=v5569[1] }
    df      = { defs={} expr=v5570[1] }
    of      = { defs={0x08048460,0x08048463} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v5550[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v5550[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v5550[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v5550[32] -4[32])) 4294967288[33])))))) }
    iopl0   = { defs={} expr=v5572[1] }
    iopl1   = { defs={} expr=v5573[1] }
    nt      = { defs={} expr=v5574[1] }
    ?15     = { defs={} expr=v5575[1] }
    rf      = { defs={} expr=v5576[1] }
    vm      = { defs={} expr=v5577[1] }
    ac      = { defs={} expr=v5578[1] }
    vif     = { defs={} expr=v5579[1] }
    vip     = { defs={} expr=v5580[1] }
    id      = { defs={} expr=v5581[1] }
    ?22     = { defs={} expr=v5582[1] }
    ?23     = { defs={} expr=v5583[1] }
    ?24     = { defs={} expr=v5584[1] }
    ?25     = { defs={} expr=v5585[1] }
    ?26     = { defs={} expr=v5586[1] }
    ?27     = { defs={} expr=v5587[1] }
    ?28     = { defs={} expr=v5588[1] }
    ?29     = { defs={} expr=v5589[1] }
    ?30     = { defs={} expr=v5590[1] }
    ?31     = { defs={} expr=v5591[1] }
    ip      = { defs={0x08048460,0x08048461,0x08048463,0x08048466} expr=0x0804846d[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] v5550[32] -4[32]) -8[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v5550[32] -4[32]) -8[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v5550[32] -4[32]) -8[32]) 1[32]) }
      value = { defs={} expr=-123[8] }
      flags = { }
    address = { defs={0x08048460,0x08048463,0x08048466} expr=(add[32] (add[32] v5550[32] -4[32]) -8[32]) }
      value = { defs={} expr=-44[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5550[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v5551[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5550[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v5551[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5550[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v5551[32]) }
      flags = { }
    address = { defs={0x08048460} expr=(add[32] v5550[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v5551[32]) }
      flags = { }
init mem:
null state
null state
0x804846d:call   0x08048300<puts@plt>
registers:
    ax      = { v35520 }
    cx      = { v35521 }
    dx      = { v35522 }
    bx      = { v35523 }
    sp      = { v35524-0x10 }
    bp      = { v35524-0x4 }
    si      = { v35526 }
    di      = { v35527 }
    es      = { v35528 }
    cs      = { v35529 }
    ss      = { v35530 }
    ds      = { v35531 }
    fs      = { v35532 }
    gs      = { v35533 }
    cf      = { -v35631+0x1 }
    ?1      = { v35535 }
    pf      = { -v35621+0x1 }
    ?3      = { v35537 }
    af      = { -v35628+0x1 }
    ?5      = { v35539 }
    zf      = { v35626 }
    sf      = { v35624 }
    tf      = { v35542 }
    if      = { v35543 }
    df      = { v35544 }
    of      = { v35638 }
    iopl0   = { v35546 }
    iopl1   = { v35547 }
    nt      = { v35548 }
    ?15     = { v35549 }
    rf      = { v35550 }
    vm      = { v35551 }
    ac      = { v35552 }
    vif     = { v35553 }
    vip     = { v35554 }
    id      = { v35555 }
    ?22     = { v35556 }
    ?23     = { v35557 }
    ?24     = { v35558 }
    ?25     = { v35559 }
    ?26     = { v35560 }
    ?27     = { v35561 }
    ?28     = { v35562 }
    ?29     = { v35563 }
    ?30     = { v35564 }
    ?31     = { v35565 }
    ip      = { 0x8048300 }
memory:
    address = { v35524-0x4 }
      value = { v35525 }
      flags = { size=4 }
    address = { v35524-0xc }
      value = { 0x80485d4 }
      flags = { size=4 }
    address = { v35524-0x10 }
      value = { 0x8048472 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v5546[32] }
    cx      = { defs={} expr=v5547[32] }
    dx      = { defs={} expr=v5548[32] }
    bx      = { defs={} expr=v5549[32] }
    sp      = { defs={0x08048460,0x08048463,0x0804846d} expr=(add[32] (add[32] (add[32] v5550[32] -4[32]) -8[32]) -4[32]) }
    bp      = { defs={0x08048460,0x08048461} expr=(add[32] v5550[32] -4[32]) }
    si      = { defs={} expr=v5552[32] }
    di      = { defs={} expr=v5553[32] }
    es      = { defs={} expr=v5554[16] }
    cs      = { defs={} expr=v5555[16] }
    ss      = { defs={} expr=v5556[16] }
    ds      = { defs={} expr=v5557[16] }
    fs      = { defs={} expr=v5558[16] }
    gs      = { defs={} expr=v5559[16] }
    cf      = { defs={0x08048460,0x08048463} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v5550[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v5550[32] -4[32])) 4294967288[33])))))) }
    ?1      = { defs={} expr=v5561[1] }
    pf      = { defs={0x08048460,0x08048463} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5550[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5550[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5550[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5550[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5550[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5550[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5550[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5550[32] -4[32]) -8[32]))))))) }
    ?3      = { defs={} expr=v5563[1] }
    af      = { defs={0x08048460,0x08048463} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v5550[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v5550[32] -4[32])) 4294967288[33])))))) }
    ?5      = { defs={} expr=v5565[1] }
    zf      = { defs={0x08048460,0x08048463} expr=(zerop[1] (add[32] (add[32] v5550[32] -4[32]) -8[32])) }
    sf      = { defs={0x08048460,0x08048463} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v5550[32] -4[32]) -8[32])) }
    tf      = { defs={} expr=v5568[1] }
    if      = { defs={} expr=v5569[1] }
    df      = { defs={} expr=v5570[1] }
    of      = { defs={0x08048460,0x08048463} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v5550[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v5550[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v5550[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v5550[32] -4[32])) 4294967288[33])))))) }
    iopl0   = { defs={} expr=v5572[1] }
    iopl1   = { defs={} expr=v5573[1] }
    nt      = { defs={} expr=v5574[1] }
    ?15     = { defs={} expr=v5575[1] }
    rf      = { defs={} expr=v5576[1] }
    vm      = { defs={} expr=v5577[1] }
    ac      = { defs={} expr=v5578[1] }
    vif     = { defs={} expr=v5579[1] }
    vip     = { defs={} expr=v5580[1] }
    id      = { defs={} expr=v5581[1] }
    ?22     = { defs={} expr=v5582[1] }
    ?23     = { defs={} expr=v5583[1] }
    ?24     = { defs={} expr=v5584[1] }
    ?25     = { defs={} expr=v5585[1] }
    ?26     = { defs={} expr=v5586[1] }
    ?27     = { defs={} expr=v5587[1] }
    ?28     = { defs={} expr=v5588[1] }
    ?29     = { defs={} expr=v5589[1] }
    ?30     = { defs={} expr=v5590[1] }
    ?31     = { defs={} expr=v5591[1] }
    ip      = { defs={0x0804846d} expr=0x08048300[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5550[32] -4[32]) -8[32]) -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5550[32] -4[32]) -8[32]) -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5550[32] -4[32]) -8[32]) -4[32]) 1[32]) }
      value = { defs={} expr=-124[8] }
      flags = { }
    address = { defs={0x08048460,0x08048463,0x0804846d} expr=(add[32] (add[32] (add[32] v5550[32] -4[32]) -8[32]) -4[32]) }
      value = { defs={} expr=114[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v5550[32] -4[32]) -8[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v5550[32] -4[32]) -8[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v5550[32] -4[32]) -8[32]) 1[32]) }
      value = { defs={} expr=-123[8] }
      flags = { }
    address = { defs={0x08048460,0x08048463,0x08048466} expr=(add[32] (add[32] v5550[32] -4[32]) -8[32]) }
      value = { defs={} expr=-44[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5550[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v5551[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5550[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v5551[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5550[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v5551[32]) }
      flags = { }
    address = { defs={0x08048460} expr=(add[32] v5550[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v5551[32]) }
      flags = { }
init mem:
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048472:mov    DWORD PTR ss:[esp], 0x00000000
registers:
    ax      = { v35705 }
    cx      = { v35706 }
    dx      = { v35707 }
    bx      = { v35708 }
    sp      = { v35709 }
    bp      = { v35710 }
    si      = { v35711 }
    di      = { v35712 }
    es      = { v35713 }
    cs      = { v35714 }
    ss      = { v35715 }
    ds      = { v35716 }
    fs      = { v35717 }
    gs      = { v35718 }
    cf      = { v35719 }
    ?1      = { v35720 }
    pf      = { v35721 }
    ?3      = { v35722 }
    af      = { v35723 }
    ?5      = { v35724 }
    zf      = { v35725 }
    sf      = { v35726 }
    tf      = { v35727 }
    if      = { v35728 }
    df      = { v35729 }
    of      = { v35730 }
    iopl0   = { v35731 }
    iopl1   = { v35732 }
    nt      = { v35733 }
    ?15     = { v35734 }
    rf      = { v35735 }
    vm      = { v35736 }
    ac      = { v35737 }
    vif     = { v35738 }
    vip     = { v35739 }
    id      = { v35740 }
    ?22     = { v35741 }
    ?23     = { v35742 }
    ?24     = { v35743 }
    ?25     = { v35744 }
    ?26     = { v35745 }
    ?27     = { v35746 }
    ?28     = { v35747 }
    ?29     = { v35748 }
    ?30     = { v35749 }
    ?31     = { v35750 }
    ip      = { 0x8048479 }
memory:
    address = { v35709 }
      value = { 0x0 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v5790[32] }
    cx      = { defs={} expr=v5791[32] }
    dx      = { defs={} expr=v5792[32] }
    bx      = { defs={} expr=v5793[32] }
    sp      = { defs={} expr=v5794[32] }
    bp      = { defs={} expr=v5795[32] }
    si      = { defs={} expr=v5796[32] }
    di      = { defs={} expr=v5797[32] }
    es      = { defs={} expr=v5798[16] }
    cs      = { defs={} expr=v5799[16] }
    ss      = { defs={} expr=v5800[16] }
    ds      = { defs={} expr=v5801[16] }
    fs      = { defs={} expr=v5802[16] }
    gs      = { defs={} expr=v5803[16] }
    cf      = { defs={} expr=v5804[1] }
    ?1      = { defs={} expr=v5805[1] }
    pf      = { defs={} expr=v5806[1] }
    ?3      = { defs={} expr=v5807[1] }
    af      = { defs={} expr=v5808[1] }
    ?5      = { defs={} expr=v5809[1] }
    zf      = { defs={} expr=v5810[1] }
    sf      = { defs={} expr=v5811[1] }
    tf      = { defs={} expr=v5812[1] }
    if      = { defs={} expr=v5813[1] }
    df      = { defs={} expr=v5814[1] }
    of      = { defs={} expr=v5815[1] }
    iopl0   = { defs={} expr=v5816[1] }
    iopl1   = { defs={} expr=v5817[1] }
    nt      = { defs={} expr=v5818[1] }
    ?15     = { defs={} expr=v5819[1] }
    rf      = { defs={} expr=v5820[1] }
    vm      = { defs={} expr=v5821[1] }
    ac      = { defs={} expr=v5822[1] }
    vif     = { defs={} expr=v5823[1] }
    vip     = { defs={} expr=v5824[1] }
    id      = { defs={} expr=v5825[1] }
    ?22     = { defs={} expr=v5826[1] }
    ?23     = { defs={} expr=v5827[1] }
    ?24     = { defs={} expr=v5828[1] }
    ?25     = { defs={} expr=v5829[1] }
    ?26     = { defs={} expr=v5830[1] }
    ?27     = { defs={} expr=v5831[1] }
    ?28     = { defs={} expr=v5832[1] }
    ?29     = { defs={} expr=v5833[1] }
    ?30     = { defs={} expr=v5834[1] }
    ?31     = { defs={} expr=v5835[1] }
    ip      = { defs={0x08048472} expr=0x08048479[32] }
memory:
    address = { defs={} expr=(add[32] v5794[32] 3[32]) }
      value = { defs={} expr=0[8] }
      flags = { }
    address = { defs={} expr=(add[32] v5794[32] 2[32]) }
      value = { defs={} expr=0[8] }
      flags = { }
    address = { defs={} expr=(add[32] v5794[32] 1[32]) }
      value = { defs={} expr=0[8] }
      flags = { }
    address = { defs={0x08048472} expr=v5794[32] }
      value = { defs={} expr=0[8] }
      flags = { }
init mem:
null state
null state
0x8048479:call   0x08048320<_exit@plt>
registers:
    ax      = { v35705 }
    cx      = { v35706 }
    dx      = { v35707 }
    bx      = { v35708 }
    sp      = { v35709-0x4 }
    bp      = { v35710 }
    si      = { v35711 }
    di      = { v35712 }
    es      = { v35713 }
    cs      = { v35714 }
    ss      = { v35715 }
    ds      = { v35716 }
    fs      = { v35717 }
    gs      = { v35718 }
    cf      = { v35719 }
    ?1      = { v35720 }
    pf      = { v35721 }
    ?3      = { v35722 }
    af      = { v35723 }
    ?5      = { v35724 }
    zf      = { v35725 }
    sf      = { v35726 }
    tf      = { v35727 }
    if      = { v35728 }
    df      = { v35729 }
    of      = { v35730 }
    iopl0   = { v35731 }
    iopl1   = { v35732 }
    nt      = { v35733 }
    ?15     = { v35734 }
    rf      = { v35735 }
    vm      = { v35736 }
    ac      = { v35737 }
    vif     = { v35738 }
    vip     = { v35739 }
    id      = { v35740 }
    ?22     = { v35741 }
    ?23     = { v35742 }
    ?24     = { v35743 }
    ?25     = { v35744 }
    ?26     = { v35745 }
    ?27     = { v35746 }
    ?28     = { v35747 }
    ?29     = { v35748 }
    ?30     = { v35749 }
    ?31     = { v35750 }
    ip      = { 0x8048320 }
memory:
    address = { v35709 }
      value = { 0x0 }
      flags = { size=4 }
    address = { v35709-0x4 }
      value = { 0x804847e }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v5790[32] }
    cx      = { defs={} expr=v5791[32] }
    dx      = { defs={} expr=v5792[32] }
    bx      = { defs={} expr=v5793[32] }
    sp      = { defs={0x08048479} expr=(add[32] v5794[32] -4[32]) }
    bp      = { defs={} expr=v5795[32] }
    si      = { defs={} expr=v5796[32] }
    di      = { defs={} expr=v5797[32] }
    es      = { defs={} expr=v5798[16] }
    cs      = { defs={} expr=v5799[16] }
    ss      = { defs={} expr=v5800[16] }
    ds      = { defs={} expr=v5801[16] }
    fs      = { defs={} expr=v5802[16] }
    gs      = { defs={} expr=v5803[16] }
    cf      = { defs={} expr=v5804[1] }
    ?1      = { defs={} expr=v5805[1] }
    pf      = { defs={} expr=v5806[1] }
    ?3      = { defs={} expr=v5807[1] }
    af      = { defs={} expr=v5808[1] }
    ?5      = { defs={} expr=v5809[1] }
    zf      = { defs={} expr=v5810[1] }
    sf      = { defs={} expr=v5811[1] }
    tf      = { defs={} expr=v5812[1] }
    if      = { defs={} expr=v5813[1] }
    df      = { defs={} expr=v5814[1] }
    of      = { defs={} expr=v5815[1] }
    iopl0   = { defs={} expr=v5816[1] }
    iopl1   = { defs={} expr=v5817[1] }
    nt      = { defs={} expr=v5818[1] }
    ?15     = { defs={} expr=v5819[1] }
    rf      = { defs={} expr=v5820[1] }
    vm      = { defs={} expr=v5821[1] }
    ac      = { defs={} expr=v5822[1] }
    vif     = { defs={} expr=v5823[1] }
    vip     = { defs={} expr=v5824[1] }
    id      = { defs={} expr=v5825[1] }
    ?22     = { defs={} expr=v5826[1] }
    ?23     = { defs={} expr=v5827[1] }
    ?24     = { defs={} expr=v5828[1] }
    ?25     = { defs={} expr=v5829[1] }
    ?26     = { defs={} expr=v5830[1] }
    ?27     = { defs={} expr=v5831[1] }
    ?28     = { defs={} expr=v5832[1] }
    ?29     = { defs={} expr=v5833[1] }
    ?30     = { defs={} expr=v5834[1] }
    ?31     = { defs={} expr=v5835[1] }
    ip      = { defs={0x08048479} expr=0x08048320[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v5794[32] -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5794[32] -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5794[32] -4[32]) 1[32]) }
      value = { defs={} expr=-124[8] }
      flags = { }
    address = { defs={0x08048479} expr=(add[32] v5794[32] -4[32]) }
      value = { defs={} expr=126[8] }
      flags = { }
    address = { defs={} expr=(add[32] v5794[32] 3[32]) }
      value = { defs={} expr=0[8] }
      flags = { }
    address = { defs={} expr=(add[32] v5794[32] 2[32]) }
      value = { defs={} expr=0[8] }
      flags = { }
    address = { defs={} expr=(add[32] v5794[32] 1[32]) }
      value = { defs={} expr=0[8] }
      flags = { }
    address = { defs={0x08048472} expr=v5794[32] }
      value = { defs={} expr=0[8] }
      flags = { }
init mem:
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048480:push   ebp
registers:
    ax      = { v35817 }
    cx      = { v35818 }
    dx      = { v35819 }
    bx      = { v35820 }
    sp      = { v35821-0x4 }
    bp      = { v35822 }
    si      = { v35823 }
    di      = { v35824 }
    es      = { v35825 }
    cs      = { v35826 }
    ss      = { v35827 }
    ds      = { v35828 }
    fs      = { v35829 }
    gs      = { v35830 }
    cf      = { v35831 }
    ?1      = { v35832 }
    pf      = { v35833 }
    ?3      = { v35834 }
    af      = { v35835 }
    ?5      = { v35836 }
    zf      = { v35837 }
    sf      = { v35838 }
    tf      = { v35839 }
    if      = { v35840 }
    df      = { v35841 }
    of      = { v35842 }
    iopl0   = { v35843 }
    iopl1   = { v35844 }
    nt      = { v35845 }
    ?15     = { v35846 }
    rf      = { v35847 }
    vm      = { v35848 }
    ac      = { v35849 }
    vif     = { v35850 }
    vip     = { v35851 }
    id      = { v35852 }
    ?22     = { v35853 }
    ?23     = { v35854 }
    ?24     = { v35855 }
    ?25     = { v35856 }
    ?26     = { v35857 }
    ?27     = { v35858 }
    ?28     = { v35859 }
    ?29     = { v35860 }
    ?30     = { v35861 }
    ?31     = { v35862 }
    ip      = { 0x8048481 }
memory:
    address = { v35821-0x4 }
      value = { v35822 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v5916[32] }
    cx      = { defs={} expr=v5917[32] }
    dx      = { defs={} expr=v5918[32] }
    bx      = { defs={} expr=v5919[32] }
    sp      = { defs={0x08048480} expr=(add[32] v5920[32] -4[32]) }
    bp      = { defs={} expr=v5921[32] }
    si      = { defs={} expr=v5922[32] }
    di      = { defs={} expr=v5923[32] }
    es      = { defs={} expr=v5924[16] }
    cs      = { defs={} expr=v5925[16] }
    ss      = { defs={} expr=v5926[16] }
    ds      = { defs={} expr=v5927[16] }
    fs      = { defs={} expr=v5928[16] }
    gs      = { defs={} expr=v5929[16] }
    cf      = { defs={} expr=v5930[1] }
    ?1      = { defs={} expr=v5931[1] }
    pf      = { defs={} expr=v5932[1] }
    ?3      = { defs={} expr=v5933[1] }
    af      = { defs={} expr=v5934[1] }
    ?5      = { defs={} expr=v5935[1] }
    zf      = { defs={} expr=v5936[1] }
    sf      = { defs={} expr=v5937[1] }
    tf      = { defs={} expr=v5938[1] }
    if      = { defs={} expr=v5939[1] }
    df      = { defs={} expr=v5940[1] }
    of      = { defs={} expr=v5941[1] }
    iopl0   = { defs={} expr=v5942[1] }
    iopl1   = { defs={} expr=v5943[1] }
    nt      = { defs={} expr=v5944[1] }
    ?15     = { defs={} expr=v5945[1] }
    rf      = { defs={} expr=v5946[1] }
    vm      = { defs={} expr=v5947[1] }
    ac      = { defs={} expr=v5948[1] }
    vif     = { defs={} expr=v5949[1] }
    vip     = { defs={} expr=v5950[1] }
    id      = { defs={} expr=v5951[1] }
    ?22     = { defs={} expr=v5952[1] }
    ?23     = { defs={} expr=v5953[1] }
    ?24     = { defs={} expr=v5954[1] }
    ?25     = { defs={} expr=v5955[1] }
    ?26     = { defs={} expr=v5956[1] }
    ?27     = { defs={} expr=v5957[1] }
    ?28     = { defs={} expr=v5958[1] }
    ?29     = { defs={} expr=v5959[1] }
    ?30     = { defs={} expr=v5960[1] }
    ?31     = { defs={} expr=v5961[1] }
    ip      = { defs={0x08048480} expr=0x08048481[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v5920[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v5921[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5920[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v5921[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5920[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v5921[32]) }
      flags = { }
    address = { defs={0x08048480} expr=(add[32] v5920[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v5921[32]) }
      flags = { }
init mem:
null state
null state
0x8048481:mov    ebp, esp
registers:
    ax      = { v35817 }
    cx      = { v35818 }
    dx      = { v35819 }
    bx      = { v35820 }
    sp      = { v35821-0x4 }
    bp      = { v35821-0x4 }
    si      = { v35823 }
    di      = { v35824 }
    es      = { v35825 }
    cs      = { v35826 }
    ss      = { v35827 }
    ds      = { v35828 }
    fs      = { v35829 }
    gs      = { v35830 }
    cf      = { v35831 }
    ?1      = { v35832 }
    pf      = { v35833 }
    ?3      = { v35834 }
    af      = { v35835 }
    ?5      = { v35836 }
    zf      = { v35837 }
    sf      = { v35838 }
    tf      = { v35839 }
    if      = { v35840 }
    df      = { v35841 }
    of      = { v35842 }
    iopl0   = { v35843 }
    iopl1   = { v35844 }
    nt      = { v35845 }
    ?15     = { v35846 }
    rf      = { v35847 }
    vm      = { v35848 }
    ac      = { v35849 }
    vif     = { v35850 }
    vip     = { v35851 }
    id      = { v35852 }
    ?22     = { v35853 }
    ?23     = { v35854 }
    ?24     = { v35855 }
    ?25     = { v35856 }
    ?26     = { v35857 }
    ?27     = { v35858 }
    ?28     = { v35859 }
    ?29     = { v35860 }
    ?30     = { v35861 }
    ?31     = { v35862 }
    ip      = { 0x8048483 }
memory:
    address = { v35821-0x4 }
      value = { v35822 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v5916[32] }
    cx      = { defs={} expr=v5917[32] }
    dx      = { defs={} expr=v5918[32] }
    bx      = { defs={} expr=v5919[32] }
    sp      = { defs={0x08048480} expr=(add[32] v5920[32] -4[32]) }
    bp      = { defs={0x08048480,0x08048481} expr=(add[32] v5920[32] -4[32]) }
    si      = { defs={} expr=v5922[32] }
    di      = { defs={} expr=v5923[32] }
    es      = { defs={} expr=v5924[16] }
    cs      = { defs={} expr=v5925[16] }
    ss      = { defs={} expr=v5926[16] }
    ds      = { defs={} expr=v5927[16] }
    fs      = { defs={} expr=v5928[16] }
    gs      = { defs={} expr=v5929[16] }
    cf      = { defs={} expr=v5930[1] }
    ?1      = { defs={} expr=v5931[1] }
    pf      = { defs={} expr=v5932[1] }
    ?3      = { defs={} expr=v5933[1] }
    af      = { defs={} expr=v5934[1] }
    ?5      = { defs={} expr=v5935[1] }
    zf      = { defs={} expr=v5936[1] }
    sf      = { defs={} expr=v5937[1] }
    tf      = { defs={} expr=v5938[1] }
    if      = { defs={} expr=v5939[1] }
    df      = { defs={} expr=v5940[1] }
    of      = { defs={} expr=v5941[1] }
    iopl0   = { defs={} expr=v5942[1] }
    iopl1   = { defs={} expr=v5943[1] }
    nt      = { defs={} expr=v5944[1] }
    ?15     = { defs={} expr=v5945[1] }
    rf      = { defs={} expr=v5946[1] }
    vm      = { defs={} expr=v5947[1] }
    ac      = { defs={} expr=v5948[1] }
    vif     = { defs={} expr=v5949[1] }
    vip     = { defs={} expr=v5950[1] }
    id      = { defs={} expr=v5951[1] }
    ?22     = { defs={} expr=v5952[1] }
    ?23     = { defs={} expr=v5953[1] }
    ?24     = { defs={} expr=v5954[1] }
    ?25     = { defs={} expr=v5955[1] }
    ?26     = { defs={} expr=v5956[1] }
    ?27     = { defs={} expr=v5957[1] }
    ?28     = { defs={} expr=v5958[1] }
    ?29     = { defs={} expr=v5959[1] }
    ?30     = { defs={} expr=v5960[1] }
    ?31     = { defs={} expr=v5961[1] }
    ip      = { defs={0x08048480,0x08048481} expr=0x08048483[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v5920[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v5921[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5920[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v5921[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5920[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v5921[32]) }
      flags = { }
    address = { defs={0x08048480} expr=(add[32] v5920[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v5921[32]) }
      flags = { }
init mem:
null state
null state
0x8048483:sub    esp, 0x08
registers:
    ax      = { v35817 }
    cx      = { v35818 }
    dx      = { v35819 }
    bx      = { v35820 }
    sp      = { v35821-0xc }
    bp      = { v35821-0x4 }
    si      = { v35823 }
    di      = { v35824 }
    es      = { v35825 }
    cs      = { v35826 }
    ss      = { v35827 }
    ds      = { v35828 }
    fs      = { v35829 }
    gs      = { v35830 }
    cf      = { -v35928+0x1 }
    ?1      = { v35832 }
    pf      = { -v35918+0x1 }
    ?3      = { v35834 }
    af      = { -v35925+0x1 }
    ?5      = { v35836 }
    zf      = { v35923 }
    sf      = { v35921 }
    tf      = { v35839 }
    if      = { v35840 }
    df      = { v35841 }
    of      = { v35935 }
    iopl0   = { v35843 }
    iopl1   = { v35844 }
    nt      = { v35845 }
    ?15     = { v35846 }
    rf      = { v35847 }
    vm      = { v35848 }
    ac      = { v35849 }
    vif     = { v35850 }
    vip     = { v35851 }
    id      = { v35852 }
    ?22     = { v35853 }
    ?23     = { v35854 }
    ?24     = { v35855 }
    ?25     = { v35856 }
    ?26     = { v35857 }
    ?27     = { v35858 }
    ?28     = { v35859 }
    ?29     = { v35860 }
    ?30     = { v35861 }
    ?31     = { v35862 }
    ip      = { 0x8048486 }
memory:
    address = { v35821-0x4 }
      value = { v35822 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v5916[32] }
    cx      = { defs={} expr=v5917[32] }
    dx      = { defs={} expr=v5918[32] }
    bx      = { defs={} expr=v5919[32] }
    sp      = { defs={0x08048480,0x08048483} expr=(add[32] (add[32] v5920[32] -4[32]) -8[32]) }
    bp      = { defs={0x08048480,0x08048481} expr=(add[32] v5920[32] -4[32]) }
    si      = { defs={} expr=v5922[32] }
    di      = { defs={} expr=v5923[32] }
    es      = { defs={} expr=v5924[16] }
    cs      = { defs={} expr=v5925[16] }
    ss      = { defs={} expr=v5926[16] }
    ds      = { defs={} expr=v5927[16] }
    fs      = { defs={} expr=v5928[16] }
    gs      = { defs={} expr=v5929[16] }
    cf      = { defs={0x08048480,0x08048483} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v5920[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v5920[32] -4[32])) 4294967288[33])))))) }
    ?1      = { defs={} expr=v5931[1] }
    pf      = { defs={0x08048480,0x08048483} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5920[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5920[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5920[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5920[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5920[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5920[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5920[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5920[32] -4[32]) -8[32]))))))) }
    ?3      = { defs={} expr=v5933[1] }
    af      = { defs={0x08048480,0x08048483} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v5920[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v5920[32] -4[32])) 4294967288[33])))))) }
    ?5      = { defs={} expr=v5935[1] }
    zf      = { defs={0x08048480,0x08048483} expr=(zerop[1] (add[32] (add[32] v5920[32] -4[32]) -8[32])) }
    sf      = { defs={0x08048480,0x08048483} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v5920[32] -4[32]) -8[32])) }
    tf      = { defs={} expr=v5938[1] }
    if      = { defs={} expr=v5939[1] }
    df      = { defs={} expr=v5940[1] }
    of      = { defs={0x08048480,0x08048483} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v5920[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v5920[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v5920[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v5920[32] -4[32])) 4294967288[33])))))) }
    iopl0   = { defs={} expr=v5942[1] }
    iopl1   = { defs={} expr=v5943[1] }
    nt      = { defs={} expr=v5944[1] }
    ?15     = { defs={} expr=v5945[1] }
    rf      = { defs={} expr=v5946[1] }
    vm      = { defs={} expr=v5947[1] }
    ac      = { defs={} expr=v5948[1] }
    vif     = { defs={} expr=v5949[1] }
    vip     = { defs={} expr=v5950[1] }
    id      = { defs={} expr=v5951[1] }
    ?22     = { defs={} expr=v5952[1] }
    ?23     = { defs={} expr=v5953[1] }
    ?24     = { defs={} expr=v5954[1] }
    ?25     = { defs={} expr=v5955[1] }
    ?26     = { defs={} expr=v5956[1] }
    ?27     = { defs={} expr=v5957[1] }
    ?28     = { defs={} expr=v5958[1] }
    ?29     = { defs={} expr=v5959[1] }
    ?30     = { defs={} expr=v5960[1] }
    ?31     = { defs={} expr=v5961[1] }
    ip      = { defs={0x08048480,0x08048481,0x08048483} expr=0x08048486[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v5920[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v5921[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5920[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v5921[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5920[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v5921[32]) }
      flags = { }
    address = { defs={0x08048480} expr=(add[32] v5920[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v5921[32]) }
      flags = { }
init mem:
null state
null state
0x8048486:inc    DWORD PTR ds:[0x080496f8<.bss+4>]
registers:
    ax      = { v35817 }
    cx      = { v35818 }
    dx      = { v35819 }
    bx      = { v35820 }
    sp      = { v35821-0xc }
    bp      = { v35821-0x4 }
    si      = { v35823 }
    di      = { v35824 }
    es      = { v35825 }
    cs      = { v35826 }
    ss      = { v35827 }
    ds      = { v35828 }
    fs      = { v35829 }
    gs      = { v35830 }
    cf      = { -v35928+0x1 }
    ?1      = { v35832 }
    pf      = { -v35978+0x1 }
    ?3      = { v35834 }
    af      = { v35985 }
    ?5      = { v35836 }
    zf      = { v35983 }
    sf      = { v35981 }
    tf      = { v35839 }
    if      = { v35840 }
    df      = { v35841 }
    of      = { v35991 }
    iopl0   = { v35843 }
    iopl1   = { v35844 }
    nt      = { v35845 }
    ?15     = { v35846 }
    rf      = { v35847 }
    vm      = { v35848 }
    ac      = { v35849 }
    vif     = { v35850 }
    vip     = { v35851 }
    id      = { v35852 }
    ?22     = { v35853 }
    ?23     = { v35854 }
    ?24     = { v35855 }
    ?25     = { v35856 }
    ?26     = { v35857 }
    ?27     = { v35858 }
    ?28     = { v35859 }
    ?29     = { v35860 }
    ?30     = { v35861 }
    ?31     = { v35862 }
    ip      = { 0x804848c }
memory:
    address = { v35821-0x4 }
      value = { v35822 }
      flags = { size=4; clobbered }
    address = { 0x80496f8 }
      value = { v35943+0x1 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v5916[32] }
    cx      = { defs={} expr=v5917[32] }
    dx      = { defs={} expr=v5918[32] }
    bx      = { defs={} expr=v5919[32] }
    sp      = { defs={0x08048480,0x08048483} expr=(add[32] (add[32] v5920[32] -4[32]) -8[32]) }
    bp      = { defs={0x08048480,0x08048481} expr=(add[32] v5920[32] -4[32]) }
    si      = { defs={} expr=v5922[32] }
    di      = { defs={} expr=v5923[32] }
    es      = { defs={} expr=v5924[16] }
    cs      = { defs={} expr=v5925[16] }
    ss      = { defs={} expr=v5926[16] }
    ds      = { defs={} expr=v5927[16] }
    fs      = { defs={} expr=v5928[16] }
    gs      = { defs={} expr=v5929[16] }
    cf      = { defs={0x08048480,0x08048483} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v5920[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v5920[32] -4[32])) 4294967288[33])))))) }
    ?1      = { defs={} expr=v5931[1] }
    pf      = { defs={0x08048486} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6093[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6094[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6095[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6096[8]))) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6093[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6094[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6095[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6096[8]))) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6093[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6094[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6095[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6096[8]))) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6093[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6094[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6095[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6096[8]))) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6093[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6094[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6095[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6096[8]))) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6093[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6094[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6095[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6096[8]))) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6093[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6094[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6095[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6096[8]))) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6093[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6094[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6095[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6096[8]))) 1[32]))))))) }
    ?3      = { defs={} expr=v5933[1] }
    af      = { defs={0x08048486} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6093[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6094[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6095[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6096[8])))) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6093[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6094[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6095[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6096[8])))) 1[33]))))) }
    ?5      = { defs={} expr=v5935[1] }
    zf      = { defs={0x08048486} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6093[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6094[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6095[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6096[8]))) 1[32])) }
    sf      = { defs={0x08048486} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6093[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6094[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6095[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6096[8]))) 1[32])) }
    tf      = { defs={} expr=v5938[1] }
    if      = { defs={} expr=v5939[1] }
    df      = { defs={} expr=v5940[1] }
    of      = { defs={0x08048486} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6093[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6094[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6095[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6096[8])))) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6093[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6094[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6095[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6096[8])))) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6093[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6094[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6095[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6096[8])))) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6093[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6094[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6095[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6096[8])))) 1[33])))))) }
    iopl0   = { defs={} expr=v5942[1] }
    iopl1   = { defs={} expr=v5943[1] }
    nt      = { defs={} expr=v5944[1] }
    ?15     = { defs={} expr=v5945[1] }
    rf      = { defs={} expr=v5946[1] }
    vm      = { defs={} expr=v5947[1] }
    ac      = { defs={} expr=v5948[1] }
    vif     = { defs={} expr=v5949[1] }
    vip     = { defs={} expr=v5950[1] }
    id      = { defs={} expr=v5951[1] }
    ?22     = { defs={} expr=v5952[1] }
    ?23     = { defs={} expr=v5953[1] }
    ?24     = { defs={} expr=v5954[1] }
    ?25     = { defs={} expr=v5955[1] }
    ?26     = { defs={} expr=v5956[1] }
    ?27     = { defs={} expr=v5957[1] }
    ?28     = { defs={} expr=v5958[1] }
    ?29     = { defs={} expr=v5959[1] }
    ?30     = { defs={} expr=v5960[1] }
    ?31     = { defs={} expr=v5961[1] }
    ip      = { defs={0x08048480,0x08048481,0x08048483,0x08048486} expr=0x0804848c[32] }
memory:
    address = { defs={} expr=0x080496fb[32] }
      value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6093[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6094[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6095[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6096[8]))) 1[32])) }
      flags = { }
    address = { defs={} expr=0x080496fa[32] }
      value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6093[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6094[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6095[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6096[8]))) 1[32])) }
      flags = { }
    address = { defs={} expr=0x080496f9[32] }
      value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6093[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6094[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6095[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6096[8]))) 1[32])) }
      flags = { }
    address = { defs={0x08048486} expr=0x080496f8[32] }
      value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6093[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6094[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6095[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6096[8]))) 1[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5920[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v5921[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5920[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v5921[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5920[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v5921[32]) }
      flags = { }
    address = { defs={0x08048480} expr=(add[32] v5920[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v5921[32]) }
      flags = { }
init mem:
    address = { defs={} expr=0x080496fb[32] }
      value = { defs={} expr=v6096[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496fa[32] }
      value = { defs={} expr=v6095[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496f9[32] }
      value = { defs={} expr=v6094[8] }
      flags = { rdonly }
    address = { defs={0x08048486} expr=0x080496f8[32] }
      value = { defs={} expr=v6093[8] }
      flags = { rdonly }
null state
null state
0x804848c:mov    DWORD PTR ss:[esp], 0x080485d4<<StaticData@0x080485ca>+0x0a>
registers:
    ax      = { v35817 }
    cx      = { v35818 }
    dx      = { v35819 }
    bx      = { v35820 }
    sp      = { v35821-0xc }
    bp      = { v35821-0x4 }
    si      = { v35823 }
    di      = { v35824 }
    es      = { v35825 }
    cs      = { v35826 }
    ss      = { v35827 }
    ds      = { v35828 }
    fs      = { v35829 }
    gs      = { v35830 }
    cf      = { -v35928+0x1 }
    ?1      = { v35832 }
    pf      = { -v35978+0x1 }
    ?3      = { v35834 }
    af      = { v35985 }
    ?5      = { v35836 }
    zf      = { v35983 }
    sf      = { v35981 }
    tf      = { v35839 }
    if      = { v35840 }
    df      = { v35841 }
    of      = { v35991 }
    iopl0   = { v35843 }
    iopl1   = { v35844 }
    nt      = { v35845 }
    ?15     = { v35846 }
    rf      = { v35847 }
    vm      = { v35848 }
    ac      = { v35849 }
    vif     = { v35850 }
    vip     = { v35851 }
    id      = { v35852 }
    ?22     = { v35853 }
    ?23     = { v35854 }
    ?24     = { v35855 }
    ?25     = { v35856 }
    ?26     = { v35857 }
    ?27     = { v35858 }
    ?28     = { v35859 }
    ?29     = { v35860 }
    ?30     = { v35861 }
    ?31     = { v35862 }
    ip      = { 0x8048493 }
memory:
    address = { v35821-0x4 }
      value = { v35822 }
      flags = { size=4; clobbered }
    address = { 0x80496f8 }
      value = { v35943+0x1 }
      flags = { size=4; clobbered }
    address = { v35821-0xc }
      value = { 0x80485d4 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v5916[32] }
    cx      = { defs={} expr=v5917[32] }
    dx      = { defs={} expr=v5918[32] }
    bx      = { defs={} expr=v5919[32] }
    sp      = { defs={0x08048480,0x08048483} expr=(add[32] (add[32] v5920[32] -4[32]) -8[32]) }
    bp      = { defs={0x08048480,0x08048481} expr=(add[32] v5920[32] -4[32]) }
    si      = { defs={} expr=v5922[32] }
    di      = { defs={} expr=v5923[32] }
    es      = { defs={} expr=v5924[16] }
    cs      = { defs={} expr=v5925[16] }
    ss      = { defs={} expr=v5926[16] }
    ds      = { defs={} expr=v5927[16] }
    fs      = { defs={} expr=v5928[16] }
    gs      = { defs={} expr=v5929[16] }
    cf      = { defs={0x08048480,0x08048483} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v5920[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v5920[32] -4[32])) 4294967288[33])))))) }
    ?1      = { defs={} expr=v5931[1] }
    pf      = { defs={0x08048486} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6093[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6094[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6095[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6096[8]))) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6093[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6094[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6095[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6096[8]))) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6093[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6094[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6095[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6096[8]))) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6093[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6094[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6095[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6096[8]))) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6093[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6094[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6095[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6096[8]))) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6093[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6094[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6095[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6096[8]))) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6093[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6094[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6095[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6096[8]))) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6093[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6094[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6095[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6096[8]))) 1[32]))))))) }
    ?3      = { defs={} expr=v5933[1] }
    af      = { defs={0x08048486} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6093[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6094[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6095[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6096[8])))) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6093[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6094[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6095[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6096[8])))) 1[33]))))) }
    ?5      = { defs={} expr=v5935[1] }
    zf      = { defs={0x08048486} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6093[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6094[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6095[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6096[8]))) 1[32])) }
    sf      = { defs={0x08048486} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6093[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6094[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6095[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6096[8]))) 1[32])) }
    tf      = { defs={} expr=v5938[1] }
    if      = { defs={} expr=v5939[1] }
    df      = { defs={} expr=v5940[1] }
    of      = { defs={0x08048486} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6093[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6094[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6095[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6096[8])))) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6093[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6094[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6095[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6096[8])))) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6093[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6094[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6095[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6096[8])))) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6093[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6094[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6095[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6096[8])))) 1[33])))))) }
    iopl0   = { defs={} expr=v5942[1] }
    iopl1   = { defs={} expr=v5943[1] }
    nt      = { defs={} expr=v5944[1] }
    ?15     = { defs={} expr=v5945[1] }
    rf      = { defs={} expr=v5946[1] }
    vm      = { defs={} expr=v5947[1] }
    ac      = { defs={} expr=v5948[1] }
    vif     = { defs={} expr=v5949[1] }
    vip     = { defs={} expr=v5950[1] }
    id      = { defs={} expr=v5951[1] }
    ?22     = { defs={} expr=v5952[1] }
    ?23     = { defs={} expr=v5953[1] }
    ?24     = { defs={} expr=v5954[1] }
    ?25     = { defs={} expr=v5955[1] }
    ?26     = { defs={} expr=v5956[1] }
    ?27     = { defs={} expr=v5957[1] }
    ?28     = { defs={} expr=v5958[1] }
    ?29     = { defs={} expr=v5959[1] }
    ?30     = { defs={} expr=v5960[1] }
    ?31     = { defs={} expr=v5961[1] }
    ip      = { defs={0x08048480,0x08048481,0x08048483,0x08048486,0x0804848c} expr=0x08048493[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] v5920[32] -4[32]) -8[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v5920[32] -4[32]) -8[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v5920[32] -4[32]) -8[32]) 1[32]) }
      value = { defs={} expr=-123[8] }
      flags = { }
    address = { defs={0x08048480,0x08048483,0x0804848c} expr=(add[32] (add[32] v5920[32] -4[32]) -8[32]) }
      value = { defs={} expr=-44[8] }
      flags = { }
    address = { defs={} expr=0x080496fb[32] }
      value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6093[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6094[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6095[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6096[8]))) 1[32])) }
      flags = { }
    address = { defs={} expr=0x080496fa[32] }
      value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6093[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6094[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6095[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6096[8]))) 1[32])) }
      flags = { }
    address = { defs={} expr=0x080496f9[32] }
      value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6093[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6094[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6095[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6096[8]))) 1[32])) }
      flags = { }
    address = { defs={0x08048486} expr=0x080496f8[32] }
      value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6093[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6094[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6095[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6096[8]))) 1[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5920[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v5921[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5920[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v5921[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5920[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v5921[32]) }
      flags = { }
    address = { defs={0x08048480} expr=(add[32] v5920[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v5921[32]) }
      flags = { }
init mem:
    address = { defs={} expr=0x080496fb[32] }
      value = { defs={} expr=v6096[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496fa[32] }
      value = { defs={} expr=v6095[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496f9[32] }
      value = { defs={} expr=v6094[8] }
      flags = { rdonly }
    address = { defs={0x08048486} expr=0x080496f8[32] }
      value = { defs={} expr=v6093[8] }
      flags = { rdonly }
null state
null state
0x8048493:call   0x08048300<puts@plt>
registers:
    ax      = { v35817 }
    cx      = { v35818 }
    dx      = { v35819 }
    bx      = { v35820 }
    sp      = { v35821-0x10 }
    bp      = { v35821-0x4 }
    si      = { v35823 }
    di      = { v35824 }
    es      = { v35825 }
    cs      = { v35826 }
    ss      = { v35827 }
    ds      = { v35828 }
    fs      = { v35829 }
    gs      = { v35830 }
    cf      = { -v35928+0x1 }
    ?1      = { v35832 }
    pf      = { -v35978+0x1 }
    ?3      = { v35834 }
    af      = { v35985 }
    ?5      = { v35836 }
    zf      = { v35983 }
    sf      = { v35981 }
    tf      = { v35839 }
    if      = { v35840 }
    df      = { v35841 }
    of      = { v35991 }
    iopl0   = { v35843 }
    iopl1   = { v35844 }
    nt      = { v35845 }
    ?15     = { v35846 }
    rf      = { v35847 }
    vm      = { v35848 }
    ac      = { v35849 }
    vif     = { v35850 }
    vip     = { v35851 }
    id      = { v35852 }
    ?22     = { v35853 }
    ?23     = { v35854 }
    ?24     = { v35855 }
    ?25     = { v35856 }
    ?26     = { v35857 }
    ?27     = { v35858 }
    ?28     = { v35859 }
    ?29     = { v35860 }
    ?30     = { v35861 }
    ?31     = { v35862 }
    ip      = { 0x8048300 }
memory:
    address = { v35821-0x4 }
      value = { v35822 }
      flags = { size=4; clobbered }
    address = { 0x80496f8 }
      value = { v35943+0x1 }
      flags = { size=4; clobbered }
    address = { v35821-0xc }
      value = { 0x80485d4 }
      flags = { size=4 }
    address = { v35821-0x10 }
      value = { 0x8048498 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v5916[32] }
    cx      = { defs={} expr=v5917[32] }
    dx      = { defs={} expr=v5918[32] }
    bx      = { defs={} expr=v5919[32] }
    sp      = { defs={0x08048480,0x08048483,0x08048493} expr=(add[32] (add[32] (add[32] v5920[32] -4[32]) -8[32]) -4[32]) }
    bp      = { defs={0x08048480,0x08048481} expr=(add[32] v5920[32] -4[32]) }
    si      = { defs={} expr=v5922[32] }
    di      = { defs={} expr=v5923[32] }
    es      = { defs={} expr=v5924[16] }
    cs      = { defs={} expr=v5925[16] }
    ss      = { defs={} expr=v5926[16] }
    ds      = { defs={} expr=v5927[16] }
    fs      = { defs={} expr=v5928[16] }
    gs      = { defs={} expr=v5929[16] }
    cf      = { defs={0x08048480,0x08048483} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v5920[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v5920[32] -4[32])) 4294967288[33])))))) }
    ?1      = { defs={} expr=v5931[1] }
    pf      = { defs={0x08048486} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6093[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6094[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6095[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6096[8]))) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6093[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6094[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6095[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6096[8]))) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6093[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6094[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6095[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6096[8]))) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6093[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6094[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6095[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6096[8]))) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6093[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6094[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6095[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6096[8]))) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6093[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6094[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6095[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6096[8]))) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6093[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6094[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6095[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6096[8]))) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6093[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6094[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6095[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6096[8]))) 1[32]))))))) }
    ?3      = { defs={} expr=v5933[1] }
    af      = { defs={0x08048486} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6093[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6094[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6095[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6096[8])))) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6093[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6094[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6095[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6096[8])))) 1[33]))))) }
    ?5      = { defs={} expr=v5935[1] }
    zf      = { defs={0x08048486} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6093[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6094[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6095[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6096[8]))) 1[32])) }
    sf      = { defs={0x08048486} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6093[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6094[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6095[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6096[8]))) 1[32])) }
    tf      = { defs={} expr=v5938[1] }
    if      = { defs={} expr=v5939[1] }
    df      = { defs={} expr=v5940[1] }
    of      = { defs={0x08048486} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6093[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6094[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6095[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6096[8])))) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6093[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6094[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6095[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6096[8])))) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6093[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6094[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6095[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6096[8])))) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6093[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6094[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6095[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6096[8])))) 1[33])))))) }
    iopl0   = { defs={} expr=v5942[1] }
    iopl1   = { defs={} expr=v5943[1] }
    nt      = { defs={} expr=v5944[1] }
    ?15     = { defs={} expr=v5945[1] }
    rf      = { defs={} expr=v5946[1] }
    vm      = { defs={} expr=v5947[1] }
    ac      = { defs={} expr=v5948[1] }
    vif     = { defs={} expr=v5949[1] }
    vip     = { defs={} expr=v5950[1] }
    id      = { defs={} expr=v5951[1] }
    ?22     = { defs={} expr=v5952[1] }
    ?23     = { defs={} expr=v5953[1] }
    ?24     = { defs={} expr=v5954[1] }
    ?25     = { defs={} expr=v5955[1] }
    ?26     = { defs={} expr=v5956[1] }
    ?27     = { defs={} expr=v5957[1] }
    ?28     = { defs={} expr=v5958[1] }
    ?29     = { defs={} expr=v5959[1] }
    ?30     = { defs={} expr=v5960[1] }
    ?31     = { defs={} expr=v5961[1] }
    ip      = { defs={0x08048493} expr=0x08048300[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5920[32] -4[32]) -8[32]) -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5920[32] -4[32]) -8[32]) -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5920[32] -4[32]) -8[32]) -4[32]) 1[32]) }
      value = { defs={} expr=-124[8] }
      flags = { }
    address = { defs={0x08048480,0x08048483,0x08048493} expr=(add[32] (add[32] (add[32] v5920[32] -4[32]) -8[32]) -4[32]) }
      value = { defs={} expr=-104[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v5920[32] -4[32]) -8[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v5920[32] -4[32]) -8[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v5920[32] -4[32]) -8[32]) 1[32]) }
      value = { defs={} expr=-123[8] }
      flags = { }
    address = { defs={0x08048480,0x08048483,0x0804848c} expr=(add[32] (add[32] v5920[32] -4[32]) -8[32]) }
      value = { defs={} expr=-44[8] }
      flags = { }
    address = { defs={} expr=0x080496fb[32] }
      value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6093[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6094[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6095[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6096[8]))) 1[32])) }
      flags = { }
    address = { defs={} expr=0x080496fa[32] }
      value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6093[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6094[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6095[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6096[8]))) 1[32])) }
      flags = { }
    address = { defs={} expr=0x080496f9[32] }
      value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6093[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6094[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6095[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6096[8]))) 1[32])) }
      flags = { }
    address = { defs={0x08048486} expr=0x080496f8[32] }
      value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6093[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6094[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6095[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6096[8]))) 1[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5920[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v5921[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5920[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v5921[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5920[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v5921[32]) }
      flags = { }
    address = { defs={0x08048480} expr=(add[32] v5920[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v5921[32]) }
      flags = { }
init mem:
    address = { defs={} expr=0x080496fb[32] }
      value = { defs={} expr=v6096[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496fa[32] }
      value = { defs={} expr=v6095[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496f9[32] }
      value = { defs={} expr=v6094[8] }
      flags = { rdonly }
    address = { defs={0x08048486} expr=0x080496f8[32] }
      value = { defs={} expr=v6093[8] }
      flags = { rdonly }
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048498:mov    DWORD PTR ss:[esp], 0x00000000
registers:
    ax      = { v36060 }
    cx      = { v36061 }
    dx      = { v36062 }
    bx      = { v36063 }
    sp      = { v36064 }
    bp      = { v36065 }
    si      = { v36066 }
    di      = { v36067 }
    es      = { v36068 }
    cs      = { v36069 }
    ss      = { v36070 }
    ds      = { v36071 }
    fs      = { v36072 }
    gs      = { v36073 }
    cf      = { v36074 }
    ?1      = { v36075 }
    pf      = { v36076 }
    ?3      = { v36077 }
    af      = { v36078 }
    ?5      = { v36079 }
    zf      = { v36080 }
    sf      = { v36081 }
    tf      = { v36082 }
    if      = { v36083 }
    df      = { v36084 }
    of      = { v36085 }
    iopl0   = { v36086 }
    iopl1   = { v36087 }
    nt      = { v36088 }
    ?15     = { v36089 }
    rf      = { v36090 }
    vm      = { v36091 }
    ac      = { v36092 }
    vif     = { v36093 }
    vip     = { v36094 }
    id      = { v36095 }
    ?22     = { v36096 }
    ?23     = { v36097 }
    ?24     = { v36098 }
    ?25     = { v36099 }
    ?26     = { v36100 }
    ?27     = { v36101 }
    ?28     = { v36102 }
    ?29     = { v36103 }
    ?30     = { v36104 }
    ?31     = { v36105 }
    ip      = { 0x804849f }
memory:
    address = { v36064 }
      value = { 0x0 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v6251[32] }
    cx      = { defs={} expr=v6252[32] }
    dx      = { defs={} expr=v6253[32] }
    bx      = { defs={} expr=v6254[32] }
    sp      = { defs={} expr=v6255[32] }
    bp      = { defs={} expr=v6256[32] }
    si      = { defs={} expr=v6257[32] }
    di      = { defs={} expr=v6258[32] }
    es      = { defs={} expr=v6259[16] }
    cs      = { defs={} expr=v6260[16] }
    ss      = { defs={} expr=v6261[16] }
    ds      = { defs={} expr=v6262[16] }
    fs      = { defs={} expr=v6263[16] }
    gs      = { defs={} expr=v6264[16] }
    cf      = { defs={} expr=v6265[1] }
    ?1      = { defs={} expr=v6266[1] }
    pf      = { defs={} expr=v6267[1] }
    ?3      = { defs={} expr=v6268[1] }
    af      = { defs={} expr=v6269[1] }
    ?5      = { defs={} expr=v6270[1] }
    zf      = { defs={} expr=v6271[1] }
    sf      = { defs={} expr=v6272[1] }
    tf      = { defs={} expr=v6273[1] }
    if      = { defs={} expr=v6274[1] }
    df      = { defs={} expr=v6275[1] }
    of      = { defs={} expr=v6276[1] }
    iopl0   = { defs={} expr=v6277[1] }
    iopl1   = { defs={} expr=v6278[1] }
    nt      = { defs={} expr=v6279[1] }
    ?15     = { defs={} expr=v6280[1] }
    rf      = { defs={} expr=v6281[1] }
    vm      = { defs={} expr=v6282[1] }
    ac      = { defs={} expr=v6283[1] }
    vif     = { defs={} expr=v6284[1] }
    vip     = { defs={} expr=v6285[1] }
    id      = { defs={} expr=v6286[1] }
    ?22     = { defs={} expr=v6287[1] }
    ?23     = { defs={} expr=v6288[1] }
    ?24     = { defs={} expr=v6289[1] }
    ?25     = { defs={} expr=v6290[1] }
    ?26     = { defs={} expr=v6291[1] }
    ?27     = { defs={} expr=v6292[1] }
    ?28     = { defs={} expr=v6293[1] }
    ?29     = { defs={} expr=v6294[1] }
    ?30     = { defs={} expr=v6295[1] }
    ?31     = { defs={} expr=v6296[1] }
    ip      = { defs={0x08048498} expr=0x0804849f[32] }
memory:
    address = { defs={} expr=(add[32] v6255[32] 3[32]) }
      value = { defs={} expr=0[8] }
      flags = { }
    address = { defs={} expr=(add[32] v6255[32] 2[32]) }
      value = { defs={} expr=0[8] }
      flags = { }
    address = { defs={} expr=(add[32] v6255[32] 1[32]) }
      value = { defs={} expr=0[8] }
      flags = { }
    address = { defs={0x08048498} expr=v6255[32] }
      value = { defs={} expr=0[8] }
      flags = { }
init mem:
null state
null state
0x804849f:call   0x08048320<_exit@plt>
registers:
    ax      = { v36060 }
    cx      = { v36061 }
    dx      = { v36062 }
    bx      = { v36063 }
    sp      = { v36064-0x4 }
    bp      = { v36065 }
    si      = { v36066 }
    di      = { v36067 }
    es      = { v36068 }
    cs      = { v36069 }
    ss      = { v36070 }
    ds      = { v36071 }
    fs      = { v36072 }
    gs      = { v36073 }
    cf      = { v36074 }
    ?1      = { v36075 }
    pf      = { v36076 }
    ?3      = { v36077 }
    af      = { v36078 }
    ?5      = { v36079 }
    zf      = { v36080 }
    sf      = { v36081 }
    tf      = { v36082 }
    if      = { v36083 }
    df      = { v36084 }
    of      = { v36085 }
    iopl0   = { v36086 }
    iopl1   = { v36087 }
    nt      = { v36088 }
    ?15     = { v36089 }
    rf      = { v36090 }
    vm      = { v36091 }
    ac      = { v36092 }
    vif     = { v36093 }
    vip     = { v36094 }
    id      = { v36095 }
    ?22     = { v36096 }
    ?23     = { v36097 }
    ?24     = { v36098 }
    ?25     = { v36099 }
    ?26     = { v36100 }
    ?27     = { v36101 }
    ?28     = { v36102 }
    ?29     = { v36103 }
    ?30     = { v36104 }
    ?31     = { v36105 }
    ip      = { 0x8048320 }
memory:
    address = { v36064 }
      value = { 0x0 }
      flags = { size=4 }
    address = { v36064-0x4 }
      value = { 0x80484a4 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v6251[32] }
    cx      = { defs={} expr=v6252[32] }
    dx      = { defs={} expr=v6253[32] }
    bx      = { defs={} expr=v6254[32] }
    sp      = { defs={0x0804849f} expr=(add[32] v6255[32] -4[32]) }
    bp      = { defs={} expr=v6256[32] }
    si      = { defs={} expr=v6257[32] }
    di      = { defs={} expr=v6258[32] }
    es      = { defs={} expr=v6259[16] }
    cs      = { defs={} expr=v6260[16] }
    ss      = { defs={} expr=v6261[16] }
    ds      = { defs={} expr=v6262[16] }
    fs      = { defs={} expr=v6263[16] }
    gs      = { defs={} expr=v6264[16] }
    cf      = { defs={} expr=v6265[1] }
    ?1      = { defs={} expr=v6266[1] }
    pf      = { defs={} expr=v6267[1] }
    ?3      = { defs={} expr=v6268[1] }
    af      = { defs={} expr=v6269[1] }
    ?5      = { defs={} expr=v6270[1] }
    zf      = { defs={} expr=v6271[1] }
    sf      = { defs={} expr=v6272[1] }
    tf      = { defs={} expr=v6273[1] }
    if      = { defs={} expr=v6274[1] }
    df      = { defs={} expr=v6275[1] }
    of      = { defs={} expr=v6276[1] }
    iopl0   = { defs={} expr=v6277[1] }
    iopl1   = { defs={} expr=v6278[1] }
    nt      = { defs={} expr=v6279[1] }
    ?15     = { defs={} expr=v6280[1] }
    rf      = { defs={} expr=v6281[1] }
    vm      = { defs={} expr=v6282[1] }
    ac      = { defs={} expr=v6283[1] }
    vif     = { defs={} expr=v6284[1] }
    vip     = { defs={} expr=v6285[1] }
    id      = { defs={} expr=v6286[1] }
    ?22     = { defs={} expr=v6287[1] }
    ?23     = { defs={} expr=v6288[1] }
    ?24     = { defs={} expr=v6289[1] }
    ?25     = { defs={} expr=v6290[1] }
    ?26     = { defs={} expr=v6291[1] }
    ?27     = { defs={} expr=v6292[1] }
    ?28     = { defs={} expr=v6293[1] }
    ?29     = { defs={} expr=v6294[1] }
    ?30     = { defs={} expr=v6295[1] }
    ?31     = { defs={} expr=v6296[1] }
    ip      = { defs={0x0804849f} expr=0x08048320[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v6255[32] -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v6255[32] -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v6255[32] -4[32]) 1[32]) }
      value = { defs={} expr=-124[8] }
      flags = { }
    address = { defs={0x0804849f} expr=(add[32] v6255[32] -4[32]) }
      value = { defs={} expr=-92[8] }
      flags = { }
    address = { defs={} expr=(add[32] v6255[32] 3[32]) }
      value = { defs={} expr=0[8] }
      flags = { }
    address = { defs={} expr=(add[32] v6255[32] 2[32]) }
      value = { defs={} expr=0[8] }
      flags = { }
    address = { defs={} expr=(add[32] v6255[32] 1[32]) }
      value = { defs={} expr=0[8] }
      flags = { }
    address = { defs={0x08048498} expr=v6255[32] }
      value = { defs={} expr=0[8] }
      flags = { }
init mem:
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80484b0:push   ebp
registers:
    ax      = { v36172 }
    cx      = { v36173 }
    dx      = { v36174 }
    bx      = { v36175 }
    sp      = { v36176-0x4 }
    bp      = { v36177 }
    si      = { v36178 }
    di      = { v36179 }
    es      = { v36180 }
    cs      = { v36181 }
    ss      = { v36182 }
    ds      = { v36183 }
    fs      = { v36184 }
    gs      = { v36185 }
    cf      = { v36186 }
    ?1      = { v36187 }
    pf      = { v36188 }
    ?3      = { v36189 }
    af      = { v36190 }
    ?5      = { v36191 }
    zf      = { v36192 }
    sf      = { v36193 }
    tf      = { v36194 }
    if      = { v36195 }
    df      = { v36196 }
    of      = { v36197 }
    iopl0   = { v36198 }
    iopl1   = { v36199 }
    nt      = { v36200 }
    ?15     = { v36201 }
    rf      = { v36202 }
    vm      = { v36203 }
    ac      = { v36204 }
    vif     = { v36205 }
    vip     = { v36206 }
    id      = { v36207 }
    ?22     = { v36208 }
    ?23     = { v36209 }
    ?24     = { v36210 }
    ?25     = { v36211 }
    ?26     = { v36212 }
    ?27     = { v36213 }
    ?28     = { v36214 }
    ?29     = { v36215 }
    ?30     = { v36216 }
    ?31     = { v36217 }
    ip      = { 0x80484b1 }
memory:
    address = { v36176-0x4 }
      value = { v36177 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v6377[32] }
    cx      = { defs={} expr=v6378[32] }
    dx      = { defs={} expr=v6379[32] }
    bx      = { defs={} expr=v6380[32] }
    sp      = { defs={0x080484b0} expr=(add[32] v6381[32] -4[32]) }
    bp      = { defs={} expr=v6382[32] }
    si      = { defs={} expr=v6383[32] }
    di      = { defs={} expr=v6384[32] }
    es      = { defs={} expr=v6385[16] }
    cs      = { defs={} expr=v6386[16] }
    ss      = { defs={} expr=v6387[16] }
    ds      = { defs={} expr=v6388[16] }
    fs      = { defs={} expr=v6389[16] }
    gs      = { defs={} expr=v6390[16] }
    cf      = { defs={} expr=v6391[1] }
    ?1      = { defs={} expr=v6392[1] }
    pf      = { defs={} expr=v6393[1] }
    ?3      = { defs={} expr=v6394[1] }
    af      = { defs={} expr=v6395[1] }
    ?5      = { defs={} expr=v6396[1] }
    zf      = { defs={} expr=v6397[1] }
    sf      = { defs={} expr=v6398[1] }
    tf      = { defs={} expr=v6399[1] }
    if      = { defs={} expr=v6400[1] }
    df      = { defs={} expr=v6401[1] }
    of      = { defs={} expr=v6402[1] }
    iopl0   = { defs={} expr=v6403[1] }
    iopl1   = { defs={} expr=v6404[1] }
    nt      = { defs={} expr=v6405[1] }
    ?15     = { defs={} expr=v6406[1] }
    rf      = { defs={} expr=v6407[1] }
    vm      = { defs={} expr=v6408[1] }
    ac      = { defs={} expr=v6409[1] }
    vif     = { defs={} expr=v6410[1] }
    vip     = { defs={} expr=v6411[1] }
    id      = { defs={} expr=v6412[1] }
    ?22     = { defs={} expr=v6413[1] }
    ?23     = { defs={} expr=v6414[1] }
    ?24     = { defs={} expr=v6415[1] }
    ?25     = { defs={} expr=v6416[1] }
    ?26     = { defs={} expr=v6417[1] }
    ?27     = { defs={} expr=v6418[1] }
    ?28     = { defs={} expr=v6419[1] }
    ?29     = { defs={} expr=v6420[1] }
    ?30     = { defs={} expr=v6421[1] }
    ?31     = { defs={} expr=v6422[1] }
    ip      = { defs={0x080484b0} expr=0x080484b1[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v6381[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v6382[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v6381[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v6382[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v6381[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v6382[32]) }
      flags = { }
    address = { defs={0x080484b0} expr=(add[32] v6381[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v6382[32]) }
      flags = { }
init mem:
null state
null state
0x80484b1:mov    ebp, esp
registers:
    ax      = { v36172 }
    cx      = { v36173 }
    dx      = { v36174 }
    bx      = { v36175 }
    sp      = { v36176-0x4 }
    bp      = { v36176-0x4 }
    si      = { v36178 }
    di      = { v36179 }
    es      = { v36180 }
    cs      = { v36181 }
    ss      = { v36182 }
    ds      = { v36183 }
    fs      = { v36184 }
    gs      = { v36185 }
    cf      = { v36186 }
    ?1      = { v36187 }
    pf      = { v36188 }
    ?3      = { v36189 }
    af      = { v36190 }
    ?5      = { v36191 }
    zf      = { v36192 }
    sf      = { v36193 }
    tf      = { v36194 }
    if      = { v36195 }
    df      = { v36196 }
    of      = { v36197 }
    iopl0   = { v36198 }
    iopl1   = { v36199 }
    nt      = { v36200 }
    ?15     = { v36201 }
    rf      = { v36202 }
    vm      = { v36203 }
    ac      = { v36204 }
    vif     = { v36205 }
    vip     = { v36206 }
    id      = { v36207 }
    ?22     = { v36208 }
    ?23     = { v36209 }
    ?24     = { v36210 }
    ?25     = { v36211 }
    ?26     = { v36212 }
    ?27     = { v36213 }
    ?28     = { v36214 }
    ?29     = { v36215 }
    ?30     = { v36216 }
    ?31     = { v36217 }
    ip      = { 0x80484b3 }
memory:
    address = { v36176-0x4 }
      value = { v36177 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v6377[32] }
    cx      = { defs={} expr=v6378[32] }
    dx      = { defs={} expr=v6379[32] }
    bx      = { defs={} expr=v6380[32] }
    sp      = { defs={0x080484b0} expr=(add[32] v6381[32] -4[32]) }
    bp      = { defs={0x080484b0,0x080484b1} expr=(add[32] v6381[32] -4[32]) }
    si      = { defs={} expr=v6383[32] }
    di      = { defs={} expr=v6384[32] }
    es      = { defs={} expr=v6385[16] }
    cs      = { defs={} expr=v6386[16] }
    ss      = { defs={} expr=v6387[16] }
    ds      = { defs={} expr=v6388[16] }
    fs      = { defs={} expr=v6389[16] }
    gs      = { defs={} expr=v6390[16] }
    cf      = { defs={} expr=v6391[1] }
    ?1      = { defs={} expr=v6392[1] }
    pf      = { defs={} expr=v6393[1] }
    ?3      = { defs={} expr=v6394[1] }
    af      = { defs={} expr=v6395[1] }
    ?5      = { defs={} expr=v6396[1] }
    zf      = { defs={} expr=v6397[1] }
    sf      = { defs={} expr=v6398[1] }
    tf      = { defs={} expr=v6399[1] }
    if      = { defs={} expr=v6400[1] }
    df      = { defs={} expr=v6401[1] }
    of      = { defs={} expr=v6402[1] }
    iopl0   = { defs={} expr=v6403[1] }
    iopl1   = { defs={} expr=v6404[1] }
    nt      = { defs={} expr=v6405[1] }
    ?15     = { defs={} expr=v6406[1] }
    rf      = { defs={} expr=v6407[1] }
    vm      = { defs={} expr=v6408[1] }
    ac      = { defs={} expr=v6409[1] }
    vif     = { defs={} expr=v6410[1] }
    vip     = { defs={} expr=v6411[1] }
    id      = { defs={} expr=v6412[1] }
    ?22     = { defs={} expr=v6413[1] }
    ?23     = { defs={} expr=v6414[1] }
    ?24     = { defs={} expr=v6415[1] }
    ?25     = { defs={} expr=v6416[1] }
    ?26     = { defs={} expr=v6417[1] }
    ?27     = { defs={} expr=v6418[1] }
    ?28     = { defs={} expr=v6419[1] }
    ?29     = { defs={} expr=v6420[1] }
    ?30     = { defs={} expr=v6421[1] }
    ?31     = { defs={} expr=v6422[1] }
    ip      = { defs={0x080484b0,0x080484b1} expr=0x080484b3[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v6381[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v6382[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v6381[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v6382[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v6381[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v6382[32]) }
      flags = { }
    address = { defs={0x080484b0} expr=(add[32] v6381[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v6382[32]) }
      flags = { }
init mem:
null state
null state
0x80484b3:push   edi
registers:
    ax      = { v36172 }
    cx      = { v36173 }
    dx      = { v36174 }
    bx      = { v36175 }
    sp      = { v36176-0x8 }
    bp      = { v36176-0x4 }
    si      = { v36178 }
    di      = { v36179 }
    es      = { v36180 }
    cs      = { v36181 }
    ss      = { v36182 }
    ds      = { v36183 }
    fs      = { v36184 }
    gs      = { v36185 }
    cf      = { v36186 }
    ?1      = { v36187 }
    pf      = { v36188 }
    ?3      = { v36189 }
    af      = { v36190 }
    ?5      = { v36191 }
    zf      = { v36192 }
    sf      = { v36193 }
    tf      = { v36194 }
    if      = { v36195 }
    df      = { v36196 }
    of      = { v36197 }
    iopl0   = { v36198 }
    iopl1   = { v36199 }
    nt      = { v36200 }
    ?15     = { v36201 }
    rf      = { v36202 }
    vm      = { v36203 }
    ac      = { v36204 }
    vif     = { v36205 }
    vip     = { v36206 }
    id      = { v36207 }
    ?22     = { v36208 }
    ?23     = { v36209 }
    ?24     = { v36210 }
    ?25     = { v36211 }
    ?26     = { v36212 }
    ?27     = { v36213 }
    ?28     = { v36214 }
    ?29     = { v36215 }
    ?30     = { v36216 }
    ?31     = { v36217 }
    ip      = { 0x80484b4 }
memory:
    address = { v36176-0x4 }
      value = { v36177 }
      flags = { size=4 }
    address = { v36176-0x8 }
      value = { v36179 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v6377[32] }
    cx      = { defs={} expr=v6378[32] }
    dx      = { defs={} expr=v6379[32] }
    bx      = { defs={} expr=v6380[32] }
    sp      = { defs={0x080484b0,0x080484b3} expr=(add[32] (add[32] v6381[32] -4[32]) -4[32]) }
    bp      = { defs={0x080484b0,0x080484b1} expr=(add[32] v6381[32] -4[32]) }
    si      = { defs={} expr=v6383[32] }
    di      = { defs={} expr=v6384[32] }
    es      = { defs={} expr=v6385[16] }
    cs      = { defs={} expr=v6386[16] }
    ss      = { defs={} expr=v6387[16] }
    ds      = { defs={} expr=v6388[16] }
    fs      = { defs={} expr=v6389[16] }
    gs      = { defs={} expr=v6390[16] }
    cf      = { defs={} expr=v6391[1] }
    ?1      = { defs={} expr=v6392[1] }
    pf      = { defs={} expr=v6393[1] }
    ?3      = { defs={} expr=v6394[1] }
    af      = { defs={} expr=v6395[1] }
    ?5      = { defs={} expr=v6396[1] }
    zf      = { defs={} expr=v6397[1] }
    sf      = { defs={} expr=v6398[1] }
    tf      = { defs={} expr=v6399[1] }
    if      = { defs={} expr=v6400[1] }
    df      = { defs={} expr=v6401[1] }
    of      = { defs={} expr=v6402[1] }
    iopl0   = { defs={} expr=v6403[1] }
    iopl1   = { defs={} expr=v6404[1] }
    nt      = { defs={} expr=v6405[1] }
    ?15     = { defs={} expr=v6406[1] }
    rf      = { defs={} expr=v6407[1] }
    vm      = { defs={} expr=v6408[1] }
    ac      = { defs={} expr=v6409[1] }
    vif     = { defs={} expr=v6410[1] }
    vip     = { defs={} expr=v6411[1] }
    id      = { defs={} expr=v6412[1] }
    ?22     = { defs={} expr=v6413[1] }
    ?23     = { defs={} expr=v6414[1] }
    ?24     = { defs={} expr=v6415[1] }
    ?25     = { defs={} expr=v6416[1] }
    ?26     = { defs={} expr=v6417[1] }
    ?27     = { defs={} expr=v6418[1] }
    ?28     = { defs={} expr=v6419[1] }
    ?29     = { defs={} expr=v6420[1] }
    ?30     = { defs={} expr=v6421[1] }
    ?31     = { defs={} expr=v6422[1] }
    ip      = { defs={0x080484b0,0x080484b1,0x080484b3} expr=0x080484b4[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v6384[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v6384[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v6384[32]) }
      flags = { }
    address = { defs={0x080484b0,0x080484b3} expr=(add[32] (add[32] v6381[32] -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v6384[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v6381[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v6382[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v6381[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v6382[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v6381[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v6382[32]) }
      flags = { }
    address = { defs={0x080484b0} expr=(add[32] v6381[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v6382[32]) }
      flags = { }
init mem:
null state
null state
0x80484b4:push   esi
registers:
    ax      = { v36172 }
    cx      = { v36173 }
    dx      = { v36174 }
    bx      = { v36175 }
    sp      = { v36176-0xc }
    bp      = { v36176-0x4 }
    si      = { v36178 }
    di      = { v36179 }
    es      = { v36180 }
    cs      = { v36181 }
    ss      = { v36182 }
    ds      = { v36183 }
    fs      = { v36184 }
    gs      = { v36185 }
    cf      = { v36186 }
    ?1      = { v36187 }
    pf      = { v36188 }
    ?3      = { v36189 }
    af      = { v36190 }
    ?5      = { v36191 }
    zf      = { v36192 }
    sf      = { v36193 }
    tf      = { v36194 }
    if      = { v36195 }
    df      = { v36196 }
    of      = { v36197 }
    iopl0   = { v36198 }
    iopl1   = { v36199 }
    nt      = { v36200 }
    ?15     = { v36201 }
    rf      = { v36202 }
    vm      = { v36203 }
    ac      = { v36204 }
    vif     = { v36205 }
    vip     = { v36206 }
    id      = { v36207 }
    ?22     = { v36208 }
    ?23     = { v36209 }
    ?24     = { v36210 }
    ?25     = { v36211 }
    ?26     = { v36212 }
    ?27     = { v36213 }
    ?28     = { v36214 }
    ?29     = { v36215 }
    ?30     = { v36216 }
    ?31     = { v36217 }
    ip      = { 0x80484b5 }
memory:
    address = { v36176-0x4 }
      value = { v36177 }
      flags = { size=4 }
    address = { v36176-0x8 }
      value = { v36179 }
      flags = { size=4 }
    address = { v36176-0xc }
      value = { v36178 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v6377[32] }
    cx      = { defs={} expr=v6378[32] }
    dx      = { defs={} expr=v6379[32] }
    bx      = { defs={} expr=v6380[32] }
    sp      = { defs={0x080484b0,0x080484b3,0x080484b4} expr=(add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) }
    bp      = { defs={0x080484b0,0x080484b1} expr=(add[32] v6381[32] -4[32]) }
    si      = { defs={} expr=v6383[32] }
    di      = { defs={} expr=v6384[32] }
    es      = { defs={} expr=v6385[16] }
    cs      = { defs={} expr=v6386[16] }
    ss      = { defs={} expr=v6387[16] }
    ds      = { defs={} expr=v6388[16] }
    fs      = { defs={} expr=v6389[16] }
    gs      = { defs={} expr=v6390[16] }
    cf      = { defs={} expr=v6391[1] }
    ?1      = { defs={} expr=v6392[1] }
    pf      = { defs={} expr=v6393[1] }
    ?3      = { defs={} expr=v6394[1] }
    af      = { defs={} expr=v6395[1] }
    ?5      = { defs={} expr=v6396[1] }
    zf      = { defs={} expr=v6397[1] }
    sf      = { defs={} expr=v6398[1] }
    tf      = { defs={} expr=v6399[1] }
    if      = { defs={} expr=v6400[1] }
    df      = { defs={} expr=v6401[1] }
    of      = { defs={} expr=v6402[1] }
    iopl0   = { defs={} expr=v6403[1] }
    iopl1   = { defs={} expr=v6404[1] }
    nt      = { defs={} expr=v6405[1] }
    ?15     = { defs={} expr=v6406[1] }
    rf      = { defs={} expr=v6407[1] }
    vm      = { defs={} expr=v6408[1] }
    ac      = { defs={} expr=v6409[1] }
    vif     = { defs={} expr=v6410[1] }
    vip     = { defs={} expr=v6411[1] }
    id      = { defs={} expr=v6412[1] }
    ?22     = { defs={} expr=v6413[1] }
    ?23     = { defs={} expr=v6414[1] }
    ?24     = { defs={} expr=v6415[1] }
    ?25     = { defs={} expr=v6416[1] }
    ?26     = { defs={} expr=v6417[1] }
    ?27     = { defs={} expr=v6418[1] }
    ?28     = { defs={} expr=v6419[1] }
    ?29     = { defs={} expr=v6420[1] }
    ?30     = { defs={} expr=v6421[1] }
    ?31     = { defs={} expr=v6422[1] }
    ip      = { defs={0x080484b0,0x080484b1,0x080484b3,0x080484b4} expr=0x080484b5[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v6383[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v6383[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v6383[32]) }
      flags = { }
    address = { defs={0x080484b0,0x080484b3,0x080484b4} expr=(add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v6383[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v6384[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v6384[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v6384[32]) }
      flags = { }
    address = { defs={0x080484b0,0x080484b3} expr=(add[32] (add[32] v6381[32] -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v6384[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v6381[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v6382[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v6381[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v6382[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v6381[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v6382[32]) }
      flags = { }
    address = { defs={0x080484b0} expr=(add[32] v6381[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v6382[32]) }
      flags = { }
init mem:
null state
null state
0x80484b5:push   ebx
registers:
    ax      = { v36172 }
    cx      = { v36173 }
    dx      = { v36174 }
    bx      = { v36175 }
    sp      = { v36176-0x10 }
    bp      = { v36176-0x4 }
    si      = { v36178 }
    di      = { v36179 }
    es      = { v36180 }
    cs      = { v36181 }
    ss      = { v36182 }
    ds      = { v36183 }
    fs      = { v36184 }
    gs      = { v36185 }
    cf      = { v36186 }
    ?1      = { v36187 }
    pf      = { v36188 }
    ?3      = { v36189 }
    af      = { v36190 }
    ?5      = { v36191 }
    zf      = { v36192 }
    sf      = { v36193 }
    tf      = { v36194 }
    if      = { v36195 }
    df      = { v36196 }
    of      = { v36197 }
    iopl0   = { v36198 }
    iopl1   = { v36199 }
    nt      = { v36200 }
    ?15     = { v36201 }
    rf      = { v36202 }
    vm      = { v36203 }
    ac      = { v36204 }
    vif     = { v36205 }
    vip     = { v36206 }
    id      = { v36207 }
    ?22     = { v36208 }
    ?23     = { v36209 }
    ?24     = { v36210 }
    ?25     = { v36211 }
    ?26     = { v36212 }
    ?27     = { v36213 }
    ?28     = { v36214 }
    ?29     = { v36215 }
    ?30     = { v36216 }
    ?31     = { v36217 }
    ip      = { 0x80484b6 }
memory:
    address = { v36176-0x4 }
      value = { v36177 }
      flags = { size=4 }
    address = { v36176-0x8 }
      value = { v36179 }
      flags = { size=4 }
    address = { v36176-0xc }
      value = { v36178 }
      flags = { size=4 }
    address = { v36176-0x10 }
      value = { v36175 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v6377[32] }
    cx      = { defs={} expr=v6378[32] }
    dx      = { defs={} expr=v6379[32] }
    bx      = { defs={} expr=v6380[32] }
    sp      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5} expr=(add[32] (add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) -4[32]) }
    bp      = { defs={0x080484b0,0x080484b1} expr=(add[32] v6381[32] -4[32]) }
    si      = { defs={} expr=v6383[32] }
    di      = { defs={} expr=v6384[32] }
    es      = { defs={} expr=v6385[16] }
    cs      = { defs={} expr=v6386[16] }
    ss      = { defs={} expr=v6387[16] }
    ds      = { defs={} expr=v6388[16] }
    fs      = { defs={} expr=v6389[16] }
    gs      = { defs={} expr=v6390[16] }
    cf      = { defs={} expr=v6391[1] }
    ?1      = { defs={} expr=v6392[1] }
    pf      = { defs={} expr=v6393[1] }
    ?3      = { defs={} expr=v6394[1] }
    af      = { defs={} expr=v6395[1] }
    ?5      = { defs={} expr=v6396[1] }
    zf      = { defs={} expr=v6397[1] }
    sf      = { defs={} expr=v6398[1] }
    tf      = { defs={} expr=v6399[1] }
    if      = { defs={} expr=v6400[1] }
    df      = { defs={} expr=v6401[1] }
    of      = { defs={} expr=v6402[1] }
    iopl0   = { defs={} expr=v6403[1] }
    iopl1   = { defs={} expr=v6404[1] }
    nt      = { defs={} expr=v6405[1] }
    ?15     = { defs={} expr=v6406[1] }
    rf      = { defs={} expr=v6407[1] }
    vm      = { defs={} expr=v6408[1] }
    ac      = { defs={} expr=v6409[1] }
    vif     = { defs={} expr=v6410[1] }
    vip     = { defs={} expr=v6411[1] }
    id      = { defs={} expr=v6412[1] }
    ?22     = { defs={} expr=v6413[1] }
    ?23     = { defs={} expr=v6414[1] }
    ?24     = { defs={} expr=v6415[1] }
    ?25     = { defs={} expr=v6416[1] }
    ?26     = { defs={} expr=v6417[1] }
    ?27     = { defs={} expr=v6418[1] }
    ?28     = { defs={} expr=v6419[1] }
    ?29     = { defs={} expr=v6420[1] }
    ?30     = { defs={} expr=v6421[1] }
    ?31     = { defs={} expr=v6422[1] }
    ip      = { defs={0x080484b0,0x080484b1,0x080484b3,0x080484b4,0x080484b5} expr=0x080484b6[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v6380[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v6380[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v6380[32]) }
      flags = { }
    address = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5} expr=(add[32] (add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v6380[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v6383[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v6383[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v6383[32]) }
      flags = { }
    address = { defs={0x080484b0,0x080484b3,0x080484b4} expr=(add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v6383[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v6384[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v6384[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v6384[32]) }
      flags = { }
    address = { defs={0x080484b0,0x080484b3} expr=(add[32] (add[32] v6381[32] -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v6384[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v6381[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v6382[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v6381[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v6382[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v6381[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v6382[32]) }
      flags = { }
    address = { defs={0x080484b0} expr=(add[32] v6381[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v6382[32]) }
      flags = { }
init mem:
null state
null state
0x80484b6:sub    esp, 0x0c
registers:
    ax      = { v36172 }
    cx      = { v36173 }
    dx      = { v36174 }
    bx      = { v36175 }
    sp      = { v36176-0x1c }
    bp      = { v36176-0x4 }
    si      = { v36178 }
    di      = { v36179 }
    es      = { v36180 }
    cs      = { v36181 }
    ss      = { v36182 }
    ds      = { v36183 }
    fs      = { v36184 }
    gs      = { v36185 }
    cf      = { -v36310+0x1 }
    ?1      = { v36187 }
    pf      = { -v36300+0x1 }
    ?3      = { v36189 }
    af      = { -v36307+0x1 }
    ?5      = { v36191 }
    zf      = { v36305 }
    sf      = { v36303 }
    tf      = { v36194 }
    if      = { v36195 }
    df      = { v36196 }
    of      = { v36317 }
    iopl0   = { v36198 }
    iopl1   = { v36199 }
    nt      = { v36200 }
    ?15     = { v36201 }
    rf      = { v36202 }
    vm      = { v36203 }
    ac      = { v36204 }
    vif     = { v36205 }
    vip     = { v36206 }
    id      = { v36207 }
    ?22     = { v36208 }
    ?23     = { v36209 }
    ?24     = { v36210 }
    ?25     = { v36211 }
    ?26     = { v36212 }
    ?27     = { v36213 }
    ?28     = { v36214 }
    ?29     = { v36215 }
    ?30     = { v36216 }
    ?31     = { v36217 }
    ip      = { 0x80484b9 }
memory:
    address = { v36176-0x4 }
      value = { v36177 }
      flags = { size=4 }
    address = { v36176-0x8 }
      value = { v36179 }
      flags = { size=4 }
    address = { v36176-0xc }
      value = { v36178 }
      flags = { size=4 }
    address = { v36176-0x10 }
      value = { v36175 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v6377[32] }
    cx      = { defs={} expr=v6378[32] }
    dx      = { defs={} expr=v6379[32] }
    bx      = { defs={} expr=v6380[32] }
    sp      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) }
    bp      = { defs={0x080484b0,0x080484b1} expr=(add[32] v6381[32] -4[32]) }
    si      = { defs={} expr=v6383[32] }
    di      = { defs={} expr=v6384[32] }
    es      = { defs={} expr=v6385[16] }
    cs      = { defs={} expr=v6386[16] }
    ss      = { defs={} expr=v6387[16] }
    ds      = { defs={} expr=v6388[16] }
    fs      = { defs={} expr=v6389[16] }
    gs      = { defs={} expr=v6390[16] }
    cf      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
    ?1      = { defs={} expr=v6392[1] }
    pf      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))))) }
    ?3      = { defs={} expr=v6394[1] }
    af      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
    ?5      = { defs={} expr=v6396[1] }
    zf      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(zerop[1] (add[32] (add[32] (add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])) }
    sf      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])) }
    tf      = { defs={} expr=v6399[1] }
    if      = { defs={} expr=v6400[1] }
    df      = { defs={} expr=v6401[1] }
    of      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
    iopl0   = { defs={} expr=v6403[1] }
    iopl1   = { defs={} expr=v6404[1] }
    nt      = { defs={} expr=v6405[1] }
    ?15     = { defs={} expr=v6406[1] }
    rf      = { defs={} expr=v6407[1] }
    vm      = { defs={} expr=v6408[1] }
    ac      = { defs={} expr=v6409[1] }
    vif     = { defs={} expr=v6410[1] }
    vip     = { defs={} expr=v6411[1] }
    id      = { defs={} expr=v6412[1] }
    ?22     = { defs={} expr=v6413[1] }
    ?23     = { defs={} expr=v6414[1] }
    ?24     = { defs={} expr=v6415[1] }
    ?25     = { defs={} expr=v6416[1] }
    ?26     = { defs={} expr=v6417[1] }
    ?27     = { defs={} expr=v6418[1] }
    ?28     = { defs={} expr=v6419[1] }
    ?29     = { defs={} expr=v6420[1] }
    ?30     = { defs={} expr=v6421[1] }
    ?31     = { defs={} expr=v6422[1] }
    ip      = { defs={0x080484b0,0x080484b1,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=0x080484b9[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v6380[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v6380[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v6380[32]) }
      flags = { }
    address = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5} expr=(add[32] (add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v6380[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v6383[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v6383[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v6383[32]) }
      flags = { }
    address = { defs={0x080484b0,0x080484b3,0x080484b4} expr=(add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v6383[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v6384[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v6384[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v6384[32]) }
      flags = { }
    address = { defs={0x080484b0,0x080484b3} expr=(add[32] (add[32] v6381[32] -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v6384[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v6381[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v6382[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v6381[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v6382[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v6381[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v6382[32]) }
      flags = { }
    address = { defs={0x080484b0} expr=(add[32] v6381[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v6382[32]) }
      flags = { }
init mem:
null state
null state
0x80484b9:call   0x080484be<<Insn>>
registers:
    ax      = { v36172 }
    cx      = { v36173 }
    dx      = { v36174 }
    bx      = { v36175 }
    sp      = { v36176-0x20 }
    bp      = { v36176-0x4 }
    si      = { v36178 }
    di      = { v36179 }
    es      = { v36180 }
    cs      = { v36181 }
    ss      = { v36182 }
    ds      = { v36183 }
    fs      = { v36184 }
    gs      = { v36185 }
    cf      = { -v36310+0x1 }
    ?1      = { v36187 }
    pf      = { -v36300+0x1 }
    ?3      = { v36189 }
    af      = { -v36307+0x1 }
    ?5      = { v36191 }
    zf      = { v36305 }
    sf      = { v36303 }
    tf      = { v36194 }
    if      = { v36195 }
    df      = { v36196 }
    of      = { v36317 }
    iopl0   = { v36198 }
    iopl1   = { v36199 }
    nt      = { v36200 }
    ?15     = { v36201 }
    rf      = { v36202 }
    vm      = { v36203 }
    ac      = { v36204 }
    vif     = { v36205 }
    vip     = { v36206 }
    id      = { v36207 }
    ?22     = { v36208 }
    ?23     = { v36209 }
    ?24     = { v36210 }
    ?25     = { v36211 }
    ?26     = { v36212 }
    ?27     = { v36213 }
    ?28     = { v36214 }
    ?29     = { v36215 }
    ?30     = { v36216 }
    ?31     = { v36217 }
    ip      = { 0x80484be }
memory:
    address = { v36176-0x4 }
      value = { v36177 }
      flags = { size=4 }
    address = { v36176-0x8 }
      value = { v36179 }
      flags = { size=4 }
    address = { v36176-0xc }
      value = { v36178 }
      flags = { size=4 }
    address = { v36176-0x10 }
      value = { v36175 }
      flags = { size=4 }
    address = { v36176-0x20 }
      value = { 0x80484be }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v6377[32] }
    cx      = { defs={} expr=v6378[32] }
    dx      = { defs={} expr=v6379[32] }
    bx      = { defs={} expr=v6380[32] }
    sp      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6,0x080484b9} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) }
    bp      = { defs={0x080484b0,0x080484b1} expr=(add[32] v6381[32] -4[32]) }
    si      = { defs={} expr=v6383[32] }
    di      = { defs={} expr=v6384[32] }
    es      = { defs={} expr=v6385[16] }
    cs      = { defs={} expr=v6386[16] }
    ss      = { defs={} expr=v6387[16] }
    ds      = { defs={} expr=v6388[16] }
    fs      = { defs={} expr=v6389[16] }
    gs      = { defs={} expr=v6390[16] }
    cf      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
    ?1      = { defs={} expr=v6392[1] }
    pf      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))))) }
    ?3      = { defs={} expr=v6394[1] }
    af      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
    ?5      = { defs={} expr=v6396[1] }
    zf      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(zerop[1] (add[32] (add[32] (add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])) }
    sf      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])) }
    tf      = { defs={} expr=v6399[1] }
    if      = { defs={} expr=v6400[1] }
    df      = { defs={} expr=v6401[1] }
    of      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
    iopl0   = { defs={} expr=v6403[1] }
    iopl1   = { defs={} expr=v6404[1] }
    nt      = { defs={} expr=v6405[1] }
    ?15     = { defs={} expr=v6406[1] }
    rf      = { defs={} expr=v6407[1] }
    vm      = { defs={} expr=v6408[1] }
    ac      = { defs={} expr=v6409[1] }
    vif     = { defs={} expr=v6410[1] }
    vip     = { defs={} expr=v6411[1] }
    id      = { defs={} expr=v6412[1] }
    ?22     = { defs={} expr=v6413[1] }
    ?23     = { defs={} expr=v6414[1] }
    ?24     = { defs={} expr=v6415[1] }
    ?25     = { defs={} expr=v6416[1] }
    ?26     = { defs={} expr=v6417[1] }
    ?27     = { defs={} expr=v6418[1] }
    ?28     = { defs={} expr=v6419[1] }
    ?29     = { defs={} expr=v6420[1] }
    ?30     = { defs={} expr=v6421[1] }
    ?31     = { defs={} expr=v6422[1] }
    ip      = { defs={0x080484b9} expr=0x080484be[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) 1[32]) }
      value = { defs={} expr=-124[8] }
      flags = { }
    address = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6,0x080484b9} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) }
      value = { defs={} expr=-66[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v6380[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v6380[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v6380[32]) }
      flags = { }
    address = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5} expr=(add[32] (add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v6380[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v6383[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v6383[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v6383[32]) }
      flags = { }
    address = { defs={0x080484b0,0x080484b3,0x080484b4} expr=(add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v6383[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v6384[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v6384[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v6381[32] -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v6384[32]) }
      flags = { }
    address = { defs={0x080484b0,0x080484b3} expr=(add[32] (add[32] v6381[32] -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v6384[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v6381[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v6382[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v6381[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v6382[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v6381[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v6382[32]) }
      flags = { }
    address = { defs={0x080484b0} expr=(add[32] v6381[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v6382[32]) }
      flags = { }
init mem:
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80484be:pop    ebx
registers:
    ax      = { v36377 }
    cx      = { v36378 }
    dx      = { v36379 }
    bx      = { v36432 }
    sp      = { v36381+0x4 }
    bp      = { v36382 }
    si      = { v36383 }
    di      = { v36384 }
    es      = { v36385 }
    cs      = { v36386 }
    ss      = { v36387 }
    ds      = { v36388 }
    fs      = { v36389 }
    gs      = { v36390 }
    cf      = { v36391 }
    ?1      = { v36392 }
    pf      = { v36393 }
    ?3      = { v36394 }
    af      = { v36395 }
    ?5      = { v36396 }
    zf      = { v36397 }
    sf      = { v36398 }
    tf      = { v36399 }
    if      = { v36400 }
    df      = { v36401 }
    of      = { v36402 }
    iopl0   = { v36403 }
    iopl1   = { v36404 }
    nt      = { v36405 }
    ?15     = { v36406 }
    rf      = { v36407 }
    vm      = { v36408 }
    ac      = { v36409 }
    vif     = { v36410 }
    vip     = { v36411 }
    id      = { v36412 }
    ?22     = { v36413 }
    ?23     = { v36414 }
    ?24     = { v36415 }
    ?25     = { v36416 }
    ?26     = { v36417 }
    ?27     = { v36418 }
    ?28     = { v36419 }
    ?29     = { v36420 }
    ?30     = { v36421 }
    ?31     = { v36422 }
    ip      = { 0x80484bf }
memory:
    address = { v36381 }
      value = { v36432 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={} expr=v6660[32] }
    cx      = { defs={} expr=v6661[32] }
    dx      = { defs={} expr=v6662[32] }
    bx      = { defs={0x080484be} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6724[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6725[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6726[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6727[8]))) }
    sp      = { defs={0x080484be} expr=(add[32] v6664[32] 4[32]) }
    bp      = { defs={} expr=v6665[32] }
    si      = { defs={} expr=v6666[32] }
    di      = { defs={} expr=v6667[32] }
    es      = { defs={} expr=v6668[16] }
    cs      = { defs={} expr=v6669[16] }
    ss      = { defs={} expr=v6670[16] }
    ds      = { defs={} expr=v6671[16] }
    fs      = { defs={} expr=v6672[16] }
    gs      = { defs={} expr=v6673[16] }
    cf      = { defs={} expr=v6674[1] }
    ?1      = { defs={} expr=v6675[1] }
    pf      = { defs={} expr=v6676[1] }
    ?3      = { defs={} expr=v6677[1] }
    af      = { defs={} expr=v6678[1] }
    ?5      = { defs={} expr=v6679[1] }
    zf      = { defs={} expr=v6680[1] }
    sf      = { defs={} expr=v6681[1] }
    tf      = { defs={} expr=v6682[1] }
    if      = { defs={} expr=v6683[1] }
    df      = { defs={} expr=v6684[1] }
    of      = { defs={} expr=v6685[1] }
    iopl0   = { defs={} expr=v6686[1] }
    iopl1   = { defs={} expr=v6687[1] }
    nt      = { defs={} expr=v6688[1] }
    ?15     = { defs={} expr=v6689[1] }
    rf      = { defs={} expr=v6690[1] }
    vm      = { defs={} expr=v6691[1] }
    ac      = { defs={} expr=v6692[1] }
    vif     = { defs={} expr=v6693[1] }
    vip     = { defs={} expr=v6694[1] }
    id      = { defs={} expr=v6695[1] }
    ?22     = { defs={} expr=v6696[1] }
    ?23     = { defs={} expr=v6697[1] }
    ?24     = { defs={} expr=v6698[1] }
    ?25     = { defs={} expr=v6699[1] }
    ?26     = { defs={} expr=v6700[1] }
    ?27     = { defs={} expr=v6701[1] }
    ?28     = { defs={} expr=v6702[1] }
    ?29     = { defs={} expr=v6703[1] }
    ?30     = { defs={} expr=v6704[1] }
    ?31     = { defs={} expr=v6705[1] }
    ip      = { defs={0x080484be} expr=0x080484bf[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] v6664[32] 3[32]) }
      value = { defs={} expr=v6727[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v6664[32] 2[32]) }
      value = { defs={} expr=v6726[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v6664[32] 1[32]) }
      value = { defs={} expr=v6725[8] }
      flags = { rdonly }
    address = { defs={0x080484be} expr=v6664[32] }
      value = { defs={} expr=v6724[8] }
      flags = { rdonly }
null state
null state
0x80484bf:add    ebx, 0x0000120a
registers:
    ax      = { v36377 }
    cx      = { v36378 }
    dx      = { v36379 }
    bx      = { v36432+0x120a }
    sp      = { v36381+0x4 }
    bp      = { v36382 }
    si      = { v36383 }
    di      = { v36384 }
    es      = { v36385 }
    cs      = { v36386 }
    ss      = { v36387 }
    ds      = { v36388 }
    fs      = { v36389 }
    gs      = { v36390 }
    cf      = { v36481 }
    ?1      = { v36392 }
    pf      = { -v36472+0x1 }
    ?3      = { v36394 }
    af      = { v36479 }
    ?5      = { v36396 }
    zf      = { v36477 }
    sf      = { v36475 }
    tf      = { v36399 }
    if      = { v36400 }
    df      = { v36401 }
    of      = { v36487 }
    iopl0   = { v36403 }
    iopl1   = { v36404 }
    nt      = { v36405 }
    ?15     = { v36406 }
    rf      = { v36407 }
    vm      = { v36408 }
    ac      = { v36409 }
    vif     = { v36410 }
    vip     = { v36411 }
    id      = { v36412 }
    ?22     = { v36413 }
    ?23     = { v36414 }
    ?24     = { v36415 }
    ?25     = { v36416 }
    ?26     = { v36417 }
    ?27     = { v36418 }
    ?28     = { v36419 }
    ?29     = { v36420 }
    ?30     = { v36421 }
    ?31     = { v36422 }
    ip      = { 0x80484c5 }
memory:
    address = { v36381 }
      value = { v36432 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={} expr=v6660[32] }
    cx      = { defs={} expr=v6661[32] }
    dx      = { defs={} expr=v6662[32] }
    bx      = { defs={0x080484be,0x080484bf} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6724[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6725[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6726[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6727[8]))) 4618[32]) }
    sp      = { defs={0x080484be} expr=(add[32] v6664[32] 4[32]) }
    bp      = { defs={} expr=v6665[32] }
    si      = { defs={} expr=v6666[32] }
    di      = { defs={} expr=v6667[32] }
    es      = { defs={} expr=v6668[16] }
    cs      = { defs={} expr=v6669[16] }
    ss      = { defs={} expr=v6670[16] }
    ds      = { defs={} expr=v6671[16] }
    fs      = { defs={} expr=v6672[16] }
    gs      = { defs={} expr=v6673[16] }
    cf      = { defs={0x080484be,0x080484bf} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6724[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6725[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6726[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6727[8])))) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6724[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6725[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6726[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6727[8])))) 4618[33]))))) }
    ?1      = { defs={} expr=v6675[1] }
    pf      = { defs={0x080484be,0x080484bf} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6724[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6725[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6726[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6727[8]))) 4618[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6724[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6725[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6726[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6727[8]))) 4618[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6724[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6725[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6726[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6727[8]))) 4618[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6724[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6725[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6726[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6727[8]))) 4618[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6724[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6725[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6726[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6727[8]))) 4618[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6724[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6725[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6726[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6727[8]))) 4618[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6724[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6725[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6726[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6727[8]))) 4618[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6724[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6725[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6726[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6727[8]))) 4618[32]))))))) }
    ?3      = { defs={} expr=v6677[1] }
    af      = { defs={0x080484be,0x080484bf} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6724[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6725[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6726[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6727[8])))) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6724[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6725[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6726[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6727[8])))) 4618[33]))))) }
    ?5      = { defs={} expr=v6679[1] }
    zf      = { defs={0x080484be,0x080484bf} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6724[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6725[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6726[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6727[8]))) 4618[32])) }
    sf      = { defs={0x080484be,0x080484bf} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6724[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6725[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6726[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6727[8]))) 4618[32])) }
    tf      = { defs={} expr=v6682[1] }
    if      = { defs={} expr=v6683[1] }
    df      = { defs={} expr=v6684[1] }
    of      = { defs={0x080484be,0x080484bf} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6724[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6725[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6726[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6727[8])))) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6724[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6725[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6726[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6727[8])))) 4618[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6724[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6725[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6726[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6727[8])))) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6724[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6725[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6726[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6727[8])))) 4618[33])))))) }
    iopl0   = { defs={} expr=v6686[1] }
    iopl1   = { defs={} expr=v6687[1] }
    nt      = { defs={} expr=v6688[1] }
    ?15     = { defs={} expr=v6689[1] }
    rf      = { defs={} expr=v6690[1] }
    vm      = { defs={} expr=v6691[1] }
    ac      = { defs={} expr=v6692[1] }
    vif     = { defs={} expr=v6693[1] }
    vip     = { defs={} expr=v6694[1] }
    id      = { defs={} expr=v6695[1] }
    ?22     = { defs={} expr=v6696[1] }
    ?23     = { defs={} expr=v6697[1] }
    ?24     = { defs={} expr=v6698[1] }
    ?25     = { defs={} expr=v6699[1] }
    ?26     = { defs={} expr=v6700[1] }
    ?27     = { defs={} expr=v6701[1] }
    ?28     = { defs={} expr=v6702[1] }
    ?29     = { defs={} expr=v6703[1] }
    ?30     = { defs={} expr=v6704[1] }
    ?31     = { defs={} expr=v6705[1] }
    ip      = { defs={0x080484be,0x080484bf} expr=0x080484c5[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] v6664[32] 3[32]) }
      value = { defs={} expr=v6727[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v6664[32] 2[32]) }
      value = { defs={} expr=v6726[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v6664[32] 1[32]) }
      value = { defs={} expr=v6725[8] }
      flags = { rdonly }
    address = { defs={0x080484be} expr=v6664[32] }
      value = { defs={} expr=v6724[8] }
      flags = { rdonly }
null state
null state
0x80484c5:call   0x080482c8<_init>
registers:
    ax      = { v36377 }
    cx      = { v36378 }
    dx      = { v36379 }
    bx      = { v36432+0x120a }
    sp      = { v36381 }
    bp      = { v36382 }
    si      = { v36383 }
    di      = { v36384 }
    es      = { v36385 }
    cs      = { v36386 }
    ss      = { v36387 }
    ds      = { v36388 }
    fs      = { v36389 }
    gs      = { v36390 }
    cf      = { v36481 }
    ?1      = { v36392 }
    pf      = { -v36472+0x1 }
    ?3      = { v36394 }
    af      = { v36479 }
    ?5      = { v36396 }
    zf      = { v36477 }
    sf      = { v36475 }
    tf      = { v36399 }
    if      = { v36400 }
    df      = { v36401 }
    of      = { v36487 }
    iopl0   = { v36403 }
    iopl1   = { v36404 }
    nt      = { v36405 }
    ?15     = { v36406 }
    rf      = { v36407 }
    vm      = { v36408 }
    ac      = { v36409 }
    vif     = { v36410 }
    vip     = { v36411 }
    id      = { v36412 }
    ?22     = { v36413 }
    ?23     = { v36414 }
    ?24     = { v36415 }
    ?25     = { v36416 }
    ?26     = { v36417 }
    ?27     = { v36418 }
    ?28     = { v36419 }
    ?29     = { v36420 }
    ?30     = { v36421 }
    ?31     = { v36422 }
    ip      = { 0x80482c8 }
memory:
    address = { v36381 }
      value = { 0x80484ca }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v6660[32] }
    cx      = { defs={} expr=v6661[32] }
    dx      = { defs={} expr=v6662[32] }
    bx      = { defs={0x080484be,0x080484bf} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6724[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6725[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6726[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6727[8]))) 4618[32]) }
    sp      = { defs={0x080484be,0x080484c5} expr=(add[32] (add[32] v6664[32] 4[32]) -4[32]) }
    bp      = { defs={} expr=v6665[32] }
    si      = { defs={} expr=v6666[32] }
    di      = { defs={} expr=v6667[32] }
    es      = { defs={} expr=v6668[16] }
    cs      = { defs={} expr=v6669[16] }
    ss      = { defs={} expr=v6670[16] }
    ds      = { defs={} expr=v6671[16] }
    fs      = { defs={} expr=v6672[16] }
    gs      = { defs={} expr=v6673[16] }
    cf      = { defs={0x080484be,0x080484bf} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6724[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6725[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6726[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6727[8])))) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6724[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6725[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6726[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6727[8])))) 4618[33]))))) }
    ?1      = { defs={} expr=v6675[1] }
    pf      = { defs={0x080484be,0x080484bf} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6724[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6725[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6726[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6727[8]))) 4618[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6724[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6725[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6726[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6727[8]))) 4618[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6724[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6725[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6726[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6727[8]))) 4618[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6724[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6725[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6726[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6727[8]))) 4618[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6724[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6725[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6726[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6727[8]))) 4618[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6724[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6725[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6726[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6727[8]))) 4618[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6724[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6725[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6726[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6727[8]))) 4618[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6724[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6725[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6726[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6727[8]))) 4618[32]))))))) }
    ?3      = { defs={} expr=v6677[1] }
    af      = { defs={0x080484be,0x080484bf} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6724[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6725[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6726[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6727[8])))) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6724[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6725[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6726[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6727[8])))) 4618[33]))))) }
    ?5      = { defs={} expr=v6679[1] }
    zf      = { defs={0x080484be,0x080484bf} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6724[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6725[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6726[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6727[8]))) 4618[32])) }
    sf      = { defs={0x080484be,0x080484bf} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6724[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6725[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6726[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6727[8]))) 4618[32])) }
    tf      = { defs={} expr=v6682[1] }
    if      = { defs={} expr=v6683[1] }
    df      = { defs={} expr=v6684[1] }
    of      = { defs={0x080484be,0x080484bf} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6724[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6725[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6726[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6727[8])))) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6724[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6725[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6726[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6727[8])))) 4618[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6724[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6725[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6726[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6727[8])))) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6724[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6725[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6726[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6727[8])))) 4618[33])))))) }
    iopl0   = { defs={} expr=v6686[1] }
    iopl1   = { defs={} expr=v6687[1] }
    nt      = { defs={} expr=v6688[1] }
    ?15     = { defs={} expr=v6689[1] }
    rf      = { defs={} expr=v6690[1] }
    vm      = { defs={} expr=v6691[1] }
    ac      = { defs={} expr=v6692[1] }
    vif     = { defs={} expr=v6693[1] }
    vip     = { defs={} expr=v6694[1] }
    id      = { defs={} expr=v6695[1] }
    ?22     = { defs={} expr=v6696[1] }
    ?23     = { defs={} expr=v6697[1] }
    ?24     = { defs={} expr=v6698[1] }
    ?25     = { defs={} expr=v6699[1] }
    ?26     = { defs={} expr=v6700[1] }
    ?27     = { defs={} expr=v6701[1] }
    ?28     = { defs={} expr=v6702[1] }
    ?29     = { defs={} expr=v6703[1] }
    ?30     = { defs={} expr=v6704[1] }
    ?31     = { defs={} expr=v6705[1] }
    ip      = { defs={0x080484c5} expr=0x080482c8[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] v6664[32] 4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v6664[32] 4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v6664[32] 4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=-124[8] }
      flags = { }
    address = { defs={0x080484be,0x080484c5} expr=(add[32] (add[32] v6664[32] 4[32]) -4[32]) }
      value = { defs={} expr=-54[8] }
      flags = { }
init mem:
    address = { defs={} expr=(add[32] v6664[32] 3[32]) }
      value = { defs={} expr=v6727[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v6664[32] 2[32]) }
      value = { defs={} expr=v6726[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v6664[32] 1[32]) }
      value = { defs={} expr=v6725[8] }
      flags = { rdonly }
    address = { defs={0x080484be} expr=v6664[32] }
      value = { defs={} expr=v6724[8] }
      flags = { rdonly }
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80484ca:lea    eax, [ebx + 0xffffff20<-0x000000e0>]
registers:
    ax      = { v36550-0xe0 }
    cx      = { v36548 }
    dx      = { v36549 }
    bx      = { v36550 }
    sp      = { v36551 }
    bp      = { v36552 }
    si      = { v36553 }
    di      = { v36554 }
    es      = { v36555 }
    cs      = { v36556 }
    ss      = { v36557 }
    ds      = { v36558 }
    fs      = { v36559 }
    gs      = { v36560 }
    cf      = { v36561 }
    ?1      = { v36562 }
    pf      = { v36563 }
    ?3      = { v36564 }
    af      = { v36565 }
    ?5      = { v36566 }
    zf      = { v36567 }
    sf      = { v36568 }
    tf      = { v36569 }
    if      = { v36570 }
    df      = { v36571 }
    of      = { v36572 }
    iopl0   = { v36573 }
    iopl1   = { v36574 }
    nt      = { v36575 }
    ?15     = { v36576 }
    rf      = { v36577 }
    vm      = { v36578 }
    ac      = { v36579 }
    vif     = { v36580 }
    vip     = { v36581 }
    id      = { v36582 }
    ?22     = { v36583 }
    ?23     = { v36584 }
    ?24     = { v36585 }
    ?25     = { v36586 }
    ?26     = { v36587 }
    ?27     = { v36588 }
    ?28     = { v36589 }
    ?29     = { v36590 }
    ?30     = { v36591 }
    ?31     = { v36592 }
    ip      = { 0x80484d0 }
memory:
registers:
    ax      = { defs={0x080484ca} expr=(add[32] v6886[32] -224[32]) }
    cx      = { defs={} expr=v6884[32] }
    dx      = { defs={} expr=v6885[32] }
    bx      = { defs={} expr=v6886[32] }
    sp      = { defs={} expr=v6887[32] }
    bp      = { defs={} expr=v6888[32] }
    si      = { defs={} expr=v6889[32] }
    di      = { defs={} expr=v6890[32] }
    es      = { defs={} expr=v6891[16] }
    cs      = { defs={} expr=v6892[16] }
    ss      = { defs={} expr=v6893[16] }
    ds      = { defs={} expr=v6894[16] }
    fs      = { defs={} expr=v6895[16] }
    gs      = { defs={} expr=v6896[16] }
    cf      = { defs={} expr=v6897[1] }
    ?1      = { defs={} expr=v6898[1] }
    pf      = { defs={} expr=v6899[1] }
    ?3      = { defs={} expr=v6900[1] }
    af      = { defs={} expr=v6901[1] }
    ?5      = { defs={} expr=v6902[1] }
    zf      = { defs={} expr=v6903[1] }
    sf      = { defs={} expr=v6904[1] }
    tf      = { defs={} expr=v6905[1] }
    if      = { defs={} expr=v6906[1] }
    df      = { defs={} expr=v6907[1] }
    of      = { defs={} expr=v6908[1] }
    iopl0   = { defs={} expr=v6909[1] }
    iopl1   = { defs={} expr=v6910[1] }
    nt      = { defs={} expr=v6911[1] }
    ?15     = { defs={} expr=v6912[1] }
    rf      = { defs={} expr=v6913[1] }
    vm      = { defs={} expr=v6914[1] }
    ac      = { defs={} expr=v6915[1] }
    vif     = { defs={} expr=v6916[1] }
    vip     = { defs={} expr=v6917[1] }
    id      = { defs={} expr=v6918[1] }
    ?22     = { defs={} expr=v6919[1] }
    ?23     = { defs={} expr=v6920[1] }
    ?24     = { defs={} expr=v6921[1] }
    ?25     = { defs={} expr=v6922[1] }
    ?26     = { defs={} expr=v6923[1] }
    ?27     = { defs={} expr=v6924[1] }
    ?28     = { defs={} expr=v6925[1] }
    ?29     = { defs={} expr=v6926[1] }
    ?30     = { defs={} expr=v6927[1] }
    ?31     = { defs={} expr=v6928[1] }
    ip      = { defs={0x080484ca} expr=0x080484d0[32] }
memory:
init mem:
null state
null state
0x80484d0:lea    edx, [ebx + 0xffffff20<-0x000000e0>]
registers:
    ax      = { v36550-0xe0 }
    cx      = { v36548 }
    dx      = { v36550-0xe0 }
    bx      = { v36550 }
    sp      = { v36551 }
    bp      = { v36552 }
    si      = { v36553 }
    di      = { v36554 }
    es      = { v36555 }
    cs      = { v36556 }
    ss      = { v36557 }
    ds      = { v36558 }
    fs      = { v36559 }
    gs      = { v36560 }
    cf      = { v36561 }
    ?1      = { v36562 }
    pf      = { v36563 }
    ?3      = { v36564 }
    af      = { v36565 }
    ?5      = { v36566 }
    zf      = { v36567 }
    sf      = { v36568 }
    tf      = { v36569 }
    if      = { v36570 }
    df      = { v36571 }
    of      = { v36572 }
    iopl0   = { v36573 }
    iopl1   = { v36574 }
    nt      = { v36575 }
    ?15     = { v36576 }
    rf      = { v36577 }
    vm      = { v36578 }
    ac      = { v36579 }
    vif     = { v36580 }
    vip     = { v36581 }
    id      = { v36582 }
    ?22     = { v36583 }
    ?23     = { v36584 }
    ?24     = { v36585 }
    ?25     = { v36586 }
    ?26     = { v36587 }
    ?27     = { v36588 }
    ?28     = { v36589 }
    ?29     = { v36590 }
    ?30     = { v36591 }
    ?31     = { v36592 }
    ip      = { 0x80484d6 }
memory:
registers:
    ax      = { defs={0x080484ca} expr=(add[32] v6886[32] -224[32]) }
    cx      = { defs={} expr=v6884[32] }
    dx      = { defs={0x080484d0} expr=(add[32] v6886[32] -224[32]) }
    bx      = { defs={} expr=v6886[32] }
    sp      = { defs={} expr=v6887[32] }
    bp      = { defs={} expr=v6888[32] }
    si      = { defs={} expr=v6889[32] }
    di      = { defs={} expr=v6890[32] }
    es      = { defs={} expr=v6891[16] }
    cs      = { defs={} expr=v6892[16] }
    ss      = { defs={} expr=v6893[16] }
    ds      = { defs={} expr=v6894[16] }
    fs      = { defs={} expr=v6895[16] }
    gs      = { defs={} expr=v6896[16] }
    cf      = { defs={} expr=v6897[1] }
    ?1      = { defs={} expr=v6898[1] }
    pf      = { defs={} expr=v6899[1] }
    ?3      = { defs={} expr=v6900[1] }
    af      = { defs={} expr=v6901[1] }
    ?5      = { defs={} expr=v6902[1] }
    zf      = { defs={} expr=v6903[1] }
    sf      = { defs={} expr=v6904[1] }
    tf      = { defs={} expr=v6905[1] }
    if      = { defs={} expr=v6906[1] }
    df      = { defs={} expr=v6907[1] }
    of      = { defs={} expr=v6908[1] }
    iopl0   = { defs={} expr=v6909[1] }
    iopl1   = { defs={} expr=v6910[1] }
    nt      = { defs={} expr=v6911[1] }
    ?15     = { defs={} expr=v6912[1] }
    rf      = { defs={} expr=v6913[1] }
    vm      = { defs={} expr=v6914[1] }
    ac      = { defs={} expr=v6915[1] }
    vif     = { defs={} expr=v6916[1] }
    vip     = { defs={} expr=v6917[1] }
    id      = { defs={} expr=v6918[1] }
    ?22     = { defs={} expr=v6919[1] }
    ?23     = { defs={} expr=v6920[1] }
    ?24     = { defs={} expr=v6921[1] }
    ?25     = { defs={} expr=v6922[1] }
    ?26     = { defs={} expr=v6923[1] }
    ?27     = { defs={} expr=v6924[1] }
    ?28     = { defs={} expr=v6925[1] }
    ?29     = { defs={} expr=v6926[1] }
    ?30     = { defs={} expr=v6927[1] }
    ?31     = { defs={} expr=v6928[1] }
    ip      = { defs={0x080484ca,0x080484d0} expr=0x080484d6[32] }
memory:
init mem:
null state
null state
0x80484d6:sub    eax, edx
registers:
    ax      = { 0x0 }
    cx      = { v36548 }
    dx      = { v36550-0xe0 }
    bx      = { v36550 }
    sp      = { v36551 }
    bp      = { v36552 }
    si      = { v36553 }
    di      = { v36554 }
    es      = { v36555 }
    cs      = { v36556 }
    ss      = { v36557 }
    ds      = { v36558 }
    fs      = { v36559 }
    gs      = { v36560 }
    cf      = { 0x0 }
    ?1      = { v36562 }
    pf      = { 0x1 }
    ?3      = { v36564 }
    af      = { 0x0 }
    ?5      = { v36566 }
    zf      = { 0x1 }
    sf      = { 0x0 }
    tf      = { v36569 }
    if      = { v36570 }
    df      = { v36571 }
    of      = { 0x0 }
    iopl0   = { v36573 }
    iopl1   = { v36574 }
    nt      = { v36575 }
    ?15     = { v36576 }
    rf      = { v36577 }
    vm      = { v36578 }
    ac      = { v36579 }
    vif     = { v36580 }
    vip     = { v36581 }
    id      = { v36582 }
    ?22     = { v36583 }
    ?23     = { v36584 }
    ?24     = { v36585 }
    ?25     = { v36586 }
    ?26     = { v36587 }
    ?27     = { v36588 }
    ?28     = { v36589 }
    ?29     = { v36590 }
    ?30     = { v36591 }
    ?31     = { v36592 }
    ip      = { 0x80484d8 }
memory:
registers:
    ax      = { defs={0x080484ca,0x080484d0,0x080484d6} expr=(add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32])) }
    cx      = { defs={} expr=v6884[32] }
    dx      = { defs={0x080484d0} expr=(add[32] v6886[32] -224[32]) }
    bx      = { defs={} expr=v6886[32] }
    sp      = { defs={} expr=v6887[32] }
    bp      = { defs={} expr=v6888[32] }
    si      = { defs={} expr=v6889[32] }
    di      = { defs={} expr=v6890[32] }
    es      = { defs={} expr=v6891[16] }
    cs      = { defs={} expr=v6892[16] }
    ss      = { defs={} expr=v6893[16] }
    ds      = { defs={} expr=v6894[16] }
    fs      = { defs={} expr=v6895[16] }
    gs      = { defs={} expr=v6896[16] }
    cf      = { defs={0x080484ca,0x080484d0,0x080484d6} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v6886[32] -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v6886[32] -224[32]))) (add[33] (uextend[33] 33[32] (add[32] v6886[32] -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v6886[32] -224[32]))) 1[33]))))))) }
    ?1      = { defs={} expr=v6898[1] }
    pf      = { defs={0x080484ca,0x080484d0,0x080484d6} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32])))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32]))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32])))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32])))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32])))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32]))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32])))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32])))))))) }
    ?3      = { defs={} expr=v6900[1] }
    af      = { defs={0x080484ca,0x080484d0,0x080484d6} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v6886[32] -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v6886[32] -224[32]))) (add[33] (uextend[33] 33[32] (add[32] v6886[32] -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v6886[32] -224[32]))) 1[33]))))))) }
    ?5      = { defs={} expr=v6902[1] }
    zf      = { defs={0x080484ca,0x080484d0,0x080484d6} expr=(zerop[1] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32]))) }
    sf      = { defs={0x080484ca,0x080484d0,0x080484d6} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32]))) }
    tf      = { defs={} expr=v6905[1] }
    if      = { defs={} expr=v6906[1] }
    df      = { defs={} expr=v6907[1] }
    of      = { defs={0x080484ca,0x080484d0,0x080484d6} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v6886[32] -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v6886[32] -224[32]))) (add[33] (uextend[33] 33[32] (add[32] v6886[32] -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v6886[32] -224[32]))) 1[33])))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v6886[32] -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v6886[32] -224[32]))) (add[33] (uextend[33] 33[32] (add[32] v6886[32] -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v6886[32] -224[32]))) 1[33]))))))) }
    iopl0   = { defs={} expr=v6909[1] }
    iopl1   = { defs={} expr=v6910[1] }
    nt      = { defs={} expr=v6911[1] }
    ?15     = { defs={} expr=v6912[1] }
    rf      = { defs={} expr=v6913[1] }
    vm      = { defs={} expr=v6914[1] }
    ac      = { defs={} expr=v6915[1] }
    vif     = { defs={} expr=v6916[1] }
    vip     = { defs={} expr=v6917[1] }
    id      = { defs={} expr=v6918[1] }
    ?22     = { defs={} expr=v6919[1] }
    ?23     = { defs={} expr=v6920[1] }
    ?24     = { defs={} expr=v6921[1] }
    ?25     = { defs={} expr=v6922[1] }
    ?26     = { defs={} expr=v6923[1] }
    ?27     = { defs={} expr=v6924[1] }
    ?28     = { defs={} expr=v6925[1] }
    ?29     = { defs={} expr=v6926[1] }
    ?30     = { defs={} expr=v6927[1] }
    ?31     = { defs={} expr=v6928[1] }
    ip      = { defs={0x080484ca,0x080484d0,0x080484d6} expr=0x080484d8[32] }
memory:
init mem:
null state
null state
0x80484d8:sar    eax, 0x02
registers:
    ax      = { 0x0 }
    cx      = { v36548 }
    dx      = { v36550-0xe0 }
    bx      = { v36550 }
    sp      = { v36551 }
    bp      = { v36552 }
    si      = { v36553 }
    di      = { v36554 }
    es      = { v36555 }
    cs      = { v36556 }
    ss      = { v36557 }
    ds      = { v36558 }
    fs      = { v36559 }
    gs      = { v36560 }
    cf      = { 0x0 }
    ?1      = { v36562 }
    pf      = { 0x1 }
    ?3      = { v36564 }
    af      = { v36664 }
    ?5      = { v36566 }
    zf      = { 0x1 }
    sf      = { 0x0 }
    tf      = { v36569 }
    if      = { v36570 }
    df      = { v36571 }
    of      = { v36678 }
    iopl0   = { v36573 }
    iopl1   = { v36574 }
    nt      = { v36575 }
    ?15     = { v36576 }
    rf      = { v36577 }
    vm      = { v36578 }
    ac      = { v36579 }
    vif     = { v36580 }
    vip     = { v36581 }
    id      = { v36582 }
    ?22     = { v36583 }
    ?23     = { v36584 }
    ?24     = { v36585 }
    ?25     = { v36586 }
    ?26     = { v36587 }
    ?27     = { v36588 }
    ?28     = { v36589 }
    ?29     = { v36590 }
    ?30     = { v36591 }
    ?31     = { v36592 }
    ip      = { 0x80484db }
memory:
registers:
    ax      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32]))) }
    cx      = { defs={} expr=v6884[32] }
    dx      = { defs={0x080484d0} expr=(add[32] v6886[32] -224[32]) }
    bx      = { defs={} expr=v6886[32] }
    sp      = { defs={} expr=v6887[32] }
    bp      = { defs={} expr=v6888[32] }
    si      = { defs={} expr=v6889[32] }
    di      = { defs={} expr=v6890[32] }
    es      = { defs={} expr=v6891[16] }
    cs      = { defs={} expr=v6892[16] }
    ss      = { defs={} expr=v6893[16] }
    ds      = { defs={} expr=v6894[16] }
    fs      = { defs={} expr=v6895[16] }
    gs      = { defs={} expr=v6896[16] }
    cf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32])))) }
    ?1      = { defs={} expr=v6898[1] }
    pf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32]))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32]))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32]))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32]))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32]))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32]))))))))) }
    ?3      = { defs={} expr=v6900[1] }
    af      = { defs={0x080484d8} expr=v7082[1] }
    ?5      = { defs={} expr=v6902[1] }
    zf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(zerop[1] (asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32])))) }
    sf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32])))) }
    tf      = { defs={} expr=v6905[1] }
    if      = { defs={} expr=v6906[1] }
    df      = { defs={} expr=v6907[1] }
    of      = { defs={0x080484d8} expr=v7108[1] }
    iopl0   = { defs={} expr=v6909[1] }
    iopl1   = { defs={} expr=v6910[1] }
    nt      = { defs={} expr=v6911[1] }
    ?15     = { defs={} expr=v6912[1] }
    rf      = { defs={} expr=v6913[1] }
    vm      = { defs={} expr=v6914[1] }
    ac      = { defs={} expr=v6915[1] }
    vif     = { defs={} expr=v6916[1] }
    vip     = { defs={} expr=v6917[1] }
    id      = { defs={} expr=v6918[1] }
    ?22     = { defs={} expr=v6919[1] }
    ?23     = { defs={} expr=v6920[1] }
    ?24     = { defs={} expr=v6921[1] }
    ?25     = { defs={} expr=v6922[1] }
    ?26     = { defs={} expr=v6923[1] }
    ?27     = { defs={} expr=v6924[1] }
    ?28     = { defs={} expr=v6925[1] }
    ?29     = { defs={} expr=v6926[1] }
    ?30     = { defs={} expr=v6927[1] }
    ?31     = { defs={} expr=v6928[1] }
    ip      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=0x080484db[32] }
memory:
init mem:
null state
null state
0x80484db:mov    DWORD PTR ss:[ebp + 0xf0<-0x10>], eax
registers:
    ax      = { 0x0 }
    cx      = { v36548 }
    dx      = { v36550-0xe0 }
    bx      = { v36550 }
    sp      = { v36551 }
    bp      = { v36552 }
    si      = { v36553 }
    di      = { v36554 }
    es      = { v36555 }
    cs      = { v36556 }
    ss      = { v36557 }
    ds      = { v36558 }
    fs      = { v36559 }
    gs      = { v36560 }
    cf      = { 0x0 }
    ?1      = { v36562 }
    pf      = { 0x1 }
    ?3      = { v36564 }
    af      = { v36664 }
    ?5      = { v36566 }
    zf      = { 0x1 }
    sf      = { 0x0 }
    tf      = { v36569 }
    if      = { v36570 }
    df      = { v36571 }
    of      = { v36678 }
    iopl0   = { v36573 }
    iopl1   = { v36574 }
    nt      = { v36575 }
    ?15     = { v36576 }
    rf      = { v36577 }
    vm      = { v36578 }
    ac      = { v36579 }
    vif     = { v36580 }
    vip     = { v36581 }
    id      = { v36582 }
    ?22     = { v36583 }
    ?23     = { v36584 }
    ?24     = { v36585 }
    ?25     = { v36586 }
    ?26     = { v36587 }
    ?27     = { v36588 }
    ?28     = { v36589 }
    ?29     = { v36590 }
    ?30     = { v36591 }
    ?31     = { v36592 }
    ip      = { 0x80484de }
memory:
    address = { v36552-0x10 }
      value = { 0x0 }
      flags = { size=4 }
registers:
    ax      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32]))) }
    cx      = { defs={} expr=v6884[32] }
    dx      = { defs={0x080484d0} expr=(add[32] v6886[32] -224[32]) }
    bx      = { defs={} expr=v6886[32] }
    sp      = { defs={} expr=v6887[32] }
    bp      = { defs={} expr=v6888[32] }
    si      = { defs={} expr=v6889[32] }
    di      = { defs={} expr=v6890[32] }
    es      = { defs={} expr=v6891[16] }
    cs      = { defs={} expr=v6892[16] }
    ss      = { defs={} expr=v6893[16] }
    ds      = { defs={} expr=v6894[16] }
    fs      = { defs={} expr=v6895[16] }
    gs      = { defs={} expr=v6896[16] }
    cf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32])))) }
    ?1      = { defs={} expr=v6898[1] }
    pf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32]))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32]))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32]))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32]))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32]))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32]))))))))) }
    ?3      = { defs={} expr=v6900[1] }
    af      = { defs={0x080484d8} expr=v7082[1] }
    ?5      = { defs={} expr=v6902[1] }
    zf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(zerop[1] (asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32])))) }
    sf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32])))) }
    tf      = { defs={} expr=v6905[1] }
    if      = { defs={} expr=v6906[1] }
    df      = { defs={} expr=v6907[1] }
    of      = { defs={0x080484d8} expr=v7108[1] }
    iopl0   = { defs={} expr=v6909[1] }
    iopl1   = { defs={} expr=v6910[1] }
    nt      = { defs={} expr=v6911[1] }
    ?15     = { defs={} expr=v6912[1] }
    rf      = { defs={} expr=v6913[1] }
    vm      = { defs={} expr=v6914[1] }
    ac      = { defs={} expr=v6915[1] }
    vif     = { defs={} expr=v6916[1] }
    vip     = { defs={} expr=v6917[1] }
    id      = { defs={} expr=v6918[1] }
    ?22     = { defs={} expr=v6919[1] }
    ?23     = { defs={} expr=v6920[1] }
    ?24     = { defs={} expr=v6921[1] }
    ?25     = { defs={} expr=v6922[1] }
    ?26     = { defs={} expr=v6923[1] }
    ?27     = { defs={} expr=v6924[1] }
    ?28     = { defs={} expr=v6925[1] }
    ?29     = { defs={} expr=v6926[1] }
    ?30     = { defs={} expr=v6927[1] }
    ?31     = { defs={} expr=v6928[1] }
    ip      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db} expr=0x080484de[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v6888[32] -16[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v6888[32] -16[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v6888[32] -16[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32])))) }
      flags = { }
    address = { defs={0x080484db} expr=(add[32] v6888[32] -16[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32])))) }
      flags = { }
init mem:
null state
null state
0x80484de:jne    0x080484f0<<StaticData@0x080484e8>+8>
registers:
    ax      = { 0x0 }
    cx      = { v36548 }
    dx      = { v36550-0xe0 }
    bx      = { v36550 }
    sp      = { v36551 }
    bp      = { v36552 }
    si      = { v36553 }
    di      = { v36554 }
    es      = { v36555 }
    cs      = { v36556 }
    ss      = { v36557 }
    ds      = { v36558 }
    fs      = { v36559 }
    gs      = { v36560 }
    cf      = { 0x0 }
    ?1      = { v36562 }
    pf      = { 0x1 }
    ?3      = { v36564 }
    af      = { v36664 }
    ?5      = { v36566 }
    zf      = { 0x1 }
    sf      = { 0x0 }
    tf      = { v36569 }
    if      = { v36570 }
    df      = { v36571 }
    of      = { v36678 }
    iopl0   = { v36573 }
    iopl1   = { v36574 }
    nt      = { v36575 }
    ?15     = { v36576 }
    rf      = { v36577 }
    vm      = { v36578 }
    ac      = { v36579 }
    vif     = { v36580 }
    vip     = { v36581 }
    id      = { v36582 }
    ?22     = { v36583 }
    ?23     = { v36584 }
    ?24     = { v36585 }
    ?25     = { v36586 }
    ?26     = { v36587 }
    ?27     = { v36588 }
    ?28     = { v36589 }
    ?29     = { v36590 }
    ?30     = { v36591 }
    ?31     = { v36592 }
    ip      = { 0x80484e0 }
memory:
    address = { v36552-0x10 }
      value = { 0x0 }
      flags = { size=4 }
registers:
    ax      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32]))) }
    cx      = { defs={} expr=v6884[32] }
    dx      = { defs={0x080484d0} expr=(add[32] v6886[32] -224[32]) }
    bx      = { defs={} expr=v6886[32] }
    sp      = { defs={} expr=v6887[32] }
    bp      = { defs={} expr=v6888[32] }
    si      = { defs={} expr=v6889[32] }
    di      = { defs={} expr=v6890[32] }
    es      = { defs={} expr=v6891[16] }
    cs      = { defs={} expr=v6892[16] }
    ss      = { defs={} expr=v6893[16] }
    ds      = { defs={} expr=v6894[16] }
    fs      = { defs={} expr=v6895[16] }
    gs      = { defs={} expr=v6896[16] }
    cf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32])))) }
    ?1      = { defs={} expr=v6898[1] }
    pf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32]))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32]))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32]))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32]))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32]))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32]))))))))) }
    ?3      = { defs={} expr=v6900[1] }
    af      = { defs={0x080484d8} expr=v7082[1] }
    ?5      = { defs={} expr=v6902[1] }
    zf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(zerop[1] (asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32])))) }
    sf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32])))) }
    tf      = { defs={} expr=v6905[1] }
    if      = { defs={} expr=v6906[1] }
    df      = { defs={} expr=v6907[1] }
    of      = { defs={0x080484d8} expr=v7108[1] }
    iopl0   = { defs={} expr=v6909[1] }
    iopl1   = { defs={} expr=v6910[1] }
    nt      = { defs={} expr=v6911[1] }
    ?15     = { defs={} expr=v6912[1] }
    rf      = { defs={} expr=v6913[1] }
    vm      = { defs={} expr=v6914[1] }
    ac      = { defs={} expr=v6915[1] }
    vif     = { defs={} expr=v6916[1] }
    vip     = { defs={} expr=v6917[1] }
    id      = { defs={} expr=v6918[1] }
    ?22     = { defs={} expr=v6919[1] }
    ?23     = { defs={} expr=v6920[1] }
    ?24     = { defs={} expr=v6921[1] }
    ?25     = { defs={} expr=v6922[1] }
    ?26     = { defs={} expr=v6923[1] }
    ?27     = { defs={} expr=v6924[1] }
    ?28     = { defs={} expr=v6925[1] }
    ?29     = { defs={} expr=v6926[1] }
    ?30     = { defs={} expr=v6927[1] }
    ?31     = { defs={} expr=v6928[1] }
    ip      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db,0x080484de} expr=(ite[32] (invert[1] (zerop[1] (asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32]))))) 0x080484f0[32] 0x080484e0[32]) }
memory:
    address = { defs={} expr=(add[32] (add[32] v6888[32] -16[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v6888[32] -16[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v6888[32] -16[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32])))) }
      flags = { }
    address = { defs={0x080484db} expr=(add[32] v6888[32] -16[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32])))) }
      flags = { }
init mem:
null state
null state
0x80484e0:add    esp, 0x0c
registers:
    ax      = { 0x0 }
    cx      = { v36548 }
    dx      = { v36550-0xe0 }
    bx      = { v36550 }
    sp      = { v36551+0xc }
    bp      = { v36552 }
    si      = { v36553 }
    di      = { v36554 }
    es      = { v36555 }
    cs      = { v36556 }
    ss      = { v36557 }
    ds      = { v36558 }
    fs      = { v36559 }
    gs      = { v36560 }
    cf      = { v36775 }
    ?1      = { v36562 }
    pf      = { -v36766+0x1 }
    ?3      = { v36564 }
    af      = { v36773 }
    ?5      = { v36566 }
    zf      = { v36771 }
    sf      = { v36769 }
    tf      = { v36569 }
    if      = { v36570 }
    df      = { v36571 }
    of      = { v36781 }
    iopl0   = { v36573 }
    iopl1   = { v36574 }
    nt      = { v36575 }
    ?15     = { v36576 }
    rf      = { v36577 }
    vm      = { v36578 }
    ac      = { v36579 }
    vif     = { v36580 }
    vip     = { v36581 }
    id      = { v36582 }
    ?22     = { v36583 }
    ?23     = { v36584 }
    ?24     = { v36585 }
    ?25     = { v36586 }
    ?26     = { v36587 }
    ?27     = { v36588 }
    ?28     = { v36589 }
    ?29     = { v36590 }
    ?30     = { v36591 }
    ?31     = { v36592 }
    ip      = { 0x80484e3 }
memory:
    address = { v36552-0x10 }
      value = { 0x0 }
      flags = { size=4 }
registers:
    ax      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32]))) }
    cx      = { defs={} expr=v6884[32] }
    dx      = { defs={0x080484d0} expr=(add[32] v6886[32] -224[32]) }
    bx      = { defs={} expr=v6886[32] }
    sp      = { defs={0x080484e0} expr=(add[32] v6887[32] 12[32]) }
    bp      = { defs={} expr=v6888[32] }
    si      = { defs={} expr=v6889[32] }
    di      = { defs={} expr=v6890[32] }
    es      = { defs={} expr=v6891[16] }
    cs      = { defs={} expr=v6892[16] }
    ss      = { defs={} expr=v6893[16] }
    ds      = { defs={} expr=v6894[16] }
    fs      = { defs={} expr=v6895[16] }
    gs      = { defs={} expr=v6896[16] }
    cf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6887[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6887[32]) 12[33]))))) }
    ?1      = { defs={} expr=v6898[1] }
    pf      = { defs={0x080484e0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v6887[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v6887[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v6887[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v6887[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v6887[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v6887[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v6887[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v6887[32] 12[32]))))))) }
    ?3      = { defs={} expr=v6900[1] }
    af      = { defs={0x080484e0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6887[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6887[32]) 12[33]))))) }
    ?5      = { defs={} expr=v6902[1] }
    zf      = { defs={0x080484e0} expr=(zerop[1] (add[32] v6887[32] 12[32])) }
    sf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (add[32] v6887[32] 12[32])) }
    tf      = { defs={} expr=v6905[1] }
    if      = { defs={} expr=v6906[1] }
    df      = { defs={} expr=v6907[1] }
    of      = { defs={0x080484e0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6887[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6887[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6887[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6887[32]) 12[33])))))) }
    iopl0   = { defs={} expr=v6909[1] }
    iopl1   = { defs={} expr=v6910[1] }
    nt      = { defs={} expr=v6911[1] }
    ?15     = { defs={} expr=v6912[1] }
    rf      = { defs={} expr=v6913[1] }
    vm      = { defs={} expr=v6914[1] }
    ac      = { defs={} expr=v6915[1] }
    vif     = { defs={} expr=v6916[1] }
    vip     = { defs={} expr=v6917[1] }
    id      = { defs={} expr=v6918[1] }
    ?22     = { defs={} expr=v6919[1] }
    ?23     = { defs={} expr=v6920[1] }
    ?24     = { defs={} expr=v6921[1] }
    ?25     = { defs={} expr=v6922[1] }
    ?26     = { defs={} expr=v6923[1] }
    ?27     = { defs={} expr=v6924[1] }
    ?28     = { defs={} expr=v6925[1] }
    ?29     = { defs={} expr=v6926[1] }
    ?30     = { defs={} expr=v6927[1] }
    ?31     = { defs={} expr=v6928[1] }
    ip      = { defs={0x080484e0} expr=0x080484e3[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v6888[32] -16[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v6888[32] -16[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v6888[32] -16[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32])))) }
      flags = { }
    address = { defs={0x080484db} expr=(add[32] v6888[32] -16[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32])))) }
      flags = { }
init mem:
null state
null state
0x80484e3:pop    ebx
registers:
    ax      = { 0x0 }
    cx      = { v36548 }
    dx      = { v36550-0xe0 }
    bx      = { v36791 }
    sp      = { v36551+0x10 }
    bp      = { v36552 }
    si      = { v36553 }
    di      = { v36554 }
    es      = { v36555 }
    cs      = { v36556 }
    ss      = { v36557 }
    ds      = { v36558 }
    fs      = { v36559 }
    gs      = { v36560 }
    cf      = { v36775 }
    ?1      = { v36562 }
    pf      = { -v36766+0x1 }
    ?3      = { v36564 }
    af      = { v36773 }
    ?5      = { v36566 }
    zf      = { v36771 }
    sf      = { v36769 }
    tf      = { v36569 }
    if      = { v36570 }
    df      = { v36571 }
    of      = { v36781 }
    iopl0   = { v36573 }
    iopl1   = { v36574 }
    nt      = { v36575 }
    ?15     = { v36576 }
    rf      = { v36577 }
    vm      = { v36578 }
    ac      = { v36579 }
    vif     = { v36580 }
    vip     = { v36581 }
    id      = { v36582 }
    ?22     = { v36583 }
    ?23     = { v36584 }
    ?24     = { v36585 }
    ?25     = { v36586 }
    ?26     = { v36587 }
    ?27     = { v36588 }
    ?28     = { v36589 }
    ?29     = { v36590 }
    ?30     = { v36591 }
    ?31     = { v36592 }
    ip      = { 0x80484e4 }
memory:
    address = { v36552-0x10 }
      value = { 0x0 }
      flags = { size=4 }
    address = { v36551+0xc }
      value = { v36791 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32]))) }
    cx      = { defs={} expr=v6884[32] }
    dx      = { defs={0x080484d0} expr=(add[32] v6886[32] -224[32]) }
    bx      = { defs={0x080484e3} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7309[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7310[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7311[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7312[8]))) }
    sp      = { defs={0x080484e0,0x080484e3} expr=(add[32] (add[32] v6887[32] 12[32]) 4[32]) }
    bp      = { defs={} expr=v6888[32] }
    si      = { defs={} expr=v6889[32] }
    di      = { defs={} expr=v6890[32] }
    es      = { defs={} expr=v6891[16] }
    cs      = { defs={} expr=v6892[16] }
    ss      = { defs={} expr=v6893[16] }
    ds      = { defs={} expr=v6894[16] }
    fs      = { defs={} expr=v6895[16] }
    gs      = { defs={} expr=v6896[16] }
    cf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6887[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6887[32]) 12[33]))))) }
    ?1      = { defs={} expr=v6898[1] }
    pf      = { defs={0x080484e0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v6887[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v6887[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v6887[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v6887[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v6887[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v6887[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v6887[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v6887[32] 12[32]))))))) }
    ?3      = { defs={} expr=v6900[1] }
    af      = { defs={0x080484e0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6887[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6887[32]) 12[33]))))) }
    ?5      = { defs={} expr=v6902[1] }
    zf      = { defs={0x080484e0} expr=(zerop[1] (add[32] v6887[32] 12[32])) }
    sf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (add[32] v6887[32] 12[32])) }
    tf      = { defs={} expr=v6905[1] }
    if      = { defs={} expr=v6906[1] }
    df      = { defs={} expr=v6907[1] }
    of      = { defs={0x080484e0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6887[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6887[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6887[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6887[32]) 12[33])))))) }
    iopl0   = { defs={} expr=v6909[1] }
    iopl1   = { defs={} expr=v6910[1] }
    nt      = { defs={} expr=v6911[1] }
    ?15     = { defs={} expr=v6912[1] }
    rf      = { defs={} expr=v6913[1] }
    vm      = { defs={} expr=v6914[1] }
    ac      = { defs={} expr=v6915[1] }
    vif     = { defs={} expr=v6916[1] }
    vip     = { defs={} expr=v6917[1] }
    id      = { defs={} expr=v6918[1] }
    ?22     = { defs={} expr=v6919[1] }
    ?23     = { defs={} expr=v6920[1] }
    ?24     = { defs={} expr=v6921[1] }
    ?25     = { defs={} expr=v6922[1] }
    ?26     = { defs={} expr=v6923[1] }
    ?27     = { defs={} expr=v6924[1] }
    ?28     = { defs={} expr=v6925[1] }
    ?29     = { defs={} expr=v6926[1] }
    ?30     = { defs={} expr=v6927[1] }
    ?31     = { defs={} expr=v6928[1] }
    ip      = { defs={0x080484e0,0x080484e3} expr=0x080484e4[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v6888[32] -16[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v6888[32] -16[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v6888[32] -16[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32])))) }
      flags = { }
    address = { defs={0x080484db} expr=(add[32] v6888[32] -16[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32])))) }
      flags = { }
init mem:
    address = { defs={} expr=(add[32] (add[32] v6887[32] 12[32]) 3[32]) }
      value = { defs={} expr=v7312[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v6887[32] 12[32]) 2[32]) }
      value = { defs={} expr=v7311[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v6887[32] 12[32]) 1[32]) }
      value = { defs={} expr=v7310[8] }
      flags = { rdonly }
    address = { defs={0x080484e0,0x080484e3} expr=(add[32] v6887[32] 12[32]) }
      value = { defs={} expr=v7309[8] }
      flags = { rdonly }
null state
null state
0x80484e4:pop    esi
registers:
    ax      = { 0x0 }
    cx      = { v36548 }
    dx      = { v36550-0xe0 }
    bx      = { v36791 }
    sp      = { v36551+0x14 }
    bp      = { v36552 }
    si      = { v36801 }
    di      = { v36554 }
    es      = { v36555 }
    cs      = { v36556 }
    ss      = { v36557 }
    ds      = { v36558 }
    fs      = { v36559 }
    gs      = { v36560 }
    cf      = { v36775 }
    ?1      = { v36562 }
    pf      = { -v36766+0x1 }
    ?3      = { v36564 }
    af      = { v36773 }
    ?5      = { v36566 }
    zf      = { v36771 }
    sf      = { v36769 }
    tf      = { v36569 }
    if      = { v36570 }
    df      = { v36571 }
    of      = { v36781 }
    iopl0   = { v36573 }
    iopl1   = { v36574 }
    nt      = { v36575 }
    ?15     = { v36576 }
    rf      = { v36577 }
    vm      = { v36578 }
    ac      = { v36579 }
    vif     = { v36580 }
    vip     = { v36581 }
    id      = { v36582 }
    ?22     = { v36583 }
    ?23     = { v36584 }
    ?24     = { v36585 }
    ?25     = { v36586 }
    ?26     = { v36587 }
    ?27     = { v36588 }
    ?28     = { v36589 }
    ?29     = { v36590 }
    ?30     = { v36591 }
    ?31     = { v36592 }
    ip      = { 0x80484e5 }
memory:
    address = { v36552-0x10 }
      value = { 0x0 }
      flags = { size=4 }
    address = { v36551+0xc }
      value = { v36791 }
      flags = { size=4; read-only }
    address = { v36551+0x10 }
      value = { v36801 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32]))) }
    cx      = { defs={} expr=v6884[32] }
    dx      = { defs={0x080484d0} expr=(add[32] v6886[32] -224[32]) }
    bx      = { defs={0x080484e3} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7309[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7310[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7311[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7312[8]))) }
    sp      = { defs={0x080484e0,0x080484e3,0x080484e4} expr=(add[32] (add[32] (add[32] v6887[32] 12[32]) 4[32]) 4[32]) }
    bp      = { defs={} expr=v6888[32] }
    si      = { defs={0x080484e4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7336[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7337[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7338[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7339[8]))) }
    di      = { defs={} expr=v6890[32] }
    es      = { defs={} expr=v6891[16] }
    cs      = { defs={} expr=v6892[16] }
    ss      = { defs={} expr=v6893[16] }
    ds      = { defs={} expr=v6894[16] }
    fs      = { defs={} expr=v6895[16] }
    gs      = { defs={} expr=v6896[16] }
    cf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6887[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6887[32]) 12[33]))))) }
    ?1      = { defs={} expr=v6898[1] }
    pf      = { defs={0x080484e0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v6887[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v6887[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v6887[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v6887[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v6887[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v6887[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v6887[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v6887[32] 12[32]))))))) }
    ?3      = { defs={} expr=v6900[1] }
    af      = { defs={0x080484e0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6887[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6887[32]) 12[33]))))) }
    ?5      = { defs={} expr=v6902[1] }
    zf      = { defs={0x080484e0} expr=(zerop[1] (add[32] v6887[32] 12[32])) }
    sf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (add[32] v6887[32] 12[32])) }
    tf      = { defs={} expr=v6905[1] }
    if      = { defs={} expr=v6906[1] }
    df      = { defs={} expr=v6907[1] }
    of      = { defs={0x080484e0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6887[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6887[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6887[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6887[32]) 12[33])))))) }
    iopl0   = { defs={} expr=v6909[1] }
    iopl1   = { defs={} expr=v6910[1] }
    nt      = { defs={} expr=v6911[1] }
    ?15     = { defs={} expr=v6912[1] }
    rf      = { defs={} expr=v6913[1] }
    vm      = { defs={} expr=v6914[1] }
    ac      = { defs={} expr=v6915[1] }
    vif     = { defs={} expr=v6916[1] }
    vip     = { defs={} expr=v6917[1] }
    id      = { defs={} expr=v6918[1] }
    ?22     = { defs={} expr=v6919[1] }
    ?23     = { defs={} expr=v6920[1] }
    ?24     = { defs={} expr=v6921[1] }
    ?25     = { defs={} expr=v6922[1] }
    ?26     = { defs={} expr=v6923[1] }
    ?27     = { defs={} expr=v6924[1] }
    ?28     = { defs={} expr=v6925[1] }
    ?29     = { defs={} expr=v6926[1] }
    ?30     = { defs={} expr=v6927[1] }
    ?31     = { defs={} expr=v6928[1] }
    ip      = { defs={0x080484e0,0x080484e3,0x080484e4} expr=0x080484e5[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v6888[32] -16[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v6888[32] -16[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v6888[32] -16[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32])))) }
      flags = { }
    address = { defs={0x080484db} expr=(add[32] v6888[32] -16[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32])))) }
      flags = { }
init mem:
    address = { defs={} expr=(add[32] (add[32] (add[32] v6887[32] 12[32]) 4[32]) 3[32]) }
      value = { defs={} expr=v7339[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] v6887[32] 12[32]) 4[32]) 2[32]) }
      value = { defs={} expr=v7338[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] v6887[32] 12[32]) 4[32]) 1[32]) }
      value = { defs={} expr=v7337[8] }
      flags = { rdonly }
    address = { defs={0x080484e0,0x080484e3,0x080484e4} expr=(add[32] (add[32] v6887[32] 12[32]) 4[32]) }
      value = { defs={} expr=v7336[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v6887[32] 12[32]) 3[32]) }
      value = { defs={} expr=v7312[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v6887[32] 12[32]) 2[32]) }
      value = { defs={} expr=v7311[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v6887[32] 12[32]) 1[32]) }
      value = { defs={} expr=v7310[8] }
      flags = { rdonly }
    address = { defs={0x080484e0,0x080484e3} expr=(add[32] v6887[32] 12[32]) }
      value = { defs={} expr=v7309[8] }
      flags = { rdonly }
null state
null state
0x80484e5:pop    edi
registers:
    ax      = { 0x0 }
    cx      = { v36548 }
    dx      = { v36550-0xe0 }
    bx      = { v36791 }
    sp      = { v36551+0x18 }
    bp      = { v36552 }
    si      = { v36801 }
    di      = { v36811 }
    es      = { v36555 }
    cs      = { v36556 }
    ss      = { v36557 }
    ds      = { v36558 }
    fs      = { v36559 }
    gs      = { v36560 }
    cf      = { v36775 }
    ?1      = { v36562 }
    pf      = { -v36766+0x1 }
    ?3      = { v36564 }
    af      = { v36773 }
    ?5      = { v36566 }
    zf      = { v36771 }
    sf      = { v36769 }
    tf      = { v36569 }
    if      = { v36570 }
    df      = { v36571 }
    of      = { v36781 }
    iopl0   = { v36573 }
    iopl1   = { v36574 }
    nt      = { v36575 }
    ?15     = { v36576 }
    rf      = { v36577 }
    vm      = { v36578 }
    ac      = { v36579 }
    vif     = { v36580 }
    vip     = { v36581 }
    id      = { v36582 }
    ?22     = { v36583 }
    ?23     = { v36584 }
    ?24     = { v36585 }
    ?25     = { v36586 }
    ?26     = { v36587 }
    ?27     = { v36588 }
    ?28     = { v36589 }
    ?29     = { v36590 }
    ?30     = { v36591 }
    ?31     = { v36592 }
    ip      = { 0x80484e6 }
memory:
    address = { v36552-0x10 }
      value = { 0x0 }
      flags = { size=4 }
    address = { v36551+0xc }
      value = { v36791 }
      flags = { size=4; read-only }
    address = { v36551+0x10 }
      value = { v36801 }
      flags = { size=4; read-only }
    address = { v36551+0x14 }
      value = { v36811 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32]))) }
    cx      = { defs={} expr=v6884[32] }
    dx      = { defs={0x080484d0} expr=(add[32] v6886[32] -224[32]) }
    bx      = { defs={0x080484e3} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7309[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7310[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7311[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7312[8]))) }
    sp      = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5} expr=(add[32] (add[32] (add[32] (add[32] v6887[32] 12[32]) 4[32]) 4[32]) 4[32]) }
    bp      = { defs={} expr=v6888[32] }
    si      = { defs={0x080484e4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7336[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7337[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7338[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7339[8]))) }
    di      = { defs={0x080484e5} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7363[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7364[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7365[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7366[8]))) }
    es      = { defs={} expr=v6891[16] }
    cs      = { defs={} expr=v6892[16] }
    ss      = { defs={} expr=v6893[16] }
    ds      = { defs={} expr=v6894[16] }
    fs      = { defs={} expr=v6895[16] }
    gs      = { defs={} expr=v6896[16] }
    cf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6887[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6887[32]) 12[33]))))) }
    ?1      = { defs={} expr=v6898[1] }
    pf      = { defs={0x080484e0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v6887[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v6887[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v6887[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v6887[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v6887[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v6887[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v6887[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v6887[32] 12[32]))))))) }
    ?3      = { defs={} expr=v6900[1] }
    af      = { defs={0x080484e0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6887[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6887[32]) 12[33]))))) }
    ?5      = { defs={} expr=v6902[1] }
    zf      = { defs={0x080484e0} expr=(zerop[1] (add[32] v6887[32] 12[32])) }
    sf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (add[32] v6887[32] 12[32])) }
    tf      = { defs={} expr=v6905[1] }
    if      = { defs={} expr=v6906[1] }
    df      = { defs={} expr=v6907[1] }
    of      = { defs={0x080484e0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6887[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6887[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6887[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6887[32]) 12[33])))))) }
    iopl0   = { defs={} expr=v6909[1] }
    iopl1   = { defs={} expr=v6910[1] }
    nt      = { defs={} expr=v6911[1] }
    ?15     = { defs={} expr=v6912[1] }
    rf      = { defs={} expr=v6913[1] }
    vm      = { defs={} expr=v6914[1] }
    ac      = { defs={} expr=v6915[1] }
    vif     = { defs={} expr=v6916[1] }
    vip     = { defs={} expr=v6917[1] }
    id      = { defs={} expr=v6918[1] }
    ?22     = { defs={} expr=v6919[1] }
    ?23     = { defs={} expr=v6920[1] }
    ?24     = { defs={} expr=v6921[1] }
    ?25     = { defs={} expr=v6922[1] }
    ?26     = { defs={} expr=v6923[1] }
    ?27     = { defs={} expr=v6924[1] }
    ?28     = { defs={} expr=v6925[1] }
    ?29     = { defs={} expr=v6926[1] }
    ?30     = { defs={} expr=v6927[1] }
    ?31     = { defs={} expr=v6928[1] }
    ip      = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5} expr=0x080484e6[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v6888[32] -16[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v6888[32] -16[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v6888[32] -16[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32])))) }
      flags = { }
    address = { defs={0x080484db} expr=(add[32] v6888[32] -16[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32])))) }
      flags = { }
init mem:
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v6887[32] 12[32]) 4[32]) 4[32]) 3[32]) }
      value = { defs={} expr=v7366[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v6887[32] 12[32]) 4[32]) 4[32]) 2[32]) }
      value = { defs={} expr=v7365[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v6887[32] 12[32]) 4[32]) 4[32]) 1[32]) }
      value = { defs={} expr=v7364[8] }
      flags = { rdonly }
    address = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5} expr=(add[32] (add[32] (add[32] v6887[32] 12[32]) 4[32]) 4[32]) }
      value = { defs={} expr=v7363[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] v6887[32] 12[32]) 4[32]) 3[32]) }
      value = { defs={} expr=v7339[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] v6887[32] 12[32]) 4[32]) 2[32]) }
      value = { defs={} expr=v7338[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] v6887[32] 12[32]) 4[32]) 1[32]) }
      value = { defs={} expr=v7337[8] }
      flags = { rdonly }
    address = { defs={0x080484e0,0x080484e3,0x080484e4} expr=(add[32] (add[32] v6887[32] 12[32]) 4[32]) }
      value = { defs={} expr=v7336[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v6887[32] 12[32]) 3[32]) }
      value = { defs={} expr=v7312[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v6887[32] 12[32]) 2[32]) }
      value = { defs={} expr=v7311[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v6887[32] 12[32]) 1[32]) }
      value = { defs={} expr=v7310[8] }
      flags = { rdonly }
    address = { defs={0x080484e0,0x080484e3} expr=(add[32] v6887[32] 12[32]) }
      value = { defs={} expr=v7309[8] }
      flags = { rdonly }
null state
null state
0x80484e6:pop    ebp
registers:
    ax      = { 0x0 }
    cx      = { v36548 }
    dx      = { v36550-0xe0 }
    bx      = { v36791 }
    sp      = { v36551+0x1c }
    bp      = { v36821 }
    si      = { v36801 }
    di      = { v36811 }
    es      = { v36555 }
    cs      = { v36556 }
    ss      = { v36557 }
    ds      = { v36558 }
    fs      = { v36559 }
    gs      = { v36560 }
    cf      = { v36775 }
    ?1      = { v36562 }
    pf      = { -v36766+0x1 }
    ?3      = { v36564 }
    af      = { v36773 }
    ?5      = { v36566 }
    zf      = { v36771 }
    sf      = { v36769 }
    tf      = { v36569 }
    if      = { v36570 }
    df      = { v36571 }
    of      = { v36781 }
    iopl0   = { v36573 }
    iopl1   = { v36574 }
    nt      = { v36575 }
    ?15     = { v36576 }
    rf      = { v36577 }
    vm      = { v36578 }
    ac      = { v36579 }
    vif     = { v36580 }
    vip     = { v36581 }
    id      = { v36582 }
    ?22     = { v36583 }
    ?23     = { v36584 }
    ?24     = { v36585 }
    ?25     = { v36586 }
    ?26     = { v36587 }
    ?27     = { v36588 }
    ?28     = { v36589 }
    ?29     = { v36590 }
    ?30     = { v36591 }
    ?31     = { v36592 }
    ip      = { 0x80484e7 }
memory:
    address = { v36552-0x10 }
      value = { 0x0 }
      flags = { size=4 }
    address = { v36551+0xc }
      value = { v36791 }
      flags = { size=4; read-only }
    address = { v36551+0x10 }
      value = { v36801 }
      flags = { size=4; read-only }
    address = { v36551+0x14 }
      value = { v36811 }
      flags = { size=4; read-only }
    address = { v36551+0x18 }
      value = { v36821 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32]))) }
    cx      = { defs={} expr=v6884[32] }
    dx      = { defs={0x080484d0} expr=(add[32] v6886[32] -224[32]) }
    bx      = { defs={0x080484e3} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7309[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7310[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7311[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7312[8]))) }
    sp      = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v6887[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) }
    bp      = { defs={0x080484e6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7390[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7391[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7392[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7393[8]))) }
    si      = { defs={0x080484e4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7336[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7337[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7338[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7339[8]))) }
    di      = { defs={0x080484e5} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7363[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7364[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7365[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7366[8]))) }
    es      = { defs={} expr=v6891[16] }
    cs      = { defs={} expr=v6892[16] }
    ss      = { defs={} expr=v6893[16] }
    ds      = { defs={} expr=v6894[16] }
    fs      = { defs={} expr=v6895[16] }
    gs      = { defs={} expr=v6896[16] }
    cf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6887[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6887[32]) 12[33]))))) }
    ?1      = { defs={} expr=v6898[1] }
    pf      = { defs={0x080484e0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v6887[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v6887[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v6887[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v6887[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v6887[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v6887[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v6887[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v6887[32] 12[32]))))))) }
    ?3      = { defs={} expr=v6900[1] }
    af      = { defs={0x080484e0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6887[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6887[32]) 12[33]))))) }
    ?5      = { defs={} expr=v6902[1] }
    zf      = { defs={0x080484e0} expr=(zerop[1] (add[32] v6887[32] 12[32])) }
    sf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (add[32] v6887[32] 12[32])) }
    tf      = { defs={} expr=v6905[1] }
    if      = { defs={} expr=v6906[1] }
    df      = { defs={} expr=v6907[1] }
    of      = { defs={0x080484e0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6887[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6887[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6887[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6887[32]) 12[33])))))) }
    iopl0   = { defs={} expr=v6909[1] }
    iopl1   = { defs={} expr=v6910[1] }
    nt      = { defs={} expr=v6911[1] }
    ?15     = { defs={} expr=v6912[1] }
    rf      = { defs={} expr=v6913[1] }
    vm      = { defs={} expr=v6914[1] }
    ac      = { defs={} expr=v6915[1] }
    vif     = { defs={} expr=v6916[1] }
    vip     = { defs={} expr=v6917[1] }
    id      = { defs={} expr=v6918[1] }
    ?22     = { defs={} expr=v6919[1] }
    ?23     = { defs={} expr=v6920[1] }
    ?24     = { defs={} expr=v6921[1] }
    ?25     = { defs={} expr=v6922[1] }
    ?26     = { defs={} expr=v6923[1] }
    ?27     = { defs={} expr=v6924[1] }
    ?28     = { defs={} expr=v6925[1] }
    ?29     = { defs={} expr=v6926[1] }
    ?30     = { defs={} expr=v6927[1] }
    ?31     = { defs={} expr=v6928[1] }
    ip      = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6} expr=0x080484e7[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v6888[32] -16[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v6888[32] -16[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v6888[32] -16[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32])))) }
      flags = { }
    address = { defs={0x080484db} expr=(add[32] v6888[32] -16[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32])))) }
      flags = { }
init mem:
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v6887[32] 12[32]) 4[32]) 4[32]) 4[32]) 3[32]) }
      value = { defs={} expr=v7393[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v6887[32] 12[32]) 4[32]) 4[32]) 4[32]) 2[32]) }
      value = { defs={} expr=v7392[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v6887[32] 12[32]) 4[32]) 4[32]) 4[32]) 1[32]) }
      value = { defs={} expr=v7391[8] }
      flags = { rdonly }
    address = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6} expr=(add[32] (add[32] (add[32] (add[32] v6887[32] 12[32]) 4[32]) 4[32]) 4[32]) }
      value = { defs={} expr=v7390[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v6887[32] 12[32]) 4[32]) 4[32]) 3[32]) }
      value = { defs={} expr=v7366[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v6887[32] 12[32]) 4[32]) 4[32]) 2[32]) }
      value = { defs={} expr=v7365[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v6887[32] 12[32]) 4[32]) 4[32]) 1[32]) }
      value = { defs={} expr=v7364[8] }
      flags = { rdonly }
    address = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5} expr=(add[32] (add[32] (add[32] v6887[32] 12[32]) 4[32]) 4[32]) }
      value = { defs={} expr=v7363[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] v6887[32] 12[32]) 4[32]) 3[32]) }
      value = { defs={} expr=v7339[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] v6887[32] 12[32]) 4[32]) 2[32]) }
      value = { defs={} expr=v7338[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] v6887[32] 12[32]) 4[32]) 1[32]) }
      value = { defs={} expr=v7337[8] }
      flags = { rdonly }
    address = { defs={0x080484e0,0x080484e3,0x080484e4} expr=(add[32] (add[32] v6887[32] 12[32]) 4[32]) }
      value = { defs={} expr=v7336[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v6887[32] 12[32]) 3[32]) }
      value = { defs={} expr=v7312[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v6887[32] 12[32]) 2[32]) }
      value = { defs={} expr=v7311[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v6887[32] 12[32]) 1[32]) }
      value = { defs={} expr=v7310[8] }
      flags = { rdonly }
    address = { defs={0x080484e0,0x080484e3} expr=(add[32] v6887[32] 12[32]) }
      value = { defs={} expr=v7309[8] }
      flags = { rdonly }
null state
null state
0x80484e7:ret    
registers:
    ax      = { 0x0 }
    cx      = { v36548 }
    dx      = { v36550-0xe0 }
    bx      = { v36791 }
    sp      = { v36551+0x20 }
    bp      = { v36821 }
    si      = { v36801 }
    di      = { v36811 }
    es      = { v36555 }
    cs      = { v36556 }
    ss      = { v36557 }
    ds      = { v36558 }
    fs      = { v36559 }
    gs      = { v36560 }
    cf      = { v36775 }
    ?1      = { v36562 }
    pf      = { -v36766+0x1 }
    ?3      = { v36564 }
    af      = { v36773 }
    ?5      = { v36566 }
    zf      = { v36771 }
    sf      = { v36769 }
    tf      = { v36569 }
    if      = { v36570 }
    df      = { v36571 }
    of      = { v36781 }
    iopl0   = { v36573 }
    iopl1   = { v36574 }
    nt      = { v36575 }
    ?15     = { v36576 }
    rf      = { v36577 }
    vm      = { v36578 }
    ac      = { v36579 }
    vif     = { v36580 }
    vip     = { v36581 }
    id      = { v36582 }
    ?22     = { v36583 }
    ?23     = { v36584 }
    ?24     = { v36585 }
    ?25     = { v36586 }
    ?26     = { v36587 }
    ?27     = { v36588 }
    ?28     = { v36589 }
    ?29     = { v36590 }
    ?30     = { v36591 }
    ?31     = { v36592 }
    ip      = { v36833 }
memory:
    address = { v36552-0x10 }
      value = { 0x0 }
      flags = { size=4 }
    address = { v36551+0xc }
      value = { v36791 }
      flags = { size=4; read-only }
    address = { v36551+0x10 }
      value = { v36801 }
      flags = { size=4; read-only }
    address = { v36551+0x14 }
      value = { v36811 }
      flags = { size=4; read-only }
    address = { v36551+0x18 }
      value = { v36821 }
      flags = { size=4; read-only }
    address = { v36551+0x1c }
      value = { v36833 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32]))) }
    cx      = { defs={} expr=v6884[32] }
    dx      = { defs={0x080484d0} expr=(add[32] v6886[32] -224[32]) }
    bx      = { defs={0x080484e3} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7309[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7310[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7311[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7312[8]))) }
    sp      = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6,0x080484e7} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v6887[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 4[32]) }
    bp      = { defs={0x080484e6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7390[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7391[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7392[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7393[8]))) }
    si      = { defs={0x080484e4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7336[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7337[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7338[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7339[8]))) }
    di      = { defs={0x080484e5} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7363[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7364[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7365[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7366[8]))) }
    es      = { defs={} expr=v6891[16] }
    cs      = { defs={} expr=v6892[16] }
    ss      = { defs={} expr=v6893[16] }
    ds      = { defs={} expr=v6894[16] }
    fs      = { defs={} expr=v6895[16] }
    gs      = { defs={} expr=v6896[16] }
    cf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6887[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6887[32]) 12[33]))))) }
    ?1      = { defs={} expr=v6898[1] }
    pf      = { defs={0x080484e0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v6887[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v6887[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v6887[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v6887[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v6887[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v6887[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v6887[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v6887[32] 12[32]))))))) }
    ?3      = { defs={} expr=v6900[1] }
    af      = { defs={0x080484e0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6887[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6887[32]) 12[33]))))) }
    ?5      = { defs={} expr=v6902[1] }
    zf      = { defs={0x080484e0} expr=(zerop[1] (add[32] v6887[32] 12[32])) }
    sf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (add[32] v6887[32] 12[32])) }
    tf      = { defs={} expr=v6905[1] }
    if      = { defs={} expr=v6906[1] }
    df      = { defs={} expr=v6907[1] }
    of      = { defs={0x080484e0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6887[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6887[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6887[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6887[32]) 12[33])))))) }
    iopl0   = { defs={} expr=v6909[1] }
    iopl1   = { defs={} expr=v6910[1] }
    nt      = { defs={} expr=v6911[1] }
    ?15     = { defs={} expr=v6912[1] }
    rf      = { defs={} expr=v6913[1] }
    vm      = { defs={} expr=v6914[1] }
    ac      = { defs={} expr=v6915[1] }
    vif     = { defs={} expr=v6916[1] }
    vip     = { defs={} expr=v6917[1] }
    id      = { defs={} expr=v6918[1] }
    ?22     = { defs={} expr=v6919[1] }
    ?23     = { defs={} expr=v6920[1] }
    ?24     = { defs={} expr=v6921[1] }
    ?25     = { defs={} expr=v6922[1] }
    ?26     = { defs={} expr=v6923[1] }
    ?27     = { defs={} expr=v6924[1] }
    ?28     = { defs={} expr=v6925[1] }
    ?29     = { defs={} expr=v6926[1] }
    ?30     = { defs={} expr=v6927[1] }
    ?31     = { defs={} expr=v6928[1] }
    ip      = { defs={0x080484e7} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7419[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7420[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7421[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7422[8]))) }
memory:
    address = { defs={} expr=(add[32] (add[32] v6888[32] -16[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v6888[32] -16[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v6888[32] -16[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32])))) }
      flags = { }
    address = { defs={0x080484db} expr=(add[32] v6888[32] -16[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v6886[32] -224[32]) (add[32] (invert[32] (add[32] v6886[32] -224[32])) 1[32])))) }
      flags = { }
init mem:
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v6887[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 3[32]) }
      value = { defs={} expr=v7422[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v6887[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 2[32]) }
      value = { defs={} expr=v7421[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v6887[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 1[32]) }
      value = { defs={} expr=v7420[8] }
      flags = { rdonly }
    address = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6,0x080484e7} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v6887[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) }
      value = { defs={} expr=v7419[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v6887[32] 12[32]) 4[32]) 4[32]) 4[32]) 3[32]) }
      value = { defs={} expr=v7393[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v6887[32] 12[32]) 4[32]) 4[32]) 4[32]) 2[32]) }
      value = { defs={} expr=v7392[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v6887[32] 12[32]) 4[32]) 4[32]) 4[32]) 1[32]) }
      value = { defs={} expr=v7391[8] }
      flags = { rdonly }
    address = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6} expr=(add[32] (add[32] (add[32] (add[32] v6887[32] 12[32]) 4[32]) 4[32]) 4[32]) }
      value = { defs={} expr=v7390[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v6887[32] 12[32]) 4[32]) 4[32]) 3[32]) }
      value = { defs={} expr=v7366[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v6887[32] 12[32]) 4[32]) 4[32]) 2[32]) }
      value = { defs={} expr=v7365[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v6887[32] 12[32]) 4[32]) 4[32]) 1[32]) }
      value = { defs={} expr=v7364[8] }
      flags = { rdonly }
    address = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5} expr=(add[32] (add[32] (add[32] v6887[32] 12[32]) 4[32]) 4[32]) }
      value = { defs={} expr=v7363[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] v6887[32] 12[32]) 4[32]) 3[32]) }
      value = { defs={} expr=v7339[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] v6887[32] 12[32]) 4[32]) 2[32]) }
      value = { defs={} expr=v7338[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] v6887[32] 12[32]) 4[32]) 1[32]) }
      value = { defs={} expr=v7337[8] }
      flags = { rdonly }
    address = { defs={0x080484e0,0x080484e3,0x080484e4} expr=(add[32] (add[32] v6887[32] 12[32]) 4[32]) }
      value = { defs={} expr=v7336[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v6887[32] 12[32]) 3[32]) }
      value = { defs={} expr=v7312[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v6887[32] 12[32]) 2[32]) }
      value = { defs={} expr=v7311[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v6887[32] 12[32]) 1[32]) }
      value = { defs={} expr=v7310[8] }
      flags = { rdonly }
    address = { defs={0x080484e0,0x080484e3} expr=(add[32] v6887[32] 12[32]) }
      value = { defs={} expr=v7309[8] }
      flags = { rdonly }
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048520:push   ebp
registers:
    ax      = { v36884 }
    cx      = { v36885 }
    dx      = { v36886 }
    bx      = { v36887 }
    sp      = { v36888-0x4 }
    bp      = { v36889 }
    si      = { v36890 }
    di      = { v36891 }
    es      = { v36892 }
    cs      = { v36893 }
    ss      = { v36894 }
    ds      = { v36895 }
    fs      = { v36896 }
    gs      = { v36897 }
    cf      = { v36898 }
    ?1      = { v36899 }
    pf      = { v36900 }
    ?3      = { v36901 }
    af      = { v36902 }
    ?5      = { v36903 }
    zf      = { v36904 }
    sf      = { v36905 }
    tf      = { v36906 }
    if      = { v36907 }
    df      = { v36908 }
    of      = { v36909 }
    iopl0   = { v36910 }
    iopl1   = { v36911 }
    nt      = { v36912 }
    ?15     = { v36913 }
    rf      = { v36914 }
    vm      = { v36915 }
    ac      = { v36916 }
    vif     = { v36917 }
    vip     = { v36918 }
    id      = { v36919 }
    ?22     = { v36920 }
    ?23     = { v36921 }
    ?24     = { v36922 }
    ?25     = { v36923 }
    ?26     = { v36924 }
    ?27     = { v36925 }
    ?28     = { v36926 }
    ?29     = { v36927 }
    ?30     = { v36928 }
    ?31     = { v36929 }
    ip      = { 0x8048521 }
memory:
    address = { v36888-0x4 }
      value = { v36889 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v7480[32] }
    cx      = { defs={} expr=v7481[32] }
    dx      = { defs={} expr=v7482[32] }
    bx      = { defs={} expr=v7483[32] }
    sp      = { defs={0x08048520} expr=(add[32] v7484[32] -4[32]) }
    bp      = { defs={} expr=v7485[32] }
    si      = { defs={} expr=v7486[32] }
    di      = { defs={} expr=v7487[32] }
    es      = { defs={} expr=v7488[16] }
    cs      = { defs={} expr=v7489[16] }
    ss      = { defs={} expr=v7490[16] }
    ds      = { defs={} expr=v7491[16] }
    fs      = { defs={} expr=v7492[16] }
    gs      = { defs={} expr=v7493[16] }
    cf      = { defs={} expr=v7494[1] }
    ?1      = { defs={} expr=v7495[1] }
    pf      = { defs={} expr=v7496[1] }
    ?3      = { defs={} expr=v7497[1] }
    af      = { defs={} expr=v7498[1] }
    ?5      = { defs={} expr=v7499[1] }
    zf      = { defs={} expr=v7500[1] }
    sf      = { defs={} expr=v7501[1] }
    tf      = { defs={} expr=v7502[1] }
    if      = { defs={} expr=v7503[1] }
    df      = { defs={} expr=v7504[1] }
    of      = { defs={} expr=v7505[1] }
    iopl0   = { defs={} expr=v7506[1] }
    iopl1   = { defs={} expr=v7507[1] }
    nt      = { defs={} expr=v7508[1] }
    ?15     = { defs={} expr=v7509[1] }
    rf      = { defs={} expr=v7510[1] }
    vm      = { defs={} expr=v7511[1] }
    ac      = { defs={} expr=v7512[1] }
    vif     = { defs={} expr=v7513[1] }
    vip     = { defs={} expr=v7514[1] }
    id      = { defs={} expr=v7515[1] }
    ?22     = { defs={} expr=v7516[1] }
    ?23     = { defs={} expr=v7517[1] }
    ?24     = { defs={} expr=v7518[1] }
    ?25     = { defs={} expr=v7519[1] }
    ?26     = { defs={} expr=v7520[1] }
    ?27     = { defs={} expr=v7521[1] }
    ?28     = { defs={} expr=v7522[1] }
    ?29     = { defs={} expr=v7523[1] }
    ?30     = { defs={} expr=v7524[1] }
    ?31     = { defs={} expr=v7525[1] }
    ip      = { defs={0x08048520} expr=0x08048521[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v7484[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v7485[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v7484[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v7485[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v7484[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v7485[32]) }
      flags = { }
    address = { defs={0x08048520} expr=(add[32] v7484[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v7485[32]) }
      flags = { }
init mem:
null state
null state
0x8048521:mov    ebp, esp
registers:
    ax      = { v36884 }
    cx      = { v36885 }
    dx      = { v36886 }
    bx      = { v36887 }
    sp      = { v36888-0x4 }
    bp      = { v36888-0x4 }
    si      = { v36890 }
    di      = { v36891 }
    es      = { v36892 }
    cs      = { v36893 }
    ss      = { v36894 }
    ds      = { v36895 }
    fs      = { v36896 }
    gs      = { v36897 }
    cf      = { v36898 }
    ?1      = { v36899 }
    pf      = { v36900 }
    ?3      = { v36901 }
    af      = { v36902 }
    ?5      = { v36903 }
    zf      = { v36904 }
    sf      = { v36905 }
    tf      = { v36906 }
    if      = { v36907 }
    df      = { v36908 }
    of      = { v36909 }
    iopl0   = { v36910 }
    iopl1   = { v36911 }
    nt      = { v36912 }
    ?15     = { v36913 }
    rf      = { v36914 }
    vm      = { v36915 }
    ac      = { v36916 }
    vif     = { v36917 }
    vip     = { v36918 }
    id      = { v36919 }
    ?22     = { v36920 }
    ?23     = { v36921 }
    ?24     = { v36922 }
    ?25     = { v36923 }
    ?26     = { v36924 }
    ?27     = { v36925 }
    ?28     = { v36926 }
    ?29     = { v36927 }
    ?30     = { v36928 }
    ?31     = { v36929 }
    ip      = { 0x8048523 }
memory:
    address = { v36888-0x4 }
      value = { v36889 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v7480[32] }
    cx      = { defs={} expr=v7481[32] }
    dx      = { defs={} expr=v7482[32] }
    bx      = { defs={} expr=v7483[32] }
    sp      = { defs={0x08048520} expr=(add[32] v7484[32] -4[32]) }
    bp      = { defs={0x08048520,0x08048521} expr=(add[32] v7484[32] -4[32]) }
    si      = { defs={} expr=v7486[32] }
    di      = { defs={} expr=v7487[32] }
    es      = { defs={} expr=v7488[16] }
    cs      = { defs={} expr=v7489[16] }
    ss      = { defs={} expr=v7490[16] }
    ds      = { defs={} expr=v7491[16] }
    fs      = { defs={} expr=v7492[16] }
    gs      = { defs={} expr=v7493[16] }
    cf      = { defs={} expr=v7494[1] }
    ?1      = { defs={} expr=v7495[1] }
    pf      = { defs={} expr=v7496[1] }
    ?3      = { defs={} expr=v7497[1] }
    af      = { defs={} expr=v7498[1] }
    ?5      = { defs={} expr=v7499[1] }
    zf      = { defs={} expr=v7500[1] }
    sf      = { defs={} expr=v7501[1] }
    tf      = { defs={} expr=v7502[1] }
    if      = { defs={} expr=v7503[1] }
    df      = { defs={} expr=v7504[1] }
    of      = { defs={} expr=v7505[1] }
    iopl0   = { defs={} expr=v7506[1] }
    iopl1   = { defs={} expr=v7507[1] }
    nt      = { defs={} expr=v7508[1] }
    ?15     = { defs={} expr=v7509[1] }
    rf      = { defs={} expr=v7510[1] }
    vm      = { defs={} expr=v7511[1] }
    ac      = { defs={} expr=v7512[1] }
    vif     = { defs={} expr=v7513[1] }
    vip     = { defs={} expr=v7514[1] }
    id      = { defs={} expr=v7515[1] }
    ?22     = { defs={} expr=v7516[1] }
    ?23     = { defs={} expr=v7517[1] }
    ?24     = { defs={} expr=v7518[1] }
    ?25     = { defs={} expr=v7519[1] }
    ?26     = { defs={} expr=v7520[1] }
    ?27     = { defs={} expr=v7521[1] }
    ?28     = { defs={} expr=v7522[1] }
    ?29     = { defs={} expr=v7523[1] }
    ?30     = { defs={} expr=v7524[1] }
    ?31     = { defs={} expr=v7525[1] }
    ip      = { defs={0x08048520,0x08048521} expr=0x08048523[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v7484[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v7485[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v7484[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v7485[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v7484[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v7485[32]) }
      flags = { }
    address = { defs={0x08048520} expr=(add[32] v7484[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v7485[32]) }
      flags = { }
init mem:
null state
null state
0x8048523:push   edi
registers:
    ax      = { v36884 }
    cx      = { v36885 }
    dx      = { v36886 }
    bx      = { v36887 }
    sp      = { v36888-0x8 }
    bp      = { v36888-0x4 }
    si      = { v36890 }
    di      = { v36891 }
    es      = { v36892 }
    cs      = { v36893 }
    ss      = { v36894 }
    ds      = { v36895 }
    fs      = { v36896 }
    gs      = { v36897 }
    cf      = { v36898 }
    ?1      = { v36899 }
    pf      = { v36900 }
    ?3      = { v36901 }
    af      = { v36902 }
    ?5      = { v36903 }
    zf      = { v36904 }
    sf      = { v36905 }
    tf      = { v36906 }
    if      = { v36907 }
    df      = { v36908 }
    of      = { v36909 }
    iopl0   = { v36910 }
    iopl1   = { v36911 }
    nt      = { v36912 }
    ?15     = { v36913 }
    rf      = { v36914 }
    vm      = { v36915 }
    ac      = { v36916 }
    vif     = { v36917 }
    vip     = { v36918 }
    id      = { v36919 }
    ?22     = { v36920 }
    ?23     = { v36921 }
    ?24     = { v36922 }
    ?25     = { v36923 }
    ?26     = { v36924 }
    ?27     = { v36925 }
    ?28     = { v36926 }
    ?29     = { v36927 }
    ?30     = { v36928 }
    ?31     = { v36929 }
    ip      = { 0x8048524 }
memory:
    address = { v36888-0x4 }
      value = { v36889 }
      flags = { size=4 }
    address = { v36888-0x8 }
      value = { v36891 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v7480[32] }
    cx      = { defs={} expr=v7481[32] }
    dx      = { defs={} expr=v7482[32] }
    bx      = { defs={} expr=v7483[32] }
    sp      = { defs={0x08048520,0x08048523} expr=(add[32] (add[32] v7484[32] -4[32]) -4[32]) }
    bp      = { defs={0x08048520,0x08048521} expr=(add[32] v7484[32] -4[32]) }
    si      = { defs={} expr=v7486[32] }
    di      = { defs={} expr=v7487[32] }
    es      = { defs={} expr=v7488[16] }
    cs      = { defs={} expr=v7489[16] }
    ss      = { defs={} expr=v7490[16] }
    ds      = { defs={} expr=v7491[16] }
    fs      = { defs={} expr=v7492[16] }
    gs      = { defs={} expr=v7493[16] }
    cf      = { defs={} expr=v7494[1] }
    ?1      = { defs={} expr=v7495[1] }
    pf      = { defs={} expr=v7496[1] }
    ?3      = { defs={} expr=v7497[1] }
    af      = { defs={} expr=v7498[1] }
    ?5      = { defs={} expr=v7499[1] }
    zf      = { defs={} expr=v7500[1] }
    sf      = { defs={} expr=v7501[1] }
    tf      = { defs={} expr=v7502[1] }
    if      = { defs={} expr=v7503[1] }
    df      = { defs={} expr=v7504[1] }
    of      = { defs={} expr=v7505[1] }
    iopl0   = { defs={} expr=v7506[1] }
    iopl1   = { defs={} expr=v7507[1] }
    nt      = { defs={} expr=v7508[1] }
    ?15     = { defs={} expr=v7509[1] }
    rf      = { defs={} expr=v7510[1] }
    vm      = { defs={} expr=v7511[1] }
    ac      = { defs={} expr=v7512[1] }
    vif     = { defs={} expr=v7513[1] }
    vip     = { defs={} expr=v7514[1] }
    id      = { defs={} expr=v7515[1] }
    ?22     = { defs={} expr=v7516[1] }
    ?23     = { defs={} expr=v7517[1] }
    ?24     = { defs={} expr=v7518[1] }
    ?25     = { defs={} expr=v7519[1] }
    ?26     = { defs={} expr=v7520[1] }
    ?27     = { defs={} expr=v7521[1] }
    ?28     = { defs={} expr=v7522[1] }
    ?29     = { defs={} expr=v7523[1] }
    ?30     = { defs={} expr=v7524[1] }
    ?31     = { defs={} expr=v7525[1] }
    ip      = { defs={0x08048520,0x08048521,0x08048523} expr=0x08048524[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v7487[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v7487[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v7487[32]) }
      flags = { }
    address = { defs={0x08048520,0x08048523} expr=(add[32] (add[32] v7484[32] -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v7487[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v7484[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v7485[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v7484[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v7485[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v7484[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v7485[32]) }
      flags = { }
    address = { defs={0x08048520} expr=(add[32] v7484[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v7485[32]) }
      flags = { }
init mem:
null state
null state
0x8048524:push   esi
registers:
    ax      = { v36884 }
    cx      = { v36885 }
    dx      = { v36886 }
    bx      = { v36887 }
    sp      = { v36888-0xc }
    bp      = { v36888-0x4 }
    si      = { v36890 }
    di      = { v36891 }
    es      = { v36892 }
    cs      = { v36893 }
    ss      = { v36894 }
    ds      = { v36895 }
    fs      = { v36896 }
    gs      = { v36897 }
    cf      = { v36898 }
    ?1      = { v36899 }
    pf      = { v36900 }
    ?3      = { v36901 }
    af      = { v36902 }
    ?5      = { v36903 }
    zf      = { v36904 }
    sf      = { v36905 }
    tf      = { v36906 }
    if      = { v36907 }
    df      = { v36908 }
    of      = { v36909 }
    iopl0   = { v36910 }
    iopl1   = { v36911 }
    nt      = { v36912 }
    ?15     = { v36913 }
    rf      = { v36914 }
    vm      = { v36915 }
    ac      = { v36916 }
    vif     = { v36917 }
    vip     = { v36918 }
    id      = { v36919 }
    ?22     = { v36920 }
    ?23     = { v36921 }
    ?24     = { v36922 }
    ?25     = { v36923 }
    ?26     = { v36924 }
    ?27     = { v36925 }
    ?28     = { v36926 }
    ?29     = { v36927 }
    ?30     = { v36928 }
    ?31     = { v36929 }
    ip      = { 0x8048525 }
memory:
    address = { v36888-0x4 }
      value = { v36889 }
      flags = { size=4 }
    address = { v36888-0x8 }
      value = { v36891 }
      flags = { size=4 }
    address = { v36888-0xc }
      value = { v36890 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v7480[32] }
    cx      = { defs={} expr=v7481[32] }
    dx      = { defs={} expr=v7482[32] }
    bx      = { defs={} expr=v7483[32] }
    sp      = { defs={0x08048520,0x08048523,0x08048524} expr=(add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) }
    bp      = { defs={0x08048520,0x08048521} expr=(add[32] v7484[32] -4[32]) }
    si      = { defs={} expr=v7486[32] }
    di      = { defs={} expr=v7487[32] }
    es      = { defs={} expr=v7488[16] }
    cs      = { defs={} expr=v7489[16] }
    ss      = { defs={} expr=v7490[16] }
    ds      = { defs={} expr=v7491[16] }
    fs      = { defs={} expr=v7492[16] }
    gs      = { defs={} expr=v7493[16] }
    cf      = { defs={} expr=v7494[1] }
    ?1      = { defs={} expr=v7495[1] }
    pf      = { defs={} expr=v7496[1] }
    ?3      = { defs={} expr=v7497[1] }
    af      = { defs={} expr=v7498[1] }
    ?5      = { defs={} expr=v7499[1] }
    zf      = { defs={} expr=v7500[1] }
    sf      = { defs={} expr=v7501[1] }
    tf      = { defs={} expr=v7502[1] }
    if      = { defs={} expr=v7503[1] }
    df      = { defs={} expr=v7504[1] }
    of      = { defs={} expr=v7505[1] }
    iopl0   = { defs={} expr=v7506[1] }
    iopl1   = { defs={} expr=v7507[1] }
    nt      = { defs={} expr=v7508[1] }
    ?15     = { defs={} expr=v7509[1] }
    rf      = { defs={} expr=v7510[1] }
    vm      = { defs={} expr=v7511[1] }
    ac      = { defs={} expr=v7512[1] }
    vif     = { defs={} expr=v7513[1] }
    vip     = { defs={} expr=v7514[1] }
    id      = { defs={} expr=v7515[1] }
    ?22     = { defs={} expr=v7516[1] }
    ?23     = { defs={} expr=v7517[1] }
    ?24     = { defs={} expr=v7518[1] }
    ?25     = { defs={} expr=v7519[1] }
    ?26     = { defs={} expr=v7520[1] }
    ?27     = { defs={} expr=v7521[1] }
    ?28     = { defs={} expr=v7522[1] }
    ?29     = { defs={} expr=v7523[1] }
    ?30     = { defs={} expr=v7524[1] }
    ?31     = { defs={} expr=v7525[1] }
    ip      = { defs={0x08048520,0x08048521,0x08048523,0x08048524} expr=0x08048525[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v7486[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v7486[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v7486[32]) }
      flags = { }
    address = { defs={0x08048520,0x08048523,0x08048524} expr=(add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v7486[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v7487[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v7487[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v7487[32]) }
      flags = { }
    address = { defs={0x08048520,0x08048523} expr=(add[32] (add[32] v7484[32] -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v7487[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v7484[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v7485[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v7484[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v7485[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v7484[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v7485[32]) }
      flags = { }
    address = { defs={0x08048520} expr=(add[32] v7484[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v7485[32]) }
      flags = { }
init mem:
null state
null state
0x8048525:push   ebx
registers:
    ax      = { v36884 }
    cx      = { v36885 }
    dx      = { v36886 }
    bx      = { v36887 }
    sp      = { v36888-0x10 }
    bp      = { v36888-0x4 }
    si      = { v36890 }
    di      = { v36891 }
    es      = { v36892 }
    cs      = { v36893 }
    ss      = { v36894 }
    ds      = { v36895 }
    fs      = { v36896 }
    gs      = { v36897 }
    cf      = { v36898 }
    ?1      = { v36899 }
    pf      = { v36900 }
    ?3      = { v36901 }
    af      = { v36902 }
    ?5      = { v36903 }
    zf      = { v36904 }
    sf      = { v36905 }
    tf      = { v36906 }
    if      = { v36907 }
    df      = { v36908 }
    of      = { v36909 }
    iopl0   = { v36910 }
    iopl1   = { v36911 }
    nt      = { v36912 }
    ?15     = { v36913 }
    rf      = { v36914 }
    vm      = { v36915 }
    ac      = { v36916 }
    vif     = { v36917 }
    vip     = { v36918 }
    id      = { v36919 }
    ?22     = { v36920 }
    ?23     = { v36921 }
    ?24     = { v36922 }
    ?25     = { v36923 }
    ?26     = { v36924 }
    ?27     = { v36925 }
    ?28     = { v36926 }
    ?29     = { v36927 }
    ?30     = { v36928 }
    ?31     = { v36929 }
    ip      = { 0x8048526 }
memory:
    address = { v36888-0x4 }
      value = { v36889 }
      flags = { size=4 }
    address = { v36888-0x8 }
      value = { v36891 }
      flags = { size=4 }
    address = { v36888-0xc }
      value = { v36890 }
      flags = { size=4 }
    address = { v36888-0x10 }
      value = { v36887 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v7480[32] }
    cx      = { defs={} expr=v7481[32] }
    dx      = { defs={} expr=v7482[32] }
    bx      = { defs={} expr=v7483[32] }
    sp      = { defs={0x08048520,0x08048523,0x08048524,0x08048525} expr=(add[32] (add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) -4[32]) }
    bp      = { defs={0x08048520,0x08048521} expr=(add[32] v7484[32] -4[32]) }
    si      = { defs={} expr=v7486[32] }
    di      = { defs={} expr=v7487[32] }
    es      = { defs={} expr=v7488[16] }
    cs      = { defs={} expr=v7489[16] }
    ss      = { defs={} expr=v7490[16] }
    ds      = { defs={} expr=v7491[16] }
    fs      = { defs={} expr=v7492[16] }
    gs      = { defs={} expr=v7493[16] }
    cf      = { defs={} expr=v7494[1] }
    ?1      = { defs={} expr=v7495[1] }
    pf      = { defs={} expr=v7496[1] }
    ?3      = { defs={} expr=v7497[1] }
    af      = { defs={} expr=v7498[1] }
    ?5      = { defs={} expr=v7499[1] }
    zf      = { defs={} expr=v7500[1] }
    sf      = { defs={} expr=v7501[1] }
    tf      = { defs={} expr=v7502[1] }
    if      = { defs={} expr=v7503[1] }
    df      = { defs={} expr=v7504[1] }
    of      = { defs={} expr=v7505[1] }
    iopl0   = { defs={} expr=v7506[1] }
    iopl1   = { defs={} expr=v7507[1] }
    nt      = { defs={} expr=v7508[1] }
    ?15     = { defs={} expr=v7509[1] }
    rf      = { defs={} expr=v7510[1] }
    vm      = { defs={} expr=v7511[1] }
    ac      = { defs={} expr=v7512[1] }
    vif     = { defs={} expr=v7513[1] }
    vip     = { defs={} expr=v7514[1] }
    id      = { defs={} expr=v7515[1] }
    ?22     = { defs={} expr=v7516[1] }
    ?23     = { defs={} expr=v7517[1] }
    ?24     = { defs={} expr=v7518[1] }
    ?25     = { defs={} expr=v7519[1] }
    ?26     = { defs={} expr=v7520[1] }
    ?27     = { defs={} expr=v7521[1] }
    ?28     = { defs={} expr=v7522[1] }
    ?29     = { defs={} expr=v7523[1] }
    ?30     = { defs={} expr=v7524[1] }
    ?31     = { defs={} expr=v7525[1] }
    ip      = { defs={0x08048520,0x08048521,0x08048523,0x08048524,0x08048525} expr=0x08048526[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v7483[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v7483[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v7483[32]) }
      flags = { }
    address = { defs={0x08048520,0x08048523,0x08048524,0x08048525} expr=(add[32] (add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v7483[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v7486[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v7486[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v7486[32]) }
      flags = { }
    address = { defs={0x08048520,0x08048523,0x08048524} expr=(add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v7486[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v7487[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v7487[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v7487[32]) }
      flags = { }
    address = { defs={0x08048520,0x08048523} expr=(add[32] (add[32] v7484[32] -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v7487[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v7484[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v7485[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v7484[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v7485[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v7484[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v7485[32]) }
      flags = { }
    address = { defs={0x08048520} expr=(add[32] v7484[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v7485[32]) }
      flags = { }
init mem:
null state
null state
0x8048526:sub    esp, 0x0c
registers:
    ax      = { v36884 }
    cx      = { v36885 }
    dx      = { v36886 }
    bx      = { v36887 }
    sp      = { v36888-0x1c }
    bp      = { v36888-0x4 }
    si      = { v36890 }
    di      = { v36891 }
    es      = { v36892 }
    cs      = { v36893 }
    ss      = { v36894 }
    ds      = { v36895 }
    fs      = { v36896 }
    gs      = { v36897 }
    cf      = { -v37022+0x1 }
    ?1      = { v36899 }
    pf      = { -v37012+0x1 }
    ?3      = { v36901 }
    af      = { -v37019+0x1 }
    ?5      = { v36903 }
    zf      = { v37017 }
    sf      = { v37015 }
    tf      = { v36906 }
    if      = { v36907 }
    df      = { v36908 }
    of      = { v37029 }
    iopl0   = { v36910 }
    iopl1   = { v36911 }
    nt      = { v36912 }
    ?15     = { v36913 }
    rf      = { v36914 }
    vm      = { v36915 }
    ac      = { v36916 }
    vif     = { v36917 }
    vip     = { v36918 }
    id      = { v36919 }
    ?22     = { v36920 }
    ?23     = { v36921 }
    ?24     = { v36922 }
    ?25     = { v36923 }
    ?26     = { v36924 }
    ?27     = { v36925 }
    ?28     = { v36926 }
    ?29     = { v36927 }
    ?30     = { v36928 }
    ?31     = { v36929 }
    ip      = { 0x8048529 }
memory:
    address = { v36888-0x4 }
      value = { v36889 }
      flags = { size=4 }
    address = { v36888-0x8 }
      value = { v36891 }
      flags = { size=4 }
    address = { v36888-0xc }
      value = { v36890 }
      flags = { size=4 }
    address = { v36888-0x10 }
      value = { v36887 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v7480[32] }
    cx      = { defs={} expr=v7481[32] }
    dx      = { defs={} expr=v7482[32] }
    bx      = { defs={} expr=v7483[32] }
    sp      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) }
    bp      = { defs={0x08048520,0x08048521} expr=(add[32] v7484[32] -4[32]) }
    si      = { defs={} expr=v7486[32] }
    di      = { defs={} expr=v7487[32] }
    es      = { defs={} expr=v7488[16] }
    cs      = { defs={} expr=v7489[16] }
    ss      = { defs={} expr=v7490[16] }
    ds      = { defs={} expr=v7491[16] }
    fs      = { defs={} expr=v7492[16] }
    gs      = { defs={} expr=v7493[16] }
    cf      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
    ?1      = { defs={} expr=v7495[1] }
    pf      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))))) }
    ?3      = { defs={} expr=v7497[1] }
    af      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
    ?5      = { defs={} expr=v7499[1] }
    zf      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(zerop[1] (add[32] (add[32] (add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])) }
    sf      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])) }
    tf      = { defs={} expr=v7502[1] }
    if      = { defs={} expr=v7503[1] }
    df      = { defs={} expr=v7504[1] }
    of      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
    iopl0   = { defs={} expr=v7506[1] }
    iopl1   = { defs={} expr=v7507[1] }
    nt      = { defs={} expr=v7508[1] }
    ?15     = { defs={} expr=v7509[1] }
    rf      = { defs={} expr=v7510[1] }
    vm      = { defs={} expr=v7511[1] }
    ac      = { defs={} expr=v7512[1] }
    vif     = { defs={} expr=v7513[1] }
    vip     = { defs={} expr=v7514[1] }
    id      = { defs={} expr=v7515[1] }
    ?22     = { defs={} expr=v7516[1] }
    ?23     = { defs={} expr=v7517[1] }
    ?24     = { defs={} expr=v7518[1] }
    ?25     = { defs={} expr=v7519[1] }
    ?26     = { defs={} expr=v7520[1] }
    ?27     = { defs={} expr=v7521[1] }
    ?28     = { defs={} expr=v7522[1] }
    ?29     = { defs={} expr=v7523[1] }
    ?30     = { defs={} expr=v7524[1] }
    ?31     = { defs={} expr=v7525[1] }
    ip      = { defs={0x08048520,0x08048521,0x08048523,0x08048524,0x08048525,0x08048526} expr=0x08048529[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v7483[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v7483[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v7483[32]) }
      flags = { }
    address = { defs={0x08048520,0x08048523,0x08048524,0x08048525} expr=(add[32] (add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v7483[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v7486[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v7486[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v7486[32]) }
      flags = { }
    address = { defs={0x08048520,0x08048523,0x08048524} expr=(add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v7486[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v7487[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v7487[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v7487[32]) }
      flags = { }
    address = { defs={0x08048520,0x08048523} expr=(add[32] (add[32] v7484[32] -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v7487[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v7484[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v7485[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v7484[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v7485[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v7484[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v7485[32]) }
      flags = { }
    address = { defs={0x08048520} expr=(add[32] v7484[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v7485[32]) }
      flags = { }
init mem:
null state
null state
0x8048529:call   0x0804852e<<Insn>>
registers:
    ax      = { v36884 }
    cx      = { v36885 }
    dx      = { v36886 }
    bx      = { v36887 }
    sp      = { v36888-0x20 }
    bp      = { v36888-0x4 }
    si      = { v36890 }
    di      = { v36891 }
    es      = { v36892 }
    cs      = { v36893 }
    ss      = { v36894 }
    ds      = { v36895 }
    fs      = { v36896 }
    gs      = { v36897 }
    cf      = { -v37022+0x1 }
    ?1      = { v36899 }
    pf      = { -v37012+0x1 }
    ?3      = { v36901 }
    af      = { -v37019+0x1 }
    ?5      = { v36903 }
    zf      = { v37017 }
    sf      = { v37015 }
    tf      = { v36906 }
    if      = { v36907 }
    df      = { v36908 }
    of      = { v37029 }
    iopl0   = { v36910 }
    iopl1   = { v36911 }
    nt      = { v36912 }
    ?15     = { v36913 }
    rf      = { v36914 }
    vm      = { v36915 }
    ac      = { v36916 }
    vif     = { v36917 }
    vip     = { v36918 }
    id      = { v36919 }
    ?22     = { v36920 }
    ?23     = { v36921 }
    ?24     = { v36922 }
    ?25     = { v36923 }
    ?26     = { v36924 }
    ?27     = { v36925 }
    ?28     = { v36926 }
    ?29     = { v36927 }
    ?30     = { v36928 }
    ?31     = { v36929 }
    ip      = { 0x804852e }
memory:
    address = { v36888-0x4 }
      value = { v36889 }
      flags = { size=4 }
    address = { v36888-0x8 }
      value = { v36891 }
      flags = { size=4 }
    address = { v36888-0xc }
      value = { v36890 }
      flags = { size=4 }
    address = { v36888-0x10 }
      value = { v36887 }
      flags = { size=4 }
    address = { v36888-0x20 }
      value = { 0x804852e }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v7480[32] }
    cx      = { defs={} expr=v7481[32] }
    dx      = { defs={} expr=v7482[32] }
    bx      = { defs={} expr=v7483[32] }
    sp      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526,0x08048529} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) }
    bp      = { defs={0x08048520,0x08048521} expr=(add[32] v7484[32] -4[32]) }
    si      = { defs={} expr=v7486[32] }
    di      = { defs={} expr=v7487[32] }
    es      = { defs={} expr=v7488[16] }
    cs      = { defs={} expr=v7489[16] }
    ss      = { defs={} expr=v7490[16] }
    ds      = { defs={} expr=v7491[16] }
    fs      = { defs={} expr=v7492[16] }
    gs      = { defs={} expr=v7493[16] }
    cf      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
    ?1      = { defs={} expr=v7495[1] }
    pf      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))))) }
    ?3      = { defs={} expr=v7497[1] }
    af      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
    ?5      = { defs={} expr=v7499[1] }
    zf      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(zerop[1] (add[32] (add[32] (add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])) }
    sf      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])) }
    tf      = { defs={} expr=v7502[1] }
    if      = { defs={} expr=v7503[1] }
    df      = { defs={} expr=v7504[1] }
    of      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
    iopl0   = { defs={} expr=v7506[1] }
    iopl1   = { defs={} expr=v7507[1] }
    nt      = { defs={} expr=v7508[1] }
    ?15     = { defs={} expr=v7509[1] }
    rf      = { defs={} expr=v7510[1] }
    vm      = { defs={} expr=v7511[1] }
    ac      = { defs={} expr=v7512[1] }
    vif     = { defs={} expr=v7513[1] }
    vip     = { defs={} expr=v7514[1] }
    id      = { defs={} expr=v7515[1] }
    ?22     = { defs={} expr=v7516[1] }
    ?23     = { defs={} expr=v7517[1] }
    ?24     = { defs={} expr=v7518[1] }
    ?25     = { defs={} expr=v7519[1] }
    ?26     = { defs={} expr=v7520[1] }
    ?27     = { defs={} expr=v7521[1] }
    ?28     = { defs={} expr=v7522[1] }
    ?29     = { defs={} expr=v7523[1] }
    ?30     = { defs={} expr=v7524[1] }
    ?31     = { defs={} expr=v7525[1] }
    ip      = { defs={0x08048529} expr=0x0804852e[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) 1[32]) }
      value = { defs={} expr=-123[8] }
      flags = { }
    address = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526,0x08048529} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) }
      value = { defs={} expr=46[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v7483[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v7483[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v7483[32]) }
      flags = { }
    address = { defs={0x08048520,0x08048523,0x08048524,0x08048525} expr=(add[32] (add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v7483[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v7486[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v7486[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v7486[32]) }
      flags = { }
    address = { defs={0x08048520,0x08048523,0x08048524} expr=(add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v7486[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v7487[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v7487[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v7484[32] -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v7487[32]) }
      flags = { }
    address = { defs={0x08048520,0x08048523} expr=(add[32] (add[32] v7484[32] -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v7487[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v7484[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v7485[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v7484[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v7485[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v7484[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v7485[32]) }
      flags = { }
    address = { defs={0x08048520} expr=(add[32] v7484[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v7485[32]) }
      flags = { }
init mem:
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804852e:pop    ebx
registers:
    ax      = { v37089 }
    cx      = { v37090 }
    dx      = { v37091 }
    bx      = { v37144 }
    sp      = { v37093+0x4 }
    bp      = { v37094 }
    si      = { v37095 }
    di      = { v37096 }
    es      = { v37097 }
    cs      = { v37098 }
    ss      = { v37099 }
    ds      = { v37100 }
    fs      = { v37101 }
    gs      = { v37102 }
    cf      = { v37103 }
    ?1      = { v37104 }
    pf      = { v37105 }
    ?3      = { v37106 }
    af      = { v37107 }
    ?5      = { v37108 }
    zf      = { v37109 }
    sf      = { v37110 }
    tf      = { v37111 }
    if      = { v37112 }
    df      = { v37113 }
    of      = { v37114 }
    iopl0   = { v37115 }
    iopl1   = { v37116 }
    nt      = { v37117 }
    ?15     = { v37118 }
    rf      = { v37119 }
    vm      = { v37120 }
    ac      = { v37121 }
    vif     = { v37122 }
    vip     = { v37123 }
    id      = { v37124 }
    ?22     = { v37125 }
    ?23     = { v37126 }
    ?24     = { v37127 }
    ?25     = { v37128 }
    ?26     = { v37129 }
    ?27     = { v37130 }
    ?28     = { v37131 }
    ?29     = { v37132 }
    ?30     = { v37133 }
    ?31     = { v37134 }
    ip      = { 0x804852f }
memory:
    address = { v37093 }
      value = { v37144 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={} expr=v7763[32] }
    cx      = { defs={} expr=v7764[32] }
    dx      = { defs={} expr=v7765[32] }
    bx      = { defs={0x0804852e} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) }
    sp      = { defs={0x0804852e} expr=(add[32] v7767[32] 4[32]) }
    bp      = { defs={} expr=v7768[32] }
    si      = { defs={} expr=v7769[32] }
    di      = { defs={} expr=v7770[32] }
    es      = { defs={} expr=v7771[16] }
    cs      = { defs={} expr=v7772[16] }
    ss      = { defs={} expr=v7773[16] }
    ds      = { defs={} expr=v7774[16] }
    fs      = { defs={} expr=v7775[16] }
    gs      = { defs={} expr=v7776[16] }
    cf      = { defs={} expr=v7777[1] }
    ?1      = { defs={} expr=v7778[1] }
    pf      = { defs={} expr=v7779[1] }
    ?3      = { defs={} expr=v7780[1] }
    af      = { defs={} expr=v7781[1] }
    ?5      = { defs={} expr=v7782[1] }
    zf      = { defs={} expr=v7783[1] }
    sf      = { defs={} expr=v7784[1] }
    tf      = { defs={} expr=v7785[1] }
    if      = { defs={} expr=v7786[1] }
    df      = { defs={} expr=v7787[1] }
    of      = { defs={} expr=v7788[1] }
    iopl0   = { defs={} expr=v7789[1] }
    iopl1   = { defs={} expr=v7790[1] }
    nt      = { defs={} expr=v7791[1] }
    ?15     = { defs={} expr=v7792[1] }
    rf      = { defs={} expr=v7793[1] }
    vm      = { defs={} expr=v7794[1] }
    ac      = { defs={} expr=v7795[1] }
    vif     = { defs={} expr=v7796[1] }
    vip     = { defs={} expr=v7797[1] }
    id      = { defs={} expr=v7798[1] }
    ?22     = { defs={} expr=v7799[1] }
    ?23     = { defs={} expr=v7800[1] }
    ?24     = { defs={} expr=v7801[1] }
    ?25     = { defs={} expr=v7802[1] }
    ?26     = { defs={} expr=v7803[1] }
    ?27     = { defs={} expr=v7804[1] }
    ?28     = { defs={} expr=v7805[1] }
    ?29     = { defs={} expr=v7806[1] }
    ?30     = { defs={} expr=v7807[1] }
    ?31     = { defs={} expr=v7808[1] }
    ip      = { defs={0x0804852e} expr=0x0804852f[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] v7767[32] 3[32]) }
      value = { defs={} expr=v7830[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v7767[32] 2[32]) }
      value = { defs={} expr=v7829[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v7767[32] 1[32]) }
      value = { defs={} expr=v7828[8] }
      flags = { rdonly }
    address = { defs={0x0804852e} expr=v7767[32] }
      value = { defs={} expr=v7827[8] }
      flags = { rdonly }
null state
null state
0x804852f:add    ebx, 0x0000119a
registers:
    ax      = { v37089 }
    cx      = { v37090 }
    dx      = { v37091 }
    bx      = { v37144+0x119a }
    sp      = { v37093+0x4 }
    bp      = { v37094 }
    si      = { v37095 }
    di      = { v37096 }
    es      = { v37097 }
    cs      = { v37098 }
    ss      = { v37099 }
    ds      = { v37100 }
    fs      = { v37101 }
    gs      = { v37102 }
    cf      = { v37193 }
    ?1      = { v37104 }
    pf      = { -v37184+0x1 }
    ?3      = { v37106 }
    af      = { v37191 }
    ?5      = { v37108 }
    zf      = { v37189 }
    sf      = { v37187 }
    tf      = { v37111 }
    if      = { v37112 }
    df      = { v37113 }
    of      = { v37199 }
    iopl0   = { v37115 }
    iopl1   = { v37116 }
    nt      = { v37117 }
    ?15     = { v37118 }
    rf      = { v37119 }
    vm      = { v37120 }
    ac      = { v37121 }
    vif     = { v37122 }
    vip     = { v37123 }
    id      = { v37124 }
    ?22     = { v37125 }
    ?23     = { v37126 }
    ?24     = { v37127 }
    ?25     = { v37128 }
    ?26     = { v37129 }
    ?27     = { v37130 }
    ?28     = { v37131 }
    ?29     = { v37132 }
    ?30     = { v37133 }
    ?31     = { v37134 }
    ip      = { 0x8048535 }
memory:
    address = { v37093 }
      value = { v37144 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={} expr=v7763[32] }
    cx      = { defs={} expr=v7764[32] }
    dx      = { defs={} expr=v7765[32] }
    bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) }
    sp      = { defs={0x0804852e} expr=(add[32] v7767[32] 4[32]) }
    bp      = { defs={} expr=v7768[32] }
    si      = { defs={} expr=v7769[32] }
    di      = { defs={} expr=v7770[32] }
    es      = { defs={} expr=v7771[16] }
    cs      = { defs={} expr=v7772[16] }
    ss      = { defs={} expr=v7773[16] }
    ds      = { defs={} expr=v7774[16] }
    fs      = { defs={} expr=v7775[16] }
    gs      = { defs={} expr=v7776[16] }
    cf      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8])))) 4506[33]))))) }
    ?1      = { defs={} expr=v7778[1] }
    pf      = { defs={0x0804852e,0x0804852f} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]))))))) }
    ?3      = { defs={} expr=v7780[1] }
    af      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8])))) 4506[33]))))) }
    ?5      = { defs={} expr=v7782[1] }
    zf      = { defs={0x0804852e,0x0804852f} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32])) }
    sf      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32])) }
    tf      = { defs={} expr=v7785[1] }
    if      = { defs={} expr=v7786[1] }
    df      = { defs={} expr=v7787[1] }
    of      = { defs={0x0804852e,0x0804852f} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8])))) 4506[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8])))) 4506[33])))))) }
    iopl0   = { defs={} expr=v7789[1] }
    iopl1   = { defs={} expr=v7790[1] }
    nt      = { defs={} expr=v7791[1] }
    ?15     = { defs={} expr=v7792[1] }
    rf      = { defs={} expr=v7793[1] }
    vm      = { defs={} expr=v7794[1] }
    ac      = { defs={} expr=v7795[1] }
    vif     = { defs={} expr=v7796[1] }
    vip     = { defs={} expr=v7797[1] }
    id      = { defs={} expr=v7798[1] }
    ?22     = { defs={} expr=v7799[1] }
    ?23     = { defs={} expr=v7800[1] }
    ?24     = { defs={} expr=v7801[1] }
    ?25     = { defs={} expr=v7802[1] }
    ?26     = { defs={} expr=v7803[1] }
    ?27     = { defs={} expr=v7804[1] }
    ?28     = { defs={} expr=v7805[1] }
    ?29     = { defs={} expr=v7806[1] }
    ?30     = { defs={} expr=v7807[1] }
    ?31     = { defs={} expr=v7808[1] }
    ip      = { defs={0x0804852e,0x0804852f} expr=0x08048535[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] v7767[32] 3[32]) }
      value = { defs={} expr=v7830[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v7767[32] 2[32]) }
      value = { defs={} expr=v7829[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v7767[32] 1[32]) }
      value = { defs={} expr=v7828[8] }
      flags = { rdonly }
    address = { defs={0x0804852e} expr=v7767[32] }
      value = { defs={} expr=v7827[8] }
      flags = { rdonly }
null state
null state
0x8048535:lea    eax, [ebx + 0xffffff20<-0x000000e0>]
registers:
    ax      = { v37144+0x10ba }
    cx      = { v37090 }
    dx      = { v37091 }
    bx      = { v37144+0x119a }
    sp      = { v37093+0x4 }
    bp      = { v37094 }
    si      = { v37095 }
    di      = { v37096 }
    es      = { v37097 }
    cs      = { v37098 }
    ss      = { v37099 }
    ds      = { v37100 }
    fs      = { v37101 }
    gs      = { v37102 }
    cf      = { v37193 }
    ?1      = { v37104 }
    pf      = { -v37184+0x1 }
    ?3      = { v37106 }
    af      = { v37191 }
    ?5      = { v37108 }
    zf      = { v37189 }
    sf      = { v37187 }
    tf      = { v37111 }
    if      = { v37112 }
    df      = { v37113 }
    of      = { v37199 }
    iopl0   = { v37115 }
    iopl1   = { v37116 }
    nt      = { v37117 }
    ?15     = { v37118 }
    rf      = { v37119 }
    vm      = { v37120 }
    ac      = { v37121 }
    vif     = { v37122 }
    vip     = { v37123 }
    id      = { v37124 }
    ?22     = { v37125 }
    ?23     = { v37126 }
    ?24     = { v37127 }
    ?25     = { v37128 }
    ?26     = { v37129 }
    ?27     = { v37130 }
    ?28     = { v37131 }
    ?29     = { v37132 }
    ?30     = { v37133 }
    ?31     = { v37134 }
    ip      = { 0x804853b }
memory:
    address = { v37093 }
      value = { v37144 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x0804852e,0x0804852f,0x08048535} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) }
    cx      = { defs={} expr=v7764[32] }
    dx      = { defs={} expr=v7765[32] }
    bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) }
    sp      = { defs={0x0804852e} expr=(add[32] v7767[32] 4[32]) }
    bp      = { defs={} expr=v7768[32] }
    si      = { defs={} expr=v7769[32] }
    di      = { defs={} expr=v7770[32] }
    es      = { defs={} expr=v7771[16] }
    cs      = { defs={} expr=v7772[16] }
    ss      = { defs={} expr=v7773[16] }
    ds      = { defs={} expr=v7774[16] }
    fs      = { defs={} expr=v7775[16] }
    gs      = { defs={} expr=v7776[16] }
    cf      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8])))) 4506[33]))))) }
    ?1      = { defs={} expr=v7778[1] }
    pf      = { defs={0x0804852e,0x0804852f} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]))))))) }
    ?3      = { defs={} expr=v7780[1] }
    af      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8])))) 4506[33]))))) }
    ?5      = { defs={} expr=v7782[1] }
    zf      = { defs={0x0804852e,0x0804852f} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32])) }
    sf      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32])) }
    tf      = { defs={} expr=v7785[1] }
    if      = { defs={} expr=v7786[1] }
    df      = { defs={} expr=v7787[1] }
    of      = { defs={0x0804852e,0x0804852f} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8])))) 4506[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8])))) 4506[33])))))) }
    iopl0   = { defs={} expr=v7789[1] }
    iopl1   = { defs={} expr=v7790[1] }
    nt      = { defs={} expr=v7791[1] }
    ?15     = { defs={} expr=v7792[1] }
    rf      = { defs={} expr=v7793[1] }
    vm      = { defs={} expr=v7794[1] }
    ac      = { defs={} expr=v7795[1] }
    vif     = { defs={} expr=v7796[1] }
    vip     = { defs={} expr=v7797[1] }
    id      = { defs={} expr=v7798[1] }
    ?22     = { defs={} expr=v7799[1] }
    ?23     = { defs={} expr=v7800[1] }
    ?24     = { defs={} expr=v7801[1] }
    ?25     = { defs={} expr=v7802[1] }
    ?26     = { defs={} expr=v7803[1] }
    ?27     = { defs={} expr=v7804[1] }
    ?28     = { defs={} expr=v7805[1] }
    ?29     = { defs={} expr=v7806[1] }
    ?30     = { defs={} expr=v7807[1] }
    ?31     = { defs={} expr=v7808[1] }
    ip      = { defs={0x0804852e,0x0804852f,0x08048535} expr=0x0804853b[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] v7767[32] 3[32]) }
      value = { defs={} expr=v7830[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v7767[32] 2[32]) }
      value = { defs={} expr=v7829[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v7767[32] 1[32]) }
      value = { defs={} expr=v7828[8] }
      flags = { rdonly }
    address = { defs={0x0804852e} expr=v7767[32] }
      value = { defs={} expr=v7827[8] }
      flags = { rdonly }
null state
null state
0x804853b:lea    edx, [ebx + 0xffffff20<-0x000000e0>]
registers:
    ax      = { v37144+0x10ba }
    cx      = { v37090 }
    dx      = { v37144+0x10ba }
    bx      = { v37144+0x119a }
    sp      = { v37093+0x4 }
    bp      = { v37094 }
    si      = { v37095 }
    di      = { v37096 }
    es      = { v37097 }
    cs      = { v37098 }
    ss      = { v37099 }
    ds      = { v37100 }
    fs      = { v37101 }
    gs      = { v37102 }
    cf      = { v37193 }
    ?1      = { v37104 }
    pf      = { -v37184+0x1 }
    ?3      = { v37106 }
    af      = { v37191 }
    ?5      = { v37108 }
    zf      = { v37189 }
    sf      = { v37187 }
    tf      = { v37111 }
    if      = { v37112 }
    df      = { v37113 }
    of      = { v37199 }
    iopl0   = { v37115 }
    iopl1   = { v37116 }
    nt      = { v37117 }
    ?15     = { v37118 }
    rf      = { v37119 }
    vm      = { v37120 }
    ac      = { v37121 }
    vif     = { v37122 }
    vip     = { v37123 }
    id      = { v37124 }
    ?22     = { v37125 }
    ?23     = { v37126 }
    ?24     = { v37127 }
    ?25     = { v37128 }
    ?26     = { v37129 }
    ?27     = { v37130 }
    ?28     = { v37131 }
    ?29     = { v37132 }
    ?30     = { v37133 }
    ?31     = { v37134 }
    ip      = { 0x8048541 }
memory:
    address = { v37093 }
      value = { v37144 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x0804852e,0x0804852f,0x08048535} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) }
    cx      = { defs={} expr=v7764[32] }
    dx      = { defs={0x0804852e,0x0804852f,0x0804853b} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) }
    bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) }
    sp      = { defs={0x0804852e} expr=(add[32] v7767[32] 4[32]) }
    bp      = { defs={} expr=v7768[32] }
    si      = { defs={} expr=v7769[32] }
    di      = { defs={} expr=v7770[32] }
    es      = { defs={} expr=v7771[16] }
    cs      = { defs={} expr=v7772[16] }
    ss      = { defs={} expr=v7773[16] }
    ds      = { defs={} expr=v7774[16] }
    fs      = { defs={} expr=v7775[16] }
    gs      = { defs={} expr=v7776[16] }
    cf      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8])))) 4506[33]))))) }
    ?1      = { defs={} expr=v7778[1] }
    pf      = { defs={0x0804852e,0x0804852f} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]))))))) }
    ?3      = { defs={} expr=v7780[1] }
    af      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8])))) 4506[33]))))) }
    ?5      = { defs={} expr=v7782[1] }
    zf      = { defs={0x0804852e,0x0804852f} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32])) }
    sf      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32])) }
    tf      = { defs={} expr=v7785[1] }
    if      = { defs={} expr=v7786[1] }
    df      = { defs={} expr=v7787[1] }
    of      = { defs={0x0804852e,0x0804852f} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8])))) 4506[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8])))) 4506[33])))))) }
    iopl0   = { defs={} expr=v7789[1] }
    iopl1   = { defs={} expr=v7790[1] }
    nt      = { defs={} expr=v7791[1] }
    ?15     = { defs={} expr=v7792[1] }
    rf      = { defs={} expr=v7793[1] }
    vm      = { defs={} expr=v7794[1] }
    ac      = { defs={} expr=v7795[1] }
    vif     = { defs={} expr=v7796[1] }
    vip     = { defs={} expr=v7797[1] }
    id      = { defs={} expr=v7798[1] }
    ?22     = { defs={} expr=v7799[1] }
    ?23     = { defs={} expr=v7800[1] }
    ?24     = { defs={} expr=v7801[1] }
    ?25     = { defs={} expr=v7802[1] }
    ?26     = { defs={} expr=v7803[1] }
    ?27     = { defs={} expr=v7804[1] }
    ?28     = { defs={} expr=v7805[1] }
    ?29     = { defs={} expr=v7806[1] }
    ?30     = { defs={} expr=v7807[1] }
    ?31     = { defs={} expr=v7808[1] }
    ip      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b} expr=0x08048541[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] v7767[32] 3[32]) }
      value = { defs={} expr=v7830[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v7767[32] 2[32]) }
      value = { defs={} expr=v7829[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v7767[32] 1[32]) }
      value = { defs={} expr=v7828[8] }
      flags = { rdonly }
    address = { defs={0x0804852e} expr=v7767[32] }
      value = { defs={} expr=v7827[8] }
      flags = { rdonly }
null state
null state
0x8048541:sub    eax, edx
registers:
    ax      = { 0x0 }
    cx      = { v37090 }
    dx      = { v37144+0x10ba }
    bx      = { v37144+0x119a }
    sp      = { v37093+0x4 }
    bp      = { v37094 }
    si      = { v37095 }
    di      = { v37096 }
    es      = { v37097 }
    cs      = { v37098 }
    ss      = { v37099 }
    ds      = { v37100 }
    fs      = { v37101 }
    gs      = { v37102 }
    cf      = { 0x0 }
    ?1      = { v37104 }
    pf      = { 0x1 }
    ?3      = { v37106 }
    af      = { 0x0 }
    ?5      = { v37108 }
    zf      = { 0x1 }
    sf      = { 0x0 }
    tf      = { v37111 }
    if      = { v37112 }
    df      = { v37113 }
    of      = { 0x0 }
    iopl0   = { v37115 }
    iopl1   = { v37116 }
    nt      = { v37117 }
    ?15     = { v37118 }
    rf      = { v37119 }
    vm      = { v37120 }
    ac      = { v37121 }
    vif     = { v37122 }
    vip     = { v37123 }
    id      = { v37124 }
    ?22     = { v37125 }
    ?23     = { v37126 }
    ?24     = { v37127 }
    ?25     = { v37128 }
    ?26     = { v37129 }
    ?27     = { v37130 }
    ?28     = { v37131 }
    ?29     = { v37132 }
    ?30     = { v37133 }
    ?31     = { v37134 }
    ip      = { 0x8048543 }
memory:
    address = { v37093 }
      value = { v37144 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32])) }
    cx      = { defs={} expr=v7764[32] }
    dx      = { defs={0x0804852e,0x0804852f,0x0804853b} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) }
    bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) }
    sp      = { defs={0x0804852e} expr=(add[32] v7767[32] 4[32]) }
    bp      = { defs={} expr=v7768[32] }
    si      = { defs={} expr=v7769[32] }
    di      = { defs={} expr=v7770[32] }
    es      = { defs={} expr=v7771[16] }
    cs      = { defs={} expr=v7772[16] }
    ss      = { defs={} expr=v7773[16] }
    ds      = { defs={} expr=v7774[16] }
    fs      = { defs={} expr=v7775[16] }
    gs      = { defs={} expr=v7776[16] }
    cf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]))) (add[33] (uextend[33] 33[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]))) 1[33]))))))) }
    ?1      = { defs={} expr=v7778[1] }
    pf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32])))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32])))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32])))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32])))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32])))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32])))))))) }
    ?3      = { defs={} expr=v7780[1] }
    af      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]))) (add[33] (uextend[33] 33[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]))) 1[33]))))))) }
    ?5      = { defs={} expr=v7782[1] }
    zf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541} expr=(zerop[1] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) }
    sf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) }
    tf      = { defs={} expr=v7785[1] }
    if      = { defs={} expr=v7786[1] }
    df      = { defs={} expr=v7787[1] }
    of      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]))) (add[33] (uextend[33] 33[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]))) 1[33])))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]))) (add[33] (uextend[33] 33[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]))) 1[33]))))))) }
    iopl0   = { defs={} expr=v7789[1] }
    iopl1   = { defs={} expr=v7790[1] }
    nt      = { defs={} expr=v7791[1] }
    ?15     = { defs={} expr=v7792[1] }
    rf      = { defs={} expr=v7793[1] }
    vm      = { defs={} expr=v7794[1] }
    ac      = { defs={} expr=v7795[1] }
    vif     = { defs={} expr=v7796[1] }
    vip     = { defs={} expr=v7797[1] }
    id      = { defs={} expr=v7798[1] }
    ?22     = { defs={} expr=v7799[1] }
    ?23     = { defs={} expr=v7800[1] }
    ?24     = { defs={} expr=v7801[1] }
    ?25     = { defs={} expr=v7802[1] }
    ?26     = { defs={} expr=v7803[1] }
    ?27     = { defs={} expr=v7804[1] }
    ?28     = { defs={} expr=v7805[1] }
    ?29     = { defs={} expr=v7806[1] }
    ?30     = { defs={} expr=v7807[1] }
    ?31     = { defs={} expr=v7808[1] }
    ip      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541} expr=0x08048543[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] v7767[32] 3[32]) }
      value = { defs={} expr=v7830[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v7767[32] 2[32]) }
      value = { defs={} expr=v7829[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v7767[32] 1[32]) }
      value = { defs={} expr=v7828[8] }
      flags = { rdonly }
    address = { defs={0x0804852e} expr=v7767[32] }
      value = { defs={} expr=v7827[8] }
      flags = { rdonly }
null state
null state
0x8048543:sar    eax, 0x02
registers:
    ax      = { 0x0 }
    cx      = { v37090 }
    dx      = { v37144+0x10ba }
    bx      = { v37144+0x119a }
    sp      = { v37093+0x4 }
    bp      = { v37094 }
    si      = { v37095 }
    di      = { v37096 }
    es      = { v37097 }
    cs      = { v37098 }
    ss      = { v37099 }
    ds      = { v37100 }
    fs      = { v37101 }
    gs      = { v37102 }
    cf      = { 0x0 }
    ?1      = { v37104 }
    pf      = { 0x1 }
    ?3      = { v37106 }
    af      = { v37271 }
    ?5      = { v37108 }
    zf      = { 0x1 }
    sf      = { 0x0 }
    tf      = { v37111 }
    if      = { v37112 }
    df      = { v37113 }
    of      = { v37285 }
    iopl0   = { v37115 }
    iopl1   = { v37116 }
    nt      = { v37117 }
    ?15     = { v37118 }
    rf      = { v37119 }
    vm      = { v37120 }
    ac      = { v37121 }
    vif     = { v37122 }
    vip     = { v37123 }
    id      = { v37124 }
    ?22     = { v37125 }
    ?23     = { v37126 }
    ?24     = { v37127 }
    ?25     = { v37128 }
    ?26     = { v37129 }
    ?27     = { v37130 }
    ?28     = { v37131 }
    ?29     = { v37132 }
    ?30     = { v37133 }
    ?31     = { v37134 }
    ip      = { 0x8048546 }
memory:
    address = { v37093 }
      value = { v37144 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) }
    cx      = { defs={} expr=v7764[32] }
    dx      = { defs={0x0804852e,0x0804852f,0x0804853b} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) }
    bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) }
    sp      = { defs={0x0804852e} expr=(add[32] v7767[32] 4[32]) }
    bp      = { defs={} expr=v7768[32] }
    si      = { defs={} expr=v7769[32] }
    di      = { defs={} expr=v7770[32] }
    es      = { defs={} expr=v7771[16] }
    cs      = { defs={} expr=v7772[16] }
    ss      = { defs={} expr=v7773[16] }
    ds      = { defs={} expr=v7774[16] }
    fs      = { defs={} expr=v7775[16] }
    gs      = { defs={} expr=v7776[16] }
    cf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32])))) }
    ?1      = { defs={} expr=v7778[1] }
    pf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))))))))) }
    ?3      = { defs={} expr=v7780[1] }
    af      = { defs={0x08048543} expr=v8071[1] }
    ?5      = { defs={} expr=v7782[1] }
    zf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(zerop[1] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32])))) }
    sf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32])))) }
    tf      = { defs={} expr=v7785[1] }
    if      = { defs={} expr=v7786[1] }
    df      = { defs={} expr=v7787[1] }
    of      = { defs={0x08048543} expr=v8097[1] }
    iopl0   = { defs={} expr=v7789[1] }
    iopl1   = { defs={} expr=v7790[1] }
    nt      = { defs={} expr=v7791[1] }
    ?15     = { defs={} expr=v7792[1] }
    rf      = { defs={} expr=v7793[1] }
    vm      = { defs={} expr=v7794[1] }
    ac      = { defs={} expr=v7795[1] }
    vif     = { defs={} expr=v7796[1] }
    vip     = { defs={} expr=v7797[1] }
    id      = { defs={} expr=v7798[1] }
    ?22     = { defs={} expr=v7799[1] }
    ?23     = { defs={} expr=v7800[1] }
    ?24     = { defs={} expr=v7801[1] }
    ?25     = { defs={} expr=v7802[1] }
    ?26     = { defs={} expr=v7803[1] }
    ?27     = { defs={} expr=v7804[1] }
    ?28     = { defs={} expr=v7805[1] }
    ?29     = { defs={} expr=v7806[1] }
    ?30     = { defs={} expr=v7807[1] }
    ?31     = { defs={} expr=v7808[1] }
    ip      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=0x08048546[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] v7767[32] 3[32]) }
      value = { defs={} expr=v7830[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v7767[32] 2[32]) }
      value = { defs={} expr=v7829[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v7767[32] 1[32]) }
      value = { defs={} expr=v7828[8] }
      flags = { rdonly }
    address = { defs={0x0804852e} expr=v7767[32] }
      value = { defs={} expr=v7827[8] }
      flags = { rdonly }
null state
null state
0x8048546:mov    DWORD PTR ss:[ebp + 0xf0<-0x10>], eax
registers:
    ax      = { 0x0 }
    cx      = { v37090 }
    dx      = { v37144+0x10ba }
    bx      = { v37144+0x119a }
    sp      = { v37093+0x4 }
    bp      = { v37094 }
    si      = { v37095 }
    di      = { v37096 }
    es      = { v37097 }
    cs      = { v37098 }
    ss      = { v37099 }
    ds      = { v37100 }
    fs      = { v37101 }
    gs      = { v37102 }
    cf      = { 0x0 }
    ?1      = { v37104 }
    pf      = { 0x1 }
    ?3      = { v37106 }
    af      = { v37271 }
    ?5      = { v37108 }
    zf      = { 0x1 }
    sf      = { 0x0 }
    tf      = { v37111 }
    if      = { v37112 }
    df      = { v37113 }
    of      = { v37285 }
    iopl0   = { v37115 }
    iopl1   = { v37116 }
    nt      = { v37117 }
    ?15     = { v37118 }
    rf      = { v37119 }
    vm      = { v37120 }
    ac      = { v37121 }
    vif     = { v37122 }
    vip     = { v37123 }
    id      = { v37124 }
    ?22     = { v37125 }
    ?23     = { v37126 }
    ?24     = { v37127 }
    ?25     = { v37128 }
    ?26     = { v37129 }
    ?27     = { v37130 }
    ?28     = { v37131 }
    ?29     = { v37132 }
    ?30     = { v37133 }
    ?31     = { v37134 }
    ip      = { 0x8048549 }
memory:
    address = { v37093 }
      value = { v37144 }
      flags = { size=4; read-only; clobbered }
    address = { v37094-0x10 }
      value = { 0x0 }
      flags = { size=4 }
registers:
    ax      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) }
    cx      = { defs={} expr=v7764[32] }
    dx      = { defs={0x0804852e,0x0804852f,0x0804853b} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) }
    bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) }
    sp      = { defs={0x0804852e} expr=(add[32] v7767[32] 4[32]) }
    bp      = { defs={} expr=v7768[32] }
    si      = { defs={} expr=v7769[32] }
    di      = { defs={} expr=v7770[32] }
    es      = { defs={} expr=v7771[16] }
    cs      = { defs={} expr=v7772[16] }
    ss      = { defs={} expr=v7773[16] }
    ds      = { defs={} expr=v7774[16] }
    fs      = { defs={} expr=v7775[16] }
    gs      = { defs={} expr=v7776[16] }
    cf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32])))) }
    ?1      = { defs={} expr=v7778[1] }
    pf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))))))))) }
    ?3      = { defs={} expr=v7780[1] }
    af      = { defs={0x08048543} expr=v8071[1] }
    ?5      = { defs={} expr=v7782[1] }
    zf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(zerop[1] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32])))) }
    sf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32])))) }
    tf      = { defs={} expr=v7785[1] }
    if      = { defs={} expr=v7786[1] }
    df      = { defs={} expr=v7787[1] }
    of      = { defs={0x08048543} expr=v8097[1] }
    iopl0   = { defs={} expr=v7789[1] }
    iopl1   = { defs={} expr=v7790[1] }
    nt      = { defs={} expr=v7791[1] }
    ?15     = { defs={} expr=v7792[1] }
    rf      = { defs={} expr=v7793[1] }
    vm      = { defs={} expr=v7794[1] }
    ac      = { defs={} expr=v7795[1] }
    vif     = { defs={} expr=v7796[1] }
    vip     = { defs={} expr=v7797[1] }
    id      = { defs={} expr=v7798[1] }
    ?22     = { defs={} expr=v7799[1] }
    ?23     = { defs={} expr=v7800[1] }
    ?24     = { defs={} expr=v7801[1] }
    ?25     = { defs={} expr=v7802[1] }
    ?26     = { defs={} expr=v7803[1] }
    ?27     = { defs={} expr=v7804[1] }
    ?28     = { defs={} expr=v7805[1] }
    ?29     = { defs={} expr=v7806[1] }
    ?30     = { defs={} expr=v7807[1] }
    ?31     = { defs={} expr=v7808[1] }
    ip      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546} expr=0x08048549[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v7768[32] -16[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v7768[32] -16[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v7768[32] -16[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32])))) }
      flags = { }
    address = { defs={0x08048546} expr=(add[32] v7768[32] -16[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32])))) }
      flags = { }
init mem:
    address = { defs={} expr=(add[32] v7767[32] 3[32]) }
      value = { defs={} expr=v7830[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v7767[32] 2[32]) }
      value = { defs={} expr=v7829[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v7767[32] 1[32]) }
      value = { defs={} expr=v7828[8] }
      flags = { rdonly }
    address = { defs={0x0804852e} expr=v7767[32] }
      value = { defs={} expr=v7827[8] }
      flags = { rdonly }
null state
null state
0x8048549:dec    eax
registers:
    ax      = { 0xffffffff (-0x1) }
    cx      = { v37090 }
    dx      = { v37144+0x10ba }
    bx      = { v37144+0x119a }
    sp      = { v37093+0x4 }
    bp      = { v37094 }
    si      = { v37095 }
    di      = { v37096 }
    es      = { v37097 }
    cs      = { v37098 }
    ss      = { v37099 }
    ds      = { v37100 }
    fs      = { v37101 }
    gs      = { v37102 }
    cf      = { 0x0 }
    ?1      = { v37104 }
    pf      = { 0x1 }
    ?3      = { v37106 }
    af      = { 0x1 }
    ?5      = { v37108 }
    zf      = { 0x0 }
    sf      = { 0x1 }
    tf      = { v37111 }
    if      = { v37112 }
    df      = { v37113 }
    of      = { 0x0 }
    iopl0   = { v37115 }
    iopl1   = { v37116 }
    nt      = { v37117 }
    ?15     = { v37118 }
    rf      = { v37119 }
    vm      = { v37120 }
    ac      = { v37121 }
    vif     = { v37122 }
    vip     = { v37123 }
    id      = { v37124 }
    ?22     = { v37125 }
    ?23     = { v37126 }
    ?24     = { v37127 }
    ?25     = { v37128 }
    ?26     = { v37129 }
    ?27     = { v37130 }
    ?28     = { v37131 }
    ?29     = { v37132 }
    ?30     = { v37133 }
    ?31     = { v37134 }
    ip      = { 0x804854a }
memory:
    address = { v37093 }
      value = { v37144 }
      flags = { size=4; read-only; clobbered }
    address = { v37094-0x10 }
      value = { 0x0 }
      flags = { size=4 }
registers:
    ax      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=(add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) }
    cx      = { defs={} expr=v7764[32] }
    dx      = { defs={0x0804852e,0x0804852f,0x0804853b} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) }
    bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) }
    sp      = { defs={0x0804852e} expr=(add[32] v7767[32] 4[32]) }
    bp      = { defs={} expr=v7768[32] }
    si      = { defs={} expr=v7769[32] }
    di      = { defs={} expr=v7770[32] }
    es      = { defs={} expr=v7771[16] }
    cs      = { defs={} expr=v7772[16] }
    ss      = { defs={} expr=v7773[16] }
    ds      = { defs={} expr=v7774[16] }
    fs      = { defs={} expr=v7775[16] }
    gs      = { defs={} expr=v7776[16] }
    cf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32])))) }
    ?1      = { defs={} expr=v7778[1] }
    pf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]))))))) }
    ?3      = { defs={} expr=v7780[1] }
    af      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32])))) (bv-xor[33] 4294967295[33] (add[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32])))) 4294967295[33])))))) }
    ?5      = { defs={} expr=v7782[1] }
    zf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=(zerop[1] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) }
    sf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=(extract[1] 31[32] 32[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) }
    tf      = { defs={} expr=v7785[1] }
    if      = { defs={} expr=v7786[1] }
    df      = { defs={} expr=v7787[1] }
    of      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32])))) (bv-xor[33] 4294967295[33] (add[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32])))) 4294967295[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32])))) (bv-xor[33] 4294967295[33] (add[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32])))) 4294967295[33])))))) }
    iopl0   = { defs={} expr=v7789[1] }
    iopl1   = { defs={} expr=v7790[1] }
    nt      = { defs={} expr=v7791[1] }
    ?15     = { defs={} expr=v7792[1] }
    rf      = { defs={} expr=v7793[1] }
    vm      = { defs={} expr=v7794[1] }
    ac      = { defs={} expr=v7795[1] }
    vif     = { defs={} expr=v7796[1] }
    vip     = { defs={} expr=v7797[1] }
    id      = { defs={} expr=v7798[1] }
    ?22     = { defs={} expr=v7799[1] }
    ?23     = { defs={} expr=v7800[1] }
    ?24     = { defs={} expr=v7801[1] }
    ?25     = { defs={} expr=v7802[1] }
    ?26     = { defs={} expr=v7803[1] }
    ?27     = { defs={} expr=v7804[1] }
    ?28     = { defs={} expr=v7805[1] }
    ?29     = { defs={} expr=v7806[1] }
    ?30     = { defs={} expr=v7807[1] }
    ?31     = { defs={} expr=v7808[1] }
    ip      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546,0x08048549} expr=0x0804854a[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v7768[32] -16[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v7768[32] -16[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v7768[32] -16[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32])))) }
      flags = { }
    address = { defs={0x08048546} expr=(add[32] v7768[32] -16[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32])))) }
      flags = { }
init mem:
    address = { defs={} expr=(add[32] v7767[32] 3[32]) }
      value = { defs={} expr=v7830[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v7767[32] 2[32]) }
      value = { defs={} expr=v7829[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v7767[32] 1[32]) }
      value = { defs={} expr=v7828[8] }
      flags = { rdonly }
    address = { defs={0x0804852e} expr=v7767[32] }
      value = { defs={} expr=v7827[8] }
      flags = { rdonly }
null state
null state
0x804854a:cmp    eax, 0xff<-0x01>
registers:
    ax      = { 0xffffffff (-0x1) }
    cx      = { v37090 }
    dx      = { v37144+0x10ba }
    bx      = { v37144+0x119a }
    sp      = { v37093+0x4 }
    bp      = { v37094 }
    si      = { v37095 }
    di      = { v37096 }
    es      = { v37097 }
    cs      = { v37098 }
    ss      = { v37099 }
    ds      = { v37100 }
    fs      = { v37101 }
    gs      = { v37102 }
    cf      = { 0x0 }
    ?1      = { v37104 }
    pf      = { 0x1 }
    ?3      = { v37106 }
    af      = { 0x0 }
    ?5      = { v37108 }
    zf      = { 0x1 }
    sf      = { 0x0 }
    tf      = { v37111 }
    if      = { v37112 }
    df      = { v37113 }
    of      = { 0x0 }
    iopl0   = { v37115 }
    iopl1   = { v37116 }
    nt      = { v37117 }
    ?15     = { v37118 }
    rf      = { v37119 }
    vm      = { v37120 }
    ac      = { v37121 }
    vif     = { v37122 }
    vip     = { v37123 }
    id      = { v37124 }
    ?22     = { v37125 }
    ?23     = { v37126 }
    ?24     = { v37127 }
    ?25     = { v37128 }
    ?26     = { v37129 }
    ?27     = { v37130 }
    ?28     = { v37131 }
    ?29     = { v37132 }
    ?30     = { v37133 }
    ?31     = { v37134 }
    ip      = { 0x804854d }
memory:
    address = { v37093 }
      value = { v37144 }
      flags = { size=4; read-only; clobbered }
    address = { v37094-0x10 }
      value = { 0x0 }
      flags = { size=4 }
registers:
    ax      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=(add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) }
    cx      = { defs={} expr=v7764[32] }
    dx      = { defs={0x0804852e,0x0804852f,0x0804853b} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) }
    bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) }
    sp      = { defs={0x0804852e} expr=(add[32] v7767[32] 4[32]) }
    bp      = { defs={} expr=v7768[32] }
    si      = { defs={} expr=v7769[32] }
    di      = { defs={} expr=v7770[32] }
    es      = { defs={} expr=v7771[16] }
    cs      = { defs={} expr=v7772[16] }
    ss      = { defs={} expr=v7773[16] }
    ds      = { defs={} expr=v7774[16] }
    fs      = { defs={} expr=v7775[16] }
    gs      = { defs={} expr=v7776[16] }
    cf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33])))))) }
    ?1      = { defs={} expr=v7778[1] }
    pf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))))))) }
    ?3      = { defs={} expr=v7780[1] }
    af      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33])))))) }
    ?5      = { defs={} expr=v7782[1] }
    zf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(zerop[1] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])) }
    sf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])) }
    tf      = { defs={} expr=v7785[1] }
    if      = { defs={} expr=v7786[1] }
    df      = { defs={} expr=v7787[1] }
    of      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33])))))) }
    iopl0   = { defs={} expr=v7789[1] }
    iopl1   = { defs={} expr=v7790[1] }
    nt      = { defs={} expr=v7791[1] }
    ?15     = { defs={} expr=v7792[1] }
    rf      = { defs={} expr=v7793[1] }
    vm      = { defs={} expr=v7794[1] }
    ac      = { defs={} expr=v7795[1] }
    vif     = { defs={} expr=v7796[1] }
    vip     = { defs={} expr=v7797[1] }
    id      = { defs={} expr=v7798[1] }
    ?22     = { defs={} expr=v7799[1] }
    ?23     = { defs={} expr=v7800[1] }
    ?24     = { defs={} expr=v7801[1] }
    ?25     = { defs={} expr=v7802[1] }
    ?26     = { defs={} expr=v7803[1] }
    ?27     = { defs={} expr=v7804[1] }
    ?28     = { defs={} expr=v7805[1] }
    ?29     = { defs={} expr=v7806[1] }
    ?30     = { defs={} expr=v7807[1] }
    ?31     = { defs={} expr=v7808[1] }
    ip      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546,0x08048549,0x0804854a} expr=0x0804854d[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v7768[32] -16[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v7768[32] -16[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v7768[32] -16[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32])))) }
      flags = { }
    address = { defs={0x08048546} expr=(add[32] v7768[32] -16[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32])))) }
      flags = { }
init mem:
    address = { defs={} expr=(add[32] v7767[32] 3[32]) }
      value = { defs={} expr=v7830[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v7767[32] 2[32]) }
      value = { defs={} expr=v7829[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v7767[32] 1[32]) }
      value = { defs={} expr=v7828[8] }
      flags = { rdonly }
    address = { defs={0x0804852e} expr=v7767[32] }
      value = { defs={} expr=v7827[8] }
      flags = { rdonly }
null state
null state
0x804854d:je     0x0804856b<<Insn>>
registers:
    ax      = { 0xffffffff (-0x1) }
    cx      = { v37090 }
    dx      = { v37144+0x10ba }
    bx      = { v37144+0x119a }
    sp      = { v37093+0x4 }
    bp      = { v37094 }
    si      = { v37095 }
    di      = { v37096 }
    es      = { v37097 }
    cs      = { v37098 }
    ss      = { v37099 }
    ds      = { v37100 }
    fs      = { v37101 }
    gs      = { v37102 }
    cf      = { 0x0 }
    ?1      = { v37104 }
    pf      = { 0x1 }
    ?3      = { v37106 }
    af      = { 0x0 }
    ?5      = { v37108 }
    zf      = { 0x1 }
    sf      = { 0x0 }
    tf      = { v37111 }
    if      = { v37112 }
    df      = { v37113 }
    of      = { 0x0 }
    iopl0   = { v37115 }
    iopl1   = { v37116 }
    nt      = { v37117 }
    ?15     = { v37118 }
    rf      = { v37119 }
    vm      = { v37120 }
    ac      = { v37121 }
    vif     = { v37122 }
    vip     = { v37123 }
    id      = { v37124 }
    ?22     = { v37125 }
    ?23     = { v37126 }
    ?24     = { v37127 }
    ?25     = { v37128 }
    ?26     = { v37129 }
    ?27     = { v37130 }
    ?28     = { v37131 }
    ?29     = { v37132 }
    ?30     = { v37133 }
    ?31     = { v37134 }
    ip      = { 0x804856b }
memory:
    address = { v37093 }
      value = { v37144 }
      flags = { size=4; read-only; clobbered }
    address = { v37094-0x10 }
      value = { 0x0 }
      flags = { size=4 }
registers:
    ax      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=(add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) }
    cx      = { defs={} expr=v7764[32] }
    dx      = { defs={0x0804852e,0x0804852f,0x0804853b} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) }
    bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) }
    sp      = { defs={0x0804852e} expr=(add[32] v7767[32] 4[32]) }
    bp      = { defs={} expr=v7768[32] }
    si      = { defs={} expr=v7769[32] }
    di      = { defs={} expr=v7770[32] }
    es      = { defs={} expr=v7771[16] }
    cs      = { defs={} expr=v7772[16] }
    ss      = { defs={} expr=v7773[16] }
    ds      = { defs={} expr=v7774[16] }
    fs      = { defs={} expr=v7775[16] }
    gs      = { defs={} expr=v7776[16] }
    cf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33])))))) }
    ?1      = { defs={} expr=v7778[1] }
    pf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))))))) }
    ?3      = { defs={} expr=v7780[1] }
    af      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33])))))) }
    ?5      = { defs={} expr=v7782[1] }
    zf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(zerop[1] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])) }
    sf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])) }
    tf      = { defs={} expr=v7785[1] }
    if      = { defs={} expr=v7786[1] }
    df      = { defs={} expr=v7787[1] }
    of      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33])))))) }
    iopl0   = { defs={} expr=v7789[1] }
    iopl1   = { defs={} expr=v7790[1] }
    nt      = { defs={} expr=v7791[1] }
    ?15     = { defs={} expr=v7792[1] }
    rf      = { defs={} expr=v7793[1] }
    vm      = { defs={} expr=v7794[1] }
    ac      = { defs={} expr=v7795[1] }
    vif     = { defs={} expr=v7796[1] }
    vip     = { defs={} expr=v7797[1] }
    id      = { defs={} expr=v7798[1] }
    ?22     = { defs={} expr=v7799[1] }
    ?23     = { defs={} expr=v7800[1] }
    ?24     = { defs={} expr=v7801[1] }
    ?25     = { defs={} expr=v7802[1] }
    ?26     = { defs={} expr=v7803[1] }
    ?27     = { defs={} expr=v7804[1] }
    ?28     = { defs={} expr=v7805[1] }
    ?29     = { defs={} expr=v7806[1] }
    ?30     = { defs={} expr=v7807[1] }
    ?31     = { defs={} expr=v7808[1] }
    ip      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546,0x08048549,0x0804854a,0x0804854d} expr=(ite[32] (zerop[1] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])) 0x0804856b[32] 0x0804854f[32]) }
memory:
    address = { defs={} expr=(add[32] (add[32] v7768[32] -16[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v7768[32] -16[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v7768[32] -16[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32])))) }
      flags = { }
    address = { defs={0x08048546} expr=(add[32] v7768[32] -16[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32])))) }
      flags = { }
init mem:
    address = { defs={} expr=(add[32] v7767[32] 3[32]) }
      value = { defs={} expr=v7830[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v7767[32] 2[32]) }
      value = { defs={} expr=v7829[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v7767[32] 1[32]) }
      value = { defs={} expr=v7828[8] }
      flags = { rdonly }
    address = { defs={0x0804852e} expr=v7767[32] }
      value = { defs={} expr=v7827[8] }
      flags = { rdonly }
null state
null state
0x804856b:call   0x080485b0<_fini>
registers:
    ax      = { 0xffffffff (-0x1) }
    cx      = { v37090 }
    dx      = { v37144+0x10ba }
    bx      = { v37144+0x119a }
    sp      = { v37093 }
    bp      = { v37094 }
    si      = { v37095 }
    di      = { v37096 }
    es      = { v37097 }
    cs      = { v37098 }
    ss      = { v37099 }
    ds      = { v37100 }
    fs      = { v37101 }
    gs      = { v37102 }
    cf      = { 0x0 }
    ?1      = { v37104 }
    pf      = { 0x1 }
    ?3      = { v37106 }
    af      = { 0x0 }
    ?5      = { v37108 }
    zf      = { 0x1 }
    sf      = { 0x0 }
    tf      = { v37111 }
    if      = { v37112 }
    df      = { v37113 }
    of      = { 0x0 }
    iopl0   = { v37115 }
    iopl1   = { v37116 }
    nt      = { v37117 }
    ?15     = { v37118 }
    rf      = { v37119 }
    vm      = { v37120 }
    ac      = { v37121 }
    vif     = { v37122 }
    vip     = { v37123 }
    id      = { v37124 }
    ?22     = { v37125 }
    ?23     = { v37126 }
    ?24     = { v37127 }
    ?25     = { v37128 }
    ?26     = { v37129 }
    ?27     = { v37130 }
    ?28     = { v37131 }
    ?29     = { v37132 }
    ?30     = { v37133 }
    ?31     = { v37134 }
    ip      = { 0x80485b0 }
memory:
    address = { v37093 }
      value = { 0x8048570 }
      flags = { size=4 }
    address = { v37094-0x10 }
      value = { 0x0 }
      flags = { size=4; clobbered }
registers:
    ax      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=(add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) }
    cx      = { defs={} expr=v7764[32] }
    dx      = { defs={0x0804852e,0x0804852f,0x0804853b} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) }
    bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) }
    sp      = { defs={0x0804852e,0x0804856b} expr=(add[32] (add[32] v7767[32] 4[32]) -4[32]) }
    bp      = { defs={} expr=v7768[32] }
    si      = { defs={} expr=v7769[32] }
    di      = { defs={} expr=v7770[32] }
    es      = { defs={} expr=v7771[16] }
    cs      = { defs={} expr=v7772[16] }
    ss      = { defs={} expr=v7773[16] }
    ds      = { defs={} expr=v7774[16] }
    fs      = { defs={} expr=v7775[16] }
    gs      = { defs={} expr=v7776[16] }
    cf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33])))))) }
    ?1      = { defs={} expr=v7778[1] }
    pf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))))))) }
    ?3      = { defs={} expr=v7780[1] }
    af      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33])))))) }
    ?5      = { defs={} expr=v7782[1] }
    zf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(zerop[1] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])) }
    sf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])) }
    tf      = { defs={} expr=v7785[1] }
    if      = { defs={} expr=v7786[1] }
    df      = { defs={} expr=v7787[1] }
    of      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33])))))) }
    iopl0   = { defs={} expr=v7789[1] }
    iopl1   = { defs={} expr=v7790[1] }
    nt      = { defs={} expr=v7791[1] }
    ?15     = { defs={} expr=v7792[1] }
    rf      = { defs={} expr=v7793[1] }
    vm      = { defs={} expr=v7794[1] }
    ac      = { defs={} expr=v7795[1] }
    vif     = { defs={} expr=v7796[1] }
    vip     = { defs={} expr=v7797[1] }
    id      = { defs={} expr=v7798[1] }
    ?22     = { defs={} expr=v7799[1] }
    ?23     = { defs={} expr=v7800[1] }
    ?24     = { defs={} expr=v7801[1] }
    ?25     = { defs={} expr=v7802[1] }
    ?26     = { defs={} expr=v7803[1] }
    ?27     = { defs={} expr=v7804[1] }
    ?28     = { defs={} expr=v7805[1] }
    ?29     = { defs={} expr=v7806[1] }
    ?30     = { defs={} expr=v7807[1] }
    ?31     = { defs={} expr=v7808[1] }
    ip      = { defs={0x0804856b} expr=0x080485b0[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] v7767[32] 4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v7767[32] 4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v7767[32] 4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=-123[8] }
      flags = { }
    address = { defs={0x0804852e,0x0804856b} expr=(add[32] (add[32] v7767[32] 4[32]) -4[32]) }
      value = { defs={} expr=112[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v7768[32] -16[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v7768[32] -16[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v7768[32] -16[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32])))) }
      flags = { }
    address = { defs={0x08048546} expr=(add[32] v7768[32] -16[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7827[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7828[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7829[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7830[8]))) 4506[32]) -224[32])) 1[32])))) }
      flags = { }
init mem:
    address = { defs={} expr=(add[32] v7767[32] 3[32]) }
      value = { defs={} expr=v7830[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v7767[32] 2[32]) }
      value = { defs={} expr=v7829[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v7767[32] 1[32]) }
      value = { defs={} expr=v7828[8] }
      flags = { rdonly }
    address = { defs={0x0804852e} expr=v7767[32] }
      value = { defs={} expr=v7827[8] }
      flags = { rdonly }
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804854f:lea    esi, [edx + eax*0x04]
registers:
    ax      = { v37462 }
    cx      = { v37463 }
    dx      = { v37464 }
    bx      = { v37465 }
    sp      = { v37466 }
    bp      = { v37467 }
    si      = { v37519 }
    di      = { v37469 }
    es      = { v37470 }
    cs      = { v37471 }
    ss      = { v37472 }
    ds      = { v37473 }
    fs      = { v37474 }
    gs      = { v37475 }
    cf      = { v37476 }
    ?1      = { v37477 }
    pf      = { v37478 }
    ?3      = { v37479 }
    af      = { v37480 }
    ?5      = { v37481 }
    zf      = { v37482 }
    sf      = { v37483 }
    tf      = { v37484 }
    if      = { v37485 }
    df      = { v37486 }
    of      = { v37487 }
    iopl0   = { v37488 }
    iopl1   = { v37489 }
    nt      = { v37490 }
    ?15     = { v37491 }
    rf      = { v37492 }
    vm      = { v37493 }
    ac      = { v37494 }
    vif     = { v37495 }
    vip     = { v37496 }
    id      = { v37497 }
    ?22     = { v37498 }
    ?23     = { v37499 }
    ?24     = { v37500 }
    ?25     = { v37501 }
    ?26     = { v37502 }
    ?27     = { v37503 }
    ?28     = { v37504 }
    ?29     = { v37505 }
    ?30     = { v37506 }
    ?31     = { v37507 }
    ip      = { 0x8048552 }
memory:
registers:
    ax      = { defs={} expr=v8434[32] }
    cx      = { defs={} expr=v8435[32] }
    dx      = { defs={} expr=v8436[32] }
    bx      = { defs={} expr=v8437[32] }
    sp      = { defs={} expr=v8438[32] }
    bp      = { defs={} expr=v8439[32] }
    si      = { defs={0x0804854f} expr=(add[32] v8436[32] (extract[32] 0[32] 32[32] (umul[40] v8434[32] 4[8]))) }
    di      = { defs={} expr=v8441[32] }
    es      = { defs={} expr=v8442[16] }
    cs      = { defs={} expr=v8443[16] }
    ss      = { defs={} expr=v8444[16] }
    ds      = { defs={} expr=v8445[16] }
    fs      = { defs={} expr=v8446[16] }
    gs      = { defs={} expr=v8447[16] }
    cf      = { defs={} expr=v8448[1] }
    ?1      = { defs={} expr=v8449[1] }
    pf      = { defs={} expr=v8450[1] }
    ?3      = { defs={} expr=v8451[1] }
    af      = { defs={} expr=v8452[1] }
    ?5      = { defs={} expr=v8453[1] }
    zf      = { defs={} expr=v8454[1] }
    sf      = { defs={} expr=v8455[1] }
    tf      = { defs={} expr=v8456[1] }
    if      = { defs={} expr=v8457[1] }
    df      = { defs={} expr=v8458[1] }
    of      = { defs={} expr=v8459[1] }
    iopl0   = { defs={} expr=v8460[1] }
    iopl1   = { defs={} expr=v8461[1] }
    nt      = { defs={} expr=v8462[1] }
    ?15     = { defs={} expr=v8463[1] }
    rf      = { defs={} expr=v8464[1] }
    vm      = { defs={} expr=v8465[1] }
    ac      = { defs={} expr=v8466[1] }
    vif     = { defs={} expr=v8467[1] }
    vip     = { defs={} expr=v8468[1] }
    id      = { defs={} expr=v8469[1] }
    ?22     = { defs={} expr=v8470[1] }
    ?23     = { defs={} expr=v8471[1] }
    ?24     = { defs={} expr=v8472[1] }
    ?25     = { defs={} expr=v8473[1] }
    ?26     = { defs={} expr=v8474[1] }
    ?27     = { defs={} expr=v8475[1] }
    ?28     = { defs={} expr=v8476[1] }
    ?29     = { defs={} expr=v8477[1] }
    ?30     = { defs={} expr=v8478[1] }
    ?31     = { defs={} expr=v8479[1] }
    ip      = { defs={0x0804854f} expr=0x08048552[32] }
memory:
init mem:
null state
null state
0x8048552:xor    edi, edi
registers:
    ax      = { v37462 }
    cx      = { v37463 }
    dx      = { v37464 }
    bx      = { v37465 }
    sp      = { v37466 }
    bp      = { v37467 }
    si      = { v37519 }
    di      = { 0x0 }
    es      = { v37470 }
    cs      = { v37471 }
    ss      = { v37472 }
    ds      = { v37473 }
    fs      = { v37474 }
    gs      = { v37475 }
    cf      = { 0x0 }
    ?1      = { v37477 }
    pf      = { 0x1 }
    ?3      = { v37479 }
    af      = { v37548 }
    ?5      = { v37481 }
    zf      = { 0x1 }
    sf      = { 0x0 }
    tf      = { v37484 }
    if      = { v37485 }
    df      = { v37486 }
    of      = { 0x0 }
    iopl0   = { v37488 }
    iopl1   = { v37489 }
    nt      = { v37490 }
    ?15     = { v37491 }
    rf      = { v37492 }
    vm      = { v37493 }
    ac      = { v37494 }
    vif     = { v37495 }
    vip     = { v37496 }
    id      = { v37497 }
    ?22     = { v37498 }
    ?23     = { v37499 }
    ?24     = { v37500 }
    ?25     = { v37501 }
    ?26     = { v37502 }
    ?27     = { v37503 }
    ?28     = { v37504 }
    ?29     = { v37505 }
    ?30     = { v37506 }
    ?31     = { v37507 }
    ip      = { 0x8048554 }
memory:
registers:
    ax      = { defs={} expr=v8434[32] }
    cx      = { defs={} expr=v8435[32] }
    dx      = { defs={} expr=v8436[32] }
    bx      = { defs={} expr=v8437[32] }
    sp      = { defs={} expr=v8438[32] }
    bp      = { defs={} expr=v8439[32] }
    si      = { defs={0x0804854f} expr=(add[32] v8436[32] (extract[32] 0[32] 32[32] (umul[40] v8434[32] 4[8]))) }
    di      = { defs={0x08048552} expr=0[32] }
    es      = { defs={} expr=v8442[16] }
    cs      = { defs={} expr=v8443[16] }
    ss      = { defs={} expr=v8444[16] }
    ds      = { defs={} expr=v8445[16] }
    fs      = { defs={} expr=v8446[16] }
    gs      = { defs={} expr=v8447[16] }
    cf      = { defs={0x08048552} expr=0[1] }
    ?1      = { defs={} expr=v8449[1] }
    pf      = { defs={0x08048552} expr=1[1] }
    ?3      = { defs={} expr=v8451[1] }
    af      = { defs={0x08048552} expr=v8562[1] }
    ?5      = { defs={} expr=v8453[1] }
    zf      = { defs={0x08048552} expr=1[1] }
    sf      = { defs={0x08048552} expr=0[1] }
    tf      = { defs={} expr=v8456[1] }
    if      = { defs={} expr=v8457[1] }
    df      = { defs={} expr=v8458[1] }
    of      = { defs={0x08048552} expr=0[1] }
    iopl0   = { defs={} expr=v8460[1] }
    iopl1   = { defs={} expr=v8461[1] }
    nt      = { defs={} expr=v8462[1] }
    ?15     = { defs={} expr=v8463[1] }
    rf      = { defs={} expr=v8464[1] }
    vm      = { defs={} expr=v8465[1] }
    ac      = { defs={} expr=v8466[1] }
    vif     = { defs={} expr=v8467[1] }
    vip     = { defs={} expr=v8468[1] }
    id      = { defs={} expr=v8469[1] }
    ?22     = { defs={} expr=v8470[1] }
    ?23     = { defs={} expr=v8471[1] }
    ?24     = { defs={} expr=v8472[1] }
    ?25     = { defs={} expr=v8473[1] }
    ?26     = { defs={} expr=v8474[1] }
    ?27     = { defs={} expr=v8475[1] }
    ?28     = { defs={} expr=v8476[1] }
    ?29     = { defs={} expr=v8477[1] }
    ?30     = { defs={} expr=v8478[1] }
    ?31     = { defs={} expr=v8479[1] }
    ip      = { defs={0x0804854f,0x08048552} expr=0x08048554[32] }
memory:
init mem:
null state
null state
0x8048554:lea    esi, [esi + 0x00000000]
registers:
    ax      = { v37462 }
    cx      = { v37463 }
    dx      = { v37464 }
    bx      = { v37465 }
    sp      = { v37466 }
    bp      = { v37467 }
    si      = { v37519 }
    di      = { 0x0 }
    es      = { v37470 }
    cs      = { v37471 }
    ss      = { v37472 }
    ds      = { v37473 }
    fs      = { v37474 }
    gs      = { v37475 }
    cf      = { 0x0 }
    ?1      = { v37477 }
    pf      = { 0x1 }
    ?3      = { v37479 }
    af      = { v37548 }
    ?5      = { v37481 }
    zf      = { 0x1 }
    sf      = { 0x0 }
    tf      = { v37484 }
    if      = { v37485 }
    df      = { v37486 }
    of      = { 0x0 }
    iopl0   = { v37488 }
    iopl1   = { v37489 }
    nt      = { v37490 }
    ?15     = { v37491 }
    rf      = { v37492 }
    vm      = { v37493 }
    ac      = { v37494 }
    vif     = { v37495 }
    vip     = { v37496 }
    id      = { v37497 }
    ?22     = { v37498 }
    ?23     = { v37499 }
    ?24     = { v37500 }
    ?25     = { v37501 }
    ?26     = { v37502 }
    ?27     = { v37503 }
    ?28     = { v37504 }
    ?29     = { v37505 }
    ?30     = { v37506 }
    ?31     = { v37507 }
    ip      = { 0x804855a }
memory:
registers:
    ax      = { defs={} expr=v8434[32] }
    cx      = { defs={} expr=v8435[32] }
    dx      = { defs={} expr=v8436[32] }
    bx      = { defs={} expr=v8437[32] }
    sp      = { defs={} expr=v8438[32] }
    bp      = { defs={} expr=v8439[32] }
    si      = { defs={0x0804854f,0x08048554} expr=(add[32] v8436[32] (extract[32] 0[32] 32[32] (umul[40] v8434[32] 4[8]))) }
    di      = { defs={0x08048552} expr=0[32] }
    es      = { defs={} expr=v8442[16] }
    cs      = { defs={} expr=v8443[16] }
    ss      = { defs={} expr=v8444[16] }
    ds      = { defs={} expr=v8445[16] }
    fs      = { defs={} expr=v8446[16] }
    gs      = { defs={} expr=v8447[16] }
    cf      = { defs={0x08048552} expr=0[1] }
    ?1      = { defs={} expr=v8449[1] }
    pf      = { defs={0x08048552} expr=1[1] }
    ?3      = { defs={} expr=v8451[1] }
    af      = { defs={0x08048552} expr=v8562[1] }
    ?5      = { defs={} expr=v8453[1] }
    zf      = { defs={0x08048552} expr=1[1] }
    sf      = { defs={0x08048552} expr=0[1] }
    tf      = { defs={} expr=v8456[1] }
    if      = { defs={} expr=v8457[1] }
    df      = { defs={} expr=v8458[1] }
    of      = { defs={0x08048552} expr=0[1] }
    iopl0   = { defs={} expr=v8460[1] }
    iopl1   = { defs={} expr=v8461[1] }
    nt      = { defs={} expr=v8462[1] }
    ?15     = { defs={} expr=v8463[1] }
    rf      = { defs={} expr=v8464[1] }
    vm      = { defs={} expr=v8465[1] }
    ac      = { defs={} expr=v8466[1] }
    vif     = { defs={} expr=v8467[1] }
    vip     = { defs={} expr=v8468[1] }
    id      = { defs={} expr=v8469[1] }
    ?22     = { defs={} expr=v8470[1] }
    ?23     = { defs={} expr=v8471[1] }
    ?24     = { defs={} expr=v8472[1] }
    ?25     = { defs={} expr=v8473[1] }
    ?26     = { defs={} expr=v8474[1] }
    ?27     = { defs={} expr=v8475[1] }
    ?28     = { defs={} expr=v8476[1] }
    ?29     = { defs={} expr=v8477[1] }
    ?30     = { defs={} expr=v8478[1] }
    ?31     = { defs={} expr=v8479[1] }
    ip      = { defs={0x0804854f,0x08048552,0x08048554} expr=0x0804855a[32] }
memory:
init mem:
null state
null state
0x804855a:lea    edi, [edi + 0x00000000]
registers:
    ax      = { v37462 }
    cx      = { v37463 }
    dx      = { v37464 }
    bx      = { v37465 }
    sp      = { v37466 }
    bp      = { v37467 }
    si      = { v37519 }
    di      = { 0x0 }
    es      = { v37470 }
    cs      = { v37471 }
    ss      = { v37472 }
    ds      = { v37473 }
    fs      = { v37474 }
    gs      = { v37475 }
    cf      = { 0x0 }
    ?1      = { v37477 }
    pf      = { 0x1 }
    ?3      = { v37479 }
    af      = { v37548 }
    ?5      = { v37481 }
    zf      = { 0x1 }
    sf      = { 0x0 }
    tf      = { v37484 }
    if      = { v37485 }
    df      = { v37486 }
    of      = { 0x0 }
    iopl0   = { v37488 }
    iopl1   = { v37489 }
    nt      = { v37490 }
    ?15     = { v37491 }
    rf      = { v37492 }
    vm      = { v37493 }
    ac      = { v37494 }
    vif     = { v37495 }
    vip     = { v37496 }
    id      = { v37497 }
    ?22     = { v37498 }
    ?23     = { v37499 }
    ?24     = { v37500 }
    ?25     = { v37501 }
    ?26     = { v37502 }
    ?27     = { v37503 }
    ?28     = { v37504 }
    ?29     = { v37505 }
    ?30     = { v37506 }
    ?31     = { v37507 }
    ip      = { 0x8048560 }
memory:
registers:
    ax      = { defs={} expr=v8434[32] }
    cx      = { defs={} expr=v8435[32] }
    dx      = { defs={} expr=v8436[32] }
    bx      = { defs={} expr=v8437[32] }
    sp      = { defs={} expr=v8438[32] }
    bp      = { defs={} expr=v8439[32] }
    si      = { defs={0x0804854f,0x08048554} expr=(add[32] v8436[32] (extract[32] 0[32] 32[32] (umul[40] v8434[32] 4[8]))) }
    di      = { defs={0x08048552,0x0804855a} expr=0[32] }
    es      = { defs={} expr=v8442[16] }
    cs      = { defs={} expr=v8443[16] }
    ss      = { defs={} expr=v8444[16] }
    ds      = { defs={} expr=v8445[16] }
    fs      = { defs={} expr=v8446[16] }
    gs      = { defs={} expr=v8447[16] }
    cf      = { defs={0x08048552} expr=0[1] }
    ?1      = { defs={} expr=v8449[1] }
    pf      = { defs={0x08048552} expr=1[1] }
    ?3      = { defs={} expr=v8451[1] }
    af      = { defs={0x08048552} expr=v8562[1] }
    ?5      = { defs={} expr=v8453[1] }
    zf      = { defs={0x08048552} expr=1[1] }
    sf      = { defs={0x08048552} expr=0[1] }
    tf      = { defs={} expr=v8456[1] }
    if      = { defs={} expr=v8457[1] }
    df      = { defs={} expr=v8458[1] }
    of      = { defs={0x08048552} expr=0[1] }
    iopl0   = { defs={} expr=v8460[1] }
    iopl1   = { defs={} expr=v8461[1] }
    nt      = { defs={} expr=v8462[1] }
    ?15     = { defs={} expr=v8463[1] }
    rf      = { defs={} expr=v8464[1] }
    vm      = { defs={} expr=v8465[1] }
    ac      = { defs={} expr=v8466[1] }
    vif     = { defs={} expr=v8467[1] }
    vip     = { defs={} expr=v8468[1] }
    id      = { defs={} expr=v8469[1] }
    ?22     = { defs={} expr=v8470[1] }
    ?23     = { defs={} expr=v8471[1] }
    ?24     = { defs={} expr=v8472[1] }
    ?25     = { defs={} expr=v8473[1] }
    ?26     = { defs={} expr=v8474[1] }
    ?27     = { defs={} expr=v8475[1] }
    ?28     = { defs={} expr=v8476[1] }
    ?29     = { defs={} expr=v8477[1] }
    ?30     = { defs={} expr=v8478[1] }
    ?31     = { defs={} expr=v8479[1] }
    ip      = { defs={0x0804854f,0x08048552,0x08048554,0x0804855a} expr=0x08048560[32] }
memory:
init mem:
null state
null state
0x8048560:call   DWORD PTR ds:[esi]
registers:
    ax      = { v37462 }
    cx      = { v37463 }
    dx      = { v37464 }
    bx      = { v37465 }
    sp      = { v37466-0x4 }
    bp      = { v37467 }
    si      = { v37519 }
    di      = { 0x0 }
    es      = { v37470 }
    cs      = { v37471 }
    ss      = { v37472 }
    ds      = { v37473 }
    fs      = { v37474 }
    gs      = { v37475 }
    cf      = { 0x0 }
    ?1      = { v37477 }
    pf      = { 0x1 }
    ?3      = { v37479 }
    af      = { v37548 }
    ?5      = { v37481 }
    zf      = { 0x1 }
    sf      = { 0x0 }
    tf      = { v37484 }
    if      = { v37485 }
    df      = { v37486 }
    of      = { 0x0 }
    iopl0   = { v37488 }
    iopl1   = { v37489 }
    nt      = { v37490 }
    ?15     = { v37491 }
    rf      = { v37492 }
    vm      = { v37493 }
    ac      = { v37494 }
    vif     = { v37495 }
    vip     = { v37496 }
    id      = { v37497 }
    ?22     = { v37498 }
    ?23     = { v37499 }
    ?24     = { v37500 }
    ?25     = { v37501 }
    ?26     = { v37502 }
    ?27     = { v37503 }
    ?28     = { v37504 }
    ?29     = { v37505 }
    ?30     = { v37506 }
    ?31     = { v37507 }
    ip      = { v37576 }
memory:
    address = { v37466-0x4 }
      value = { 0x8048562 }
      flags = { size=4 }
    address = { v37519 }
      value = { v37576 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={} expr=v8434[32] }
    cx      = { defs={} expr=v8435[32] }
    dx      = { defs={} expr=v8436[32] }
    bx      = { defs={} expr=v8437[32] }
    sp      = { defs={0x08048560} expr=(add[32] v8438[32] -4[32]) }
    bp      = { defs={} expr=v8439[32] }
    si      = { defs={0x0804854f,0x08048554} expr=(add[32] v8436[32] (extract[32] 0[32] 32[32] (umul[40] v8434[32] 4[8]))) }
    di      = { defs={0x08048552,0x0804855a} expr=0[32] }
    es      = { defs={} expr=v8442[16] }
    cs      = { defs={} expr=v8443[16] }
    ss      = { defs={} expr=v8444[16] }
    ds      = { defs={} expr=v8445[16] }
    fs      = { defs={} expr=v8446[16] }
    gs      = { defs={} expr=v8447[16] }
    cf      = { defs={0x08048552} expr=0[1] }
    ?1      = { defs={} expr=v8449[1] }
    pf      = { defs={0x08048552} expr=1[1] }
    ?3      = { defs={} expr=v8451[1] }
    af      = { defs={0x08048552} expr=v8562[1] }
    ?5      = { defs={} expr=v8453[1] }
    zf      = { defs={0x08048552} expr=1[1] }
    sf      = { defs={0x08048552} expr=0[1] }
    tf      = { defs={} expr=v8456[1] }
    if      = { defs={} expr=v8457[1] }
    df      = { defs={} expr=v8458[1] }
    of      = { defs={0x08048552} expr=0[1] }
    iopl0   = { defs={} expr=v8460[1] }
    iopl1   = { defs={} expr=v8461[1] }
    nt      = { defs={} expr=v8462[1] }
    ?15     = { defs={} expr=v8463[1] }
    rf      = { defs={} expr=v8464[1] }
    vm      = { defs={} expr=v8465[1] }
    ac      = { defs={} expr=v8466[1] }
    vif     = { defs={} expr=v8467[1] }
    vip     = { defs={} expr=v8468[1] }
    id      = { defs={} expr=v8469[1] }
    ?22     = { defs={} expr=v8470[1] }
    ?23     = { defs={} expr=v8471[1] }
    ?24     = { defs={} expr=v8472[1] }
    ?25     = { defs={} expr=v8473[1] }
    ?26     = { defs={} expr=v8474[1] }
    ?27     = { defs={} expr=v8475[1] }
    ?28     = { defs={} expr=v8476[1] }
    ?29     = { defs={} expr=v8477[1] }
    ?30     = { defs={} expr=v8478[1] }
    ?31     = { defs={} expr=v8479[1] }
    ip      = { defs={0x08048560} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8616[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8617[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8618[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8619[8]))) }
memory:
    address = { defs={} expr=(add[32] (add[32] v8438[32] -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v8438[32] -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v8438[32] -4[32]) 1[32]) }
      value = { defs={} expr=-123[8] }
      flags = { }
    address = { defs={0x08048560} expr=(add[32] v8438[32] -4[32]) }
      value = { defs={} expr=98[8] }
      flags = { }
init mem:
    address = { defs={} expr=(add[32] (add[32] v8436[32] (extract[32] 0[32] 32[32] (umul[40] v8434[32] 4[8]))) 3[32]) }
      value = { defs={} expr=v8619[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v8436[32] (extract[32] 0[32] 32[32] (umul[40] v8434[32] 4[8]))) 2[32]) }
      value = { defs={} expr=v8618[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v8436[32] (extract[32] 0[32] 32[32] (umul[40] v8434[32] 4[8]))) 1[32]) }
      value = { defs={} expr=v8617[8] }
      flags = { rdonly }
    address = { defs={0x0804854f,0x08048554,0x08048560} expr=(add[32] v8436[32] (extract[32] 0[32] 32[32] (umul[40] v8434[32] 4[8]))) }
      value = { defs={} expr=v8616[8] }
      flags = { rdonly }
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048562:inc    edi
registers:
    ax      = { v37626 }
    cx      = { v37627 }
    dx      = { v37628 }
    bx      = { v37629 }
    sp      = { v37630 }
    bp      = { v37631 }
    si      = { v37632 }
    di      = { v37633+0x1 }
    es      = { v37634 }
    cs      = { v37635 }
    ss      = { v37636 }
    ds      = { v37637 }
    fs      = { v37638 }
    gs      = { v37639 }
    cf      = { v37640 }
    ?1      = { v37641 }
    pf      = { -v37711+0x1 }
    ?3      = { v37643 }
    af      = { v37718 }
    ?5      = { v37645 }
    zf      = { v37716 }
    sf      = { v37714 }
    tf      = { v37648 }
    if      = { v37649 }
    df      = { v37650 }
    of      = { v37724 }
    iopl0   = { v37652 }
    iopl1   = { v37653 }
    nt      = { v37654 }
    ?15     = { v37655 }
    rf      = { v37656 }
    vm      = { v37657 }
    ac      = { v37658 }
    vif     = { v37659 }
    vip     = { v37660 }
    id      = { v37661 }
    ?22     = { v37662 }
    ?23     = { v37663 }
    ?24     = { v37664 }
    ?25     = { v37665 }
    ?26     = { v37666 }
    ?27     = { v37667 }
    ?28     = { v37668 }
    ?29     = { v37669 }
    ?30     = { v37670 }
    ?31     = { v37671 }
    ip      = { 0x8048563 }
memory:
registers:
    ax      = { defs={} expr=v8675[32] }
    cx      = { defs={} expr=v8676[32] }
    dx      = { defs={} expr=v8677[32] }
    bx      = { defs={} expr=v8678[32] }
    sp      = { defs={} expr=v8679[32] }
    bp      = { defs={} expr=v8680[32] }
    si      = { defs={} expr=v8681[32] }
    di      = { defs={0x08048562} expr=(add[32] v8682[32] 1[32]) }
    es      = { defs={} expr=v8683[16] }
    cs      = { defs={} expr=v8684[16] }
    ss      = { defs={} expr=v8685[16] }
    ds      = { defs={} expr=v8686[16] }
    fs      = { defs={} expr=v8687[16] }
    gs      = { defs={} expr=v8688[16] }
    cf      = { defs={} expr=v8689[1] }
    ?1      = { defs={} expr=v8690[1] }
    pf      = { defs={0x08048562} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v8682[32] 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v8682[32] 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v8682[32] 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v8682[32] 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v8682[32] 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v8682[32] 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v8682[32] 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v8682[32] 1[32]))))))) }
    ?3      = { defs={} expr=v8692[1] }
    af      = { defs={0x08048562} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v8682[32]) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] v8682[32]) 1[33]))))) }
    ?5      = { defs={} expr=v8694[1] }
    zf      = { defs={0x08048562} expr=(zerop[1] (add[32] v8682[32] 1[32])) }
    sf      = { defs={0x08048562} expr=(extract[1] 31[32] 32[32] (add[32] v8682[32] 1[32])) }
    tf      = { defs={} expr=v8697[1] }
    if      = { defs={} expr=v8698[1] }
    df      = { defs={} expr=v8699[1] }
    of      = { defs={0x08048562} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v8682[32]) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] v8682[32]) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v8682[32]) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] v8682[32]) 1[33])))))) }
    iopl0   = { defs={} expr=v8701[1] }
    iopl1   = { defs={} expr=v8702[1] }
    nt      = { defs={} expr=v8703[1] }
    ?15     = { defs={} expr=v8704[1] }
    rf      = { defs={} expr=v8705[1] }
    vm      = { defs={} expr=v8706[1] }
    ac      = { defs={} expr=v8707[1] }
    vif     = { defs={} expr=v8708[1] }
    vip     = { defs={} expr=v8709[1] }
    id      = { defs={} expr=v8710[1] }
    ?22     = { defs={} expr=v8711[1] }
    ?23     = { defs={} expr=v8712[1] }
    ?24     = { defs={} expr=v8713[1] }
    ?25     = { defs={} expr=v8714[1] }
    ?26     = { defs={} expr=v8715[1] }
    ?27     = { defs={} expr=v8716[1] }
    ?28     = { defs={} expr=v8717[1] }
    ?29     = { defs={} expr=v8718[1] }
    ?30     = { defs={} expr=v8719[1] }
    ?31     = { defs={} expr=v8720[1] }
    ip      = { defs={0x08048562} expr=0x08048563[32] }
memory:
init mem:
null state
null state
0x8048563:sub    esi, 0x04
registers:
    ax      = { v37626 }
    cx      = { v37627 }
    dx      = { v37628 }
    bx      = { v37629 }
    sp      = { v37630 }
    bp      = { v37631 }
    si      = { v37632-0x4 }
    di      = { v37633+0x1 }
    es      = { v37634 }
    cs      = { v37635 }
    ss      = { v37636 }
    ds      = { v37637 }
    fs      = { v37638 }
    gs      = { v37639 }
    cf      = { -v37776+0x1 }
    ?1      = { v37641 }
    pf      = { -v37766+0x1 }
    ?3      = { v37643 }
    af      = { -v37773+0x1 }
    ?5      = { v37645 }
    zf      = { v37771 }
    sf      = { v37769 }
    tf      = { v37648 }
    if      = { v37649 }
    df      = { v37650 }
    of      = { v37783 }
    iopl0   = { v37652 }
    iopl1   = { v37653 }
    nt      = { v37654 }
    ?15     = { v37655 }
    rf      = { v37656 }
    vm      = { v37657 }
    ac      = { v37658 }
    vif     = { v37659 }
    vip     = { v37660 }
    id      = { v37661 }
    ?22     = { v37662 }
    ?23     = { v37663 }
    ?24     = { v37664 }
    ?25     = { v37665 }
    ?26     = { v37666 }
    ?27     = { v37667 }
    ?28     = { v37668 }
    ?29     = { v37669 }
    ?30     = { v37670 }
    ?31     = { v37671 }
    ip      = { 0x8048566 }
memory:
registers:
    ax      = { defs={} expr=v8675[32] }
    cx      = { defs={} expr=v8676[32] }
    dx      = { defs={} expr=v8677[32] }
    bx      = { defs={} expr=v8678[32] }
    sp      = { defs={} expr=v8679[32] }
    bp      = { defs={} expr=v8680[32] }
    si      = { defs={0x08048563} expr=(add[32] v8681[32] -4[32]) }
    di      = { defs={0x08048562} expr=(add[32] v8682[32] 1[32]) }
    es      = { defs={} expr=v8683[16] }
    cs      = { defs={} expr=v8684[16] }
    ss      = { defs={} expr=v8685[16] }
    ds      = { defs={} expr=v8686[16] }
    fs      = { defs={} expr=v8687[16] }
    gs      = { defs={} expr=v8688[16] }
    cf      = { defs={0x08048563} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v8681[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v8681[32]) 4294967292[33])))))) }
    ?1      = { defs={} expr=v8690[1] }
    pf      = { defs={0x08048563} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v8681[32] -4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v8681[32] -4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v8681[32] -4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v8681[32] -4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v8681[32] -4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v8681[32] -4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v8681[32] -4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v8681[32] -4[32]))))))) }
    ?3      = { defs={} expr=v8692[1] }
    af      = { defs={0x08048563} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v8681[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v8681[32]) 4294967292[33])))))) }
    ?5      = { defs={} expr=v8694[1] }
    zf      = { defs={0x08048563} expr=(zerop[1] (add[32] v8681[32] -4[32])) }
    sf      = { defs={0x08048563} expr=(extract[1] 31[32] 32[32] (add[32] v8681[32] -4[32])) }
    tf      = { defs={} expr=v8697[1] }
    if      = { defs={} expr=v8698[1] }
    df      = { defs={} expr=v8699[1] }
    of      = { defs={0x08048563} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v8681[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v8681[32]) 4294967292[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v8681[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v8681[32]) 4294967292[33])))))) }
    iopl0   = { defs={} expr=v8701[1] }
    iopl1   = { defs={} expr=v8702[1] }
    nt      = { defs={} expr=v8703[1] }
    ?15     = { defs={} expr=v8704[1] }
    rf      = { defs={} expr=v8705[1] }
    vm      = { defs={} expr=v8706[1] }
    ac      = { defs={} expr=v8707[1] }
    vif     = { defs={} expr=v8708[1] }
    vip     = { defs={} expr=v8709[1] }
    id      = { defs={} expr=v8710[1] }
    ?22     = { defs={} expr=v8711[1] }
    ?23     = { defs={} expr=v8712[1] }
    ?24     = { defs={} expr=v8713[1] }
    ?25     = { defs={} expr=v8714[1] }
    ?26     = { defs={} expr=v8715[1] }
    ?27     = { defs={} expr=v8716[1] }
    ?28     = { defs={} expr=v8717[1] }
    ?29     = { defs={} expr=v8718[1] }
    ?30     = { defs={} expr=v8719[1] }
    ?31     = { defs={} expr=v8720[1] }
    ip      = { defs={0x08048562,0x08048563} expr=0x08048566[32] }
memory:
init mem:
null state
null state
0x8048566:cmp    DWORD PTR ss:[ebp + 0xf0<-0x10>], edi
registers:
    ax      = { v37626 }
    cx      = { v37627 }
    dx      = { v37628 }
    bx      = { v37629 }
    sp      = { v37630 }
    bp      = { v37631 }
    si      = { v37632-0x4 }
    di      = { v37633+0x1 }
    es      = { v37634 }
    cs      = { v37635 }
    ss      = { v37636 }
    ds      = { v37637 }
    fs      = { v37638 }
    gs      = { v37639 }
    cf      = { -v37841+0x1 }
    ?1      = { v37641 }
    pf      = { -v37831+0x1 }
    ?3      = { v37643 }
    af      = { -v37838+0x1 }
    ?5      = { v37645 }
    zf      = { v37836 }
    sf      = { v37834 }
    tf      = { v37648 }
    if      = { v37649 }
    df      = { v37650 }
    of      = { v37848 }
    iopl0   = { v37652 }
    iopl1   = { v37653 }
    nt      = { v37654 }
    ?15     = { v37655 }
    rf      = { v37656 }
    vm      = { v37657 }
    ac      = { v37658 }
    vif     = { v37659 }
    vip     = { v37660 }
    id      = { v37661 }
    ?22     = { v37662 }
    ?23     = { v37663 }
    ?24     = { v37664 }
    ?25     = { v37665 }
    ?26     = { v37666 }
    ?27     = { v37667 }
    ?28     = { v37668 }
    ?29     = { v37669 }
    ?30     = { v37670 }
    ?31     = { v37671 }
    ip      = { 0x8048569 }
memory:
    address = { v37631-0x10 }
      value = { v37796 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={} expr=v8675[32] }
    cx      = { defs={} expr=v8676[32] }
    dx      = { defs={} expr=v8677[32] }
    bx      = { defs={} expr=v8678[32] }
    sp      = { defs={} expr=v8679[32] }
    bp      = { defs={} expr=v8680[32] }
    si      = { defs={0x08048563} expr=(add[32] v8681[32] -4[32]) }
    di      = { defs={0x08048562} expr=(add[32] v8682[32] 1[32]) }
    es      = { defs={} expr=v8683[16] }
    cs      = { defs={} expr=v8684[16] }
    ss      = { defs={} expr=v8685[16] }
    ds      = { defs={} expr=v8686[16] }
    fs      = { defs={} expr=v8687[16] }
    gs      = { defs={} expr=v8688[16] }
    cf      = { defs={0x08048562,0x08048566} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8912[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8913[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8914[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8915[8])))) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v8682[32] 1[32]))) (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8912[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8913[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8914[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8915[8])))) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v8682[32] 1[32]))) 1[33]))))))) }
    ?1      = { defs={} expr=v8690[1] }
    pf      = { defs={0x08048562,0x08048566} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8912[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8913[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8914[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8915[8]))) (add[32] (invert[32] (add[32] v8682[32] 1[32])) 1[32])))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8912[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8913[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8914[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8915[8]))) (add[32] (invert[32] (add[32] v8682[32] 1[32])) 1[32]))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8912[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8913[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8914[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8915[8]))) (add[32] (invert[32] (add[32] v8682[32] 1[32])) 1[32])))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8912[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8913[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8914[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8915[8]))) (add[32] (invert[32] (add[32] v8682[32] 1[32])) 1[32])))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8912[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8913[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8914[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8915[8]))) (add[32] (invert[32] (add[32] v8682[32] 1[32])) 1[32])))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8912[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8913[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8914[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8915[8]))) (add[32] (invert[32] (add[32] v8682[32] 1[32])) 1[32]))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8912[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8913[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8914[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8915[8]))) (add[32] (invert[32] (add[32] v8682[32] 1[32])) 1[32])))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8912[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8913[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8914[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8915[8]))) (add[32] (invert[32] (add[32] v8682[32] 1[32])) 1[32])))))))) }
    ?3      = { defs={} expr=v8692[1] }
    af      = { defs={0x08048562,0x08048566} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8912[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8913[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8914[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8915[8])))) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v8682[32] 1[32]))) (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8912[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8913[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8914[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8915[8])))) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v8682[32] 1[32]))) 1[33]))))))) }
    ?5      = { defs={} expr=v8694[1] }
    zf      = { defs={0x08048562,0x08048566} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8912[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8913[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8914[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8915[8]))) (add[32] (invert[32] (add[32] v8682[32] 1[32])) 1[32]))) }
    sf      = { defs={0x08048562,0x08048566} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8912[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8913[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8914[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8915[8]))) (add[32] (invert[32] (add[32] v8682[32] 1[32])) 1[32]))) }
    tf      = { defs={} expr=v8697[1] }
    if      = { defs={} expr=v8698[1] }
    df      = { defs={} expr=v8699[1] }
    of      = { defs={0x08048562,0x08048566} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8912[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8913[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8914[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8915[8])))) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v8682[32] 1[32]))) (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8912[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8913[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8914[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8915[8])))) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v8682[32] 1[32]))) 1[33])))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8912[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8913[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8914[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8915[8])))) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v8682[32] 1[32]))) (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8912[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8913[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8914[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8915[8])))) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v8682[32] 1[32]))) 1[33]))))))) }
    iopl0   = { defs={} expr=v8701[1] }
    iopl1   = { defs={} expr=v8702[1] }
    nt      = { defs={} expr=v8703[1] }
    ?15     = { defs={} expr=v8704[1] }
    rf      = { defs={} expr=v8705[1] }
    vm      = { defs={} expr=v8706[1] }
    ac      = { defs={} expr=v8707[1] }
    vif     = { defs={} expr=v8708[1] }
    vip     = { defs={} expr=v8709[1] }
    id      = { defs={} expr=v8710[1] }
    ?22     = { defs={} expr=v8711[1] }
    ?23     = { defs={} expr=v8712[1] }
    ?24     = { defs={} expr=v8713[1] }
    ?25     = { defs={} expr=v8714[1] }
    ?26     = { defs={} expr=v8715[1] }
    ?27     = { defs={} expr=v8716[1] }
    ?28     = { defs={} expr=v8717[1] }
    ?29     = { defs={} expr=v8718[1] }
    ?30     = { defs={} expr=v8719[1] }
    ?31     = { defs={} expr=v8720[1] }
    ip      = { defs={0x08048562,0x08048563,0x08048566} expr=0x08048569[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] (add[32] v8680[32] -16[32]) 3[32]) }
      value = { defs={} expr=v8915[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v8680[32] -16[32]) 2[32]) }
      value = { defs={} expr=v8914[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v8680[32] -16[32]) 1[32]) }
      value = { defs={} expr=v8913[8] }
      flags = { rdonly }
    address = { defs={0x08048566} expr=(add[32] v8680[32] -16[32]) }
      value = { defs={} expr=v8912[8] }
      flags = { rdonly }
null state
null state
0x8048569:jne    0x08048560<<Insn>>
registers:
    ax      = { v37626 }
    cx      = { v37627 }
    dx      = { v37628 }
    bx      = { v37629 }
    sp      = { v37630 }
    bp      = { v37631 }
    si      = { v37632-0x4 }
    di      = { v37633+0x1 }
    es      = { v37634 }
    cs      = { v37635 }
    ss      = { v37636 }
    ds      = { v37637 }
    fs      = { v37638 }
    gs      = { v37639 }
    cf      = { -v37841+0x1 }
    ?1      = { v37641 }
    pf      = { -v37831+0x1 }
    ?3      = { v37643 }
    af      = { -v37838+0x1 }
    ?5      = { v37645 }
    zf      = { v37836 }
    sf      = { v37834 }
    tf      = { v37648 }
    if      = { v37649 }
    df      = { v37650 }
    of      = { v37848 }
    iopl0   = { v37652 }
    iopl1   = { v37653 }
    nt      = { v37654 }
    ?15     = { v37655 }
    rf      = { v37656 }
    vm      = { v37657 }
    ac      = { v37658 }
    vif     = { v37659 }
    vip     = { v37660 }
    id      = { v37661 }
    ?22     = { v37662 }
    ?23     = { v37663 }
    ?24     = { v37664 }
    ?25     = { v37665 }
    ?26     = { v37666 }
    ?27     = { v37667 }
    ?28     = { v37668 }
    ?29     = { v37669 }
    ?30     = { v37670 }
    ?31     = { v37671 }
    ip      = { v37858 }
memory:
    address = { v37631-0x10 }
      value = { v37796 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={} expr=v8675[32] }
    cx      = { defs={} expr=v8676[32] }
    dx      = { defs={} expr=v8677[32] }
    bx      = { defs={} expr=v8678[32] }
    sp      = { defs={} expr=v8679[32] }
    bp      = { defs={} expr=v8680[32] }
    si      = { defs={0x08048563} expr=(add[32] v8681[32] -4[32]) }
    di      = { defs={0x08048562} expr=(add[32] v8682[32] 1[32]) }
    es      = { defs={} expr=v8683[16] }
    cs      = { defs={} expr=v8684[16] }
    ss      = { defs={} expr=v8685[16] }
    ds      = { defs={} expr=v8686[16] }
    fs      = { defs={} expr=v8687[16] }
    gs      = { defs={} expr=v8688[16] }
    cf      = { defs={0x08048562,0x08048566} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8912[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8913[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8914[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8915[8])))) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v8682[32] 1[32]))) (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8912[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8913[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8914[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8915[8])))) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v8682[32] 1[32]))) 1[33]))))))) }
    ?1      = { defs={} expr=v8690[1] }
    pf      = { defs={0x08048562,0x08048566} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8912[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8913[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8914[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8915[8]))) (add[32] (invert[32] (add[32] v8682[32] 1[32])) 1[32])))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8912[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8913[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8914[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8915[8]))) (add[32] (invert[32] (add[32] v8682[32] 1[32])) 1[32]))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8912[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8913[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8914[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8915[8]))) (add[32] (invert[32] (add[32] v8682[32] 1[32])) 1[32])))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8912[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8913[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8914[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8915[8]))) (add[32] (invert[32] (add[32] v8682[32] 1[32])) 1[32])))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8912[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8913[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8914[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8915[8]))) (add[32] (invert[32] (add[32] v8682[32] 1[32])) 1[32])))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8912[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8913[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8914[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8915[8]))) (add[32] (invert[32] (add[32] v8682[32] 1[32])) 1[32]))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8912[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8913[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8914[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8915[8]))) (add[32] (invert[32] (add[32] v8682[32] 1[32])) 1[32])))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8912[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8913[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8914[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8915[8]))) (add[32] (invert[32] (add[32] v8682[32] 1[32])) 1[32])))))))) }
    ?3      = { defs={} expr=v8692[1] }
    af      = { defs={0x08048562,0x08048566} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8912[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8913[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8914[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8915[8])))) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v8682[32] 1[32]))) (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8912[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8913[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8914[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8915[8])))) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v8682[32] 1[32]))) 1[33]))))))) }
    ?5      = { defs={} expr=v8694[1] }
    zf      = { defs={0x08048562,0x08048566} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8912[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8913[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8914[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8915[8]))) (add[32] (invert[32] (add[32] v8682[32] 1[32])) 1[32]))) }
    sf      = { defs={0x08048562,0x08048566} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8912[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8913[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8914[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8915[8]))) (add[32] (invert[32] (add[32] v8682[32] 1[32])) 1[32]))) }
    tf      = { defs={} expr=v8697[1] }
    if      = { defs={} expr=v8698[1] }
    df      = { defs={} expr=v8699[1] }
    of      = { defs={0x08048562,0x08048566} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8912[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8913[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8914[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8915[8])))) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v8682[32] 1[32]))) (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8912[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8913[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8914[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8915[8])))) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v8682[32] 1[32]))) 1[33])))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8912[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8913[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8914[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8915[8])))) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v8682[32] 1[32]))) (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8912[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8913[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8914[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8915[8])))) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v8682[32] 1[32]))) 1[33]))))))) }
    iopl0   = { defs={} expr=v8701[1] }
    iopl1   = { defs={} expr=v8702[1] }
    nt      = { defs={} expr=v8703[1] }
    ?15     = { defs={} expr=v8704[1] }
    rf      = { defs={} expr=v8705[1] }
    vm      = { defs={} expr=v8706[1] }
    ac      = { defs={} expr=v8707[1] }
    vif     = { defs={} expr=v8708[1] }
    vip     = { defs={} expr=v8709[1] }
    id      = { defs={} expr=v8710[1] }
    ?22     = { defs={} expr=v8711[1] }
    ?23     = { defs={} expr=v8712[1] }
    ?24     = { defs={} expr=v8713[1] }
    ?25     = { defs={} expr=v8714[1] }
    ?26     = { defs={} expr=v8715[1] }
    ?27     = { defs={} expr=v8716[1] }
    ?28     = { defs={} expr=v8717[1] }
    ?29     = { defs={} expr=v8718[1] }
    ?30     = { defs={} expr=v8719[1] }
    ?31     = { defs={} expr=v8720[1] }
    ip      = { defs={0x08048562,0x08048563,0x08048566,0x08048569} expr=(ite[32] (invert[1] (zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v8912[8]) (shr0[32] 8[32] (uextend[32] 32[32] v8913[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v8914[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v8915[8]))) (add[32] (invert[32] (add[32] v8682[32] 1[32])) 1[32])))) 0x08048560[32] 0x0804856b[32]) }
memory:
init mem:
    address = { defs={} expr=(add[32] (add[32] v8680[32] -16[32]) 3[32]) }
      value = { defs={} expr=v8915[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v8680[32] -16[32]) 2[32]) }
      value = { defs={} expr=v8914[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v8680[32] -16[32]) 1[32]) }
      value = { defs={} expr=v8913[8] }
      flags = { rdonly }
    address = { defs={0x08048566} expr=(add[32] v8680[32] -16[32]) }
      value = { defs={} expr=v8912[8] }
      flags = { rdonly }
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048570:add    esp, 0x0c
registers:
    ax      = { v37908 }
    cx      = { v37909 }
    dx      = { v37910 }
    bx      = { v37911 }
    sp      = { v37912+0xc }
    bp      = { v37913 }
    si      = { v37914 }
    di      = { v37915 }
    es      = { v37916 }
    cs      = { v37917 }
    ss      = { v37918 }
    ds      = { v37919 }
    fs      = { v37920 }
    gs      = { v37921 }
    cf      = { v38002 }
    ?1      = { v37923 }
    pf      = { -v37993+0x1 }
    ?3      = { v37925 }
    af      = { v38000 }
    ?5      = { v37927 }
    zf      = { v37998 }
    sf      = { v37996 }
    tf      = { v37930 }
    if      = { v37931 }
    df      = { v37932 }
    of      = { v38008 }
    iopl0   = { v37934 }
    iopl1   = { v37935 }
    nt      = { v37936 }
    ?15     = { v37937 }
    rf      = { v37938 }
    vm      = { v37939 }
    ac      = { v37940 }
    vif     = { v37941 }
    vip     = { v37942 }
    id      = { v37943 }
    ?22     = { v37944 }
    ?23     = { v37945 }
    ?24     = { v37946 }
    ?25     = { v37947 }
    ?26     = { v37948 }
    ?27     = { v37949 }
    ?28     = { v37950 }
    ?29     = { v37951 }
    ?30     = { v37952 }
    ?31     = { v37953 }
    ip      = { 0x8048573 }
memory:
registers:
    ax      = { defs={} expr=v9063[32] }
    cx      = { defs={} expr=v9064[32] }
    dx      = { defs={} expr=v9065[32] }
    bx      = { defs={} expr=v9066[32] }
    sp      = { defs={0x08048570} expr=(add[32] v9067[32] 12[32]) }
    bp      = { defs={} expr=v9068[32] }
    si      = { defs={} expr=v9069[32] }
    di      = { defs={} expr=v9070[32] }
    es      = { defs={} expr=v9071[16] }
    cs      = { defs={} expr=v9072[16] }
    ss      = { defs={} expr=v9073[16] }
    ds      = { defs={} expr=v9074[16] }
    fs      = { defs={} expr=v9075[16] }
    gs      = { defs={} expr=v9076[16] }
    cf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v9067[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v9067[32]) 12[33]))))) }
    ?1      = { defs={} expr=v9078[1] }
    pf      = { defs={0x08048570} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v9067[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v9067[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v9067[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v9067[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v9067[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v9067[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v9067[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v9067[32] 12[32]))))))) }
    ?3      = { defs={} expr=v9080[1] }
    af      = { defs={0x08048570} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v9067[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v9067[32]) 12[33]))))) }
    ?5      = { defs={} expr=v9082[1] }
    zf      = { defs={0x08048570} expr=(zerop[1] (add[32] v9067[32] 12[32])) }
    sf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (add[32] v9067[32] 12[32])) }
    tf      = { defs={} expr=v9085[1] }
    if      = { defs={} expr=v9086[1] }
    df      = { defs={} expr=v9087[1] }
    of      = { defs={0x08048570} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v9067[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v9067[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v9067[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v9067[32]) 12[33])))))) }
    iopl0   = { defs={} expr=v9089[1] }
    iopl1   = { defs={} expr=v9090[1] }
    nt      = { defs={} expr=v9091[1] }
    ?15     = { defs={} expr=v9092[1] }
    rf      = { defs={} expr=v9093[1] }
    vm      = { defs={} expr=v9094[1] }
    ac      = { defs={} expr=v9095[1] }
    vif     = { defs={} expr=v9096[1] }
    vip     = { defs={} expr=v9097[1] }
    id      = { defs={} expr=v9098[1] }
    ?22     = { defs={} expr=v9099[1] }
    ?23     = { defs={} expr=v9100[1] }
    ?24     = { defs={} expr=v9101[1] }
    ?25     = { defs={} expr=v9102[1] }
    ?26     = { defs={} expr=v9103[1] }
    ?27     = { defs={} expr=v9104[1] }
    ?28     = { defs={} expr=v9105[1] }
    ?29     = { defs={} expr=v9106[1] }
    ?30     = { defs={} expr=v9107[1] }
    ?31     = { defs={} expr=v9108[1] }
    ip      = { defs={0x08048570} expr=0x08048573[32] }
memory:
init mem:
null state
null state
0x8048573:pop    ebx
registers:
    ax      = { v37908 }
    cx      = { v37909 }
    dx      = { v37910 }
    bx      = { v38018 }
    sp      = { v37912+0x10 }
    bp      = { v37913 }
    si      = { v37914 }
    di      = { v37915 }
    es      = { v37916 }
    cs      = { v37917 }
    ss      = { v37918 }
    ds      = { v37919 }
    fs      = { v37920 }
    gs      = { v37921 }
    cf      = { v38002 }
    ?1      = { v37923 }
    pf      = { -v37993+0x1 }
    ?3      = { v37925 }
    af      = { v38000 }
    ?5      = { v37927 }
    zf      = { v37998 }
    sf      = { v37996 }
    tf      = { v37930 }
    if      = { v37931 }
    df      = { v37932 }
    of      = { v38008 }
    iopl0   = { v37934 }
    iopl1   = { v37935 }
    nt      = { v37936 }
    ?15     = { v37937 }
    rf      = { v37938 }
    vm      = { v37939 }
    ac      = { v37940 }
    vif     = { v37941 }
    vip     = { v37942 }
    id      = { v37943 }
    ?22     = { v37944 }
    ?23     = { v37945 }
    ?24     = { v37946 }
    ?25     = { v37947 }
    ?26     = { v37948 }
    ?27     = { v37949 }
    ?28     = { v37950 }
    ?29     = { v37951 }
    ?30     = { v37952 }
    ?31     = { v37953 }
    ip      = { 0x8048574 }
memory:
    address = { v37912+0xc }
      value = { v38018 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={} expr=v9063[32] }
    cx      = { defs={} expr=v9064[32] }
    dx      = { defs={} expr=v9065[32] }
    bx      = { defs={0x08048573} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v9209[8]) (shr0[32] 8[32] (uextend[32] 32[32] v9210[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v9211[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v9212[8]))) }
    sp      = { defs={0x08048570,0x08048573} expr=(add[32] (add[32] v9067[32] 12[32]) 4[32]) }
    bp      = { defs={} expr=v9068[32] }
    si      = { defs={} expr=v9069[32] }
    di      = { defs={} expr=v9070[32] }
    es      = { defs={} expr=v9071[16] }
    cs      = { defs={} expr=v9072[16] }
    ss      = { defs={} expr=v9073[16] }
    ds      = { defs={} expr=v9074[16] }
    fs      = { defs={} expr=v9075[16] }
    gs      = { defs={} expr=v9076[16] }
    cf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v9067[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v9067[32]) 12[33]))))) }
    ?1      = { defs={} expr=v9078[1] }
    pf      = { defs={0x08048570} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v9067[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v9067[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v9067[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v9067[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v9067[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v9067[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v9067[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v9067[32] 12[32]))))))) }
    ?3      = { defs={} expr=v9080[1] }
    af      = { defs={0x08048570} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v9067[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v9067[32]) 12[33]))))) }
    ?5      = { defs={} expr=v9082[1] }
    zf      = { defs={0x08048570} expr=(zerop[1] (add[32] v9067[32] 12[32])) }
    sf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (add[32] v9067[32] 12[32])) }
    tf      = { defs={} expr=v9085[1] }
    if      = { defs={} expr=v9086[1] }
    df      = { defs={} expr=v9087[1] }
    of      = { defs={0x08048570} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v9067[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v9067[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v9067[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v9067[32]) 12[33])))))) }
    iopl0   = { defs={} expr=v9089[1] }
    iopl1   = { defs={} expr=v9090[1] }
    nt      = { defs={} expr=v9091[1] }
    ?15     = { defs={} expr=v9092[1] }
    rf      = { defs={} expr=v9093[1] }
    vm      = { defs={} expr=v9094[1] }
    ac      = { defs={} expr=v9095[1] }
    vif     = { defs={} expr=v9096[1] }
    vip     = { defs={} expr=v9097[1] }
    id      = { defs={} expr=v9098[1] }
    ?22     = { defs={} expr=v9099[1] }
    ?23     = { defs={} expr=v9100[1] }
    ?24     = { defs={} expr=v9101[1] }
    ?25     = { defs={} expr=v9102[1] }
    ?26     = { defs={} expr=v9103[1] }
    ?27     = { defs={} expr=v9104[1] }
    ?28     = { defs={} expr=v9105[1] }
    ?29     = { defs={} expr=v9106[1] }
    ?30     = { defs={} expr=v9107[1] }
    ?31     = { defs={} expr=v9108[1] }
    ip      = { defs={0x08048570,0x08048573} expr=0x08048574[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] (add[32] v9067[32] 12[32]) 3[32]) }
      value = { defs={} expr=v9212[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v9067[32] 12[32]) 2[32]) }
      value = { defs={} expr=v9211[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v9067[32] 12[32]) 1[32]) }
      value = { defs={} expr=v9210[8] }
      flags = { rdonly }
    address = { defs={0x08048570,0x08048573} expr=(add[32] v9067[32] 12[32]) }
      value = { defs={} expr=v9209[8] }
      flags = { rdonly }
null state
null state
0x8048574:pop    esi
registers:
    ax      = { v37908 }
    cx      = { v37909 }
    dx      = { v37910 }
    bx      = { v38018 }
    sp      = { v37912+0x14 }
    bp      = { v37913 }
    si      = { v38028 }
    di      = { v37915 }
    es      = { v37916 }
    cs      = { v37917 }
    ss      = { v37918 }
    ds      = { v37919 }
    fs      = { v37920 }
    gs      = { v37921 }
    cf      = { v38002 }
    ?1      = { v37923 }
    pf      = { -v37993+0x1 }
    ?3      = { v37925 }
    af      = { v38000 }
    ?5      = { v37927 }
    zf      = { v37998 }
    sf      = { v37996 }
    tf      = { v37930 }
    if      = { v37931 }
    df      = { v37932 }
    of      = { v38008 }
    iopl0   = { v37934 }
    iopl1   = { v37935 }
    nt      = { v37936 }
    ?15     = { v37937 }
    rf      = { v37938 }
    vm      = { v37939 }
    ac      = { v37940 }
    vif     = { v37941 }
    vip     = { v37942 }
    id      = { v37943 }
    ?22     = { v37944 }
    ?23     = { v37945 }
    ?24     = { v37946 }
    ?25     = { v37947 }
    ?26     = { v37948 }
    ?27     = { v37949 }
    ?28     = { v37950 }
    ?29     = { v37951 }
    ?30     = { v37952 }
    ?31     = { v37953 }
    ip      = { 0x8048575 }
memory:
    address = { v37912+0xc }
      value = { v38018 }
      flags = { size=4; read-only }
    address = { v37912+0x10 }
      value = { v38028 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={} expr=v9063[32] }
    cx      = { defs={} expr=v9064[32] }
    dx      = { defs={} expr=v9065[32] }
    bx      = { defs={0x08048573} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v9209[8]) (shr0[32] 8[32] (uextend[32] 32[32] v9210[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v9211[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v9212[8]))) }
    sp      = { defs={0x08048570,0x08048573,0x08048574} expr=(add[32] (add[32] (add[32] v9067[32] 12[32]) 4[32]) 4[32]) }
    bp      = { defs={} expr=v9068[32] }
    si      = { defs={0x08048574} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v9236[8]) (shr0[32] 8[32] (uextend[32] 32[32] v9237[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v9238[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v9239[8]))) }
    di      = { defs={} expr=v9070[32] }
    es      = { defs={} expr=v9071[16] }
    cs      = { defs={} expr=v9072[16] }
    ss      = { defs={} expr=v9073[16] }
    ds      = { defs={} expr=v9074[16] }
    fs      = { defs={} expr=v9075[16] }
    gs      = { defs={} expr=v9076[16] }
    cf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v9067[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v9067[32]) 12[33]))))) }
    ?1      = { defs={} expr=v9078[1] }
    pf      = { defs={0x08048570} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v9067[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v9067[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v9067[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v9067[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v9067[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v9067[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v9067[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v9067[32] 12[32]))))))) }
    ?3      = { defs={} expr=v9080[1] }
    af      = { defs={0x08048570} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v9067[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v9067[32]) 12[33]))))) }
    ?5      = { defs={} expr=v9082[1] }
    zf      = { defs={0x08048570} expr=(zerop[1] (add[32] v9067[32] 12[32])) }
    sf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (add[32] v9067[32] 12[32])) }
    tf      = { defs={} expr=v9085[1] }
    if      = { defs={} expr=v9086[1] }
    df      = { defs={} expr=v9087[1] }
    of      = { defs={0x08048570} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v9067[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v9067[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v9067[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v9067[32]) 12[33])))))) }
    iopl0   = { defs={} expr=v9089[1] }
    iopl1   = { defs={} expr=v9090[1] }
    nt      = { defs={} expr=v9091[1] }
    ?15     = { defs={} expr=v9092[1] }
    rf      = { defs={} expr=v9093[1] }
    vm      = { defs={} expr=v9094[1] }
    ac      = { defs={} expr=v9095[1] }
    vif     = { defs={} expr=v9096[1] }
    vip     = { defs={} expr=v9097[1] }
    id      = { defs={} expr=v9098[1] }
    ?22     = { defs={} expr=v9099[1] }
    ?23     = { defs={} expr=v9100[1] }
    ?24     = { defs={} expr=v9101[1] }
    ?25     = { defs={} expr=v9102[1] }
    ?26     = { defs={} expr=v9103[1] }
    ?27     = { defs={} expr=v9104[1] }
    ?28     = { defs={} expr=v9105[1] }
    ?29     = { defs={} expr=v9106[1] }
    ?30     = { defs={} expr=v9107[1] }
    ?31     = { defs={} expr=v9108[1] }
    ip      = { defs={0x08048570,0x08048573,0x08048574} expr=0x08048575[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] (add[32] (add[32] v9067[32] 12[32]) 4[32]) 3[32]) }
      value = { defs={} expr=v9239[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] v9067[32] 12[32]) 4[32]) 2[32]) }
      value = { defs={} expr=v9238[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] v9067[32] 12[32]) 4[32]) 1[32]) }
      value = { defs={} expr=v9237[8] }
      flags = { rdonly }
    address = { defs={0x08048570,0x08048573,0x08048574} expr=(add[32] (add[32] v9067[32] 12[32]) 4[32]) }
      value = { defs={} expr=v9236[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v9067[32] 12[32]) 3[32]) }
      value = { defs={} expr=v9212[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v9067[32] 12[32]) 2[32]) }
      value = { defs={} expr=v9211[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v9067[32] 12[32]) 1[32]) }
      value = { defs={} expr=v9210[8] }
      flags = { rdonly }
    address = { defs={0x08048570,0x08048573} expr=(add[32] v9067[32] 12[32]) }
      value = { defs={} expr=v9209[8] }
      flags = { rdonly }
null state
null state
0x8048575:pop    edi
registers:
    ax      = { v37908 }
    cx      = { v37909 }
    dx      = { v37910 }
    bx      = { v38018 }
    sp      = { v37912+0x18 }
    bp      = { v37913 }
    si      = { v38028 }
    di      = { v38038 }
    es      = { v37916 }
    cs      = { v37917 }
    ss      = { v37918 }
    ds      = { v37919 }
    fs      = { v37920 }
    gs      = { v37921 }
    cf      = { v38002 }
    ?1      = { v37923 }
    pf      = { -v37993+0x1 }
    ?3      = { v37925 }
    af      = { v38000 }
    ?5      = { v37927 }
    zf      = { v37998 }
    sf      = { v37996 }
    tf      = { v37930 }
    if      = { v37931 }
    df      = { v37932 }
    of      = { v38008 }
    iopl0   = { v37934 }
    iopl1   = { v37935 }
    nt      = { v37936 }
    ?15     = { v37937 }
    rf      = { v37938 }
    vm      = { v37939 }
    ac      = { v37940 }
    vif     = { v37941 }
    vip     = { v37942 }
    id      = { v37943 }
    ?22     = { v37944 }
    ?23     = { v37945 }
    ?24     = { v37946 }
    ?25     = { v37947 }
    ?26     = { v37948 }
    ?27     = { v37949 }
    ?28     = { v37950 }
    ?29     = { v37951 }
    ?30     = { v37952 }
    ?31     = { v37953 }
    ip      = { 0x8048576 }
memory:
    address = { v37912+0xc }
      value = { v38018 }
      flags = { size=4; read-only }
    address = { v37912+0x10 }
      value = { v38028 }
      flags = { size=4; read-only }
    address = { v37912+0x14 }
      value = { v38038 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={} expr=v9063[32] }
    cx      = { defs={} expr=v9064[32] }
    dx      = { defs={} expr=v9065[32] }
    bx      = { defs={0x08048573} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v9209[8]) (shr0[32] 8[32] (uextend[32] 32[32] v9210[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v9211[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v9212[8]))) }
    sp      = { defs={0x08048570,0x08048573,0x08048574,0x08048575} expr=(add[32] (add[32] (add[32] (add[32] v9067[32] 12[32]) 4[32]) 4[32]) 4[32]) }
    bp      = { defs={} expr=v9068[32] }
    si      = { defs={0x08048574} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v9236[8]) (shr0[32] 8[32] (uextend[32] 32[32] v9237[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v9238[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v9239[8]))) }
    di      = { defs={0x08048575} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v9263[8]) (shr0[32] 8[32] (uextend[32] 32[32] v9264[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v9265[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v9266[8]))) }
    es      = { defs={} expr=v9071[16] }
    cs      = { defs={} expr=v9072[16] }
    ss      = { defs={} expr=v9073[16] }
    ds      = { defs={} expr=v9074[16] }
    fs      = { defs={} expr=v9075[16] }
    gs      = { defs={} expr=v9076[16] }
    cf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v9067[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v9067[32]) 12[33]))))) }
    ?1      = { defs={} expr=v9078[1] }
    pf      = { defs={0x08048570} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v9067[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v9067[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v9067[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v9067[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v9067[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v9067[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v9067[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v9067[32] 12[32]))))))) }
    ?3      = { defs={} expr=v9080[1] }
    af      = { defs={0x08048570} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v9067[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v9067[32]) 12[33]))))) }
    ?5      = { defs={} expr=v9082[1] }
    zf      = { defs={0x08048570} expr=(zerop[1] (add[32] v9067[32] 12[32])) }
    sf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (add[32] v9067[32] 12[32])) }
    tf      = { defs={} expr=v9085[1] }
    if      = { defs={} expr=v9086[1] }
    df      = { defs={} expr=v9087[1] }
    of      = { defs={0x08048570} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v9067[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v9067[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v9067[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v9067[32]) 12[33])))))) }
    iopl0   = { defs={} expr=v9089[1] }
    iopl1   = { defs={} expr=v9090[1] }
    nt      = { defs={} expr=v9091[1] }
    ?15     = { defs={} expr=v9092[1] }
    rf      = { defs={} expr=v9093[1] }
    vm      = { defs={} expr=v9094[1] }
    ac      = { defs={} expr=v9095[1] }
    vif     = { defs={} expr=v9096[1] }
    vip     = { defs={} expr=v9097[1] }
    id      = { defs={} expr=v9098[1] }
    ?22     = { defs={} expr=v9099[1] }
    ?23     = { defs={} expr=v9100[1] }
    ?24     = { defs={} expr=v9101[1] }
    ?25     = { defs={} expr=v9102[1] }
    ?26     = { defs={} expr=v9103[1] }
    ?27     = { defs={} expr=v9104[1] }
    ?28     = { defs={} expr=v9105[1] }
    ?29     = { defs={} expr=v9106[1] }
    ?30     = { defs={} expr=v9107[1] }
    ?31     = { defs={} expr=v9108[1] }
    ip      = { defs={0x08048570,0x08048573,0x08048574,0x08048575} expr=0x08048576[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v9067[32] 12[32]) 4[32]) 4[32]) 3[32]) }
      value = { defs={} expr=v9266[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v9067[32] 12[32]) 4[32]) 4[32]) 2[32]) }
      value = { defs={} expr=v9265[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v9067[32] 12[32]) 4[32]) 4[32]) 1[32]) }
      value = { defs={} expr=v9264[8] }
      flags = { rdonly }
    address = { defs={0x08048570,0x08048573,0x08048574,0x08048575} expr=(add[32] (add[32] (add[32] v9067[32] 12[32]) 4[32]) 4[32]) }
      value = { defs={} expr=v9263[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] v9067[32] 12[32]) 4[32]) 3[32]) }
      value = { defs={} expr=v9239[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] v9067[32] 12[32]) 4[32]) 2[32]) }
      value = { defs={} expr=v9238[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] v9067[32] 12[32]) 4[32]) 1[32]) }
      value = { defs={} expr=v9237[8] }
      flags = { rdonly }
    address = { defs={0x08048570,0x08048573,0x08048574} expr=(add[32] (add[32] v9067[32] 12[32]) 4[32]) }
      value = { defs={} expr=v9236[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v9067[32] 12[32]) 3[32]) }
      value = { defs={} expr=v9212[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v9067[32] 12[32]) 2[32]) }
      value = { defs={} expr=v9211[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v9067[32] 12[32]) 1[32]) }
      value = { defs={} expr=v9210[8] }
      flags = { rdonly }
    address = { defs={0x08048570,0x08048573} expr=(add[32] v9067[32] 12[32]) }
      value = { defs={} expr=v9209[8] }
      flags = { rdonly }
null state
null state
0x8048576:pop    ebp
registers:
    ax      = { v37908 }
    cx      = { v37909 }
    dx      = { v37910 }
    bx      = { v38018 }
    sp      = { v37912+0x1c }
    bp      = { v38048 }
    si      = { v38028 }
    di      = { v38038 }
    es      = { v37916 }
    cs      = { v37917 }
    ss      = { v37918 }
    ds      = { v37919 }
    fs      = { v37920 }
    gs      = { v37921 }
    cf      = { v38002 }
    ?1      = { v37923 }
    pf      = { -v37993+0x1 }
    ?3      = { v37925 }
    af      = { v38000 }
    ?5      = { v37927 }
    zf      = { v37998 }
    sf      = { v37996 }
    tf      = { v37930 }
    if      = { v37931 }
    df      = { v37932 }
    of      = { v38008 }
    iopl0   = { v37934 }
    iopl1   = { v37935 }
    nt      = { v37936 }
    ?15     = { v37937 }
    rf      = { v37938 }
    vm      = { v37939 }
    ac      = { v37940 }
    vif     = { v37941 }
    vip     = { v37942 }
    id      = { v37943 }
    ?22     = { v37944 }
    ?23     = { v37945 }
    ?24     = { v37946 }
    ?25     = { v37947 }
    ?26     = { v37948 }
    ?27     = { v37949 }
    ?28     = { v37950 }
    ?29     = { v37951 }
    ?30     = { v37952 }
    ?31     = { v37953 }
    ip      = { 0x8048577 }
memory:
    address = { v37912+0xc }
      value = { v38018 }
      flags = { size=4; read-only }
    address = { v37912+0x10 }
      value = { v38028 }
      flags = { size=4; read-only }
    address = { v37912+0x14 }
      value = { v38038 }
      flags = { size=4; read-only }
    address = { v37912+0x18 }
      value = { v38048 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={} expr=v9063[32] }
    cx      = { defs={} expr=v9064[32] }
    dx      = { defs={} expr=v9065[32] }
    bx      = { defs={0x08048573} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v9209[8]) (shr0[32] 8[32] (uextend[32] 32[32] v9210[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v9211[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v9212[8]))) }
    sp      = { defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v9067[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) }
    bp      = { defs={0x08048576} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v9290[8]) (shr0[32] 8[32] (uextend[32] 32[32] v9291[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v9292[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v9293[8]))) }
    si      = { defs={0x08048574} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v9236[8]) (shr0[32] 8[32] (uextend[32] 32[32] v9237[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v9238[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v9239[8]))) }
    di      = { defs={0x08048575} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v9263[8]) (shr0[32] 8[32] (uextend[32] 32[32] v9264[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v9265[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v9266[8]))) }
    es      = { defs={} expr=v9071[16] }
    cs      = { defs={} expr=v9072[16] }
    ss      = { defs={} expr=v9073[16] }
    ds      = { defs={} expr=v9074[16] }
    fs      = { defs={} expr=v9075[16] }
    gs      = { defs={} expr=v9076[16] }
    cf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v9067[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v9067[32]) 12[33]))))) }
    ?1      = { defs={} expr=v9078[1] }
    pf      = { defs={0x08048570} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v9067[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v9067[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v9067[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v9067[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v9067[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v9067[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v9067[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v9067[32] 12[32]))))))) }
    ?3      = { defs={} expr=v9080[1] }
    af      = { defs={0x08048570} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v9067[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v9067[32]) 12[33]))))) }
    ?5      = { defs={} expr=v9082[1] }
    zf      = { defs={0x08048570} expr=(zerop[1] (add[32] v9067[32] 12[32])) }
    sf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (add[32] v9067[32] 12[32])) }
    tf      = { defs={} expr=v9085[1] }
    if      = { defs={} expr=v9086[1] }
    df      = { defs={} expr=v9087[1] }
    of      = { defs={0x08048570} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v9067[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v9067[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v9067[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v9067[32]) 12[33])))))) }
    iopl0   = { defs={} expr=v9089[1] }
    iopl1   = { defs={} expr=v9090[1] }
    nt      = { defs={} expr=v9091[1] }
    ?15     = { defs={} expr=v9092[1] }
    rf      = { defs={} expr=v9093[1] }
    vm      = { defs={} expr=v9094[1] }
    ac      = { defs={} expr=v9095[1] }
    vif     = { defs={} expr=v9096[1] }
    vip     = { defs={} expr=v9097[1] }
    id      = { defs={} expr=v9098[1] }
    ?22     = { defs={} expr=v9099[1] }
    ?23     = { defs={} expr=v9100[1] }
    ?24     = { defs={} expr=v9101[1] }
    ?25     = { defs={} expr=v9102[1] }
    ?26     = { defs={} expr=v9103[1] }
    ?27     = { defs={} expr=v9104[1] }
    ?28     = { defs={} expr=v9105[1] }
    ?29     = { defs={} expr=v9106[1] }
    ?30     = { defs={} expr=v9107[1] }
    ?31     = { defs={} expr=v9108[1] }
    ip      = { defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576} expr=0x08048577[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v9067[32] 12[32]) 4[32]) 4[32]) 4[32]) 3[32]) }
      value = { defs={} expr=v9293[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v9067[32] 12[32]) 4[32]) 4[32]) 4[32]) 2[32]) }
      value = { defs={} expr=v9292[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v9067[32] 12[32]) 4[32]) 4[32]) 4[32]) 1[32]) }
      value = { defs={} expr=v9291[8] }
      flags = { rdonly }
    address = { defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576} expr=(add[32] (add[32] (add[32] (add[32] v9067[32] 12[32]) 4[32]) 4[32]) 4[32]) }
      value = { defs={} expr=v9290[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v9067[32] 12[32]) 4[32]) 4[32]) 3[32]) }
      value = { defs={} expr=v9266[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v9067[32] 12[32]) 4[32]) 4[32]) 2[32]) }
      value = { defs={} expr=v9265[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v9067[32] 12[32]) 4[32]) 4[32]) 1[32]) }
      value = { defs={} expr=v9264[8] }
      flags = { rdonly }
    address = { defs={0x08048570,0x08048573,0x08048574,0x08048575} expr=(add[32] (add[32] (add[32] v9067[32] 12[32]) 4[32]) 4[32]) }
      value = { defs={} expr=v9263[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] v9067[32] 12[32]) 4[32]) 3[32]) }
      value = { defs={} expr=v9239[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] v9067[32] 12[32]) 4[32]) 2[32]) }
      value = { defs={} expr=v9238[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] v9067[32] 12[32]) 4[32]) 1[32]) }
      value = { defs={} expr=v9237[8] }
      flags = { rdonly }
    address = { defs={0x08048570,0x08048573,0x08048574} expr=(add[32] (add[32] v9067[32] 12[32]) 4[32]) }
      value = { defs={} expr=v9236[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v9067[32] 12[32]) 3[32]) }
      value = { defs={} expr=v9212[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v9067[32] 12[32]) 2[32]) }
      value = { defs={} expr=v9211[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v9067[32] 12[32]) 1[32]) }
      value = { defs={} expr=v9210[8] }
      flags = { rdonly }
    address = { defs={0x08048570,0x08048573} expr=(add[32] v9067[32] 12[32]) }
      value = { defs={} expr=v9209[8] }
      flags = { rdonly }
null state
null state
0x8048577:ret    
registers:
    ax      = { v37908 }
    cx      = { v37909 }
    dx      = { v37910 }
    bx      = { v38018 }
    sp      = { v37912+0x20 }
    bp      = { v38048 }
    si      = { v38028 }
    di      = { v38038 }
    es      = { v37916 }
    cs      = { v37917 }
    ss      = { v37918 }
    ds      = { v37919 }
    fs      = { v37920 }
    gs      = { v37921 }
    cf      = { v38002 }
    ?1      = { v37923 }
    pf      = { -v37993+0x1 }
    ?3      = { v37925 }
    af      = { v38000 }
    ?5      = { v37927 }
    zf      = { v37998 }
    sf      = { v37996 }
    tf      = { v37930 }
    if      = { v37931 }
    df      = { v37932 }
    of      = { v38008 }
    iopl0   = { v37934 }
    iopl1   = { v37935 }
    nt      = { v37936 }
    ?15     = { v37937 }
    rf      = { v37938 }
    vm      = { v37939 }
    ac      = { v37940 }
    vif     = { v37941 }
    vip     = { v37942 }
    id      = { v37943 }
    ?22     = { v37944 }
    ?23     = { v37945 }
    ?24     = { v37946 }
    ?25     = { v37947 }
    ?26     = { v37948 }
    ?27     = { v37949 }
    ?28     = { v37950 }
    ?29     = { v37951 }
    ?30     = { v37952 }
    ?31     = { v37953 }
    ip      = { v38060 }
memory:
    address = { v37912+0xc }
      value = { v38018 }
      flags = { size=4; read-only }
    address = { v37912+0x10 }
      value = { v38028 }
      flags = { size=4; read-only }
    address = { v37912+0x14 }
      value = { v38038 }
      flags = { size=4; read-only }
    address = { v37912+0x18 }
      value = { v38048 }
      flags = { size=4; read-only }
    address = { v37912+0x1c }
      value = { v38060 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={} expr=v9063[32] }
    cx      = { defs={} expr=v9064[32] }
    dx      = { defs={} expr=v9065[32] }
    bx      = { defs={0x08048573} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v9209[8]) (shr0[32] 8[32] (uextend[32] 32[32] v9210[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v9211[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v9212[8]))) }
    sp      = { defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576,0x08048577} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v9067[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 4[32]) }
    bp      = { defs={0x08048576} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v9290[8]) (shr0[32] 8[32] (uextend[32] 32[32] v9291[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v9292[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v9293[8]))) }
    si      = { defs={0x08048574} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v9236[8]) (shr0[32] 8[32] (uextend[32] 32[32] v9237[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v9238[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v9239[8]))) }
    di      = { defs={0x08048575} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v9263[8]) (shr0[32] 8[32] (uextend[32] 32[32] v9264[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v9265[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v9266[8]))) }
    es      = { defs={} expr=v9071[16] }
    cs      = { defs={} expr=v9072[16] }
    ss      = { defs={} expr=v9073[16] }
    ds      = { defs={} expr=v9074[16] }
    fs      = { defs={} expr=v9075[16] }
    gs      = { defs={} expr=v9076[16] }
    cf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v9067[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v9067[32]) 12[33]))))) }
    ?1      = { defs={} expr=v9078[1] }
    pf      = { defs={0x08048570} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v9067[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v9067[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v9067[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v9067[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v9067[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v9067[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v9067[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v9067[32] 12[32]))))))) }
    ?3      = { defs={} expr=v9080[1] }
    af      = { defs={0x08048570} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v9067[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v9067[32]) 12[33]))))) }
    ?5      = { defs={} expr=v9082[1] }
    zf      = { defs={0x08048570} expr=(zerop[1] (add[32] v9067[32] 12[32])) }
    sf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (add[32] v9067[32] 12[32])) }
    tf      = { defs={} expr=v9085[1] }
    if      = { defs={} expr=v9086[1] }
    df      = { defs={} expr=v9087[1] }
    of      = { defs={0x08048570} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v9067[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v9067[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v9067[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v9067[32]) 12[33])))))) }
    iopl0   = { defs={} expr=v9089[1] }
    iopl1   = { defs={} expr=v9090[1] }
    nt      = { defs={} expr=v9091[1] }
    ?15     = { defs={} expr=v9092[1] }
    rf      = { defs={} expr=v9093[1] }
    vm      = { defs={} expr=v9094[1] }
    ac      = { defs={} expr=v9095[1] }
    vif     = { defs={} expr=v9096[1] }
    vip     = { defs={} expr=v9097[1] }
    id      = { defs={} expr=v9098[1] }
    ?22     = { defs={} expr=v9099[1] }
    ?23     = { defs={} expr=v9100[1] }
    ?24     = { defs={} expr=v9101[1] }
    ?25     = { defs={} expr=v9102[1] }
    ?26     = { defs={} expr=v9103[1] }
    ?27     = { defs={} expr=v9104[1] }
    ?28     = { defs={} expr=v9105[1] }
    ?29     = { defs={} expr=v9106[1] }
    ?30     = { defs={} expr=v9107[1] }
    ?31     = { defs={} expr=v9108[1] }
    ip      = { defs={0x08048577} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v9319[8]) (shr0[32] 8[32] (uextend[32] 32[32] v9320[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v9321[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v9322[8]))) }
memory:
init mem:
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v9067[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 3[32]) }
      value = { defs={} expr=v9322[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v9067[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 2[32]) }
      value = { defs={} expr=v9321[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v9067[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 1[32]) }
      value = { defs={} expr=v9320[8] }
      flags = { rdonly }
    address = { defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576,0x08048577} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v9067[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) }
      value = { defs={} expr=v9319[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v9067[32] 12[32]) 4[32]) 4[32]) 4[32]) 3[32]) }
      value = { defs={} expr=v9293[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v9067[32] 12[32]) 4[32]) 4[32]) 4[32]) 2[32]) }
      value = { defs={} expr=v9292[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v9067[32] 12[32]) 4[32]) 4[32]) 4[32]) 1[32]) }
      value = { defs={} expr=v9291[8] }
      flags = { rdonly }
    address = { defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576} expr=(add[32] (add[32] (add[32] (add[32] v9067[32] 12[32]) 4[32]) 4[32]) 4[32]) }
      value = { defs={} expr=v9290[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v9067[32] 12[32]) 4[32]) 4[32]) 3[32]) }
      value = { defs={} expr=v9266[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v9067[32] 12[32]) 4[32]) 4[32]) 2[32]) }
      value = { defs={} expr=v9265[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v9067[32] 12[32]) 4[32]) 4[32]) 1[32]) }
      value = { defs={} expr=v9264[8] }
      flags = { rdonly }
    address = { defs={0x08048570,0x08048573,0x08048574,0x08048575} expr=(add[32] (add[32] (add[32] v9067[32] 12[32]) 4[32]) 4[32]) }
      value = { defs={} expr=v9263[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] v9067[32] 12[32]) 4[32]) 3[32]) }
      value = { defs={} expr=v9239[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] v9067[32] 12[32]) 4[32]) 2[32]) }
      value = { defs={} expr=v9238[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] v9067[32] 12[32]) 4[32]) 1[32]) }
      value = { defs={} expr=v9237[8] }
      flags = { rdonly }
    address = { defs={0x08048570,0x08048573,0x08048574} expr=(add[32] (add[32] v9067[32] 12[32]) 4[32]) }
      value = { defs={} expr=v9236[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v9067[32] 12[32]) 3[32]) }
      value = { defs={} expr=v9212[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v9067[32] 12[32]) 2[32]) }
      value = { defs={} expr=v9211[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v9067[32] 12[32]) 1[32]) }
      value = { defs={} expr=v9210[8] }
      flags = { rdonly }
    address = { defs={0x08048570,0x08048573} expr=(add[32] v9067[32] 12[32]) }
      value = { defs={} expr=v9209[8] }
      flags = { rdonly }
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048580:push   ebp
registers:
    ax      = { v38111 }
    cx      = { v38112 }
    dx      = { v38113 }
    bx      = { v38114 }
    sp      = { v38115-0x4 }
    bp      = { v38116 }
    si      = { v38117 }
    di      = { v38118 }
    es      = { v38119 }
    cs      = { v38120 }
    ss      = { v38121 }
    ds      = { v38122 }
    fs      = { v38123 }
    gs      = { v38124 }
    cf      = { v38125 }
    ?1      = { v38126 }
    pf      = { v38127 }
    ?3      = { v38128 }
    af      = { v38129 }
    ?5      = { v38130 }
    zf      = { v38131 }
    sf      = { v38132 }
    tf      = { v38133 }
    if      = { v38134 }
    df      = { v38135 }
    of      = { v38136 }
    iopl0   = { v38137 }
    iopl1   = { v38138 }
    nt      = { v38139 }
    ?15     = { v38140 }
    rf      = { v38141 }
    vm      = { v38142 }
    ac      = { v38143 }
    vif     = { v38144 }
    vip     = { v38145 }
    id      = { v38146 }
    ?22     = { v38147 }
    ?23     = { v38148 }
    ?24     = { v38149 }
    ?25     = { v38150 }
    ?26     = { v38151 }
    ?27     = { v38152 }
    ?28     = { v38153 }
    ?29     = { v38154 }
    ?30     = { v38155 }
    ?31     = { v38156 }
    ip      = { 0x8048581 }
memory:
    address = { v38115-0x4 }
      value = { v38116 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v9380[32] }
    cx      = { defs={} expr=v9381[32] }
    dx      = { defs={} expr=v9382[32] }
    bx      = { defs={} expr=v9383[32] }
    sp      = { defs={0x08048580} expr=(add[32] v9384[32] -4[32]) }
    bp      = { defs={} expr=v9385[32] }
    si      = { defs={} expr=v9386[32] }
    di      = { defs={} expr=v9387[32] }
    es      = { defs={} expr=v9388[16] }
    cs      = { defs={} expr=v9389[16] }
    ss      = { defs={} expr=v9390[16] }
    ds      = { defs={} expr=v9391[16] }
    fs      = { defs={} expr=v9392[16] }
    gs      = { defs={} expr=v9393[16] }
    cf      = { defs={} expr=v9394[1] }
    ?1      = { defs={} expr=v9395[1] }
    pf      = { defs={} expr=v9396[1] }
    ?3      = { defs={} expr=v9397[1] }
    af      = { defs={} expr=v9398[1] }
    ?5      = { defs={} expr=v9399[1] }
    zf      = { defs={} expr=v9400[1] }
    sf      = { defs={} expr=v9401[1] }
    tf      = { defs={} expr=v9402[1] }
    if      = { defs={} expr=v9403[1] }
    df      = { defs={} expr=v9404[1] }
    of      = { defs={} expr=v9405[1] }
    iopl0   = { defs={} expr=v9406[1] }
    iopl1   = { defs={} expr=v9407[1] }
    nt      = { defs={} expr=v9408[1] }
    ?15     = { defs={} expr=v9409[1] }
    rf      = { defs={} expr=v9410[1] }
    vm      = { defs={} expr=v9411[1] }
    ac      = { defs={} expr=v9412[1] }
    vif     = { defs={} expr=v9413[1] }
    vip     = { defs={} expr=v9414[1] }
    id      = { defs={} expr=v9415[1] }
    ?22     = { defs={} expr=v9416[1] }
    ?23     = { defs={} expr=v9417[1] }
    ?24     = { defs={} expr=v9418[1] }
    ?25     = { defs={} expr=v9419[1] }
    ?26     = { defs={} expr=v9420[1] }
    ?27     = { defs={} expr=v9421[1] }
    ?28     = { defs={} expr=v9422[1] }
    ?29     = { defs={} expr=v9423[1] }
    ?30     = { defs={} expr=v9424[1] }
    ?31     = { defs={} expr=v9425[1] }
    ip      = { defs={0x08048580} expr=0x08048581[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v9384[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v9385[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v9384[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v9385[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v9384[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v9385[32]) }
      flags = { }
    address = { defs={0x08048580} expr=(add[32] v9384[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v9385[32]) }
      flags = { }
init mem:
null state
null state
0x8048581:mov    ebp, esp
registers:
    ax      = { v38111 }
    cx      = { v38112 }
    dx      = { v38113 }
    bx      = { v38114 }
    sp      = { v38115-0x4 }
    bp      = { v38115-0x4 }
    si      = { v38117 }
    di      = { v38118 }
    es      = { v38119 }
    cs      = { v38120 }
    ss      = { v38121 }
    ds      = { v38122 }
    fs      = { v38123 }
    gs      = { v38124 }
    cf      = { v38125 }
    ?1      = { v38126 }
    pf      = { v38127 }
    ?3      = { v38128 }
    af      = { v38129 }
    ?5      = { v38130 }
    zf      = { v38131 }
    sf      = { v38132 }
    tf      = { v38133 }
    if      = { v38134 }
    df      = { v38135 }
    of      = { v38136 }
    iopl0   = { v38137 }
    iopl1   = { v38138 }
    nt      = { v38139 }
    ?15     = { v38140 }
    rf      = { v38141 }
    vm      = { v38142 }
    ac      = { v38143 }
    vif     = { v38144 }
    vip     = { v38145 }
    id      = { v38146 }
    ?22     = { v38147 }
    ?23     = { v38148 }
    ?24     = { v38149 }
    ?25     = { v38150 }
    ?26     = { v38151 }
    ?27     = { v38152 }
    ?28     = { v38153 }
    ?29     = { v38154 }
    ?30     = { v38155 }
    ?31     = { v38156 }
    ip      = { 0x8048583 }
memory:
    address = { v38115-0x4 }
      value = { v38116 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v9380[32] }
    cx      = { defs={} expr=v9381[32] }
    dx      = { defs={} expr=v9382[32] }
    bx      = { defs={} expr=v9383[32] }
    sp      = { defs={0x08048580} expr=(add[32] v9384[32] -4[32]) }
    bp      = { defs={0x08048580,0x08048581} expr=(add[32] v9384[32] -4[32]) }
    si      = { defs={} expr=v9386[32] }
    di      = { defs={} expr=v9387[32] }
    es      = { defs={} expr=v9388[16] }
    cs      = { defs={} expr=v9389[16] }
    ss      = { defs={} expr=v9390[16] }
    ds      = { defs={} expr=v9391[16] }
    fs      = { defs={} expr=v9392[16] }
    gs      = { defs={} expr=v9393[16] }
    cf      = { defs={} expr=v9394[1] }
    ?1      = { defs={} expr=v9395[1] }
    pf      = { defs={} expr=v9396[1] }
    ?3      = { defs={} expr=v9397[1] }
    af      = { defs={} expr=v9398[1] }
    ?5      = { defs={} expr=v9399[1] }
    zf      = { defs={} expr=v9400[1] }
    sf      = { defs={} expr=v9401[1] }
    tf      = { defs={} expr=v9402[1] }
    if      = { defs={} expr=v9403[1] }
    df      = { defs={} expr=v9404[1] }
    of      = { defs={} expr=v9405[1] }
    iopl0   = { defs={} expr=v9406[1] }
    iopl1   = { defs={} expr=v9407[1] }
    nt      = { defs={} expr=v9408[1] }
    ?15     = { defs={} expr=v9409[1] }
    rf      = { defs={} expr=v9410[1] }
    vm      = { defs={} expr=v9411[1] }
    ac      = { defs={} expr=v9412[1] }
    vif     = { defs={} expr=v9413[1] }
    vip     = { defs={} expr=v9414[1] }
    id      = { defs={} expr=v9415[1] }
    ?22     = { defs={} expr=v9416[1] }
    ?23     = { defs={} expr=v9417[1] }
    ?24     = { defs={} expr=v9418[1] }
    ?25     = { defs={} expr=v9419[1] }
    ?26     = { defs={} expr=v9420[1] }
    ?27     = { defs={} expr=v9421[1] }
    ?28     = { defs={} expr=v9422[1] }
    ?29     = { defs={} expr=v9423[1] }
    ?30     = { defs={} expr=v9424[1] }
    ?31     = { defs={} expr=v9425[1] }
    ip      = { defs={0x08048580,0x08048581} expr=0x08048583[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v9384[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v9385[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v9384[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v9385[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v9384[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v9385[32]) }
      flags = { }
    address = { defs={0x08048580} expr=(add[32] v9384[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v9385[32]) }
      flags = { }
init mem:
null state
null state
0x8048583:push   ebx
registers:
    ax      = { v38111 }
    cx      = { v38112 }
    dx      = { v38113 }
    bx      = { v38114 }
    sp      = { v38115-0x8 }
    bp      = { v38115-0x4 }
    si      = { v38117 }
    di      = { v38118 }
    es      = { v38119 }
    cs      = { v38120 }
    ss      = { v38121 }
    ds      = { v38122 }
    fs      = { v38123 }
    gs      = { v38124 }
    cf      = { v38125 }
    ?1      = { v38126 }
    pf      = { v38127 }
    ?3      = { v38128 }
    af      = { v38129 }
    ?5      = { v38130 }
    zf      = { v38131 }
    sf      = { v38132 }
    tf      = { v38133 }
    if      = { v38134 }
    df      = { v38135 }
    of      = { v38136 }
    iopl0   = { v38137 }
    iopl1   = { v38138 }
    nt      = { v38139 }
    ?15     = { v38140 }
    rf      = { v38141 }
    vm      = { v38142 }
    ac      = { v38143 }
    vif     = { v38144 }
    vip     = { v38145 }
    id      = { v38146 }
    ?22     = { v38147 }
    ?23     = { v38148 }
    ?24     = { v38149 }
    ?25     = { v38150 }
    ?26     = { v38151 }
    ?27     = { v38152 }
    ?28     = { v38153 }
    ?29     = { v38154 }
    ?30     = { v38155 }
    ?31     = { v38156 }
    ip      = { 0x8048584 }
memory:
    address = { v38115-0x4 }
      value = { v38116 }
      flags = { size=4 }
    address = { v38115-0x8 }
      value = { v38114 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v9380[32] }
    cx      = { defs={} expr=v9381[32] }
    dx      = { defs={} expr=v9382[32] }
    bx      = { defs={} expr=v9383[32] }
    sp      = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v9384[32] -4[32]) -4[32]) }
    bp      = { defs={0x08048580,0x08048581} expr=(add[32] v9384[32] -4[32]) }
    si      = { defs={} expr=v9386[32] }
    di      = { defs={} expr=v9387[32] }
    es      = { defs={} expr=v9388[16] }
    cs      = { defs={} expr=v9389[16] }
    ss      = { defs={} expr=v9390[16] }
    ds      = { defs={} expr=v9391[16] }
    fs      = { defs={} expr=v9392[16] }
    gs      = { defs={} expr=v9393[16] }
    cf      = { defs={} expr=v9394[1] }
    ?1      = { defs={} expr=v9395[1] }
    pf      = { defs={} expr=v9396[1] }
    ?3      = { defs={} expr=v9397[1] }
    af      = { defs={} expr=v9398[1] }
    ?5      = { defs={} expr=v9399[1] }
    zf      = { defs={} expr=v9400[1] }
    sf      = { defs={} expr=v9401[1] }
    tf      = { defs={} expr=v9402[1] }
    if      = { defs={} expr=v9403[1] }
    df      = { defs={} expr=v9404[1] }
    of      = { defs={} expr=v9405[1] }
    iopl0   = { defs={} expr=v9406[1] }
    iopl1   = { defs={} expr=v9407[1] }
    nt      = { defs={} expr=v9408[1] }
    ?15     = { defs={} expr=v9409[1] }
    rf      = { defs={} expr=v9410[1] }
    vm      = { defs={} expr=v9411[1] }
    ac      = { defs={} expr=v9412[1] }
    vif     = { defs={} expr=v9413[1] }
    vip     = { defs={} expr=v9414[1] }
    id      = { defs={} expr=v9415[1] }
    ?22     = { defs={} expr=v9416[1] }
    ?23     = { defs={} expr=v9417[1] }
    ?24     = { defs={} expr=v9418[1] }
    ?25     = { defs={} expr=v9419[1] }
    ?26     = { defs={} expr=v9420[1] }
    ?27     = { defs={} expr=v9421[1] }
    ?28     = { defs={} expr=v9422[1] }
    ?29     = { defs={} expr=v9423[1] }
    ?30     = { defs={} expr=v9424[1] }
    ?31     = { defs={} expr=v9425[1] }
    ip      = { defs={0x08048580,0x08048581,0x08048583} expr=0x08048584[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] v9384[32] -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v9383[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v9384[32] -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v9383[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v9384[32] -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v9383[32]) }
      flags = { }
    address = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v9384[32] -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v9383[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v9384[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v9385[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v9384[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v9385[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v9384[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v9385[32]) }
      flags = { }
    address = { defs={0x08048580} expr=(add[32] v9384[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v9385[32]) }
      flags = { }
init mem:
null state
null state
0x8048584:sub    esp, 0x04
registers:
    ax      = { v38111 }
    cx      = { v38112 }
    dx      = { v38113 }
    bx      = { v38114 }
    sp      = { v38115-0xc }
    bp      = { v38115-0x4 }
    si      = { v38117 }
    di      = { v38118 }
    es      = { v38119 }
    cs      = { v38120 }
    ss      = { v38121 }
    ds      = { v38122 }
    fs      = { v38123 }
    gs      = { v38124 }
    cf      = { -v38231+0x1 }
    ?1      = { v38126 }
    pf      = { -v38221+0x1 }
    ?3      = { v38128 }
    af      = { -v38228+0x1 }
    ?5      = { v38130 }
    zf      = { v38226 }
    sf      = { v38224 }
    tf      = { v38133 }
    if      = { v38134 }
    df      = { v38135 }
    of      = { v38238 }
    iopl0   = { v38137 }
    iopl1   = { v38138 }
    nt      = { v38139 }
    ?15     = { v38140 }
    rf      = { v38141 }
    vm      = { v38142 }
    ac      = { v38143 }
    vif     = { v38144 }
    vip     = { v38145 }
    id      = { v38146 }
    ?22     = { v38147 }
    ?23     = { v38148 }
    ?24     = { v38149 }
    ?25     = { v38150 }
    ?26     = { v38151 }
    ?27     = { v38152 }
    ?28     = { v38153 }
    ?29     = { v38154 }
    ?30     = { v38155 }
    ?31     = { v38156 }
    ip      = { 0x8048587 }
memory:
    address = { v38115-0x4 }
      value = { v38116 }
      flags = { size=4 }
    address = { v38115-0x8 }
      value = { v38114 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v9380[32] }
    cx      = { defs={} expr=v9381[32] }
    dx      = { defs={} expr=v9382[32] }
    bx      = { defs={} expr=v9383[32] }
    sp      = { defs={0x08048580,0x08048583,0x08048584} expr=(add[32] (add[32] (add[32] v9384[32] -4[32]) -4[32]) -4[32]) }
    bp      = { defs={0x08048580,0x08048581} expr=(add[32] v9384[32] -4[32]) }
    si      = { defs={} expr=v9386[32] }
    di      = { defs={} expr=v9387[32] }
    es      = { defs={} expr=v9388[16] }
    cs      = { defs={} expr=v9389[16] }
    ss      = { defs={} expr=v9390[16] }
    ds      = { defs={} expr=v9391[16] }
    fs      = { defs={} expr=v9392[16] }
    gs      = { defs={} expr=v9393[16] }
    cf      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v9384[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v9384[32] -4[32]) -4[32])) 4294967292[33])))))) }
    ?1      = { defs={} expr=v9395[1] }
    pf      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v9384[32] -4[32]) -4[32]) -4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v9384[32] -4[32]) -4[32]) -4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v9384[32] -4[32]) -4[32]) -4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v9384[32] -4[32]) -4[32]) -4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v9384[32] -4[32]) -4[32]) -4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v9384[32] -4[32]) -4[32]) -4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v9384[32] -4[32]) -4[32]) -4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v9384[32] -4[32]) -4[32]) -4[32]))))))) }
    ?3      = { defs={} expr=v9397[1] }
    af      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v9384[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v9384[32] -4[32]) -4[32])) 4294967292[33])))))) }
    ?5      = { defs={} expr=v9399[1] }
    zf      = { defs={0x08048580,0x08048583,0x08048584} expr=(zerop[1] (add[32] (add[32] (add[32] v9384[32] -4[32]) -4[32]) -4[32])) }
    sf      = { defs={0x08048580,0x08048583,0x08048584} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] v9384[32] -4[32]) -4[32]) -4[32])) }
    tf      = { defs={} expr=v9402[1] }
    if      = { defs={} expr=v9403[1] }
    df      = { defs={} expr=v9404[1] }
    of      = { defs={0x08048580,0x08048583,0x08048584} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v9384[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v9384[32] -4[32]) -4[32])) 4294967292[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v9384[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v9384[32] -4[32]) -4[32])) 4294967292[33])))))) }
    iopl0   = { defs={} expr=v9406[1] }
    iopl1   = { defs={} expr=v9407[1] }
    nt      = { defs={} expr=v9408[1] }
    ?15     = { defs={} expr=v9409[1] }
    rf      = { defs={} expr=v9410[1] }
    vm      = { defs={} expr=v9411[1] }
    ac      = { defs={} expr=v9412[1] }
    vif     = { defs={} expr=v9413[1] }
    vip     = { defs={} expr=v9414[1] }
    id      = { defs={} expr=v9415[1] }
    ?22     = { defs={} expr=v9416[1] }
    ?23     = { defs={} expr=v9417[1] }
    ?24     = { defs={} expr=v9418[1] }
    ?25     = { defs={} expr=v9419[1] }
    ?26     = { defs={} expr=v9420[1] }
    ?27     = { defs={} expr=v9421[1] }
    ?28     = { defs={} expr=v9422[1] }
    ?29     = { defs={} expr=v9423[1] }
    ?30     = { defs={} expr=v9424[1] }
    ?31     = { defs={} expr=v9425[1] }
    ip      = { defs={0x08048580,0x08048581,0x08048583,0x08048584} expr=0x08048587[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] v9384[32] -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v9383[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v9384[32] -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v9383[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v9384[32] -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v9383[32]) }
      flags = { }
    address = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v9384[32] -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v9383[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v9384[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v9385[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v9384[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v9385[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v9384[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v9385[32]) }
      flags = { }
    address = { defs={0x08048580} expr=(add[32] v9384[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v9385[32]) }
      flags = { }
init mem:
null state
null state
0x8048587:mov    ebx, 0x080495e8<.ctors>
registers:
    ax      = { v38111 }
    cx      = { v38112 }
    dx      = { v38113 }
    bx      = { 0x80495e8 }
    sp      = { v38115-0xc }
    bp      = { v38115-0x4 }
    si      = { v38117 }
    di      = { v38118 }
    es      = { v38119 }
    cs      = { v38120 }
    ss      = { v38121 }
    ds      = { v38122 }
    fs      = { v38123 }
    gs      = { v38124 }
    cf      = { -v38231+0x1 }
    ?1      = { v38126 }
    pf      = { -v38221+0x1 }
    ?3      = { v38128 }
    af      = { -v38228+0x1 }
    ?5      = { v38130 }
    zf      = { v38226 }
    sf      = { v38224 }
    tf      = { v38133 }
    if      = { v38134 }
    df      = { v38135 }
    of      = { v38238 }
    iopl0   = { v38137 }
    iopl1   = { v38138 }
    nt      = { v38139 }
    ?15     = { v38140 }
    rf      = { v38141 }
    vm      = { v38142 }
    ac      = { v38143 }
    vif     = { v38144 }
    vip     = { v38145 }
    id      = { v38146 }
    ?22     = { v38147 }
    ?23     = { v38148 }
    ?24     = { v38149 }
    ?25     = { v38150 }
    ?26     = { v38151 }
    ?27     = { v38152 }
    ?28     = { v38153 }
    ?29     = { v38154 }
    ?30     = { v38155 }
    ?31     = { v38156 }
    ip      = { 0x804858c }
memory:
    address = { v38115-0x4 }
      value = { v38116 }
      flags = { size=4 }
    address = { v38115-0x8 }
      value = { v38114 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v9380[32] }
    cx      = { defs={} expr=v9381[32] }
    dx      = { defs={} expr=v9382[32] }
    bx      = { defs={0x08048587} expr=0x080495e8[32] }
    sp      = { defs={0x08048580,0x08048583,0x08048584} expr=(add[32] (add[32] (add[32] v9384[32] -4[32]) -4[32]) -4[32]) }
    bp      = { defs={0x08048580,0x08048581} expr=(add[32] v9384[32] -4[32]) }
    si      = { defs={} expr=v9386[32] }
    di      = { defs={} expr=v9387[32] }
    es      = { defs={} expr=v9388[16] }
    cs      = { defs={} expr=v9389[16] }
    ss      = { defs={} expr=v9390[16] }
    ds      = { defs={} expr=v9391[16] }
    fs      = { defs={} expr=v9392[16] }
    gs      = { defs={} expr=v9393[16] }
    cf      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v9384[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v9384[32] -4[32]) -4[32])) 4294967292[33])))))) }
    ?1      = { defs={} expr=v9395[1] }
    pf      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v9384[32] -4[32]) -4[32]) -4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v9384[32] -4[32]) -4[32]) -4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v9384[32] -4[32]) -4[32]) -4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v9384[32] -4[32]) -4[32]) -4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v9384[32] -4[32]) -4[32]) -4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v9384[32] -4[32]) -4[32]) -4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v9384[32] -4[32]) -4[32]) -4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v9384[32] -4[32]) -4[32]) -4[32]))))))) }
    ?3      = { defs={} expr=v9397[1] }
    af      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v9384[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v9384[32] -4[32]) -4[32])) 4294967292[33])))))) }
    ?5      = { defs={} expr=v9399[1] }
    zf      = { defs={0x08048580,0x08048583,0x08048584} expr=(zerop[1] (add[32] (add[32] (add[32] v9384[32] -4[32]) -4[32]) -4[32])) }
    sf      = { defs={0x08048580,0x08048583,0x08048584} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] v9384[32] -4[32]) -4[32]) -4[32])) }
    tf      = { defs={} expr=v9402[1] }
    if      = { defs={} expr=v9403[1] }
    df      = { defs={} expr=v9404[1] }
    of      = { defs={0x08048580,0x08048583,0x08048584} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v9384[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v9384[32] -4[32]) -4[32])) 4294967292[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v9384[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v9384[32] -4[32]) -4[32])) 4294967292[33])))))) }
    iopl0   = { defs={} expr=v9406[1] }
    iopl1   = { defs={} expr=v9407[1] }
    nt      = { defs={} expr=v9408[1] }
    ?15     = { defs={} expr=v9409[1] }
    rf      = { defs={} expr=v9410[1] }
    vm      = { defs={} expr=v9411[1] }
    ac      = { defs={} expr=v9412[1] }
    vif     = { defs={} expr=v9413[1] }
    vip     = { defs={} expr=v9414[1] }
    id      = { defs={} expr=v9415[1] }
    ?22     = { defs={} expr=v9416[1] }
    ?23     = { defs={} expr=v9417[1] }
    ?24     = { defs={} expr=v9418[1] }
    ?25     = { defs={} expr=v9419[1] }
    ?26     = { defs={} expr=v9420[1] }
    ?27     = { defs={} expr=v9421[1] }
    ?28     = { defs={} expr=v9422[1] }
    ?29     = { defs={} expr=v9423[1] }
    ?30     = { defs={} expr=v9424[1] }
    ?31     = { defs={} expr=v9425[1] }
    ip      = { defs={0x08048580,0x08048581,0x08048583,0x08048584,0x08048587} expr=0x0804858c[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] v9384[32] -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v9383[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v9384[32] -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v9383[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v9384[32] -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v9383[32]) }
      flags = { }
    address = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v9384[32] -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v9383[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v9384[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v9385[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v9384[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v9385[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v9384[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v9385[32]) }
      flags = { }
    address = { defs={0x08048580} expr=(add[32] v9384[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v9385[32]) }
      flags = { }
init mem:
null state
null state
0x804858c:mov    eax, DWORD PTR ds:[0x080495e8<.ctors>]
registers:
    ax      = { v38251 }
    cx      = { v38112 }
    dx      = { v38113 }
    bx      = { 0x80495e8 }
    sp      = { v38115-0xc }
    bp      = { v38115-0x4 }
    si      = { v38117 }
    di      = { v38118 }
    es      = { v38119 }
    cs      = { v38120 }
    ss      = { v38121 }
    ds      = { v38122 }
    fs      = { v38123 }
    gs      = { v38124 }
    cf      = { -v38231+0x1 }
    ?1      = { v38126 }
    pf      = { -v38221+0x1 }
    ?3      = { v38128 }
    af      = { -v38228+0x1 }
    ?5      = { v38130 }
    zf      = { v38226 }
    sf      = { v38224 }
    tf      = { v38133 }
    if      = { v38134 }
    df      = { v38135 }
    of      = { v38238 }
    iopl0   = { v38137 }
    iopl1   = { v38138 }
    nt      = { v38139 }
    ?15     = { v38140 }
    rf      = { v38141 }
    vm      = { v38142 }
    ac      = { v38143 }
    vif     = { v38144 }
    vip     = { v38145 }
    id      = { v38146 }
    ?22     = { v38147 }
    ?23     = { v38148 }
    ?24     = { v38149 }
    ?25     = { v38150 }
    ?26     = { v38151 }
    ?27     = { v38152 }
    ?28     = { v38153 }
    ?29     = { v38154 }
    ?30     = { v38155 }
    ?31     = { v38156 }
    ip      = { 0x8048591 }
memory:
    address = { v38115-0x4 }
      value = { v38116 }
      flags = { size=4 }
    address = { v38115-0x8 }
      value = { v38114 }
      flags = { size=4 }
    address = { 0x80495e8 }
      value = { v38251 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x0804858c} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v9584[8]) (shr0[32] 8[32] (uextend[32] 32[32] v9585[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v9586[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v9587[8]))) }
    cx      = { defs={} expr=v9381[32] }
    dx      = { defs={} expr=v9382[32] }
    bx      = { defs={0x08048587} expr=0x080495e8[32] }
    sp      = { defs={0x08048580,0x08048583,0x08048584} expr=(add[32] (add[32] (add[32] v9384[32] -4[32]) -4[32]) -4[32]) }
    bp      = { defs={0x08048580,0x08048581} expr=(add[32] v9384[32] -4[32]) }
    si      = { defs={} expr=v9386[32] }
    di      = { defs={} expr=v9387[32] }
    es      = { defs={} expr=v9388[16] }
    cs      = { defs={} expr=v9389[16] }
    ss      = { defs={} expr=v9390[16] }
    ds      = { defs={} expr=v9391[16] }
    fs      = { defs={} expr=v9392[16] }
    gs      = { defs={} expr=v9393[16] }
    cf      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v9384[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v9384[32] -4[32]) -4[32])) 4294967292[33])))))) }
    ?1      = { defs={} expr=v9395[1] }
    pf      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v9384[32] -4[32]) -4[32]) -4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v9384[32] -4[32]) -4[32]) -4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v9384[32] -4[32]) -4[32]) -4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v9384[32] -4[32]) -4[32]) -4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v9384[32] -4[32]) -4[32]) -4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v9384[32] -4[32]) -4[32]) -4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v9384[32] -4[32]) -4[32]) -4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v9384[32] -4[32]) -4[32]) -4[32]))))))) }
    ?3      = { defs={} expr=v9397[1] }
    af      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v9384[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v9384[32] -4[32]) -4[32])) 4294967292[33])))))) }
    ?5      = { defs={} expr=v9399[1] }
    zf      = { defs={0x08048580,0x08048583,0x08048584} expr=(zerop[1] (add[32] (add[32] (add[32] v9384[32] -4[32]) -4[32]) -4[32])) }
    sf      = { defs={0x08048580,0x08048583,0x08048584} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] v9384[32] -4[32]) -4[32]) -4[32])) }
    tf      = { defs={} expr=v9402[1] }
    if      = { defs={} expr=v9403[1] }
    df      = { defs={} expr=v9404[1] }
    of      = { defs={0x08048580,0x08048583,0x08048584} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v9384[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v9384[32] -4[32]) -4[32])) 4294967292[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v9384[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v9384[32] -4[32]) -4[32])) 4294967292[33])))))) }
    iopl0   = { defs={} expr=v9406[1] }
    iopl1   = { defs={} expr=v9407[1] }
    nt      = { defs={} expr=v9408[1] }
    ?15     = { defs={} expr=v9409[1] }
    rf      = { defs={} expr=v9410[1] }
    vm      = { defs={} expr=v9411[1] }
    ac      = { defs={} expr=v9412[1] }
    vif     = { defs={} expr=v9413[1] }
    vip     = { defs={} expr=v9414[1] }
    id      = { defs={} expr=v9415[1] }
    ?22     = { defs={} expr=v9416[1] }
    ?23     = { defs={} expr=v9417[1] }
    ?24     = { defs={} expr=v9418[1] }
    ?25     = { defs={} expr=v9419[1] }
    ?26     = { defs={} expr=v9420[1] }
    ?27     = { defs={} expr=v9421[1] }
    ?28     = { defs={} expr=v9422[1] }
    ?29     = { defs={} expr=v9423[1] }
    ?30     = { defs={} expr=v9424[1] }
    ?31     = { defs={} expr=v9425[1] }
    ip      = { defs={0x08048580,0x08048581,0x08048583,0x08048584,0x08048587,0x0804858c} expr=0x08048591[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] v9384[32] -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v9383[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v9384[32] -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v9383[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v9384[32] -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v9383[32]) }
      flags = { }
    address = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v9384[32] -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v9383[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v9384[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v9385[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v9384[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v9385[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v9384[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v9385[32]) }
      flags = { }
    address = { defs={0x08048580} expr=(add[32] v9384[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v9385[32]) }
      flags = { }
init mem:
    address = { defs={} expr=0x080495eb[32] }
      value = { defs={} expr=v9587[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080495ea[32] }
      value = { defs={} expr=v9586[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080495e9[32] }
      value = { defs={} expr=v9585[8] }
      flags = { rdonly }
    address = { defs={0x0804858c} expr=0x080495e8[32] }
      value = { defs={} expr=v9584[8] }
      flags = { rdonly }
null state
null state
0x8048591:cmp    eax, 0xff<-0x01>
registers:
    ax      = { v38251 }
    cx      = { v38112 }
    dx      = { v38113 }
    bx      = { 0x80495e8 }
    sp      = { v38115-0xc }
    bp      = { v38115-0x4 }
    si      = { v38117 }
    di      = { v38118 }
    es      = { v38119 }
    cs      = { v38120 }
    ss      = { v38121 }
    ds      = { v38122 }
    fs      = { v38123 }
    gs      = { v38124 }
    cf      = { -v38303+0x1 }
    ?1      = { v38126 }
    pf      = { -v38293+0x1 }
    ?3      = { v38128 }
    af      = { -v38300+0x1 }
    ?5      = { v38130 }
    zf      = { v38298 }
    sf      = { v38296 }
    tf      = { v38133 }
    if      = { v38134 }
    df      = { v38135 }
    of      = { v38310 }
    iopl0   = { v38137 }
    iopl1   = { v38138 }
    nt      = { v38139 }
    ?15     = { v38140 }
    rf      = { v38141 }
    vm      = { v38142 }
    ac      = { v38143 }
    vif     = { v38144 }
    vip     = { v38145 }
    id      = { v38146 }
    ?22     = { v38147 }
    ?23     = { v38148 }
    ?24     = { v38149 }
    ?25     = { v38150 }
    ?26     = { v38151 }
    ?27     = { v38152 }
    ?28     = { v38153 }
    ?29     = { v38154 }
    ?30     = { v38155 }
    ?31     = { v38156 }
    ip      = { 0x8048594 }
memory:
    address = { v38115-0x4 }
      value = { v38116 }
      flags = { size=4 }
    address = { v38115-0x8 }
      value = { v38114 }
      flags = { size=4 }
    address = { 0x80495e8 }
      value = { v38251 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x0804858c} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v9584[8]) (shr0[32] 8[32] (uextend[32] 32[32] v9585[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v9586[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v9587[8]))) }
    cx      = { defs={} expr=v9381[32] }
    dx      = { defs={} expr=v9382[32] }
    bx      = { defs={0x08048587} expr=0x080495e8[32] }
    sp      = { defs={0x08048580,0x08048583,0x08048584} expr=(add[32] (add[32] (add[32] v9384[32] -4[32]) -4[32]) -4[32]) }
    bp      = { defs={0x08048580,0x08048581} expr=(add[32] v9384[32] -4[32]) }
    si      = { defs={} expr=v9386[32] }
    di      = { defs={} expr=v9387[32] }
    es      = { defs={} expr=v9388[16] }
    cs      = { defs={} expr=v9389[16] }
    ss      = { defs={} expr=v9390[16] }
    ds      = { defs={} expr=v9391[16] }
    fs      = { defs={} expr=v9392[16] }
    gs      = { defs={} expr=v9393[16] }
    cf      = { defs={0x0804858c,0x08048591} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v9584[8]) (shr0[32] 8[32] (uextend[32] 32[32] v9585[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v9586[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v9587[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v9584[8]) (shr0[32] 8[32] (uextend[32] 32[32] v9585[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v9586[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v9587[8])))) 1[33])))))) }
    ?1      = { defs={} expr=v9395[1] }
    pf      = { defs={0x0804858c,0x08048591} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v9584[8]) (shr0[32] 8[32] (uextend[32] 32[32] v9585[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v9586[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v9587[8]))) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v9584[8]) (shr0[32] 8[32] (uextend[32] 32[32] v9585[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v9586[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v9587[8]))) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v9584[8]) (shr0[32] 8[32] (uextend[32] 32[32] v9585[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v9586[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v9587[8]))) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v9584[8]) (shr0[32] 8[32] (uextend[32] 32[32] v9585[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v9586[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v9587[8]))) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v9584[8]) (shr0[32] 8[32] (uextend[32] 32[32] v9585[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v9586[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v9587[8]))) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v9584[8]) (shr0[32] 8[32] (uextend[32] 32[32] v9585[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v9586[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v9587[8]))) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v9584[8]) (shr0[32] 8[32] (uextend[32] 32[32] v9585[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v9586[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v9587[8]))) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v9584[8]) (shr0[32] 8[32] (uextend[32] 32[32] v9585[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v9586[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v9587[8]))) 1[32]))))))) }
    ?3      = { defs={} expr=v9397[1] }
    af      = { defs={0x0804858c,0x08048591} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v9584[8]) (shr0[32] 8[32] (uextend[32] 32[32] v9585[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v9586[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v9587[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v9584[8]) (shr0[32] 8[32] (uextend[32] 32[32] v9585[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v9586[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v9587[8])))) 1[33])))))) }
    ?5      = { defs={} expr=v9399[1] }
    zf      = { defs={0x0804858c,0x08048591} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v9584[8]) (shr0[32] 8[32] (uextend[32] 32[32] v9585[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v9586[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v9587[8]))) 1[32])) }
    sf      = { defs={0x0804858c,0x08048591} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v9584[8]) (shr0[32] 8[32] (uextend[32] 32[32] v9585[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v9586[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v9587[8]))) 1[32])) }
    tf      = { defs={} expr=v9402[1] }
    if      = { defs={} expr=v9403[1] }
    df      = { defs={} expr=v9404[1] }
    of      = { defs={0x0804858c,0x08048591} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v9584[8]) (shr0[32] 8[32] (uextend[32] 32[32] v9585[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v9586[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v9587[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v9584[8]) (shr0[32] 8[32] (uextend[32] 32[32] v9585[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v9586[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v9587[8])))) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v9584[8]) (shr0[32] 8[32] (uextend[32] 32[32] v9585[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v9586[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v9587[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v9584[8]) (shr0[32] 8[32] (uextend[32] 32[32] v9585[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v9586[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v9587[8])))) 1[33])))))) }
    iopl0   = { defs={} expr=v9406[1] }
    iopl1   = { defs={} expr=v9407[1] }
    nt      = { defs={} expr=v9408[1] }
    ?15     = { defs={} expr=v9409[1] }
    rf      = { defs={} expr=v9410[1] }
    vm      = { defs={} expr=v9411[1] }
    ac      = { defs={} expr=v9412[1] }
    vif     = { defs={} expr=v9413[1] }
    vip     = { defs={} expr=v9414[1] }
    id      = { defs={} expr=v9415[1] }
    ?22     = { defs={} expr=v9416[1] }
    ?23     = { defs={} expr=v9417[1] }
    ?24     = { defs={} expr=v9418[1] }
    ?25     = { defs={} expr=v9419[1] }
    ?26     = { defs={} expr=v9420[1] }
    ?27     = { defs={} expr=v9421[1] }
    ?28     = { defs={} expr=v9422[1] }
    ?29     = { defs={} expr=v9423[1] }
    ?30     = { defs={} expr=v9424[1] }
    ?31     = { defs={} expr=v9425[1] }
    ip      = { defs={0x08048580,0x08048581,0x08048583,0x08048584,0x08048587,0x0804858c,0x08048591} expr=0x08048594[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] v9384[32] -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v9383[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v9384[32] -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v9383[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v9384[32] -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v9383[32]) }
      flags = { }
    address = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v9384[32] -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v9383[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v9384[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v9385[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v9384[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v9385[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v9384[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v9385[32]) }
      flags = { }
    address = { defs={0x08048580} expr=(add[32] v9384[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v9385[32]) }
      flags = { }
init mem:
    address = { defs={} expr=0x080495eb[32] }
      value = { defs={} expr=v9587[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080495ea[32] }
      value = { defs={} expr=v9586[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080495e9[32] }
      value = { defs={} expr=v9585[8] }
      flags = { rdonly }
    address = { defs={0x0804858c} expr=0x080495e8[32] }
      value = { defs={} expr=v9584[8] }
      flags = { rdonly }
null state
null state
0x8048594:je     0x080485ac<<Insn>>
registers:
    ax      = { v38251 }
    cx      = { v38112 }
    dx      = { v38113 }
    bx      = { 0x80495e8 }
    sp      = { v38115-0xc }
    bp      = { v38115-0x4 }
    si      = { v38117 }
    di      = { v38118 }
    es      = { v38119 }
    cs      = { v38120 }
    ss      = { v38121 }
    ds      = { v38122 }
    fs      = { v38123 }
    gs      = { v38124 }
    cf      = { -v38303+0x1 }
    ?1      = { v38126 }
    pf      = { -v38293+0x1 }
    ?3      = { v38128 }
    af      = { -v38300+0x1 }
    ?5      = { v38130 }
    zf      = { v38298 }
    sf      = { v38296 }
    tf      = { v38133 }
    if      = { v38134 }
    df      = { v38135 }
    of      = { v38310 }
    iopl0   = { v38137 }
    iopl1   = { v38138 }
    nt      = { v38139 }
    ?15     = { v38140 }
    rf      = { v38141 }
    vm      = { v38142 }
    ac      = { v38143 }
    vif     = { v38144 }
    vip     = { v38145 }
    id      = { v38146 }
    ?22     = { v38147 }
    ?23     = { v38148 }
    ?24     = { v38149 }
    ?25     = { v38150 }
    ?26     = { v38151 }
    ?27     = { v38152 }
    ?28     = { v38153 }
    ?29     = { v38154 }
    ?30     = { v38155 }
    ?31     = { v38156 }
    ip      = { v38319 }
memory:
    address = { v38115-0x4 }
      value = { v38116 }
      flags = { size=4 }
    address = { v38115-0x8 }
      value = { v38114 }
      flags = { size=4 }
    address = { 0x80495e8 }
      value = { v38251 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x0804858c} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v9584[8]) (shr0[32] 8[32] (uextend[32] 32[32] v9585[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v9586[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v9587[8]))) }
    cx      = { defs={} expr=v9381[32] }
    dx      = { defs={} expr=v9382[32] }
    bx      = { defs={0x08048587} expr=0x080495e8[32] }
    sp      = { defs={0x08048580,0x08048583,0x08048584} expr=(add[32] (add[32] (add[32] v9384[32] -4[32]) -4[32]) -4[32]) }
    bp      = { defs={0x08048580,0x08048581} expr=(add[32] v9384[32] -4[32]) }
    si      = { defs={} expr=v9386[32] }
    di      = { defs={} expr=v9387[32] }
    es      = { defs={} expr=v9388[16] }
    cs      = { defs={} expr=v9389[16] }
    ss      = { defs={} expr=v9390[16] }
    ds      = { defs={} expr=v9391[16] }
    fs      = { defs={} expr=v9392[16] }
    gs      = { defs={} expr=v9393[16] }
    cf      = { defs={0x0804858c,0x08048591} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v9584[8]) (shr0[32] 8[32] (uextend[32] 32[32] v9585[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v9586[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v9587[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v9584[8]) (shr0[32] 8[32] (uextend[32] 32[32] v9585[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v9586[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v9587[8])))) 1[33])))))) }
    ?1      = { defs={} expr=v9395[1] }
    pf      = { defs={0x0804858c,0x08048591} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v9584[8]) (shr0[32] 8[32] (uextend[32] 32[32] v9585[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v9586[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v9587[8]))) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v9584[8]) (shr0[32] 8[32] (uextend[32] 32[32] v9585[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v9586[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v9587[8]))) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v9584[8]) (shr0[32] 8[32] (uextend[32] 32[32] v9585[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v9586[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v9587[8]))) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v9584[8]) (shr0[32] 8[32] (uextend[32] 32[32] v9585[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v9586[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v9587[8]))) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v9584[8]) (shr0[32] 8[32] (uextend[32] 32[32] v9585[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v9586[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v9587[8]))) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v9584[8]) (shr0[32] 8[32] (uextend[32] 32[32] v9585[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v9586[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v9587[8]))) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v9584[8]) (shr0[32] 8[32] (uextend[32] 32[32] v9585[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v9586[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v9587[8]))) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v9584[8]) (shr0[32] 8[32] (uextend[32] 32[32] v9585[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v9586[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v9587[8]))) 1[32]))))))) }
    ?3      = { defs={} expr=v9397[1] }
    af      = { defs={0x0804858c,0x08048591} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v9584[8]) (shr0[32] 8[32] (uextend[32] 32[32] v9585[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v9586[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v9587[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v9584[8]) (shr0[32] 8[32] (uextend[32] 32[32] v9585[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v9586[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v9587[8])))) 1[33])))))) }
    ?5      = { defs={} expr=v9399[1] }
    zf      = { defs={0x0804858c,0x08048591} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v9584[8]) (shr0[32] 8[32] (uextend[32] 32[32] v9585[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v9586[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v9587[8]))) 1[32])) }
    sf      = { defs={0x0804858c,0x08048591} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v9584[8]) (shr0[32] 8[32] (uextend[32] 32[32] v9585[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v9586[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v9587[8]))) 1[32])) }
    tf      = { defs={} expr=v9402[1] }
    if      = { defs={} expr=v9403[1] }
    df      = { defs={} expr=v9404[1] }
    of      = { defs={0x0804858c,0x08048591} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v9584[8]) (shr0[32] 8[32] (uextend[32] 32[32] v9585[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v9586[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v9587[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v9584[8]) (shr0[32] 8[32] (uextend[32] 32[32] v9585[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v9586[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v9587[8])))) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v9584[8]) (shr0[32] 8[32] (uextend[32] 32[32] v9585[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v9586[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v9587[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v9584[8]) (shr0[32] 8[32] (uextend[32] 32[32] v9585[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v9586[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v9587[8])))) 1[33])))))) }
    iopl0   = { defs={} expr=v9406[1] }
    iopl1   = { defs={} expr=v9407[1] }
    nt      = { defs={} expr=v9408[1] }
    ?15     = { defs={} expr=v9409[1] }
    rf      = { defs={} expr=v9410[1] }
    vm      = { defs={} expr=v9411[1] }
    ac      = { defs={} expr=v9412[1] }
    vif     = { defs={} expr=v9413[1] }
    vip     = { defs={} expr=v9414[1] }
    id      = { defs={} expr=v9415[1] }
    ?22     = { defs={} expr=v9416[1] }
    ?23     = { defs={} expr=v9417[1] }
    ?24     = { defs={} expr=v9418[1] }
    ?25     = { defs={} expr=v9419[1] }
    ?26     = { defs={} expr=v9420[1] }
    ?27     = { defs={} expr=v9421[1] }
    ?28     = { defs={} expr=v9422[1] }
    ?29     = { defs={} expr=v9423[1] }
    ?30     = { defs={} expr=v9424[1] }
    ?31     = { defs={} expr=v9425[1] }
    ip      = { defs={0x08048580,0x08048581,0x08048583,0x08048584,0x08048587,0x0804858c,0x08048591,0x08048594} expr=(ite[32] (zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v9584[8]) (shr0[32] 8[32] (uextend[32] 32[32] v9585[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v9586[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v9587[8]))) 1[32])) 0x080485ac[32] 0x08048596[32]) }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] v9384[32] -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v9383[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v9384[32] -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v9383[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v9384[32] -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v9383[32]) }
      flags = { }
    address = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v9384[32] -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v9383[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v9384[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v9385[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v9384[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v9385[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v9384[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v9385[32]) }
      flags = { }
    address = { defs={0x08048580} expr=(add[32] v9384[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v9385[32]) }
      flags = { }
init mem:
    address = { defs={} expr=0x080495eb[32] }
      value = { defs={} expr=v9587[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080495ea[32] }
      value = { defs={} expr=v9586[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080495e9[32] }
      value = { defs={} expr=v9585[8] }
      flags = { rdonly }
    address = { defs={0x0804858c} expr=0x080495e8[32] }
      value = { defs={} expr=v9584[8] }
      flags = { rdonly }
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048596:lea    esi, [esi + 0x00]
registers:
    ax      = { v38369 }
    cx      = { v38370 }
    dx      = { v38371 }
    bx      = { v38372 }
    sp      = { v38373 }
    bp      = { v38374 }
    si      = { v38375 }
    di      = { v38376 }
    es      = { v38377 }
    cs      = { v38378 }
    ss      = { v38379 }
    ds      = { v38380 }
    fs      = { v38381 }
    gs      = { v38382 }
    cf      = { v38383 }
    ?1      = { v38384 }
    pf      = { v38385 }
    ?3      = { v38386 }
    af      = { v38387 }
    ?5      = { v38388 }
    zf      = { v38389 }
    sf      = { v38390 }
    tf      = { v38391 }
    if      = { v38392 }
    df      = { v38393 }
    of      = { v38394 }
    iopl0   = { v38395 }
    iopl1   = { v38396 }
    nt      = { v38397 }
    ?15     = { v38398 }
    rf      = { v38399 }
    vm      = { v38400 }
    ac      = { v38401 }
    vif     = { v38402 }
    vip     = { v38403 }
    id      = { v38404 }
    ?22     = { v38405 }
    ?23     = { v38406 }
    ?24     = { v38407 }
    ?25     = { v38408 }
    ?26     = { v38409 }
    ?27     = { v38410 }
    ?28     = { v38411 }
    ?29     = { v38412 }
    ?30     = { v38413 }
    ?31     = { v38414 }
    ip      = { 0x8048599 }
memory:
registers:
    ax      = { defs={} expr=v9748[32] }
    cx      = { defs={} expr=v9749[32] }
    dx      = { defs={} expr=v9750[32] }
    bx      = { defs={} expr=v9751[32] }
    sp      = { defs={} expr=v9752[32] }
    bp      = { defs={} expr=v9753[32] }
    si      = { defs={0x08048596} expr=v9754[32] }
    di      = { defs={} expr=v9755[32] }
    es      = { defs={} expr=v9756[16] }
    cs      = { defs={} expr=v9757[16] }
    ss      = { defs={} expr=v9758[16] }
    ds      = { defs={} expr=v9759[16] }
    fs      = { defs={} expr=v9760[16] }
    gs      = { defs={} expr=v9761[16] }
    cf      = { defs={} expr=v9762[1] }
    ?1      = { defs={} expr=v9763[1] }
    pf      = { defs={} expr=v9764[1] }
    ?3      = { defs={} expr=v9765[1] }
    af      = { defs={} expr=v9766[1] }
    ?5      = { defs={} expr=v9767[1] }
    zf      = { defs={} expr=v9768[1] }
    sf      = { defs={} expr=v9769[1] }
    tf      = { defs={} expr=v9770[1] }
    if      = { defs={} expr=v9771[1] }
    df      = { defs={} expr=v9772[1] }
    of      = { defs={} expr=v9773[1] }
    iopl0   = { defs={} expr=v9774[1] }
    iopl1   = { defs={} expr=v9775[1] }
    nt      = { defs={} expr=v9776[1] }
    ?15     = { defs={} expr=v9777[1] }
    rf      = { defs={} expr=v9778[1] }
    vm      = { defs={} expr=v9779[1] }
    ac      = { defs={} expr=v9780[1] }
    vif     = { defs={} expr=v9781[1] }
    vip     = { defs={} expr=v9782[1] }
    id      = { defs={} expr=v9783[1] }
    ?22     = { defs={} expr=v9784[1] }
    ?23     = { defs={} expr=v9785[1] }
    ?24     = { defs={} expr=v9786[1] }
    ?25     = { defs={} expr=v9787[1] }
    ?26     = { defs={} expr=v9788[1] }
    ?27     = { defs={} expr=v9789[1] }
    ?28     = { defs={} expr=v9790[1] }
    ?29     = { defs={} expr=v9791[1] }
    ?30     = { defs={} expr=v9792[1] }
    ?31     = { defs={} expr=v9793[1] }
    ip      = { defs={0x08048596} expr=0x08048599[32] }
memory:
init mem:
null state
null state
0x8048599:lea    edi, [edi + 0x00000000]
registers:
    ax      = { v38369 }
    cx      = { v38370 }
    dx      = { v38371 }
    bx      = { v38372 }
    sp      = { v38373 }
    bp      = { v38374 }
    si      = { v38375 }
    di      = { v38376 }
    es      = { v38377 }
    cs      = { v38378 }
    ss      = { v38379 }
    ds      = { v38380 }
    fs      = { v38381 }
    gs      = { v38382 }
    cf      = { v38383 }
    ?1      = { v38384 }
    pf      = { v38385 }
    ?3      = { v38386 }
    af      = { v38387 }
    ?5      = { v38388 }
    zf      = { v38389 }
    sf      = { v38390 }
    tf      = { v38391 }
    if      = { v38392 }
    df      = { v38393 }
    of      = { v38394 }
    iopl0   = { v38395 }
    iopl1   = { v38396 }
    nt      = { v38397 }
    ?15     = { v38398 }
    rf      = { v38399 }
    vm      = { v38400 }
    ac      = { v38401 }
    vif     = { v38402 }
    vip     = { v38403 }
    id      = { v38404 }
    ?22     = { v38405 }
    ?23     = { v38406 }
    ?24     = { v38407 }
    ?25     = { v38408 }
    ?26     = { v38409 }
    ?27     = { v38410 }
    ?28     = { v38411 }
    ?29     = { v38412 }
    ?30     = { v38413 }
    ?31     = { v38414 }
    ip      = { 0x80485a0 }
memory:
registers:
    ax      = { defs={} expr=v9748[32] }
    cx      = { defs={} expr=v9749[32] }
    dx      = { defs={} expr=v9750[32] }
    bx      = { defs={} expr=v9751[32] }
    sp      = { defs={} expr=v9752[32] }
    bp      = { defs={} expr=v9753[32] }
    si      = { defs={0x08048596} expr=v9754[32] }
    di      = { defs={0x08048599} expr=v9755[32] }
    es      = { defs={} expr=v9756[16] }
    cs      = { defs={} expr=v9757[16] }
    ss      = { defs={} expr=v9758[16] }
    ds      = { defs={} expr=v9759[16] }
    fs      = { defs={} expr=v9760[16] }
    gs      = { defs={} expr=v9761[16] }
    cf      = { defs={} expr=v9762[1] }
    ?1      = { defs={} expr=v9763[1] }
    pf      = { defs={} expr=v9764[1] }
    ?3      = { defs={} expr=v9765[1] }
    af      = { defs={} expr=v9766[1] }
    ?5      = { defs={} expr=v9767[1] }
    zf      = { defs={} expr=v9768[1] }
    sf      = { defs={} expr=v9769[1] }
    tf      = { defs={} expr=v9770[1] }
    if      = { defs={} expr=v9771[1] }
    df      = { defs={} expr=v9772[1] }
    of      = { defs={} expr=v9773[1] }
    iopl0   = { defs={} expr=v9774[1] }
    iopl1   = { defs={} expr=v9775[1] }
    nt      = { defs={} expr=v9776[1] }
    ?15     = { defs={} expr=v9777[1] }
    rf      = { defs={} expr=v9778[1] }
    vm      = { defs={} expr=v9779[1] }
    ac      = { defs={} expr=v9780[1] }
    vif     = { defs={} expr=v9781[1] }
    vip     = { defs={} expr=v9782[1] }
    id      = { defs={} expr=v9783[1] }
    ?22     = { defs={} expr=v9784[1] }
    ?23     = { defs={} expr=v9785[1] }
    ?24     = { defs={} expr=v9786[1] }
    ?25     = { defs={} expr=v9787[1] }
    ?26     = { defs={} expr=v9788[1] }
    ?27     = { defs={} expr=v9789[1] }
    ?28     = { defs={} expr=v9790[1] }
    ?29     = { defs={} expr=v9791[1] }
    ?30     = { defs={} expr=v9792[1] }
    ?31     = { defs={} expr=v9793[1] }
    ip      = { defs={0x08048596,0x08048599} expr=0x080485a0[32] }
memory:
init mem:
null state
null state
0x80485a0:sub    ebx, 0x04
registers:
    ax      = { v38369 }
    cx      = { v38370 }
    dx      = { v38371 }
    bx      = { v38372-0x4 }
    sp      = { v38373 }
    bp      = { v38374 }
    si      = { v38375 }
    di      = { v38376 }
    es      = { v38377 }
    cs      = { v38378 }
    ss      = { v38379 }
    ds      = { v38380 }
    fs      = { v38381 }
    gs      = { v38382 }
    cf      = { -v38480+0x1 }
    ?1      = { v38384 }
    pf      = { -v38470+0x1 }
    ?3      = { v38386 }
    af      = { -v38477+0x1 }
    ?5      = { v38388 }
    zf      = { v38475 }
    sf      = { v38473 }
    tf      = { v38391 }
    if      = { v38392 }
    df      = { v38393 }
    of      = { v38487 }
    iopl0   = { v38395 }
    iopl1   = { v38396 }
    nt      = { v38397 }
    ?15     = { v38398 }
    rf      = { v38399 }
    vm      = { v38400 }
    ac      = { v38401 }
    vif     = { v38402 }
    vip     = { v38403 }
    id      = { v38404 }
    ?22     = { v38405 }
    ?23     = { v38406 }
    ?24     = { v38407 }
    ?25     = { v38408 }
    ?26     = { v38409 }
    ?27     = { v38410 }
    ?28     = { v38411 }
    ?29     = { v38412 }
    ?30     = { v38413 }
    ?31     = { v38414 }
    ip      = { 0x80485a3 }
memory:
registers:
    ax      = { defs={} expr=v9748[32] }
    cx      = { defs={} expr=v9749[32] }
    dx      = { defs={} expr=v9750[32] }
    bx      = { defs={0x080485a0} expr=(add[32] v9751[32] -4[32]) }
    sp      = { defs={} expr=v9752[32] }
    bp      = { defs={} expr=v9753[32] }
    si      = { defs={0x08048596} expr=v9754[32] }
    di      = { defs={0x08048599} expr=v9755[32] }
    es      = { defs={} expr=v9756[16] }
    cs      = { defs={} expr=v9757[16] }
    ss      = { defs={} expr=v9758[16] }
    ds      = { defs={} expr=v9759[16] }
    fs      = { defs={} expr=v9760[16] }
    gs      = { defs={} expr=v9761[16] }
    cf      = { defs={0x080485a0} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v9751[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v9751[32]) 4294967292[33])))))) }
    ?1      = { defs={} expr=v9763[1] }
    pf      = { defs={0x080485a0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v9751[32] -4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v9751[32] -4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v9751[32] -4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v9751[32] -4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v9751[32] -4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v9751[32] -4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v9751[32] -4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v9751[32] -4[32]))))))) }
    ?3      = { defs={} expr=v9765[1] }
    af      = { defs={0x080485a0} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v9751[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v9751[32]) 4294967292[33])))))) }
    ?5      = { defs={} expr=v9767[1] }
    zf      = { defs={0x080485a0} expr=(zerop[1] (add[32] v9751[32] -4[32])) }
    sf      = { defs={0x080485a0} expr=(extract[1] 31[32] 32[32] (add[32] v9751[32] -4[32])) }
    tf      = { defs={} expr=v9770[1] }
    if      = { defs={} expr=v9771[1] }
    df      = { defs={} expr=v9772[1] }
    of      = { defs={0x080485a0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v9751[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v9751[32]) 4294967292[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v9751[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v9751[32]) 4294967292[33])))))) }
    iopl0   = { defs={} expr=v9774[1] }
    iopl1   = { defs={} expr=v9775[1] }
    nt      = { defs={} expr=v9776[1] }
    ?15     = { defs={} expr=v9777[1] }
    rf      = { defs={} expr=v9778[1] }
    vm      = { defs={} expr=v9779[1] }
    ac      = { defs={} expr=v9780[1] }
    vif     = { defs={} expr=v9781[1] }
    vip     = { defs={} expr=v9782[1] }
    id      = { defs={} expr=v9783[1] }
    ?22     = { defs={} expr=v9784[1] }
    ?23     = { defs={} expr=v9785[1] }
    ?24     = { defs={} expr=v9786[1] }
    ?25     = { defs={} expr=v9787[1] }
    ?26     = { defs={} expr=v9788[1] }
    ?27     = { defs={} expr=v9789[1] }
    ?28     = { defs={} expr=v9790[1] }
    ?29     = { defs={} expr=v9791[1] }
    ?30     = { defs={} expr=v9792[1] }
    ?31     = { defs={} expr=v9793[1] }
    ip      = { defs={0x08048596,0x08048599,0x080485a0} expr=0x080485a3[32] }
memory:
init mem:
null state
null state
0x80485a3:call   eax
registers:
    ax      = { v38369 }
    cx      = { v38370 }
    dx      = { v38371 }
    bx      = { v38372-0x4 }
    sp      = { v38373-0x4 }
    bp      = { v38374 }
    si      = { v38375 }
    di      = { v38376 }
    es      = { v38377 }
    cs      = { v38378 }
    ss      = { v38379 }
    ds      = { v38380 }
    fs      = { v38381 }
    gs      = { v38382 }
    cf      = { -v38480+0x1 }
    ?1      = { v38384 }
    pf      = { -v38470+0x1 }
    ?3      = { v38386 }
    af      = { -v38477+0x1 }
    ?5      = { v38388 }
    zf      = { v38475 }
    sf      = { v38473 }
    tf      = { v38391 }
    if      = { v38392 }
    df      = { v38393 }
    of      = { v38487 }
    iopl0   = { v38395 }
    iopl1   = { v38396 }
    nt      = { v38397 }
    ?15     = { v38398 }
    rf      = { v38399 }
    vm      = { v38400 }
    ac      = { v38401 }
    vif     = { v38402 }
    vip     = { v38403 }
    id      = { v38404 }
    ?22     = { v38405 }
    ?23     = { v38406 }
    ?24     = { v38407 }
    ?25     = { v38408 }
    ?26     = { v38409 }
    ?27     = { v38410 }
    ?28     = { v38411 }
    ?29     = { v38412 }
    ?30     = { v38413 }
    ?31     = { v38414 }
    ip      = { v38369 }
memory:
    address = { v38373-0x4 }
      value = { 0x80485a5 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v9748[32] }
    cx      = { defs={} expr=v9749[32] }
    dx      = { defs={} expr=v9750[32] }
    bx      = { defs={0x080485a0} expr=(add[32] v9751[32] -4[32]) }
    sp      = { defs={0x080485a3} expr=(add[32] v9752[32] -4[32]) }
    bp      = { defs={} expr=v9753[32] }
    si      = { defs={0x08048596} expr=v9754[32] }
    di      = { defs={0x08048599} expr=v9755[32] }
    es      = { defs={} expr=v9756[16] }
    cs      = { defs={} expr=v9757[16] }
    ss      = { defs={} expr=v9758[16] }
    ds      = { defs={} expr=v9759[16] }
    fs      = { defs={} expr=v9760[16] }
    gs      = { defs={} expr=v9761[16] }
    cf      = { defs={0x080485a0} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v9751[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v9751[32]) 4294967292[33])))))) }
    ?1      = { defs={} expr=v9763[1] }
    pf      = { defs={0x080485a0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v9751[32] -4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v9751[32] -4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v9751[32] -4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v9751[32] -4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v9751[32] -4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v9751[32] -4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v9751[32] -4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v9751[32] -4[32]))))))) }
    ?3      = { defs={} expr=v9765[1] }
    af      = { defs={0x080485a0} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v9751[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v9751[32]) 4294967292[33])))))) }
    ?5      = { defs={} expr=v9767[1] }
    zf      = { defs={0x080485a0} expr=(zerop[1] (add[32] v9751[32] -4[32])) }
    sf      = { defs={0x080485a0} expr=(extract[1] 31[32] 32[32] (add[32] v9751[32] -4[32])) }
    tf      = { defs={} expr=v9770[1] }
    if      = { defs={} expr=v9771[1] }
    df      = { defs={} expr=v9772[1] }
    of      = { defs={0x080485a0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v9751[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v9751[32]) 4294967292[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v9751[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v9751[32]) 4294967292[33])))))) }
    iopl0   = { defs={} expr=v9774[1] }
    iopl1   = { defs={} expr=v9775[1] }
    nt      = { defs={} expr=v9776[1] }
    ?15     = { defs={} expr=v9777[1] }
    rf      = { defs={} expr=v9778[1] }
    vm      = { defs={} expr=v9779[1] }
    ac      = { defs={} expr=v9780[1] }
    vif     = { defs={} expr=v9781[1] }
    vip     = { defs={} expr=v9782[1] }
    id      = { defs={} expr=v9783[1] }
    ?22     = { defs={} expr=v9784[1] }
    ?23     = { defs={} expr=v9785[1] }
    ?24     = { defs={} expr=v9786[1] }
    ?25     = { defs={} expr=v9787[1] }
    ?26     = { defs={} expr=v9788[1] }
    ?27     = { defs={} expr=v9789[1] }
    ?28     = { defs={} expr=v9790[1] }
    ?29     = { defs={} expr=v9791[1] }
    ?30     = { defs={} expr=v9792[1] }
    ?31     = { defs={} expr=v9793[1] }
    ip      = { defs={0x080485a3} expr=v9748[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v9752[32] -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v9752[32] -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v9752[32] -4[32]) 1[32]) }
      value = { defs={} expr=-123[8] }
      flags = { }
    address = { defs={0x080485a3} expr=(add[32] v9752[32] -4[32]) }
      value = { defs={} expr=-91[8] }
      flags = { }
init mem:
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80485a5:mov    eax, DWORD PTR ds:[ebx]
registers:
    ax      = { v38600 }
    cx      = { v38548 }
    dx      = { v38549 }
    bx      = { v38550 }
    sp      = { v38551 }
    bp      = { v38552 }
    si      = { v38553 }
    di      = { v38554 }
    es      = { v38555 }
    cs      = { v38556 }
    ss      = { v38557 }
    ds      = { v38558 }
    fs      = { v38559 }
    gs      = { v38560 }
    cf      = { v38561 }
    ?1      = { v38562 }
    pf      = { v38563 }
    ?3      = { v38564 }
    af      = { v38565 }
    ?5      = { v38566 }
    zf      = { v38567 }
    sf      = { v38568 }
    tf      = { v38569 }
    if      = { v38570 }
    df      = { v38571 }
    of      = { v38572 }
    iopl0   = { v38573 }
    iopl1   = { v38574 }
    nt      = { v38575 }
    ?15     = { v38576 }
    rf      = { v38577 }
    vm      = { v38578 }
    ac      = { v38579 }
    vif     = { v38580 }
    vip     = { v38581 }
    id      = { v38582 }
    ?22     = { v38583 }
    ?23     = { v38584 }
    ?24     = { v38585 }
    ?25     = { v38586 }
    ?26     = { v38587 }
    ?27     = { v38588 }
    ?28     = { v38589 }
    ?29     = { v38590 }
    ?30     = { v38591 }
    ?31     = { v38592 }
    ip      = { 0x80485a7 }
memory:
    address = { v38550 }
      value = { v38600 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x080485a5} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10041[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10042[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10043[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10044[8]))) }
    cx      = { defs={} expr=v9982[32] }
    dx      = { defs={} expr=v9983[32] }
    bx      = { defs={} expr=v9984[32] }
    sp      = { defs={} expr=v9985[32] }
    bp      = { defs={} expr=v9986[32] }
    si      = { defs={} expr=v9987[32] }
    di      = { defs={} expr=v9988[32] }
    es      = { defs={} expr=v9989[16] }
    cs      = { defs={} expr=v9990[16] }
    ss      = { defs={} expr=v9991[16] }
    ds      = { defs={} expr=v9992[16] }
    fs      = { defs={} expr=v9993[16] }
    gs      = { defs={} expr=v9994[16] }
    cf      = { defs={} expr=v9995[1] }
    ?1      = { defs={} expr=v9996[1] }
    pf      = { defs={} expr=v9997[1] }
    ?3      = { defs={} expr=v9998[1] }
    af      = { defs={} expr=v9999[1] }
    ?5      = { defs={} expr=v10000[1] }
    zf      = { defs={} expr=v10001[1] }
    sf      = { defs={} expr=v10002[1] }
    tf      = { defs={} expr=v10003[1] }
    if      = { defs={} expr=v10004[1] }
    df      = { defs={} expr=v10005[1] }
    of      = { defs={} expr=v10006[1] }
    iopl0   = { defs={} expr=v10007[1] }
    iopl1   = { defs={} expr=v10008[1] }
    nt      = { defs={} expr=v10009[1] }
    ?15     = { defs={} expr=v10010[1] }
    rf      = { defs={} expr=v10011[1] }
    vm      = { defs={} expr=v10012[1] }
    ac      = { defs={} expr=v10013[1] }
    vif     = { defs={} expr=v10014[1] }
    vip     = { defs={} expr=v10015[1] }
    id      = { defs={} expr=v10016[1] }
    ?22     = { defs={} expr=v10017[1] }
    ?23     = { defs={} expr=v10018[1] }
    ?24     = { defs={} expr=v10019[1] }
    ?25     = { defs={} expr=v10020[1] }
    ?26     = { defs={} expr=v10021[1] }
    ?27     = { defs={} expr=v10022[1] }
    ?28     = { defs={} expr=v10023[1] }
    ?29     = { defs={} expr=v10024[1] }
    ?30     = { defs={} expr=v10025[1] }
    ?31     = { defs={} expr=v10026[1] }
    ip      = { defs={0x080485a5} expr=0x080485a7[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] v9984[32] 3[32]) }
      value = { defs={} expr=v10044[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v9984[32] 2[32]) }
      value = { defs={} expr=v10043[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v9984[32] 1[32]) }
      value = { defs={} expr=v10042[8] }
      flags = { rdonly }
    address = { defs={0x080485a5} expr=v9984[32] }
      value = { defs={} expr=v10041[8] }
      flags = { rdonly }
null state
null state
0x80485a7:cmp    eax, 0xff<-0x01>
registers:
    ax      = { v38600 }
    cx      = { v38548 }
    dx      = { v38549 }
    bx      = { v38550 }
    sp      = { v38551 }
    bp      = { v38552 }
    si      = { v38553 }
    di      = { v38554 }
    es      = { v38555 }
    cs      = { v38556 }
    ss      = { v38557 }
    ds      = { v38558 }
    fs      = { v38559 }
    gs      = { v38560 }
    cf      = { -v38652+0x1 }
    ?1      = { v38562 }
    pf      = { -v38642+0x1 }
    ?3      = { v38564 }
    af      = { -v38649+0x1 }
    ?5      = { v38566 }
    zf      = { v38647 }
    sf      = { v38645 }
    tf      = { v38569 }
    if      = { v38570 }
    df      = { v38571 }
    of      = { v38659 }
    iopl0   = { v38573 }
    iopl1   = { v38574 }
    nt      = { v38575 }
    ?15     = { v38576 }
    rf      = { v38577 }
    vm      = { v38578 }
    ac      = { v38579 }
    vif     = { v38580 }
    vip     = { v38581 }
    id      = { v38582 }
    ?22     = { v38583 }
    ?23     = { v38584 }
    ?24     = { v38585 }
    ?25     = { v38586 }
    ?26     = { v38587 }
    ?27     = { v38588 }
    ?28     = { v38589 }
    ?29     = { v38590 }
    ?30     = { v38591 }
    ?31     = { v38592 }
    ip      = { 0x80485aa }
memory:
    address = { v38550 }
      value = { v38600 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x080485a5} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10041[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10042[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10043[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10044[8]))) }
    cx      = { defs={} expr=v9982[32] }
    dx      = { defs={} expr=v9983[32] }
    bx      = { defs={} expr=v9984[32] }
    sp      = { defs={} expr=v9985[32] }
    bp      = { defs={} expr=v9986[32] }
    si      = { defs={} expr=v9987[32] }
    di      = { defs={} expr=v9988[32] }
    es      = { defs={} expr=v9989[16] }
    cs      = { defs={} expr=v9990[16] }
    ss      = { defs={} expr=v9991[16] }
    ds      = { defs={} expr=v9992[16] }
    fs      = { defs={} expr=v9993[16] }
    gs      = { defs={} expr=v9994[16] }
    cf      = { defs={0x080485a5,0x080485a7} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10041[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10042[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10043[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10044[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10041[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10042[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10043[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10044[8])))) 1[33])))))) }
    ?1      = { defs={} expr=v9996[1] }
    pf      = { defs={0x080485a5,0x080485a7} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10041[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10042[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10043[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10044[8]))) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10041[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10042[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10043[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10044[8]))) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10041[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10042[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10043[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10044[8]))) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10041[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10042[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10043[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10044[8]))) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10041[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10042[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10043[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10044[8]))) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10041[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10042[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10043[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10044[8]))) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10041[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10042[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10043[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10044[8]))) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10041[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10042[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10043[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10044[8]))) 1[32]))))))) }
    ?3      = { defs={} expr=v9998[1] }
    af      = { defs={0x080485a5,0x080485a7} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10041[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10042[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10043[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10044[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10041[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10042[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10043[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10044[8])))) 1[33])))))) }
    ?5      = { defs={} expr=v10000[1] }
    zf      = { defs={0x080485a5,0x080485a7} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10041[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10042[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10043[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10044[8]))) 1[32])) }
    sf      = { defs={0x080485a5,0x080485a7} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10041[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10042[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10043[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10044[8]))) 1[32])) }
    tf      = { defs={} expr=v10003[1] }
    if      = { defs={} expr=v10004[1] }
    df      = { defs={} expr=v10005[1] }
    of      = { defs={0x080485a5,0x080485a7} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10041[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10042[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10043[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10044[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10041[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10042[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10043[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10044[8])))) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10041[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10042[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10043[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10044[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10041[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10042[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10043[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10044[8])))) 1[33])))))) }
    iopl0   = { defs={} expr=v10007[1] }
    iopl1   = { defs={} expr=v10008[1] }
    nt      = { defs={} expr=v10009[1] }
    ?15     = { defs={} expr=v10010[1] }
    rf      = { defs={} expr=v10011[1] }
    vm      = { defs={} expr=v10012[1] }
    ac      = { defs={} expr=v10013[1] }
    vif     = { defs={} expr=v10014[1] }
    vip     = { defs={} expr=v10015[1] }
    id      = { defs={} expr=v10016[1] }
    ?22     = { defs={} expr=v10017[1] }
    ?23     = { defs={} expr=v10018[1] }
    ?24     = { defs={} expr=v10019[1] }
    ?25     = { defs={} expr=v10020[1] }
    ?26     = { defs={} expr=v10021[1] }
    ?27     = { defs={} expr=v10022[1] }
    ?28     = { defs={} expr=v10023[1] }
    ?29     = { defs={} expr=v10024[1] }
    ?30     = { defs={} expr=v10025[1] }
    ?31     = { defs={} expr=v10026[1] }
    ip      = { defs={0x080485a5,0x080485a7} expr=0x080485aa[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] v9984[32] 3[32]) }
      value = { defs={} expr=v10044[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v9984[32] 2[32]) }
      value = { defs={} expr=v10043[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v9984[32] 1[32]) }
      value = { defs={} expr=v10042[8] }
      flags = { rdonly }
    address = { defs={0x080485a5} expr=v9984[32] }
      value = { defs={} expr=v10041[8] }
      flags = { rdonly }
null state
null state
0x80485aa:jne    0x080485a0<<Insn>>
registers:
    ax      = { v38600 }
    cx      = { v38548 }
    dx      = { v38549 }
    bx      = { v38550 }
    sp      = { v38551 }
    bp      = { v38552 }
    si      = { v38553 }
    di      = { v38554 }
    es      = { v38555 }
    cs      = { v38556 }
    ss      = { v38557 }
    ds      = { v38558 }
    fs      = { v38559 }
    gs      = { v38560 }
    cf      = { -v38652+0x1 }
    ?1      = { v38562 }
    pf      = { -v38642+0x1 }
    ?3      = { v38564 }
    af      = { -v38649+0x1 }
    ?5      = { v38566 }
    zf      = { v38647 }
    sf      = { v38645 }
    tf      = { v38569 }
    if      = { v38570 }
    df      = { v38571 }
    of      = { v38659 }
    iopl0   = { v38573 }
    iopl1   = { v38574 }
    nt      = { v38575 }
    ?15     = { v38576 }
    rf      = { v38577 }
    vm      = { v38578 }
    ac      = { v38579 }
    vif     = { v38580 }
    vip     = { v38581 }
    id      = { v38582 }
    ?22     = { v38583 }
    ?23     = { v38584 }
    ?24     = { v38585 }
    ?25     = { v38586 }
    ?26     = { v38587 }
    ?27     = { v38588 }
    ?28     = { v38589 }
    ?29     = { v38590 }
    ?30     = { v38591 }
    ?31     = { v38592 }
    ip      = { v38669 }
memory:
    address = { v38550 }
      value = { v38600 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x080485a5} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10041[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10042[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10043[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10044[8]))) }
    cx      = { defs={} expr=v9982[32] }
    dx      = { defs={} expr=v9983[32] }
    bx      = { defs={} expr=v9984[32] }
    sp      = { defs={} expr=v9985[32] }
    bp      = { defs={} expr=v9986[32] }
    si      = { defs={} expr=v9987[32] }
    di      = { defs={} expr=v9988[32] }
    es      = { defs={} expr=v9989[16] }
    cs      = { defs={} expr=v9990[16] }
    ss      = { defs={} expr=v9991[16] }
    ds      = { defs={} expr=v9992[16] }
    fs      = { defs={} expr=v9993[16] }
    gs      = { defs={} expr=v9994[16] }
    cf      = { defs={0x080485a5,0x080485a7} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10041[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10042[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10043[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10044[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10041[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10042[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10043[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10044[8])))) 1[33])))))) }
    ?1      = { defs={} expr=v9996[1] }
    pf      = { defs={0x080485a5,0x080485a7} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10041[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10042[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10043[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10044[8]))) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10041[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10042[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10043[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10044[8]))) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10041[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10042[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10043[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10044[8]))) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10041[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10042[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10043[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10044[8]))) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10041[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10042[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10043[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10044[8]))) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10041[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10042[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10043[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10044[8]))) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10041[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10042[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10043[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10044[8]))) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10041[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10042[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10043[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10044[8]))) 1[32]))))))) }
    ?3      = { defs={} expr=v9998[1] }
    af      = { defs={0x080485a5,0x080485a7} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10041[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10042[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10043[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10044[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10041[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10042[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10043[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10044[8])))) 1[33])))))) }
    ?5      = { defs={} expr=v10000[1] }
    zf      = { defs={0x080485a5,0x080485a7} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10041[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10042[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10043[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10044[8]))) 1[32])) }
    sf      = { defs={0x080485a5,0x080485a7} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10041[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10042[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10043[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10044[8]))) 1[32])) }
    tf      = { defs={} expr=v10003[1] }
    if      = { defs={} expr=v10004[1] }
    df      = { defs={} expr=v10005[1] }
    of      = { defs={0x080485a5,0x080485a7} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10041[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10042[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10043[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10044[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10041[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10042[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10043[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10044[8])))) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10041[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10042[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10043[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10044[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10041[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10042[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10043[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10044[8])))) 1[33])))))) }
    iopl0   = { defs={} expr=v10007[1] }
    iopl1   = { defs={} expr=v10008[1] }
    nt      = { defs={} expr=v10009[1] }
    ?15     = { defs={} expr=v10010[1] }
    rf      = { defs={} expr=v10011[1] }
    vm      = { defs={} expr=v10012[1] }
    ac      = { defs={} expr=v10013[1] }
    vif     = { defs={} expr=v10014[1] }
    vip     = { defs={} expr=v10015[1] }
    id      = { defs={} expr=v10016[1] }
    ?22     = { defs={} expr=v10017[1] }
    ?23     = { defs={} expr=v10018[1] }
    ?24     = { defs={} expr=v10019[1] }
    ?25     = { defs={} expr=v10020[1] }
    ?26     = { defs={} expr=v10021[1] }
    ?27     = { defs={} expr=v10022[1] }
    ?28     = { defs={} expr=v10023[1] }
    ?29     = { defs={} expr=v10024[1] }
    ?30     = { defs={} expr=v10025[1] }
    ?31     = { defs={} expr=v10026[1] }
    ip      = { defs={0x080485a5,0x080485a7,0x080485aa} expr=(ite[32] (invert[1] (zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10041[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10042[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10043[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10044[8]))) 1[32]))) 0x080485a0[32] 0x080485ac[32]) }
memory:
init mem:
    address = { defs={} expr=(add[32] v9984[32] 3[32]) }
      value = { defs={} expr=v10044[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v9984[32] 2[32]) }
      value = { defs={} expr=v10043[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v9984[32] 1[32]) }
      value = { defs={} expr=v10042[8] }
      flags = { rdonly }
    address = { defs={0x080485a5} expr=v9984[32] }
      value = { defs={} expr=v10041[8] }
      flags = { rdonly }
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80485ac:pop    eax
registers:
    ax      = { v38774 }
    cx      = { v38720 }
    dx      = { v38721 }
    bx      = { v38722 }
    sp      = { v38723+0x4 }
    bp      = { v38724 }
    si      = { v38725 }
    di      = { v38726 }
    es      = { v38727 }
    cs      = { v38728 }
    ss      = { v38729 }
    ds      = { v38730 }
    fs      = { v38731 }
    gs      = { v38732 }
    cf      = { v38733 }
    ?1      = { v38734 }
    pf      = { v38735 }
    ?3      = { v38736 }
    af      = { v38737 }
    ?5      = { v38738 }
    zf      = { v38739 }
    sf      = { v38740 }
    tf      = { v38741 }
    if      = { v38742 }
    df      = { v38743 }
    of      = { v38744 }
    iopl0   = { v38745 }
    iopl1   = { v38746 }
    nt      = { v38747 }
    ?15     = { v38748 }
    rf      = { v38749 }
    vm      = { v38750 }
    ac      = { v38751 }
    vif     = { v38752 }
    vip     = { v38753 }
    id      = { v38754 }
    ?22     = { v38755 }
    ?23     = { v38756 }
    ?24     = { v38757 }
    ?25     = { v38758 }
    ?26     = { v38759 }
    ?27     = { v38760 }
    ?28     = { v38761 }
    ?29     = { v38762 }
    ?30     = { v38763 }
    ?31     = { v38764 }
    ip      = { 0x80485ad }
memory:
    address = { v38723 }
      value = { v38774 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x080485ac} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10271[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10272[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10273[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10274[8]))) }
    cx      = { defs={} expr=v10208[32] }
    dx      = { defs={} expr=v10209[32] }
    bx      = { defs={} expr=v10210[32] }
    sp      = { defs={0x080485ac} expr=(add[32] v10211[32] 4[32]) }
    bp      = { defs={} expr=v10212[32] }
    si      = { defs={} expr=v10213[32] }
    di      = { defs={} expr=v10214[32] }
    es      = { defs={} expr=v10215[16] }
    cs      = { defs={} expr=v10216[16] }
    ss      = { defs={} expr=v10217[16] }
    ds      = { defs={} expr=v10218[16] }
    fs      = { defs={} expr=v10219[16] }
    gs      = { defs={} expr=v10220[16] }
    cf      = { defs={} expr=v10221[1] }
    ?1      = { defs={} expr=v10222[1] }
    pf      = { defs={} expr=v10223[1] }
    ?3      = { defs={} expr=v10224[1] }
    af      = { defs={} expr=v10225[1] }
    ?5      = { defs={} expr=v10226[1] }
    zf      = { defs={} expr=v10227[1] }
    sf      = { defs={} expr=v10228[1] }
    tf      = { defs={} expr=v10229[1] }
    if      = { defs={} expr=v10230[1] }
    df      = { defs={} expr=v10231[1] }
    of      = { defs={} expr=v10232[1] }
    iopl0   = { defs={} expr=v10233[1] }
    iopl1   = { defs={} expr=v10234[1] }
    nt      = { defs={} expr=v10235[1] }
    ?15     = { defs={} expr=v10236[1] }
    rf      = { defs={} expr=v10237[1] }
    vm      = { defs={} expr=v10238[1] }
    ac      = { defs={} expr=v10239[1] }
    vif     = { defs={} expr=v10240[1] }
    vip     = { defs={} expr=v10241[1] }
    id      = { defs={} expr=v10242[1] }
    ?22     = { defs={} expr=v10243[1] }
    ?23     = { defs={} expr=v10244[1] }
    ?24     = { defs={} expr=v10245[1] }
    ?25     = { defs={} expr=v10246[1] }
    ?26     = { defs={} expr=v10247[1] }
    ?27     = { defs={} expr=v10248[1] }
    ?28     = { defs={} expr=v10249[1] }
    ?29     = { defs={} expr=v10250[1] }
    ?30     = { defs={} expr=v10251[1] }
    ?31     = { defs={} expr=v10252[1] }
    ip      = { defs={0x080485ac} expr=0x080485ad[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] v10211[32] 3[32]) }
      value = { defs={} expr=v10274[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v10211[32] 2[32]) }
      value = { defs={} expr=v10273[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v10211[32] 1[32]) }
      value = { defs={} expr=v10272[8] }
      flags = { rdonly }
    address = { defs={0x080485ac} expr=v10211[32] }
      value = { defs={} expr=v10271[8] }
      flags = { rdonly }
null state
null state
0x80485ad:pop    ebx
registers:
    ax      = { v38774 }
    cx      = { v38720 }
    dx      = { v38721 }
    bx      = { v38784 }
    sp      = { v38723+0x8 }
    bp      = { v38724 }
    si      = { v38725 }
    di      = { v38726 }
    es      = { v38727 }
    cs      = { v38728 }
    ss      = { v38729 }
    ds      = { v38730 }
    fs      = { v38731 }
    gs      = { v38732 }
    cf      = { v38733 }
    ?1      = { v38734 }
    pf      = { v38735 }
    ?3      = { v38736 }
    af      = { v38737 }
    ?5      = { v38738 }
    zf      = { v38739 }
    sf      = { v38740 }
    tf      = { v38741 }
    if      = { v38742 }
    df      = { v38743 }
    of      = { v38744 }
    iopl0   = { v38745 }
    iopl1   = { v38746 }
    nt      = { v38747 }
    ?15     = { v38748 }
    rf      = { v38749 }
    vm      = { v38750 }
    ac      = { v38751 }
    vif     = { v38752 }
    vip     = { v38753 }
    id      = { v38754 }
    ?22     = { v38755 }
    ?23     = { v38756 }
    ?24     = { v38757 }
    ?25     = { v38758 }
    ?26     = { v38759 }
    ?27     = { v38760 }
    ?28     = { v38761 }
    ?29     = { v38762 }
    ?30     = { v38763 }
    ?31     = { v38764 }
    ip      = { 0x80485ae }
memory:
    address = { v38723 }
      value = { v38774 }
      flags = { size=4; read-only }
    address = { v38723+0x4 }
      value = { v38784 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x080485ac} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10271[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10272[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10273[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10274[8]))) }
    cx      = { defs={} expr=v10208[32] }
    dx      = { defs={} expr=v10209[32] }
    bx      = { defs={0x080485ad} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10298[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10299[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10300[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10301[8]))) }
    sp      = { defs={0x080485ac,0x080485ad} expr=(add[32] (add[32] v10211[32] 4[32]) 4[32]) }
    bp      = { defs={} expr=v10212[32] }
    si      = { defs={} expr=v10213[32] }
    di      = { defs={} expr=v10214[32] }
    es      = { defs={} expr=v10215[16] }
    cs      = { defs={} expr=v10216[16] }
    ss      = { defs={} expr=v10217[16] }
    ds      = { defs={} expr=v10218[16] }
    fs      = { defs={} expr=v10219[16] }
    gs      = { defs={} expr=v10220[16] }
    cf      = { defs={} expr=v10221[1] }
    ?1      = { defs={} expr=v10222[1] }
    pf      = { defs={} expr=v10223[1] }
    ?3      = { defs={} expr=v10224[1] }
    af      = { defs={} expr=v10225[1] }
    ?5      = { defs={} expr=v10226[1] }
    zf      = { defs={} expr=v10227[1] }
    sf      = { defs={} expr=v10228[1] }
    tf      = { defs={} expr=v10229[1] }
    if      = { defs={} expr=v10230[1] }
    df      = { defs={} expr=v10231[1] }
    of      = { defs={} expr=v10232[1] }
    iopl0   = { defs={} expr=v10233[1] }
    iopl1   = { defs={} expr=v10234[1] }
    nt      = { defs={} expr=v10235[1] }
    ?15     = { defs={} expr=v10236[1] }
    rf      = { defs={} expr=v10237[1] }
    vm      = { defs={} expr=v10238[1] }
    ac      = { defs={} expr=v10239[1] }
    vif     = { defs={} expr=v10240[1] }
    vip     = { defs={} expr=v10241[1] }
    id      = { defs={} expr=v10242[1] }
    ?22     = { defs={} expr=v10243[1] }
    ?23     = { defs={} expr=v10244[1] }
    ?24     = { defs={} expr=v10245[1] }
    ?25     = { defs={} expr=v10246[1] }
    ?26     = { defs={} expr=v10247[1] }
    ?27     = { defs={} expr=v10248[1] }
    ?28     = { defs={} expr=v10249[1] }
    ?29     = { defs={} expr=v10250[1] }
    ?30     = { defs={} expr=v10251[1] }
    ?31     = { defs={} expr=v10252[1] }
    ip      = { defs={0x080485ac,0x080485ad} expr=0x080485ae[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] (add[32] v10211[32] 4[32]) 3[32]) }
      value = { defs={} expr=v10301[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v10211[32] 4[32]) 2[32]) }
      value = { defs={} expr=v10300[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v10211[32] 4[32]) 1[32]) }
      value = { defs={} expr=v10299[8] }
      flags = { rdonly }
    address = { defs={0x080485ac,0x080485ad} expr=(add[32] v10211[32] 4[32]) }
      value = { defs={} expr=v10298[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v10211[32] 3[32]) }
      value = { defs={} expr=v10274[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v10211[32] 2[32]) }
      value = { defs={} expr=v10273[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v10211[32] 1[32]) }
      value = { defs={} expr=v10272[8] }
      flags = { rdonly }
    address = { defs={0x080485ac} expr=v10211[32] }
      value = { defs={} expr=v10271[8] }
      flags = { rdonly }
null state
null state
0x80485ae:pop    ebp
registers:
    ax      = { v38774 }
    cx      = { v38720 }
    dx      = { v38721 }
    bx      = { v38784 }
    sp      = { v38723+0xc }
    bp      = { v38794 }
    si      = { v38725 }
    di      = { v38726 }
    es      = { v38727 }
    cs      = { v38728 }
    ss      = { v38729 }
    ds      = { v38730 }
    fs      = { v38731 }
    gs      = { v38732 }
    cf      = { v38733 }
    ?1      = { v38734 }
    pf      = { v38735 }
    ?3      = { v38736 }
    af      = { v38737 }
    ?5      = { v38738 }
    zf      = { v38739 }
    sf      = { v38740 }
    tf      = { v38741 }
    if      = { v38742 }
    df      = { v38743 }
    of      = { v38744 }
    iopl0   = { v38745 }
    iopl1   = { v38746 }
    nt      = { v38747 }
    ?15     = { v38748 }
    rf      = { v38749 }
    vm      = { v38750 }
    ac      = { v38751 }
    vif     = { v38752 }
    vip     = { v38753 }
    id      = { v38754 }
    ?22     = { v38755 }
    ?23     = { v38756 }
    ?24     = { v38757 }
    ?25     = { v38758 }
    ?26     = { v38759 }
    ?27     = { v38760 }
    ?28     = { v38761 }
    ?29     = { v38762 }
    ?30     = { v38763 }
    ?31     = { v38764 }
    ip      = { 0x80485af }
memory:
    address = { v38723 }
      value = { v38774 }
      flags = { size=4; read-only }
    address = { v38723+0x4 }
      value = { v38784 }
      flags = { size=4; read-only }
    address = { v38723+0x8 }
      value = { v38794 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x080485ac} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10271[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10272[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10273[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10274[8]))) }
    cx      = { defs={} expr=v10208[32] }
    dx      = { defs={} expr=v10209[32] }
    bx      = { defs={0x080485ad} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10298[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10299[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10300[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10301[8]))) }
    sp      = { defs={0x080485ac,0x080485ad,0x080485ae} expr=(add[32] (add[32] (add[32] v10211[32] 4[32]) 4[32]) 4[32]) }
    bp      = { defs={0x080485ae} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10325[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10326[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10327[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10328[8]))) }
    si      = { defs={} expr=v10213[32] }
    di      = { defs={} expr=v10214[32] }
    es      = { defs={} expr=v10215[16] }
    cs      = { defs={} expr=v10216[16] }
    ss      = { defs={} expr=v10217[16] }
    ds      = { defs={} expr=v10218[16] }
    fs      = { defs={} expr=v10219[16] }
    gs      = { defs={} expr=v10220[16] }
    cf      = { defs={} expr=v10221[1] }
    ?1      = { defs={} expr=v10222[1] }
    pf      = { defs={} expr=v10223[1] }
    ?3      = { defs={} expr=v10224[1] }
    af      = { defs={} expr=v10225[1] }
    ?5      = { defs={} expr=v10226[1] }
    zf      = { defs={} expr=v10227[1] }
    sf      = { defs={} expr=v10228[1] }
    tf      = { defs={} expr=v10229[1] }
    if      = { defs={} expr=v10230[1] }
    df      = { defs={} expr=v10231[1] }
    of      = { defs={} expr=v10232[1] }
    iopl0   = { defs={} expr=v10233[1] }
    iopl1   = { defs={} expr=v10234[1] }
    nt      = { defs={} expr=v10235[1] }
    ?15     = { defs={} expr=v10236[1] }
    rf      = { defs={} expr=v10237[1] }
    vm      = { defs={} expr=v10238[1] }
    ac      = { defs={} expr=v10239[1] }
    vif     = { defs={} expr=v10240[1] }
    vip     = { defs={} expr=v10241[1] }
    id      = { defs={} expr=v10242[1] }
    ?22     = { defs={} expr=v10243[1] }
    ?23     = { defs={} expr=v10244[1] }
    ?24     = { defs={} expr=v10245[1] }
    ?25     = { defs={} expr=v10246[1] }
    ?26     = { defs={} expr=v10247[1] }
    ?27     = { defs={} expr=v10248[1] }
    ?28     = { defs={} expr=v10249[1] }
    ?29     = { defs={} expr=v10250[1] }
    ?30     = { defs={} expr=v10251[1] }
    ?31     = { defs={} expr=v10252[1] }
    ip      = { defs={0x080485ac,0x080485ad,0x080485ae} expr=0x080485af[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] (add[32] (add[32] v10211[32] 4[32]) 4[32]) 3[32]) }
      value = { defs={} expr=v10328[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] v10211[32] 4[32]) 4[32]) 2[32]) }
      value = { defs={} expr=v10327[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] v10211[32] 4[32]) 4[32]) 1[32]) }
      value = { defs={} expr=v10326[8] }
      flags = { rdonly }
    address = { defs={0x080485ac,0x080485ad,0x080485ae} expr=(add[32] (add[32] v10211[32] 4[32]) 4[32]) }
      value = { defs={} expr=v10325[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v10211[32] 4[32]) 3[32]) }
      value = { defs={} expr=v10301[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v10211[32] 4[32]) 2[32]) }
      value = { defs={} expr=v10300[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v10211[32] 4[32]) 1[32]) }
      value = { defs={} expr=v10299[8] }
      flags = { rdonly }
    address = { defs={0x080485ac,0x080485ad} expr=(add[32] v10211[32] 4[32]) }
      value = { defs={} expr=v10298[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v10211[32] 3[32]) }
      value = { defs={} expr=v10274[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v10211[32] 2[32]) }
      value = { defs={} expr=v10273[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v10211[32] 1[32]) }
      value = { defs={} expr=v10272[8] }
      flags = { rdonly }
    address = { defs={0x080485ac} expr=v10211[32] }
      value = { defs={} expr=v10271[8] }
      flags = { rdonly }
null state
null state
0x80485af:ret    
registers:
    ax      = { v38774 }
    cx      = { v38720 }
    dx      = { v38721 }
    bx      = { v38784 }
    sp      = { v38723+0x10 }
    bp      = { v38794 }
    si      = { v38725 }
    di      = { v38726 }
    es      = { v38727 }
    cs      = { v38728 }
    ss      = { v38729 }
    ds      = { v38730 }
    fs      = { v38731 }
    gs      = { v38732 }
    cf      = { v38733 }
    ?1      = { v38734 }
    pf      = { v38735 }
    ?3      = { v38736 }
    af      = { v38737 }
    ?5      = { v38738 }
    zf      = { v38739 }
    sf      = { v38740 }
    tf      = { v38741 }
    if      = { v38742 }
    df      = { v38743 }
    of      = { v38744 }
    iopl0   = { v38745 }
    iopl1   = { v38746 }
    nt      = { v38747 }
    ?15     = { v38748 }
    rf      = { v38749 }
    vm      = { v38750 }
    ac      = { v38751 }
    vif     = { v38752 }
    vip     = { v38753 }
    id      = { v38754 }
    ?22     = { v38755 }
    ?23     = { v38756 }
    ?24     = { v38757 }
    ?25     = { v38758 }
    ?26     = { v38759 }
    ?27     = { v38760 }
    ?28     = { v38761 }
    ?29     = { v38762 }
    ?30     = { v38763 }
    ?31     = { v38764 }
    ip      = { v38806 }
memory:
    address = { v38723 }
      value = { v38774 }
      flags = { size=4; read-only }
    address = { v38723+0x4 }
      value = { v38784 }
      flags = { size=4; read-only }
    address = { v38723+0x8 }
      value = { v38794 }
      flags = { size=4; read-only }
    address = { v38723+0xc }
      value = { v38806 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x080485ac} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10271[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10272[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10273[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10274[8]))) }
    cx      = { defs={} expr=v10208[32] }
    dx      = { defs={} expr=v10209[32] }
    bx      = { defs={0x080485ad} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10298[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10299[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10300[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10301[8]))) }
    sp      = { defs={0x080485ac,0x080485ad,0x080485ae,0x080485af} expr=(add[32] (add[32] (add[32] (add[32] v10211[32] 4[32]) 4[32]) 4[32]) 4[32]) }
    bp      = { defs={0x080485ae} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10325[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10326[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10327[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10328[8]))) }
    si      = { defs={} expr=v10213[32] }
    di      = { defs={} expr=v10214[32] }
    es      = { defs={} expr=v10215[16] }
    cs      = { defs={} expr=v10216[16] }
    ss      = { defs={} expr=v10217[16] }
    ds      = { defs={} expr=v10218[16] }
    fs      = { defs={} expr=v10219[16] }
    gs      = { defs={} expr=v10220[16] }
    cf      = { defs={} expr=v10221[1] }
    ?1      = { defs={} expr=v10222[1] }
    pf      = { defs={} expr=v10223[1] }
    ?3      = { defs={} expr=v10224[1] }
    af      = { defs={} expr=v10225[1] }
    ?5      = { defs={} expr=v10226[1] }
    zf      = { defs={} expr=v10227[1] }
    sf      = { defs={} expr=v10228[1] }
    tf      = { defs={} expr=v10229[1] }
    if      = { defs={} expr=v10230[1] }
    df      = { defs={} expr=v10231[1] }
    of      = { defs={} expr=v10232[1] }
    iopl0   = { defs={} expr=v10233[1] }
    iopl1   = { defs={} expr=v10234[1] }
    nt      = { defs={} expr=v10235[1] }
    ?15     = { defs={} expr=v10236[1] }
    rf      = { defs={} expr=v10237[1] }
    vm      = { defs={} expr=v10238[1] }
    ac      = { defs={} expr=v10239[1] }
    vif     = { defs={} expr=v10240[1] }
    vip     = { defs={} expr=v10241[1] }
    id      = { defs={} expr=v10242[1] }
    ?22     = { defs={} expr=v10243[1] }
    ?23     = { defs={} expr=v10244[1] }
    ?24     = { defs={} expr=v10245[1] }
    ?25     = { defs={} expr=v10246[1] }
    ?26     = { defs={} expr=v10247[1] }
    ?27     = { defs={} expr=v10248[1] }
    ?28     = { defs={} expr=v10249[1] }
    ?29     = { defs={} expr=v10250[1] }
    ?30     = { defs={} expr=v10251[1] }
    ?31     = { defs={} expr=v10252[1] }
    ip      = { defs={0x080485af} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10354[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10355[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10356[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10357[8]))) }
memory:
init mem:
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v10211[32] 4[32]) 4[32]) 4[32]) 3[32]) }
      value = { defs={} expr=v10357[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v10211[32] 4[32]) 4[32]) 4[32]) 2[32]) }
      value = { defs={} expr=v10356[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v10211[32] 4[32]) 4[32]) 4[32]) 1[32]) }
      value = { defs={} expr=v10355[8] }
      flags = { rdonly }
    address = { defs={0x080485ac,0x080485ad,0x080485ae,0x080485af} expr=(add[32] (add[32] (add[32] v10211[32] 4[32]) 4[32]) 4[32]) }
      value = { defs={} expr=v10354[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] v10211[32] 4[32]) 4[32]) 3[32]) }
      value = { defs={} expr=v10328[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] v10211[32] 4[32]) 4[32]) 2[32]) }
      value = { defs={} expr=v10327[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] v10211[32] 4[32]) 4[32]) 1[32]) }
      value = { defs={} expr=v10326[8] }
      flags = { rdonly }
    address = { defs={0x080485ac,0x080485ad,0x080485ae} expr=(add[32] (add[32] v10211[32] 4[32]) 4[32]) }
      value = { defs={} expr=v10325[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v10211[32] 4[32]) 3[32]) }
      value = { defs={} expr=v10301[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v10211[32] 4[32]) 2[32]) }
      value = { defs={} expr=v10300[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v10211[32] 4[32]) 1[32]) }
      value = { defs={} expr=v10299[8] }
      flags = { rdonly }
    address = { defs={0x080485ac,0x080485ad} expr=(add[32] v10211[32] 4[32]) }
      value = { defs={} expr=v10298[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v10211[32] 3[32]) }
      value = { defs={} expr=v10274[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v10211[32] 2[32]) }
      value = { defs={} expr=v10273[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v10211[32] 1[32]) }
      value = { defs={} expr=v10272[8] }
      flags = { rdonly }
    address = { defs={0x080485ac} expr=v10211[32] }
      value = { defs={} expr=v10271[8] }
      flags = { rdonly }
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80485b0:push   ebp
registers:
    ax      = { v38857 }
    cx      = { v38858 }
    dx      = { v38859 }
    bx      = { v38860 }
    sp      = { v38861-0x4 }
    bp      = { v38862 }
    si      = { v38863 }
    di      = { v38864 }
    es      = { v38865 }
    cs      = { v38866 }
    ss      = { v38867 }
    ds      = { v38868 }
    fs      = { v38869 }
    gs      = { v38870 }
    cf      = { v38871 }
    ?1      = { v38872 }
    pf      = { v38873 }
    ?3      = { v38874 }
    af      = { v38875 }
    ?5      = { v38876 }
    zf      = { v38877 }
    sf      = { v38878 }
    tf      = { v38879 }
    if      = { v38880 }
    df      = { v38881 }
    of      = { v38882 }
    iopl0   = { v38883 }
    iopl1   = { v38884 }
    nt      = { v38885 }
    ?15     = { v38886 }
    rf      = { v38887 }
    vm      = { v38888 }
    ac      = { v38889 }
    vif     = { v38890 }
    vip     = { v38891 }
    id      = { v38892 }
    ?22     = { v38893 }
    ?23     = { v38894 }
    ?24     = { v38895 }
    ?25     = { v38896 }
    ?26     = { v38897 }
    ?27     = { v38898 }
    ?28     = { v38899 }
    ?29     = { v38900 }
    ?30     = { v38901 }
    ?31     = { v38902 }
    ip      = { 0x80485b1 }
memory:
    address = { v38861-0x4 }
      value = { v38862 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v10415[32] }
    cx      = { defs={} expr=v10416[32] }
    dx      = { defs={} expr=v10417[32] }
    bx      = { defs={} expr=v10418[32] }
    sp      = { defs={0x080485b0} expr=(add[32] v10419[32] -4[32]) }
    bp      = { defs={} expr=v10420[32] }
    si      = { defs={} expr=v10421[32] }
    di      = { defs={} expr=v10422[32] }
    es      = { defs={} expr=v10423[16] }
    cs      = { defs={} expr=v10424[16] }
    ss      = { defs={} expr=v10425[16] }
    ds      = { defs={} expr=v10426[16] }
    fs      = { defs={} expr=v10427[16] }
    gs      = { defs={} expr=v10428[16] }
    cf      = { defs={} expr=v10429[1] }
    ?1      = { defs={} expr=v10430[1] }
    pf      = { defs={} expr=v10431[1] }
    ?3      = { defs={} expr=v10432[1] }
    af      = { defs={} expr=v10433[1] }
    ?5      = { defs={} expr=v10434[1] }
    zf      = { defs={} expr=v10435[1] }
    sf      = { defs={} expr=v10436[1] }
    tf      = { defs={} expr=v10437[1] }
    if      = { defs={} expr=v10438[1] }
    df      = { defs={} expr=v10439[1] }
    of      = { defs={} expr=v10440[1] }
    iopl0   = { defs={} expr=v10441[1] }
    iopl1   = { defs={} expr=v10442[1] }
    nt      = { defs={} expr=v10443[1] }
    ?15     = { defs={} expr=v10444[1] }
    rf      = { defs={} expr=v10445[1] }
    vm      = { defs={} expr=v10446[1] }
    ac      = { defs={} expr=v10447[1] }
    vif     = { defs={} expr=v10448[1] }
    vip     = { defs={} expr=v10449[1] }
    id      = { defs={} expr=v10450[1] }
    ?22     = { defs={} expr=v10451[1] }
    ?23     = { defs={} expr=v10452[1] }
    ?24     = { defs={} expr=v10453[1] }
    ?25     = { defs={} expr=v10454[1] }
    ?26     = { defs={} expr=v10455[1] }
    ?27     = { defs={} expr=v10456[1] }
    ?28     = { defs={} expr=v10457[1] }
    ?29     = { defs={} expr=v10458[1] }
    ?30     = { defs={} expr=v10459[1] }
    ?31     = { defs={} expr=v10460[1] }
    ip      = { defs={0x080485b0} expr=0x080485b1[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v10419[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v10420[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v10419[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v10420[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v10419[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v10420[32]) }
      flags = { }
    address = { defs={0x080485b0} expr=(add[32] v10419[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v10420[32]) }
      flags = { }
init mem:
null state
null state
0x80485b1:mov    ebp, esp
registers:
    ax      = { v38857 }
    cx      = { v38858 }
    dx      = { v38859 }
    bx      = { v38860 }
    sp      = { v38861-0x4 }
    bp      = { v38861-0x4 }
    si      = { v38863 }
    di      = { v38864 }
    es      = { v38865 }
    cs      = { v38866 }
    ss      = { v38867 }
    ds      = { v38868 }
    fs      = { v38869 }
    gs      = { v38870 }
    cf      = { v38871 }
    ?1      = { v38872 }
    pf      = { v38873 }
    ?3      = { v38874 }
    af      = { v38875 }
    ?5      = { v38876 }
    zf      = { v38877 }
    sf      = { v38878 }
    tf      = { v38879 }
    if      = { v38880 }
    df      = { v38881 }
    of      = { v38882 }
    iopl0   = { v38883 }
    iopl1   = { v38884 }
    nt      = { v38885 }
    ?15     = { v38886 }
    rf      = { v38887 }
    vm      = { v38888 }
    ac      = { v38889 }
    vif     = { v38890 }
    vip     = { v38891 }
    id      = { v38892 }
    ?22     = { v38893 }
    ?23     = { v38894 }
    ?24     = { v38895 }
    ?25     = { v38896 }
    ?26     = { v38897 }
    ?27     = { v38898 }
    ?28     = { v38899 }
    ?29     = { v38900 }
    ?30     = { v38901 }
    ?31     = { v38902 }
    ip      = { 0x80485b3 }
memory:
    address = { v38861-0x4 }
      value = { v38862 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v10415[32] }
    cx      = { defs={} expr=v10416[32] }
    dx      = { defs={} expr=v10417[32] }
    bx      = { defs={} expr=v10418[32] }
    sp      = { defs={0x080485b0} expr=(add[32] v10419[32] -4[32]) }
    bp      = { defs={0x080485b0,0x080485b1} expr=(add[32] v10419[32] -4[32]) }
    si      = { defs={} expr=v10421[32] }
    di      = { defs={} expr=v10422[32] }
    es      = { defs={} expr=v10423[16] }
    cs      = { defs={} expr=v10424[16] }
    ss      = { defs={} expr=v10425[16] }
    ds      = { defs={} expr=v10426[16] }
    fs      = { defs={} expr=v10427[16] }
    gs      = { defs={} expr=v10428[16] }
    cf      = { defs={} expr=v10429[1] }
    ?1      = { defs={} expr=v10430[1] }
    pf      = { defs={} expr=v10431[1] }
    ?3      = { defs={} expr=v10432[1] }
    af      = { defs={} expr=v10433[1] }
    ?5      = { defs={} expr=v10434[1] }
    zf      = { defs={} expr=v10435[1] }
    sf      = { defs={} expr=v10436[1] }
    tf      = { defs={} expr=v10437[1] }
    if      = { defs={} expr=v10438[1] }
    df      = { defs={} expr=v10439[1] }
    of      = { defs={} expr=v10440[1] }
    iopl0   = { defs={} expr=v10441[1] }
    iopl1   = { defs={} expr=v10442[1] }
    nt      = { defs={} expr=v10443[1] }
    ?15     = { defs={} expr=v10444[1] }
    rf      = { defs={} expr=v10445[1] }
    vm      = { defs={} expr=v10446[1] }
    ac      = { defs={} expr=v10447[1] }
    vif     = { defs={} expr=v10448[1] }
    vip     = { defs={} expr=v10449[1] }
    id      = { defs={} expr=v10450[1] }
    ?22     = { defs={} expr=v10451[1] }
    ?23     = { defs={} expr=v10452[1] }
    ?24     = { defs={} expr=v10453[1] }
    ?25     = { defs={} expr=v10454[1] }
    ?26     = { defs={} expr=v10455[1] }
    ?27     = { defs={} expr=v10456[1] }
    ?28     = { defs={} expr=v10457[1] }
    ?29     = { defs={} expr=v10458[1] }
    ?30     = { defs={} expr=v10459[1] }
    ?31     = { defs={} expr=v10460[1] }
    ip      = { defs={0x080485b0,0x080485b1} expr=0x080485b3[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v10419[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v10420[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v10419[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v10420[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v10419[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v10420[32]) }
      flags = { }
    address = { defs={0x080485b0} expr=(add[32] v10419[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v10420[32]) }
      flags = { }
init mem:
null state
null state
0x80485b3:push   ebx
registers:
    ax      = { v38857 }
    cx      = { v38858 }
    dx      = { v38859 }
    bx      = { v38860 }
    sp      = { v38861-0x8 }
    bp      = { v38861-0x4 }
    si      = { v38863 }
    di      = { v38864 }
    es      = { v38865 }
    cs      = { v38866 }
    ss      = { v38867 }
    ds      = { v38868 }
    fs      = { v38869 }
    gs      = { v38870 }
    cf      = { v38871 }
    ?1      = { v38872 }
    pf      = { v38873 }
    ?3      = { v38874 }
    af      = { v38875 }
    ?5      = { v38876 }
    zf      = { v38877 }
    sf      = { v38878 }
    tf      = { v38879 }
    if      = { v38880 }
    df      = { v38881 }
    of      = { v38882 }
    iopl0   = { v38883 }
    iopl1   = { v38884 }
    nt      = { v38885 }
    ?15     = { v38886 }
    rf      = { v38887 }
    vm      = { v38888 }
    ac      = { v38889 }
    vif     = { v38890 }
    vip     = { v38891 }
    id      = { v38892 }
    ?22     = { v38893 }
    ?23     = { v38894 }
    ?24     = { v38895 }
    ?25     = { v38896 }
    ?26     = { v38897 }
    ?27     = { v38898 }
    ?28     = { v38899 }
    ?29     = { v38900 }
    ?30     = { v38901 }
    ?31     = { v38902 }
    ip      = { 0x80485b4 }
memory:
    address = { v38861-0x4 }
      value = { v38862 }
      flags = { size=4 }
    address = { v38861-0x8 }
      value = { v38860 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v10415[32] }
    cx      = { defs={} expr=v10416[32] }
    dx      = { defs={} expr=v10417[32] }
    bx      = { defs={} expr=v10418[32] }
    sp      = { defs={0x080485b0,0x080485b3} expr=(add[32] (add[32] v10419[32] -4[32]) -4[32]) }
    bp      = { defs={0x080485b0,0x080485b1} expr=(add[32] v10419[32] -4[32]) }
    si      = { defs={} expr=v10421[32] }
    di      = { defs={} expr=v10422[32] }
    es      = { defs={} expr=v10423[16] }
    cs      = { defs={} expr=v10424[16] }
    ss      = { defs={} expr=v10425[16] }
    ds      = { defs={} expr=v10426[16] }
    fs      = { defs={} expr=v10427[16] }
    gs      = { defs={} expr=v10428[16] }
    cf      = { defs={} expr=v10429[1] }
    ?1      = { defs={} expr=v10430[1] }
    pf      = { defs={} expr=v10431[1] }
    ?3      = { defs={} expr=v10432[1] }
    af      = { defs={} expr=v10433[1] }
    ?5      = { defs={} expr=v10434[1] }
    zf      = { defs={} expr=v10435[1] }
    sf      = { defs={} expr=v10436[1] }
    tf      = { defs={} expr=v10437[1] }
    if      = { defs={} expr=v10438[1] }
    df      = { defs={} expr=v10439[1] }
    of      = { defs={} expr=v10440[1] }
    iopl0   = { defs={} expr=v10441[1] }
    iopl1   = { defs={} expr=v10442[1] }
    nt      = { defs={} expr=v10443[1] }
    ?15     = { defs={} expr=v10444[1] }
    rf      = { defs={} expr=v10445[1] }
    vm      = { defs={} expr=v10446[1] }
    ac      = { defs={} expr=v10447[1] }
    vif     = { defs={} expr=v10448[1] }
    vip     = { defs={} expr=v10449[1] }
    id      = { defs={} expr=v10450[1] }
    ?22     = { defs={} expr=v10451[1] }
    ?23     = { defs={} expr=v10452[1] }
    ?24     = { defs={} expr=v10453[1] }
    ?25     = { defs={} expr=v10454[1] }
    ?26     = { defs={} expr=v10455[1] }
    ?27     = { defs={} expr=v10456[1] }
    ?28     = { defs={} expr=v10457[1] }
    ?29     = { defs={} expr=v10458[1] }
    ?30     = { defs={} expr=v10459[1] }
    ?31     = { defs={} expr=v10460[1] }
    ip      = { defs={0x080485b0,0x080485b1,0x080485b3} expr=0x080485b4[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] v10419[32] -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v10418[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v10419[32] -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v10418[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v10419[32] -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v10418[32]) }
      flags = { }
    address = { defs={0x080485b0,0x080485b3} expr=(add[32] (add[32] v10419[32] -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v10418[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v10419[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v10420[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v10419[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v10420[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v10419[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v10420[32]) }
      flags = { }
    address = { defs={0x080485b0} expr=(add[32] v10419[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v10420[32]) }
      flags = { }
init mem:
null state
null state
0x80485b4:push   eax
registers:
    ax      = { v38857 }
    cx      = { v38858 }
    dx      = { v38859 }
    bx      = { v38860 }
    sp      = { v38861-0xc }
    bp      = { v38861-0x4 }
    si      = { v38863 }
    di      = { v38864 }
    es      = { v38865 }
    cs      = { v38866 }
    ss      = { v38867 }
    ds      = { v38868 }
    fs      = { v38869 }
    gs      = { v38870 }
    cf      = { v38871 }
    ?1      = { v38872 }
    pf      = { v38873 }
    ?3      = { v38874 }
    af      = { v38875 }
    ?5      = { v38876 }
    zf      = { v38877 }
    sf      = { v38878 }
    tf      = { v38879 }
    if      = { v38880 }
    df      = { v38881 }
    of      = { v38882 }
    iopl0   = { v38883 }
    iopl1   = { v38884 }
    nt      = { v38885 }
    ?15     = { v38886 }
    rf      = { v38887 }
    vm      = { v38888 }
    ac      = { v38889 }
    vif     = { v38890 }
    vip     = { v38891 }
    id      = { v38892 }
    ?22     = { v38893 }
    ?23     = { v38894 }
    ?24     = { v38895 }
    ?25     = { v38896 }
    ?26     = { v38897 }
    ?27     = { v38898 }
    ?28     = { v38899 }
    ?29     = { v38900 }
    ?30     = { v38901 }
    ?31     = { v38902 }
    ip      = { 0x80485b5 }
memory:
    address = { v38861-0x4 }
      value = { v38862 }
      flags = { size=4 }
    address = { v38861-0x8 }
      value = { v38860 }
      flags = { size=4 }
    address = { v38861-0xc }
      value = { v38857 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v10415[32] }
    cx      = { defs={} expr=v10416[32] }
    dx      = { defs={} expr=v10417[32] }
    bx      = { defs={} expr=v10418[32] }
    sp      = { defs={0x080485b0,0x080485b3,0x080485b4} expr=(add[32] (add[32] (add[32] v10419[32] -4[32]) -4[32]) -4[32]) }
    bp      = { defs={0x080485b0,0x080485b1} expr=(add[32] v10419[32] -4[32]) }
    si      = { defs={} expr=v10421[32] }
    di      = { defs={} expr=v10422[32] }
    es      = { defs={} expr=v10423[16] }
    cs      = { defs={} expr=v10424[16] }
    ss      = { defs={} expr=v10425[16] }
    ds      = { defs={} expr=v10426[16] }
    fs      = { defs={} expr=v10427[16] }
    gs      = { defs={} expr=v10428[16] }
    cf      = { defs={} expr=v10429[1] }
    ?1      = { defs={} expr=v10430[1] }
    pf      = { defs={} expr=v10431[1] }
    ?3      = { defs={} expr=v10432[1] }
    af      = { defs={} expr=v10433[1] }
    ?5      = { defs={} expr=v10434[1] }
    zf      = { defs={} expr=v10435[1] }
    sf      = { defs={} expr=v10436[1] }
    tf      = { defs={} expr=v10437[1] }
    if      = { defs={} expr=v10438[1] }
    df      = { defs={} expr=v10439[1] }
    of      = { defs={} expr=v10440[1] }
    iopl0   = { defs={} expr=v10441[1] }
    iopl1   = { defs={} expr=v10442[1] }
    nt      = { defs={} expr=v10443[1] }
    ?15     = { defs={} expr=v10444[1] }
    rf      = { defs={} expr=v10445[1] }
    vm      = { defs={} expr=v10446[1] }
    ac      = { defs={} expr=v10447[1] }
    vif     = { defs={} expr=v10448[1] }
    vip     = { defs={} expr=v10449[1] }
    id      = { defs={} expr=v10450[1] }
    ?22     = { defs={} expr=v10451[1] }
    ?23     = { defs={} expr=v10452[1] }
    ?24     = { defs={} expr=v10453[1] }
    ?25     = { defs={} expr=v10454[1] }
    ?26     = { defs={} expr=v10455[1] }
    ?27     = { defs={} expr=v10456[1] }
    ?28     = { defs={} expr=v10457[1] }
    ?29     = { defs={} expr=v10458[1] }
    ?30     = { defs={} expr=v10459[1] }
    ?31     = { defs={} expr=v10460[1] }
    ip      = { defs={0x080485b0,0x080485b1,0x080485b3,0x080485b4} expr=0x080485b5[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v10419[32] -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v10415[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v10419[32] -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v10415[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v10419[32] -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v10415[32]) }
      flags = { }
    address = { defs={0x080485b0,0x080485b3,0x080485b4} expr=(add[32] (add[32] (add[32] v10419[32] -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v10415[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v10419[32] -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v10418[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v10419[32] -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v10418[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v10419[32] -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v10418[32]) }
      flags = { }
    address = { defs={0x080485b0,0x080485b3} expr=(add[32] (add[32] v10419[32] -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v10418[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v10419[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v10420[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v10419[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v10420[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v10419[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v10420[32]) }
      flags = { }
    address = { defs={0x080485b0} expr=(add[32] v10419[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v10420[32]) }
      flags = { }
init mem:
null state
null state
0x80485b5:call   0x080485ba<<Insn>>
registers:
    ax      = { v38857 }
    cx      = { v38858 }
    dx      = { v38859 }
    bx      = { v38860 }
    sp      = { v38861-0x10 }
    bp      = { v38861-0x4 }
    si      = { v38863 }
    di      = { v38864 }
    es      = { v38865 }
    cs      = { v38866 }
    ss      = { v38867 }
    ds      = { v38868 }
    fs      = { v38869 }
    gs      = { v38870 }
    cf      = { v38871 }
    ?1      = { v38872 }
    pf      = { v38873 }
    ?3      = { v38874 }
    af      = { v38875 }
    ?5      = { v38876 }
    zf      = { v38877 }
    sf      = { v38878 }
    tf      = { v38879 }
    if      = { v38880 }
    df      = { v38881 }
    of      = { v38882 }
    iopl0   = { v38883 }
    iopl1   = { v38884 }
    nt      = { v38885 }
    ?15     = { v38886 }
    rf      = { v38887 }
    vm      = { v38888 }
    ac      = { v38889 }
    vif     = { v38890 }
    vip     = { v38891 }
    id      = { v38892 }
    ?22     = { v38893 }
    ?23     = { v38894 }
    ?24     = { v38895 }
    ?25     = { v38896 }
    ?26     = { v38897 }
    ?27     = { v38898 }
    ?28     = { v38899 }
    ?29     = { v38900 }
    ?30     = { v38901 }
    ?31     = { v38902 }
    ip      = { 0x80485ba }
memory:
    address = { v38861-0x4 }
      value = { v38862 }
      flags = { size=4 }
    address = { v38861-0x8 }
      value = { v38860 }
      flags = { size=4 }
    address = { v38861-0xc }
      value = { v38857 }
      flags = { size=4 }
    address = { v38861-0x10 }
      value = { 0x80485ba }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v10415[32] }
    cx      = { defs={} expr=v10416[32] }
    dx      = { defs={} expr=v10417[32] }
    bx      = { defs={} expr=v10418[32] }
    sp      = { defs={0x080485b0,0x080485b3,0x080485b4,0x080485b5} expr=(add[32] (add[32] (add[32] (add[32] v10419[32] -4[32]) -4[32]) -4[32]) -4[32]) }
    bp      = { defs={0x080485b0,0x080485b1} expr=(add[32] v10419[32] -4[32]) }
    si      = { defs={} expr=v10421[32] }
    di      = { defs={} expr=v10422[32] }
    es      = { defs={} expr=v10423[16] }
    cs      = { defs={} expr=v10424[16] }
    ss      = { defs={} expr=v10425[16] }
    ds      = { defs={} expr=v10426[16] }
    fs      = { defs={} expr=v10427[16] }
    gs      = { defs={} expr=v10428[16] }
    cf      = { defs={} expr=v10429[1] }
    ?1      = { defs={} expr=v10430[1] }
    pf      = { defs={} expr=v10431[1] }
    ?3      = { defs={} expr=v10432[1] }
    af      = { defs={} expr=v10433[1] }
    ?5      = { defs={} expr=v10434[1] }
    zf      = { defs={} expr=v10435[1] }
    sf      = { defs={} expr=v10436[1] }
    tf      = { defs={} expr=v10437[1] }
    if      = { defs={} expr=v10438[1] }
    df      = { defs={} expr=v10439[1] }
    of      = { defs={} expr=v10440[1] }
    iopl0   = { defs={} expr=v10441[1] }
    iopl1   = { defs={} expr=v10442[1] }
    nt      = { defs={} expr=v10443[1] }
    ?15     = { defs={} expr=v10444[1] }
    rf      = { defs={} expr=v10445[1] }
    vm      = { defs={} expr=v10446[1] }
    ac      = { defs={} expr=v10447[1] }
    vif     = { defs={} expr=v10448[1] }
    vip     = { defs={} expr=v10449[1] }
    id      = { defs={} expr=v10450[1] }
    ?22     = { defs={} expr=v10451[1] }
    ?23     = { defs={} expr=v10452[1] }
    ?24     = { defs={} expr=v10453[1] }
    ?25     = { defs={} expr=v10454[1] }
    ?26     = { defs={} expr=v10455[1] }
    ?27     = { defs={} expr=v10456[1] }
    ?28     = { defs={} expr=v10457[1] }
    ?29     = { defs={} expr=v10458[1] }
    ?30     = { defs={} expr=v10459[1] }
    ?31     = { defs={} expr=v10460[1] }
    ip      = { defs={0x080485b5} expr=0x080485ba[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v10419[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v10419[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v10419[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=-123[8] }
      flags = { }
    address = { defs={0x080485b0,0x080485b3,0x080485b4,0x080485b5} expr=(add[32] (add[32] (add[32] (add[32] v10419[32] -4[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=-70[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v10419[32] -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v10415[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v10419[32] -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v10415[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v10419[32] -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v10415[32]) }
      flags = { }
    address = { defs={0x080485b0,0x080485b3,0x080485b4} expr=(add[32] (add[32] (add[32] v10419[32] -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v10415[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v10419[32] -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v10418[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v10419[32] -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v10418[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v10419[32] -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v10418[32]) }
      flags = { }
    address = { defs={0x080485b0,0x080485b3} expr=(add[32] (add[32] v10419[32] -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v10418[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v10419[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v10420[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v10419[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v10420[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v10419[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v10420[32]) }
      flags = { }
    address = { defs={0x080485b0} expr=(add[32] v10419[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v10420[32]) }
      flags = { }
init mem:
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80485ba:pop    ebx
registers:
    ax      = { v38994 }
    cx      = { v38995 }
    dx      = { v38996 }
    bx      = { v39049 }
    sp      = { v38998+0x4 }
    bp      = { v38999 }
    si      = { v39000 }
    di      = { v39001 }
    es      = { v39002 }
    cs      = { v39003 }
    ss      = { v39004 }
    ds      = { v39005 }
    fs      = { v39006 }
    gs      = { v39007 }
    cf      = { v39008 }
    ?1      = { v39009 }
    pf      = { v39010 }
    ?3      = { v39011 }
    af      = { v39012 }
    ?5      = { v39013 }
    zf      = { v39014 }
    sf      = { v39015 }
    tf      = { v39016 }
    if      = { v39017 }
    df      = { v39018 }
    of      = { v39019 }
    iopl0   = { v39020 }
    iopl1   = { v39021 }
    nt      = { v39022 }
    ?15     = { v39023 }
    rf      = { v39024 }
    vm      = { v39025 }
    ac      = { v39026 }
    vif     = { v39027 }
    vip     = { v39028 }
    id      = { v39029 }
    ?22     = { v39030 }
    ?23     = { v39031 }
    ?24     = { v39032 }
    ?25     = { v39033 }
    ?26     = { v39034 }
    ?27     = { v39035 }
    ?28     = { v39036 }
    ?29     = { v39037 }
    ?30     = { v39038 }
    ?31     = { v39039 }
    ip      = { 0x80485bb }
memory:
    address = { v38998 }
      value = { v39049 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={} expr=v10591[32] }
    cx      = { defs={} expr=v10592[32] }
    dx      = { defs={} expr=v10593[32] }
    bx      = { defs={0x080485ba} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10655[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10656[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10657[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10658[8]))) }
    sp      = { defs={0x080485ba} expr=(add[32] v10595[32] 4[32]) }
    bp      = { defs={} expr=v10596[32] }
    si      = { defs={} expr=v10597[32] }
    di      = { defs={} expr=v10598[32] }
    es      = { defs={} expr=v10599[16] }
    cs      = { defs={} expr=v10600[16] }
    ss      = { defs={} expr=v10601[16] }
    ds      = { defs={} expr=v10602[16] }
    fs      = { defs={} expr=v10603[16] }
    gs      = { defs={} expr=v10604[16] }
    cf      = { defs={} expr=v10605[1] }
    ?1      = { defs={} expr=v10606[1] }
    pf      = { defs={} expr=v10607[1] }
    ?3      = { defs={} expr=v10608[1] }
    af      = { defs={} expr=v10609[1] }
    ?5      = { defs={} expr=v10610[1] }
    zf      = { defs={} expr=v10611[1] }
    sf      = { defs={} expr=v10612[1] }
    tf      = { defs={} expr=v10613[1] }
    if      = { defs={} expr=v10614[1] }
    df      = { defs={} expr=v10615[1] }
    of      = { defs={} expr=v10616[1] }
    iopl0   = { defs={} expr=v10617[1] }
    iopl1   = { defs={} expr=v10618[1] }
    nt      = { defs={} expr=v10619[1] }
    ?15     = { defs={} expr=v10620[1] }
    rf      = { defs={} expr=v10621[1] }
    vm      = { defs={} expr=v10622[1] }
    ac      = { defs={} expr=v10623[1] }
    vif     = { defs={} expr=v10624[1] }
    vip     = { defs={} expr=v10625[1] }
    id      = { defs={} expr=v10626[1] }
    ?22     = { defs={} expr=v10627[1] }
    ?23     = { defs={} expr=v10628[1] }
    ?24     = { defs={} expr=v10629[1] }
    ?25     = { defs={} expr=v10630[1] }
    ?26     = { defs={} expr=v10631[1] }
    ?27     = { defs={} expr=v10632[1] }
    ?28     = { defs={} expr=v10633[1] }
    ?29     = { defs={} expr=v10634[1] }
    ?30     = { defs={} expr=v10635[1] }
    ?31     = { defs={} expr=v10636[1] }
    ip      = { defs={0x080485ba} expr=0x080485bb[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] v10595[32] 3[32]) }
      value = { defs={} expr=v10658[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v10595[32] 2[32]) }
      value = { defs={} expr=v10657[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v10595[32] 1[32]) }
      value = { defs={} expr=v10656[8] }
      flags = { rdonly }
    address = { defs={0x080485ba} expr=v10595[32] }
      value = { defs={} expr=v10655[8] }
      flags = { rdonly }
null state
null state
0x80485bb:add    ebx, 0x0000110e
registers:
    ax      = { v38994 }
    cx      = { v38995 }
    dx      = { v38996 }
    bx      = { v39049+0x110e }
    sp      = { v38998+0x4 }
    bp      = { v38999 }
    si      = { v39000 }
    di      = { v39001 }
    es      = { v39002 }
    cs      = { v39003 }
    ss      = { v39004 }
    ds      = { v39005 }
    fs      = { v39006 }
    gs      = { v39007 }
    cf      = { v39098 }
    ?1      = { v39009 }
    pf      = { -v39089+0x1 }
    ?3      = { v39011 }
    af      = { v39096 }
    ?5      = { v39013 }
    zf      = { v39094 }
    sf      = { v39092 }
    tf      = { v39016 }
    if      = { v39017 }
    df      = { v39018 }
    of      = { v39104 }
    iopl0   = { v39020 }
    iopl1   = { v39021 }
    nt      = { v39022 }
    ?15     = { v39023 }
    rf      = { v39024 }
    vm      = { v39025 }
    ac      = { v39026 }
    vif     = { v39027 }
    vip     = { v39028 }
    id      = { v39029 }
    ?22     = { v39030 }
    ?23     = { v39031 }
    ?24     = { v39032 }
    ?25     = { v39033 }
    ?26     = { v39034 }
    ?27     = { v39035 }
    ?28     = { v39036 }
    ?29     = { v39037 }
    ?30     = { v39038 }
    ?31     = { v39039 }
    ip      = { 0x80485c1 }
memory:
    address = { v38998 }
      value = { v39049 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={} expr=v10591[32] }
    cx      = { defs={} expr=v10592[32] }
    dx      = { defs={} expr=v10593[32] }
    bx      = { defs={0x080485ba,0x080485bb} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10655[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10656[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10657[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10658[8]))) 4366[32]) }
    sp      = { defs={0x080485ba} expr=(add[32] v10595[32] 4[32]) }
    bp      = { defs={} expr=v10596[32] }
    si      = { defs={} expr=v10597[32] }
    di      = { defs={} expr=v10598[32] }
    es      = { defs={} expr=v10599[16] }
    cs      = { defs={} expr=v10600[16] }
    ss      = { defs={} expr=v10601[16] }
    ds      = { defs={} expr=v10602[16] }
    fs      = { defs={} expr=v10603[16] }
    gs      = { defs={} expr=v10604[16] }
    cf      = { defs={0x080485ba,0x080485bb} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10655[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10656[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10657[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10658[8])))) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10655[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10656[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10657[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10658[8])))) 4366[33]))))) }
    ?1      = { defs={} expr=v10606[1] }
    pf      = { defs={0x080485ba,0x080485bb} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10655[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10656[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10657[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10658[8]))) 4366[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10655[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10656[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10657[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10658[8]))) 4366[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10655[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10656[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10657[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10658[8]))) 4366[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10655[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10656[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10657[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10658[8]))) 4366[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10655[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10656[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10657[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10658[8]))) 4366[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10655[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10656[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10657[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10658[8]))) 4366[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10655[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10656[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10657[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10658[8]))) 4366[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10655[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10656[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10657[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10658[8]))) 4366[32]))))))) }
    ?3      = { defs={} expr=v10608[1] }
    af      = { defs={0x080485ba,0x080485bb} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10655[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10656[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10657[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10658[8])))) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10655[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10656[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10657[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10658[8])))) 4366[33]))))) }
    ?5      = { defs={} expr=v10610[1] }
    zf      = { defs={0x080485ba,0x080485bb} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10655[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10656[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10657[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10658[8]))) 4366[32])) }
    sf      = { defs={0x080485ba,0x080485bb} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10655[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10656[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10657[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10658[8]))) 4366[32])) }
    tf      = { defs={} expr=v10613[1] }
    if      = { defs={} expr=v10614[1] }
    df      = { defs={} expr=v10615[1] }
    of      = { defs={0x080485ba,0x080485bb} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10655[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10656[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10657[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10658[8])))) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10655[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10656[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10657[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10658[8])))) 4366[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10655[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10656[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10657[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10658[8])))) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10655[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10656[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10657[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10658[8])))) 4366[33])))))) }
    iopl0   = { defs={} expr=v10617[1] }
    iopl1   = { defs={} expr=v10618[1] }
    nt      = { defs={} expr=v10619[1] }
    ?15     = { defs={} expr=v10620[1] }
    rf      = { defs={} expr=v10621[1] }
    vm      = { defs={} expr=v10622[1] }
    ac      = { defs={} expr=v10623[1] }
    vif     = { defs={} expr=v10624[1] }
    vip     = { defs={} expr=v10625[1] }
    id      = { defs={} expr=v10626[1] }
    ?22     = { defs={} expr=v10627[1] }
    ?23     = { defs={} expr=v10628[1] }
    ?24     = { defs={} expr=v10629[1] }
    ?25     = { defs={} expr=v10630[1] }
    ?26     = { defs={} expr=v10631[1] }
    ?27     = { defs={} expr=v10632[1] }
    ?28     = { defs={} expr=v10633[1] }
    ?29     = { defs={} expr=v10634[1] }
    ?30     = { defs={} expr=v10635[1] }
    ?31     = { defs={} expr=v10636[1] }
    ip      = { defs={0x080485ba,0x080485bb} expr=0x080485c1[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] v10595[32] 3[32]) }
      value = { defs={} expr=v10658[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v10595[32] 2[32]) }
      value = { defs={} expr=v10657[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v10595[32] 1[32]) }
      value = { defs={} expr=v10656[8] }
      flags = { rdonly }
    address = { defs={0x080485ba} expr=v10595[32] }
      value = { defs={} expr=v10655[8] }
      flags = { rdonly }
null state
null state
0x80485c1:call   0x08048390<__do_global_dtors_aux>
registers:
    ax      = { v38994 }
    cx      = { v38995 }
    dx      = { v38996 }
    bx      = { v39049+0x110e }
    sp      = { v38998 }
    bp      = { v38999 }
    si      = { v39000 }
    di      = { v39001 }
    es      = { v39002 }
    cs      = { v39003 }
    ss      = { v39004 }
    ds      = { v39005 }
    fs      = { v39006 }
    gs      = { v39007 }
    cf      = { v39098 }
    ?1      = { v39009 }
    pf      = { -v39089+0x1 }
    ?3      = { v39011 }
    af      = { v39096 }
    ?5      = { v39013 }
    zf      = { v39094 }
    sf      = { v39092 }
    tf      = { v39016 }
    if      = { v39017 }
    df      = { v39018 }
    of      = { v39104 }
    iopl0   = { v39020 }
    iopl1   = { v39021 }
    nt      = { v39022 }
    ?15     = { v39023 }
    rf      = { v39024 }
    vm      = { v39025 }
    ac      = { v39026 }
    vif     = { v39027 }
    vip     = { v39028 }
    id      = { v39029 }
    ?22     = { v39030 }
    ?23     = { v39031 }
    ?24     = { v39032 }
    ?25     = { v39033 }
    ?26     = { v39034 }
    ?27     = { v39035 }
    ?28     = { v39036 }
    ?29     = { v39037 }
    ?30     = { v39038 }
    ?31     = { v39039 }
    ip      = { 0x8048390 }
memory:
    address = { v38998 }
      value = { 0x80485c6 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v10591[32] }
    cx      = { defs={} expr=v10592[32] }
    dx      = { defs={} expr=v10593[32] }
    bx      = { defs={0x080485ba,0x080485bb} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10655[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10656[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10657[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10658[8]))) 4366[32]) }
    sp      = { defs={0x080485ba,0x080485c1} expr=(add[32] (add[32] v10595[32] 4[32]) -4[32]) }
    bp      = { defs={} expr=v10596[32] }
    si      = { defs={} expr=v10597[32] }
    di      = { defs={} expr=v10598[32] }
    es      = { defs={} expr=v10599[16] }
    cs      = { defs={} expr=v10600[16] }
    ss      = { defs={} expr=v10601[16] }
    ds      = { defs={} expr=v10602[16] }
    fs      = { defs={} expr=v10603[16] }
    gs      = { defs={} expr=v10604[16] }
    cf      = { defs={0x080485ba,0x080485bb} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10655[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10656[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10657[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10658[8])))) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10655[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10656[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10657[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10658[8])))) 4366[33]))))) }
    ?1      = { defs={} expr=v10606[1] }
    pf      = { defs={0x080485ba,0x080485bb} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10655[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10656[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10657[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10658[8]))) 4366[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10655[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10656[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10657[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10658[8]))) 4366[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10655[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10656[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10657[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10658[8]))) 4366[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10655[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10656[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10657[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10658[8]))) 4366[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10655[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10656[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10657[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10658[8]))) 4366[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10655[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10656[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10657[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10658[8]))) 4366[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10655[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10656[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10657[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10658[8]))) 4366[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10655[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10656[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10657[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10658[8]))) 4366[32]))))))) }
    ?3      = { defs={} expr=v10608[1] }
    af      = { defs={0x080485ba,0x080485bb} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10655[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10656[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10657[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10658[8])))) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10655[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10656[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10657[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10658[8])))) 4366[33]))))) }
    ?5      = { defs={} expr=v10610[1] }
    zf      = { defs={0x080485ba,0x080485bb} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10655[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10656[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10657[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10658[8]))) 4366[32])) }
    sf      = { defs={0x080485ba,0x080485bb} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10655[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10656[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10657[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10658[8]))) 4366[32])) }
    tf      = { defs={} expr=v10613[1] }
    if      = { defs={} expr=v10614[1] }
    df      = { defs={} expr=v10615[1] }
    of      = { defs={0x080485ba,0x080485bb} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10655[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10656[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10657[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10658[8])))) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10655[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10656[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10657[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10658[8])))) 4366[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10655[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10656[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10657[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10658[8])))) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10655[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10656[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10657[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10658[8])))) 4366[33])))))) }
    iopl0   = { defs={} expr=v10617[1] }
    iopl1   = { defs={} expr=v10618[1] }
    nt      = { defs={} expr=v10619[1] }
    ?15     = { defs={} expr=v10620[1] }
    rf      = { defs={} expr=v10621[1] }
    vm      = { defs={} expr=v10622[1] }
    ac      = { defs={} expr=v10623[1] }
    vif     = { defs={} expr=v10624[1] }
    vip     = { defs={} expr=v10625[1] }
    id      = { defs={} expr=v10626[1] }
    ?22     = { defs={} expr=v10627[1] }
    ?23     = { defs={} expr=v10628[1] }
    ?24     = { defs={} expr=v10629[1] }
    ?25     = { defs={} expr=v10630[1] }
    ?26     = { defs={} expr=v10631[1] }
    ?27     = { defs={} expr=v10632[1] }
    ?28     = { defs={} expr=v10633[1] }
    ?29     = { defs={} expr=v10634[1] }
    ?30     = { defs={} expr=v10635[1] }
    ?31     = { defs={} expr=v10636[1] }
    ip      = { defs={0x080485c1} expr=0x08048390[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] v10595[32] 4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v10595[32] 4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v10595[32] 4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=-123[8] }
      flags = { }
    address = { defs={0x080485ba,0x080485c1} expr=(add[32] (add[32] v10595[32] 4[32]) -4[32]) }
      value = { defs={} expr=-58[8] }
      flags = { }
init mem:
    address = { defs={} expr=(add[32] v10595[32] 3[32]) }
      value = { defs={} expr=v10658[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v10595[32] 2[32]) }
      value = { defs={} expr=v10657[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v10595[32] 1[32]) }
      value = { defs={} expr=v10656[8] }
      flags = { rdonly }
    address = { defs={0x080485ba} expr=v10595[32] }
      value = { defs={} expr=v10655[8] }
      flags = { rdonly }
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80485c6:pop    eax
registers:
    ax      = { v39219 }
    cx      = { v39165 }
    dx      = { v39166 }
    bx      = { v39167 }
    sp      = { v39168+0x4 }
    bp      = { v39169 }
    si      = { v39170 }
    di      = { v39171 }
    es      = { v39172 }
    cs      = { v39173 }
    ss      = { v39174 }
    ds      = { v39175 }
    fs      = { v39176 }
    gs      = { v39177 }
    cf      = { v39178 }
    ?1      = { v39179 }
    pf      = { v39180 }
    ?3      = { v39181 }
    af      = { v39182 }
    ?5      = { v39183 }
    zf      = { v39184 }
    sf      = { v39185 }
    tf      = { v39186 }
    if      = { v39187 }
    df      = { v39188 }
    of      = { v39189 }
    iopl0   = { v39190 }
    iopl1   = { v39191 }
    nt      = { v39192 }
    ?15     = { v39193 }
    rf      = { v39194 }
    vm      = { v39195 }
    ac      = { v39196 }
    vif     = { v39197 }
    vip     = { v39198 }
    id      = { v39199 }
    ?22     = { v39200 }
    ?23     = { v39201 }
    ?24     = { v39202 }
    ?25     = { v39203 }
    ?26     = { v39204 }
    ?27     = { v39205 }
    ?28     = { v39206 }
    ?29     = { v39207 }
    ?30     = { v39208 }
    ?31     = { v39209 }
    ip      = { 0x80485c7 }
memory:
    address = { v39168 }
      value = { v39219 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x080485c6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10878[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10879[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10880[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10881[8]))) }
    cx      = { defs={} expr=v10815[32] }
    dx      = { defs={} expr=v10816[32] }
    bx      = { defs={} expr=v10817[32] }
    sp      = { defs={0x080485c6} expr=(add[32] v10818[32] 4[32]) }
    bp      = { defs={} expr=v10819[32] }
    si      = { defs={} expr=v10820[32] }
    di      = { defs={} expr=v10821[32] }
    es      = { defs={} expr=v10822[16] }
    cs      = { defs={} expr=v10823[16] }
    ss      = { defs={} expr=v10824[16] }
    ds      = { defs={} expr=v10825[16] }
    fs      = { defs={} expr=v10826[16] }
    gs      = { defs={} expr=v10827[16] }
    cf      = { defs={} expr=v10828[1] }
    ?1      = { defs={} expr=v10829[1] }
    pf      = { defs={} expr=v10830[1] }
    ?3      = { defs={} expr=v10831[1] }
    af      = { defs={} expr=v10832[1] }
    ?5      = { defs={} expr=v10833[1] }
    zf      = { defs={} expr=v10834[1] }
    sf      = { defs={} expr=v10835[1] }
    tf      = { defs={} expr=v10836[1] }
    if      = { defs={} expr=v10837[1] }
    df      = { defs={} expr=v10838[1] }
    of      = { defs={} expr=v10839[1] }
    iopl0   = { defs={} expr=v10840[1] }
    iopl1   = { defs={} expr=v10841[1] }
    nt      = { defs={} expr=v10842[1] }
    ?15     = { defs={} expr=v10843[1] }
    rf      = { defs={} expr=v10844[1] }
    vm      = { defs={} expr=v10845[1] }
    ac      = { defs={} expr=v10846[1] }
    vif     = { defs={} expr=v10847[1] }
    vip     = { defs={} expr=v10848[1] }
    id      = { defs={} expr=v10849[1] }
    ?22     = { defs={} expr=v10850[1] }
    ?23     = { defs={} expr=v10851[1] }
    ?24     = { defs={} expr=v10852[1] }
    ?25     = { defs={} expr=v10853[1] }
    ?26     = { defs={} expr=v10854[1] }
    ?27     = { defs={} expr=v10855[1] }
    ?28     = { defs={} expr=v10856[1] }
    ?29     = { defs={} expr=v10857[1] }
    ?30     = { defs={} expr=v10858[1] }
    ?31     = { defs={} expr=v10859[1] }
    ip      = { defs={0x080485c6} expr=0x080485c7[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] v10818[32] 3[32]) }
      value = { defs={} expr=v10881[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v10818[32] 2[32]) }
      value = { defs={} expr=v10880[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v10818[32] 1[32]) }
      value = { defs={} expr=v10879[8] }
      flags = { rdonly }
    address = { defs={0x080485c6} expr=v10818[32] }
      value = { defs={} expr=v10878[8] }
      flags = { rdonly }
null state
null state
0x80485c7:pop    ebx
registers:
    ax      = { v39219 }
    cx      = { v39165 }
    dx      = { v39166 }
    bx      = { v39229 }
    sp      = { v39168+0x8 }
    bp      = { v39169 }
    si      = { v39170 }
    di      = { v39171 }
    es      = { v39172 }
    cs      = { v39173 }
    ss      = { v39174 }
    ds      = { v39175 }
    fs      = { v39176 }
    gs      = { v39177 }
    cf      = { v39178 }
    ?1      = { v39179 }
    pf      = { v39180 }
    ?3      = { v39181 }
    af      = { v39182 }
    ?5      = { v39183 }
    zf      = { v39184 }
    sf      = { v39185 }
    tf      = { v39186 }
    if      = { v39187 }
    df      = { v39188 }
    of      = { v39189 }
    iopl0   = { v39190 }
    iopl1   = { v39191 }
    nt      = { v39192 }
    ?15     = { v39193 }
    rf      = { v39194 }
    vm      = { v39195 }
    ac      = { v39196 }
    vif     = { v39197 }
    vip     = { v39198 }
    id      = { v39199 }
    ?22     = { v39200 }
    ?23     = { v39201 }
    ?24     = { v39202 }
    ?25     = { v39203 }
    ?26     = { v39204 }
    ?27     = { v39205 }
    ?28     = { v39206 }
    ?29     = { v39207 }
    ?30     = { v39208 }
    ?31     = { v39209 }
    ip      = { 0x80485c8 }
memory:
    address = { v39168 }
      value = { v39219 }
      flags = { size=4; read-only }
    address = { v39168+0x4 }
      value = { v39229 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x080485c6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10878[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10879[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10880[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10881[8]))) }
    cx      = { defs={} expr=v10815[32] }
    dx      = { defs={} expr=v10816[32] }
    bx      = { defs={0x080485c7} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10905[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10906[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10907[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10908[8]))) }
    sp      = { defs={0x080485c6,0x080485c7} expr=(add[32] (add[32] v10818[32] 4[32]) 4[32]) }
    bp      = { defs={} expr=v10819[32] }
    si      = { defs={} expr=v10820[32] }
    di      = { defs={} expr=v10821[32] }
    es      = { defs={} expr=v10822[16] }
    cs      = { defs={} expr=v10823[16] }
    ss      = { defs={} expr=v10824[16] }
    ds      = { defs={} expr=v10825[16] }
    fs      = { defs={} expr=v10826[16] }
    gs      = { defs={} expr=v10827[16] }
    cf      = { defs={} expr=v10828[1] }
    ?1      = { defs={} expr=v10829[1] }
    pf      = { defs={} expr=v10830[1] }
    ?3      = { defs={} expr=v10831[1] }
    af      = { defs={} expr=v10832[1] }
    ?5      = { defs={} expr=v10833[1] }
    zf      = { defs={} expr=v10834[1] }
    sf      = { defs={} expr=v10835[1] }
    tf      = { defs={} expr=v10836[1] }
    if      = { defs={} expr=v10837[1] }
    df      = { defs={} expr=v10838[1] }
    of      = { defs={} expr=v10839[1] }
    iopl0   = { defs={} expr=v10840[1] }
    iopl1   = { defs={} expr=v10841[1] }
    nt      = { defs={} expr=v10842[1] }
    ?15     = { defs={} expr=v10843[1] }
    rf      = { defs={} expr=v10844[1] }
    vm      = { defs={} expr=v10845[1] }
    ac      = { defs={} expr=v10846[1] }
    vif     = { defs={} expr=v10847[1] }
    vip     = { defs={} expr=v10848[1] }
    id      = { defs={} expr=v10849[1] }
    ?22     = { defs={} expr=v10850[1] }
    ?23     = { defs={} expr=v10851[1] }
    ?24     = { defs={} expr=v10852[1] }
    ?25     = { defs={} expr=v10853[1] }
    ?26     = { defs={} expr=v10854[1] }
    ?27     = { defs={} expr=v10855[1] }
    ?28     = { defs={} expr=v10856[1] }
    ?29     = { defs={} expr=v10857[1] }
    ?30     = { defs={} expr=v10858[1] }
    ?31     = { defs={} expr=v10859[1] }
    ip      = { defs={0x080485c6,0x080485c7} expr=0x080485c8[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] (add[32] v10818[32] 4[32]) 3[32]) }
      value = { defs={} expr=v10908[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v10818[32] 4[32]) 2[32]) }
      value = { defs={} expr=v10907[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v10818[32] 4[32]) 1[32]) }
      value = { defs={} expr=v10906[8] }
      flags = { rdonly }
    address = { defs={0x080485c6,0x080485c7} expr=(add[32] v10818[32] 4[32]) }
      value = { defs={} expr=v10905[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v10818[32] 3[32]) }
      value = { defs={} expr=v10881[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v10818[32] 2[32]) }
      value = { defs={} expr=v10880[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v10818[32] 1[32]) }
      value = { defs={} expr=v10879[8] }
      flags = { rdonly }
    address = { defs={0x080485c6} expr=v10818[32] }
      value = { defs={} expr=v10878[8] }
      flags = { rdonly }
null state
null state
0x80485c8:leave  
registers:
    ax      = { v39219 }
    cx      = { v39165 }
    dx      = { v39166 }
    bx      = { v39229 }
    sp      = { v39169+0x4 }
    bp      = { v39240 }
    si      = { v39170 }
    di      = { v39171 }
    es      = { v39172 }
    cs      = { v39173 }
    ss      = { v39174 }
    ds      = { v39175 }
    fs      = { v39176 }
    gs      = { v39177 }
    cf      = { v39178 }
    ?1      = { v39179 }
    pf      = { v39180 }
    ?3      = { v39181 }
    af      = { v39182 }
    ?5      = { v39183 }
    zf      = { v39184 }
    sf      = { v39185 }
    tf      = { v39186 }
    if      = { v39187 }
    df      = { v39188 }
    of      = { v39189 }
    iopl0   = { v39190 }
    iopl1   = { v39191 }
    nt      = { v39192 }
    ?15     = { v39193 }
    rf      = { v39194 }
    vm      = { v39195 }
    ac      = { v39196 }
    vif     = { v39197 }
    vip     = { v39198 }
    id      = { v39199 }
    ?22     = { v39200 }
    ?23     = { v39201 }
    ?24     = { v39202 }
    ?25     = { v39203 }
    ?26     = { v39204 }
    ?27     = { v39205 }
    ?28     = { v39206 }
    ?29     = { v39207 }
    ?30     = { v39208 }
    ?31     = { v39209 }
    ip      = { 0x80485c9 }
memory:
    address = { v39168 }
      value = { v39219 }
      flags = { size=4; read-only }
    address = { v39168+0x4 }
      value = { v39229 }
      flags = { size=4; read-only }
    address = { v39169 }
      value = { v39240 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x080485c6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10878[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10879[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10880[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10881[8]))) }
    cx      = { defs={} expr=v10815[32] }
    dx      = { defs={} expr=v10816[32] }
    bx      = { defs={0x080485c7} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10905[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10906[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10907[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10908[8]))) }
    sp      = { defs={0x080485c8} expr=(add[32] v10819[32] 4[32]) }
    bp      = { defs={0x080485c8} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10934[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10935[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10936[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10937[8]))) }
    si      = { defs={} expr=v10820[32] }
    di      = { defs={} expr=v10821[32] }
    es      = { defs={} expr=v10822[16] }
    cs      = { defs={} expr=v10823[16] }
    ss      = { defs={} expr=v10824[16] }
    ds      = { defs={} expr=v10825[16] }
    fs      = { defs={} expr=v10826[16] }
    gs      = { defs={} expr=v10827[16] }
    cf      = { defs={} expr=v10828[1] }
    ?1      = { defs={} expr=v10829[1] }
    pf      = { defs={} expr=v10830[1] }
    ?3      = { defs={} expr=v10831[1] }
    af      = { defs={} expr=v10832[1] }
    ?5      = { defs={} expr=v10833[1] }
    zf      = { defs={} expr=v10834[1] }
    sf      = { defs={} expr=v10835[1] }
    tf      = { defs={} expr=v10836[1] }
    if      = { defs={} expr=v10837[1] }
    df      = { defs={} expr=v10838[1] }
    of      = { defs={} expr=v10839[1] }
    iopl0   = { defs={} expr=v10840[1] }
    iopl1   = { defs={} expr=v10841[1] }
    nt      = { defs={} expr=v10842[1] }
    ?15     = { defs={} expr=v10843[1] }
    rf      = { defs={} expr=v10844[1] }
    vm      = { defs={} expr=v10845[1] }
    ac      = { defs={} expr=v10846[1] }
    vif     = { defs={} expr=v10847[1] }
    vip     = { defs={} expr=v10848[1] }
    id      = { defs={} expr=v10849[1] }
    ?22     = { defs={} expr=v10850[1] }
    ?23     = { defs={} expr=v10851[1] }
    ?24     = { defs={} expr=v10852[1] }
    ?25     = { defs={} expr=v10853[1] }
    ?26     = { defs={} expr=v10854[1] }
    ?27     = { defs={} expr=v10855[1] }
    ?28     = { defs={} expr=v10856[1] }
    ?29     = { defs={} expr=v10857[1] }
    ?30     = { defs={} expr=v10858[1] }
    ?31     = { defs={} expr=v10859[1] }
    ip      = { defs={0x080485c6,0x080485c7,0x080485c8} expr=0x080485c9[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] v10819[32] 3[32]) }
      value = { defs={} expr=v10937[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v10819[32] 2[32]) }
      value = { defs={} expr=v10936[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v10819[32] 1[32]) }
      value = { defs={} expr=v10935[8] }
      flags = { rdonly }
    address = { defs={0x080485c8} expr=v10819[32] }
      value = { defs={} expr=v10934[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v10818[32] 4[32]) 3[32]) }
      value = { defs={} expr=v10908[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v10818[32] 4[32]) 2[32]) }
      value = { defs={} expr=v10907[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v10818[32] 4[32]) 1[32]) }
      value = { defs={} expr=v10906[8] }
      flags = { rdonly }
    address = { defs={0x080485c6,0x080485c7} expr=(add[32] v10818[32] 4[32]) }
      value = { defs={} expr=v10905[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v10818[32] 3[32]) }
      value = { defs={} expr=v10881[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v10818[32] 2[32]) }
      value = { defs={} expr=v10880[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v10818[32] 1[32]) }
      value = { defs={} expr=v10879[8] }
      flags = { rdonly }
    address = { defs={0x080485c6} expr=v10818[32] }
      value = { defs={} expr=v10878[8] }
      flags = { rdonly }
null state
null state
0x80485c9:ret    
registers:
    ax      = { v39219 }
    cx      = { v39165 }
    dx      = { v39166 }
    bx      = { v39229 }
    sp      = { v39169+0x8 }
    bp      = { v39240 }
    si      = { v39170 }
    di      = { v39171 }
    es      = { v39172 }
    cs      = { v39173 }
    ss      = { v39174 }
    ds      = { v39175 }
    fs      = { v39176 }
    gs      = { v39177 }
    cf      = { v39178 }
    ?1      = { v39179 }
    pf      = { v39180 }
    ?3      = { v39181 }
    af      = { v39182 }
    ?5      = { v39183 }
    zf      = { v39184 }
    sf      = { v39185 }
    tf      = { v39186 }
    if      = { v39187 }
    df      = { v39188 }
    of      = { v39189 }
    iopl0   = { v39190 }
    iopl1   = { v39191 }
    nt      = { v39192 }
    ?15     = { v39193 }
    rf      = { v39194 }
    vm      = { v39195 }
    ac      = { v39196 }
    vif     = { v39197 }
    vip     = { v39198 }
    id      = { v39199 }
    ?22     = { v39200 }
    ?23     = { v39201 }
    ?24     = { v39202 }
    ?25     = { v39203 }
    ?26     = { v39204 }
    ?27     = { v39205 }
    ?28     = { v39206 }
    ?29     = { v39207 }
    ?30     = { v39208 }
    ?31     = { v39209 }
    ip      = { v39252 }
memory:
    address = { v39168 }
      value = { v39219 }
      flags = { size=4; read-only }
    address = { v39168+0x4 }
      value = { v39229 }
      flags = { size=4; read-only }
    address = { v39169 }
      value = { v39240 }
      flags = { size=4; read-only }
    address = { v39169+0x4 }
      value = { v39252 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x080485c6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10878[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10879[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10880[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10881[8]))) }
    cx      = { defs={} expr=v10815[32] }
    dx      = { defs={} expr=v10816[32] }
    bx      = { defs={0x080485c7} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10905[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10906[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10907[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10908[8]))) }
    sp      = { defs={0x080485c8,0x080485c9} expr=(add[32] (add[32] v10819[32] 4[32]) 4[32]) }
    bp      = { defs={0x080485c8} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10934[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10935[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10936[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10937[8]))) }
    si      = { defs={} expr=v10820[32] }
    di      = { defs={} expr=v10821[32] }
    es      = { defs={} expr=v10822[16] }
    cs      = { defs={} expr=v10823[16] }
    ss      = { defs={} expr=v10824[16] }
    ds      = { defs={} expr=v10825[16] }
    fs      = { defs={} expr=v10826[16] }
    gs      = { defs={} expr=v10827[16] }
    cf      = { defs={} expr=v10828[1] }
    ?1      = { defs={} expr=v10829[1] }
    pf      = { defs={} expr=v10830[1] }
    ?3      = { defs={} expr=v10831[1] }
    af      = { defs={} expr=v10832[1] }
    ?5      = { defs={} expr=v10833[1] }
    zf      = { defs={} expr=v10834[1] }
    sf      = { defs={} expr=v10835[1] }
    tf      = { defs={} expr=v10836[1] }
    if      = { defs={} expr=v10837[1] }
    df      = { defs={} expr=v10838[1] }
    of      = { defs={} expr=v10839[1] }
    iopl0   = { defs={} expr=v10840[1] }
    iopl1   = { defs={} expr=v10841[1] }
    nt      = { defs={} expr=v10842[1] }
    ?15     = { defs={} expr=v10843[1] }
    rf      = { defs={} expr=v10844[1] }
    vm      = { defs={} expr=v10845[1] }
    ac      = { defs={} expr=v10846[1] }
    vif     = { defs={} expr=v10847[1] }
    vip     = { defs={} expr=v10848[1] }
    id      = { defs={} expr=v10849[1] }
    ?22     = { defs={} expr=v10850[1] }
    ?23     = { defs={} expr=v10851[1] }
    ?24     = { defs={} expr=v10852[1] }
    ?25     = { defs={} expr=v10853[1] }
    ?26     = { defs={} expr=v10854[1] }
    ?27     = { defs={} expr=v10855[1] }
    ?28     = { defs={} expr=v10856[1] }
    ?29     = { defs={} expr=v10857[1] }
    ?30     = { defs={} expr=v10858[1] }
    ?31     = { defs={} expr=v10859[1] }
    ip      = { defs={0x080485c9} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v10964[8]) (shr0[32] 8[32] (uextend[32] 32[32] v10965[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v10966[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v10967[8]))) }
memory:
init mem:
    address = { defs={} expr=(add[32] (add[32] v10819[32] 4[32]) 3[32]) }
      value = { defs={} expr=v10967[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v10819[32] 4[32]) 2[32]) }
      value = { defs={} expr=v10966[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v10819[32] 4[32]) 1[32]) }
      value = { defs={} expr=v10965[8] }
      flags = { rdonly }
    address = { defs={0x080485c8,0x080485c9} expr=(add[32] v10819[32] 4[32]) }
      value = { defs={} expr=v10964[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v10819[32] 3[32]) }
      value = { defs={} expr=v10937[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v10819[32] 2[32]) }
      value = { defs={} expr=v10936[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v10819[32] 1[32]) }
      value = { defs={} expr=v10935[8] }
      flags = { rdonly }
    address = { defs={0x080485c8} expr=v10819[32] }
      value = { defs={} expr=v10934[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v10818[32] 4[32]) 3[32]) }
      value = { defs={} expr=v10908[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v10818[32] 4[32]) 2[32]) }
      value = { defs={} expr=v10907[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v10818[32] 4[32]) 1[32]) }
      value = { defs={} expr=v10906[8] }
      flags = { rdonly }
    address = { defs={0x080485c6,0x080485c7} expr=(add[32] v10818[32] 4[32]) }
      value = { defs={} expr=v10905[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v10818[32] 3[32]) }
      value = { defs={} expr=v10881[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v10818[32] 2[32]) }
      value = { defs={} expr=v10880[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v10818[32] 1[32]) }
      value = { defs={} expr=v10879[8] }
      flags = { rdonly }
    address = { defs={0x080485c6} expr=v10818[32] }
      value = { defs={} expr=v10878[8] }
      flags = { rdonly }
null state
null state
analyzed headers: 1
